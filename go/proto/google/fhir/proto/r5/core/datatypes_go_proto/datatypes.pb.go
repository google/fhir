//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r5/core/datatypes.proto

package datatypes_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	codes_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/codes_go_proto"
	valuesets_go_proto "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/valuesets_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Date_Precision int32

const (
	Date_PRECISION_UNSPECIFIED Date_Precision = 0
	Date_YEAR                  Date_Precision = 1
	Date_MONTH                 Date_Precision = 2
	Date_DAY                   Date_Precision = 3
)

// Enum value maps for Date_Precision.
var (
	Date_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "YEAR",
		2: "MONTH",
		3: "DAY",
	}
	Date_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"YEAR":                  1,
		"MONTH":                 2,
		"DAY":                   3,
	}
)

func (x Date_Precision) Enum() *Date_Precision {
	p := new(Date_Precision)
	*p = x
	return p
}

func (x Date_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Date_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes[0].Descriptor()
}

func (Date_Precision) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes[0]
}

func (x Date_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Date_Precision.Descriptor instead.
func (Date_Precision) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{21, 0}
}

type DateTime_Precision int32

const (
	DateTime_PRECISION_UNSPECIFIED DateTime_Precision = 0
	DateTime_YEAR                  DateTime_Precision = 1
	DateTime_MONTH                 DateTime_Precision = 2
	DateTime_DAY                   DateTime_Precision = 3
	DateTime_SECOND                DateTime_Precision = 4
	DateTime_MILLISECOND           DateTime_Precision = 5
	DateTime_MICROSECOND           DateTime_Precision = 6
)

// Enum value maps for DateTime_Precision.
var (
	DateTime_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "YEAR",
		2: "MONTH",
		3: "DAY",
		4: "SECOND",
		5: "MILLISECOND",
		6: "MICROSECOND",
	}
	DateTime_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"YEAR":                  1,
		"MONTH":                 2,
		"DAY":                   3,
		"SECOND":                4,
		"MILLISECOND":           5,
		"MICROSECOND":           6,
	}
)

func (x DateTime_Precision) Enum() *DateTime_Precision {
	p := new(DateTime_Precision)
	*p = x
	return p
}

func (x DateTime_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DateTime_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes[1].Descriptor()
}

func (DateTime_Precision) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes[1]
}

func (x DateTime_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DateTime_Precision.Descriptor instead.
func (DateTime_Precision) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{22, 0}
}

type Instant_Precision int32

const (
	Instant_PRECISION_UNSPECIFIED Instant_Precision = 0
	Instant_SECOND                Instant_Precision = 1
	Instant_MILLISECOND           Instant_Precision = 2
	Instant_MICROSECOND           Instant_Precision = 3
)

// Enum value maps for Instant_Precision.
var (
	Instant_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "SECOND",
		2: "MILLISECOND",
		3: "MICROSECOND",
	}
	Instant_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"SECOND":                1,
		"MILLISECOND":           2,
		"MICROSECOND":           3,
	}
)

func (x Instant_Precision) Enum() *Instant_Precision {
	p := new(Instant_Precision)
	*p = x
	return p
}

func (x Instant_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Instant_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes[2].Descriptor()
}

func (Instant_Precision) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes[2]
}

func (x Instant_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Instant_Precision.Descriptor instead.
func (Instant_Precision) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{35, 0}
}

type Time_Precision int32

const (
	Time_PRECISION_UNSPECIFIED Time_Precision = 0
	Time_SECOND                Time_Precision = 1
	Time_MILLISECOND           Time_Precision = 2
	Time_MICROSECOND           Time_Precision = 3
)

// Enum value maps for Time_Precision.
var (
	Time_Precision_name = map[int32]string{
		0: "PRECISION_UNSPECIFIED",
		1: "SECOND",
		2: "MILLISECOND",
		3: "MICROSECOND",
	}
	Time_Precision_value = map[string]int32{
		"PRECISION_UNSPECIFIED": 0,
		"SECOND":                1,
		"MILLISECOND":           2,
		"MICROSECOND":           3,
	}
)

func (x Time_Precision) Enum() *Time_Precision {
	p := new(Time_Precision)
	*p = x
	return p
}

func (x Time_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Time_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes[3].Descriptor()
}

func (Time_Precision) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes[3]
}

func (x Time_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Time_Precision.Descriptor instead.
func (Time_Precision) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{62, 0}
}

// Auto-generated from StructureDefinition for Address.
// An address expressed using postal conventions (as opposed to GPS or other
// location definition formats). See
// http://hl7.org/fhir/StructureDefinition/Address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension      `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Use       *Address_UseCode  `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	Type      *Address_TypeCode `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Text representation of the address
	Text *String `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Street name, number, direction & P.O. Box etc.
	Line []*String `protobuf:"bytes,6,rep,name=line,proto3" json:"line,omitempty"`
	// Name of city, town etc.
	City *String `protobuf:"bytes,7,opt,name=city,proto3" json:"city,omitempty"`
	// District name (aka county)
	District *String `protobuf:"bytes,8,opt,name=district,proto3" json:"district,omitempty"`
	// Sub-unit of country (abbreviations ok)
	State *String `protobuf:"bytes,9,opt,name=state,proto3" json:"state,omitempty"`
	// Postal code for area
	PostalCode *String `protobuf:"bytes,10,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// Country (e.g. may be ISO 3166 2 or 3 letter code)
	Country *String `protobuf:"bytes,11,opt,name=country,proto3" json:"country,omitempty"`
	// Time period when address was/is in use
	Period *Period `protobuf:"bytes,12,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{0}
}

func (x *Address) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Address) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Address) GetUse() *Address_UseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *Address) GetType() *Address_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Address) GetText() *String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Address) GetLine() []*String {
	if x != nil {
		return x.Line
	}
	return nil
}

func (x *Address) GetCity() *String {
	if x != nil {
		return x.City
	}
	return nil
}

func (x *Address) GetDistrict() *String {
	if x != nil {
		return x.District
	}
	return nil
}

func (x *Address) GetState() *String {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Address) GetPostalCode() *String {
	if x != nil {
		return x.PostalCode
	}
	return nil
}

func (x *Address) GetCountry() *String {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *Address) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Age.
// A duration of time during which an organism (or a process) has existed.
// See http://hl7.org/fhir/StructureDefinition/Age
type Age struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value      *Decimal            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Comparator *Age_ComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Age) Reset() {
	*x = Age{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Age) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Age) ProtoMessage() {}

func (x *Age) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Age.ProtoReflect.Descriptor instead.
func (*Age) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{1}
}

func (x *Age) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Age) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Age) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Age) GetComparator() *Age_ComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Age) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Age) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Age) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Annotation.
// Text node with attribution.
// See http://hl7.org/fhir/StructureDefinition/Annotation
type Annotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension        `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Author    *Annotation_AuthorX `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	// When the annotation was made
	Time *DateTime `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
	// The annotation  - text content (as markdown)
	Text *Markdown `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Annotation) Reset() {
	*x = Annotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation) ProtoMessage() {}

func (x *Annotation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation.ProtoReflect.Descriptor instead.
func (*Annotation) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{2}
}

func (x *Annotation) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Annotation) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Annotation) GetAuthor() *Annotation_AuthorX {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Annotation) GetTime() *DateTime {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Annotation) GetText() *Markdown {
	if x != nil {
		return x.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for Attachment.
// Content in a format defined elsewhere.
// See http://hl7.org/fhir/StructureDefinition/Attachment
type Attachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension   []*Extension                `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	ContentType *Attachment_ContentTypeCode `protobuf:"bytes,3,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// Human language of the content (BCP-47)
	Language *Code `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Data inline, base64ed
	Data *Base64Binary `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	// Uri where the data can be found
	Url *Url `protobuf:"bytes,6,opt,name=url,proto3" json:"url,omitempty"`
	// Number of bytes of content (if url provided)
	Size *Integer64 `protobuf:"bytes,11,opt,name=size,proto3" json:"size,omitempty"`
	// Hash of the data (sha-1, base64ed)
	Hash *Base64Binary `protobuf:"bytes,8,opt,name=hash,proto3" json:"hash,omitempty"`
	// Label to display in place of the data
	Title *String `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	// Date attachment was first created
	Creation *DateTime `protobuf:"bytes,10,opt,name=creation,proto3" json:"creation,omitempty"`
	// Height of the image in pixels (photo/video)
	Height *PositiveInt `protobuf:"bytes,12,opt,name=height,proto3" json:"height,omitempty"`
	// Width of the image in pixels (photo/video)
	Width *PositiveInt `protobuf:"bytes,13,opt,name=width,proto3" json:"width,omitempty"`
	// Number of frames if > 1 (photo)
	Frames *PositiveInt `protobuf:"bytes,14,opt,name=frames,proto3" json:"frames,omitempty"`
	// Length in seconds (audio / video)
	Duration *Decimal `protobuf:"bytes,15,opt,name=duration,proto3" json:"duration,omitempty"`
	// Number of printed pages
	Pages *PositiveInt `protobuf:"bytes,16,opt,name=pages,proto3" json:"pages,omitempty"`
}

func (x *Attachment) Reset() {
	*x = Attachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment) ProtoMessage() {}

func (x *Attachment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment.ProtoReflect.Descriptor instead.
func (*Attachment) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{3}
}

func (x *Attachment) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Attachment) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Attachment) GetContentType() *Attachment_ContentTypeCode {
	if x != nil {
		return x.ContentType
	}
	return nil
}

func (x *Attachment) GetLanguage() *Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Attachment) GetData() *Base64Binary {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Attachment) GetUrl() *Url {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Attachment) GetSize() *Integer64 {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *Attachment) GetHash() *Base64Binary {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Attachment) GetTitle() *String {
	if x != nil {
		return x.Title
	}
	return nil
}

func (x *Attachment) GetCreation() *DateTime {
	if x != nil {
		return x.Creation
	}
	return nil
}

func (x *Attachment) GetHeight() *PositiveInt {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *Attachment) GetWidth() *PositiveInt {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *Attachment) GetFrames() *PositiveInt {
	if x != nil {
		return x.Frames
	}
	return nil
}

func (x *Attachment) GetDuration() *Decimal {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Attachment) GetPages() *PositiveInt {
	if x != nil {
		return x.Pages
	}
	return nil
}

// Auto-generated from StructureDefinition for Availability.
// Availability data for an {item}.
// See http://hl7.org/fhir/StructureDefinition/Availability
type Availability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension        []*Extension                     `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	AvailableTime    []*Availability_AvailableTime    `protobuf:"bytes,3,rep,name=available_time,json=availableTime,proto3" json:"available_time,omitempty"`
	NotAvailableTime []*Availability_NotAvailableTime `protobuf:"bytes,4,rep,name=not_available_time,json=notAvailableTime,proto3" json:"not_available_time,omitempty"`
}

func (x *Availability) Reset() {
	*x = Availability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Availability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availability) ProtoMessage() {}

func (x *Availability) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availability.ProtoReflect.Descriptor instead.
func (*Availability) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{4}
}

func (x *Availability) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Availability) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Availability) GetAvailableTime() []*Availability_AvailableTime {
	if x != nil {
		return x.AvailableTime
	}
	return nil
}

func (x *Availability) GetNotAvailableTime() []*Availability_NotAvailableTime {
	if x != nil {
		return x.NotAvailableTime
	}
	return nil
}

// Auto-generated from StructureDefinition for BackboneElement.
// Base for elements defined inside a resource.
// See http://hl7.org/fhir/StructureDefinition/BackboneElement
type BackboneElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
}

func (x *BackboneElement) Reset() {
	*x = BackboneElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackboneElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackboneElement) ProtoMessage() {}

func (x *BackboneElement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackboneElement.ProtoReflect.Descriptor instead.
func (*BackboneElement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{5}
}

func (x *BackboneElement) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BackboneElement) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *BackboneElement) GetModifierExtension() []*Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

// Auto-generated from StructureDefinition for BackboneType.
// Base for datatypes that can carry modifier extensions.
// See http://hl7.org/fhir/StructureDefinition/BackboneType
type BackboneType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
}

func (x *BackboneType) Reset() {
	*x = BackboneType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackboneType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackboneType) ProtoMessage() {}

func (x *BackboneType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackboneType.ProtoReflect.Descriptor instead.
func (*BackboneType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{6}
}

func (x *BackboneType) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BackboneType) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *BackboneType) GetModifierExtension() []*Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

// Auto-generated from StructureDefinition for Base.
// Base for all types and resources.
// See http://hl7.org/fhir/StructureDefinition/Base
type Base struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Base) Reset() {
	*x = Base{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base) ProtoMessage() {}

func (x *Base) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base.ProtoReflect.Descriptor instead.
func (*Base) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{7}
}

// Auto-generated from StructureDefinition for base64Binary.
// Primitive Type base64Binary.
// See http://hl7.org/fhir/StructureDefinition/base64Binary
type Base64Binary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for base64Binary
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Base64Binary) Reset() {
	*x = Base64Binary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Base64Binary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Base64Binary) ProtoMessage() {}

func (x *Base64Binary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Base64Binary.ProtoReflect.Descriptor instead.
func (*Base64Binary) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{8}
}

func (x *Base64Binary) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Base64Binary) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Base64Binary) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for boolean.
// Primitive Type boolean.
// See http://hl7.org/fhir/StructureDefinition/boolean
type Boolean struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for boolean
	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Boolean) Reset() {
	*x = Boolean{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Boolean) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Boolean) ProtoMessage() {}

func (x *Boolean) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Boolean.ProtoReflect.Descriptor instead.
func (*Boolean) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{9}
}

func (x *Boolean) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *Boolean) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Boolean) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for canonical.
// Primitive Type canonical.
// See http://hl7.org/fhir/StructureDefinition/canonical
type Canonical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for canonical
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Canonical) Reset() {
	*x = Canonical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Canonical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Canonical) ProtoMessage() {}

func (x *Canonical) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Canonical.ProtoReflect.Descriptor instead.
func (*Canonical) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{10}
}

func (x *Canonical) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Canonical) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Canonical) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for code.
// Primitive Type code.
// See http://hl7.org/fhir/StructureDefinition/code
type Code struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for code
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Code) Reset() {
	*x = Code{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Code) ProtoMessage() {}

func (x *Code) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Code.ProtoReflect.Descriptor instead.
func (*Code) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{11}
}

func (x *Code) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Code) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Code) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for CodeableConcept.
// Concept - reference to a terminology or just  text.
// See http://hl7.org/fhir/StructureDefinition/CodeableConcept
type CodeableConcept struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Code defined by a terminology system
	Coding []*Coding `protobuf:"bytes,3,rep,name=coding,proto3" json:"coding,omitempty"`
	// Plain text representation of the concept
	Text *String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *CodeableConcept) Reset() {
	*x = CodeableConcept{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeableConcept) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeableConcept) ProtoMessage() {}

func (x *CodeableConcept) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeableConcept.ProtoReflect.Descriptor instead.
func (*CodeableConcept) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{12}
}

func (x *CodeableConcept) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeableConcept) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CodeableConcept) GetCoding() []*Coding {
	if x != nil {
		return x.Coding
	}
	return nil
}

func (x *CodeableConcept) GetText() *String {
	if x != nil {
		return x.Text
	}
	return nil
}

// Auto-generated from StructureDefinition for CodeableReference.
// Reference to a resource or a concept.
// See http://hl7.org/fhir/StructureDefinition/CodeableReference
type CodeableReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Reference to a concept (by class)
	Concept *CodeableConcept `protobuf:"bytes,3,opt,name=concept,proto3" json:"concept,omitempty"`
	// Reference to a resource (by instance)
	Reference *Reference `protobuf:"bytes,4,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *CodeableReference) Reset() {
	*x = CodeableReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeableReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeableReference) ProtoMessage() {}

func (x *CodeableReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeableReference.ProtoReflect.Descriptor instead.
func (*CodeableReference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{13}
}

func (x *CodeableReference) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *CodeableReference) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *CodeableReference) GetConcept() *CodeableConcept {
	if x != nil {
		return x.Concept
	}
	return nil
}

func (x *CodeableReference) GetReference() *Reference {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Auto-generated from StructureDefinition for Coding.
// A reference to a code defined by a terminology system.
// See http://hl7.org/fhir/StructureDefinition/Coding
type Coding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Identity of the terminology system
	System *Uri `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
	// Version of the system - if relevant
	Version *String `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Symbol in syntax defined by the system
	Code *Code `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// Representation defined by the system
	Display *String `protobuf:"bytes,6,opt,name=display,proto3" json:"display,omitempty"`
	// If this coding was chosen directly by the user
	UserSelected *Boolean `protobuf:"bytes,7,opt,name=user_selected,json=userSelected,proto3" json:"user_selected,omitempty"`
}

func (x *Coding) Reset() {
	*x = Coding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coding) ProtoMessage() {}

func (x *Coding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coding.ProtoReflect.Descriptor instead.
func (*Coding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{14}
}

func (x *Coding) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Coding) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Coding) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Coding) GetVersion() *String {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Coding) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *Coding) GetDisplay() *String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *Coding) GetUserSelected() *Boolean {
	if x != nil {
		return x.UserSelected
	}
	return nil
}

// Auto-generated from StructureDefinition for ContactDetail.
// Contact information.
// See http://hl7.org/fhir/StructureDefinition/ContactDetail
type ContactDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Name of an individual to contact
	Name *String `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details for individual or organization
	Telecom []*ContactPoint `protobuf:"bytes,4,rep,name=telecom,proto3" json:"telecom,omitempty"`
}

func (x *ContactDetail) Reset() {
	*x = ContactDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactDetail) ProtoMessage() {}

func (x *ContactDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactDetail.ProtoReflect.Descriptor instead.
func (*ContactDetail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{15}
}

func (x *ContactDetail) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactDetail) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ContactDetail) GetName() *String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ContactDetail) GetTelecom() []*ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

// Auto-generated from StructureDefinition for ContactPoint.
// Details of a Technology mediated contact point (phone, fax, email, etc.).
// See http://hl7.org/fhir/StructureDefinition/ContactPoint
type ContactPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension             `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	System    *ContactPoint_SystemCode `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
	// The actual contact point details
	Value *String               `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Use   *ContactPoint_UseCode `protobuf:"bytes,5,opt,name=use,proto3" json:"use,omitempty"`
	// Specify preferred order of use (1 = highest)
	Rank *PositiveInt `protobuf:"bytes,6,opt,name=rank,proto3" json:"rank,omitempty"`
	// Time period when the contact point was/is in use
	Period *Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *ContactPoint) Reset() {
	*x = ContactPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPoint) ProtoMessage() {}

func (x *ContactPoint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPoint.ProtoReflect.Descriptor instead.
func (*ContactPoint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{16}
}

func (x *ContactPoint) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactPoint) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ContactPoint) GetSystem() *ContactPoint_SystemCode {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *ContactPoint) GetValue() *String {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ContactPoint) GetUse() *ContactPoint_UseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *ContactPoint) GetRank() *PositiveInt {
	if x != nil {
		return x.Rank
	}
	return nil
}

func (x *ContactPoint) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Contributor.
// Contributor information.
// See http://hl7.org/fhir/StructureDefinition/Contributor
type Contributor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension          `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Type      *Contributor_TypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Who contributed the content
	Name *String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Contact details of the contributor
	Contact []*ContactDetail `protobuf:"bytes,5,rep,name=contact,proto3" json:"contact,omitempty"`
}

func (x *Contributor) Reset() {
	*x = Contributor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contributor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contributor) ProtoMessage() {}

func (x *Contributor) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contributor.ProtoReflect.Descriptor instead.
func (*Contributor) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{17}
}

func (x *Contributor) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contributor) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Contributor) GetType() *Contributor_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Contributor) GetName() *String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Contributor) GetContact() []*ContactDetail {
	if x != nil {
		return x.Contact
	}
	return nil
}

// Auto-generated from StructureDefinition for Count.
// A measured or measurable amount.
// See http://hl7.org/fhir/StructureDefinition/Count
type Count struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value      *Decimal              `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Comparator *Count_ComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Count) Reset() {
	*x = Count{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Count) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Count) ProtoMessage() {}

func (x *Count) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Count.ProtoReflect.Descriptor instead.
func (*Count) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{18}
}

func (x *Count) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Count) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Count) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Count) GetComparator() *Count_ComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Count) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Count) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Count) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for DataRequirement.
// Describes a required data item.
// See http://hl7.org/fhir/StructureDefinition/DataRequirement
type DataRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension              `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Type      *DataRequirement_TypeCode `protobuf:"bytes,11,opt,name=type,proto3" json:"type,omitempty"`
	// The profile of the required data
	Profile []*Canonical              `protobuf:"bytes,4,rep,name=profile,proto3" json:"profile,omitempty"`
	Subject *DataRequirement_SubjectX `protobuf:"bytes,5,opt,name=subject,proto3" json:"subject,omitempty"`
	// Indicates specific structure elements that are referenced by the knowledge
	// module
	MustSupport []*String                      `protobuf:"bytes,6,rep,name=must_support,json=mustSupport,proto3" json:"must_support,omitempty"`
	CodeFilter  []*DataRequirement_CodeFilter  `protobuf:"bytes,7,rep,name=code_filter,json=codeFilter,proto3" json:"code_filter,omitempty"`
	DateFilter  []*DataRequirement_DateFilter  `protobuf:"bytes,8,rep,name=date_filter,json=dateFilter,proto3" json:"date_filter,omitempty"`
	ValueFilter []*DataRequirement_ValueFilter `protobuf:"bytes,12,rep,name=value_filter,json=valueFilter,proto3" json:"value_filter,omitempty"`
	// Number of results
	Limit *PositiveInt            `protobuf:"bytes,9,opt,name=limit,proto3" json:"limit,omitempty"`
	Sort  []*DataRequirement_Sort `protobuf:"bytes,10,rep,name=sort,proto3" json:"sort,omitempty"`
}

func (x *DataRequirement) Reset() {
	*x = DataRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement) ProtoMessage() {}

func (x *DataRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement.ProtoReflect.Descriptor instead.
func (*DataRequirement) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19}
}

func (x *DataRequirement) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataRequirement) GetType() *DataRequirement_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DataRequirement) GetProfile() []*Canonical {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *DataRequirement) GetSubject() *DataRequirement_SubjectX {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *DataRequirement) GetMustSupport() []*String {
	if x != nil {
		return x.MustSupport
	}
	return nil
}

func (x *DataRequirement) GetCodeFilter() []*DataRequirement_CodeFilter {
	if x != nil {
		return x.CodeFilter
	}
	return nil
}

func (x *DataRequirement) GetDateFilter() []*DataRequirement_DateFilter {
	if x != nil {
		return x.DateFilter
	}
	return nil
}

func (x *DataRequirement) GetValueFilter() []*DataRequirement_ValueFilter {
	if x != nil {
		return x.ValueFilter
	}
	return nil
}

func (x *DataRequirement) GetLimit() *PositiveInt {
	if x != nil {
		return x.Limit
	}
	return nil
}

func (x *DataRequirement) GetSort() []*DataRequirement_Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

// Auto-generated from StructureDefinition for DataType.
// Reuseable Types.
// See http://hl7.org/fhir/StructureDefinition/DataType
type DataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DataType) Reset() {
	*x = DataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataType) ProtoMessage() {}

func (x *DataType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataType.ProtoReflect.Descriptor instead.
func (*DataType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{20}
}

func (x *DataType) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataType) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for date.
// Primitive Type date.
// See http://hl7.org/fhir/StructureDefinition/date
type Date struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The absolute time of the event as a Unix epoch in microseconds.
	ValueUs int64 `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	// The local timezone in which the event was recorded.
	Timezone  string         `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Precision Date_Precision `protobuf:"varint,3,opt,name=precision,proto3,enum=google.fhir.r5.core.Date_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,5,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Date) Reset() {
	*x = Date{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Date) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Date) ProtoMessage() {}

func (x *Date) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Date.ProtoReflect.Descriptor instead.
func (*Date) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{21}
}

func (x *Date) GetValueUs() int64 {
	if x != nil {
		return x.ValueUs
	}
	return 0
}

func (x *Date) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Date) GetPrecision() Date_Precision {
	if x != nil {
		return x.Precision
	}
	return Date_PRECISION_UNSPECIFIED
}

func (x *Date) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Date) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for dateTime.
// Primitive Type dateTime.
// See http://hl7.org/fhir/StructureDefinition/dateTime
type DateTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The absolute time of the event as a Unix epoch in microseconds.
	ValueUs int64 `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	// The local timezone in which the event was recorded.
	Timezone  string             `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Precision DateTime_Precision `protobuf:"varint,3,opt,name=precision,proto3,enum=google.fhir.r5.core.DateTime_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,5,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DateTime) Reset() {
	*x = DateTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTime) ProtoMessage() {}

func (x *DateTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTime.ProtoReflect.Descriptor instead.
func (*DateTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{22}
}

func (x *DateTime) GetValueUs() int64 {
	if x != nil {
		return x.ValueUs
	}
	return 0
}

func (x *DateTime) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *DateTime) GetPrecision() DateTime_Precision {
	if x != nil {
		return x.Precision
	}
	return DateTime_PRECISION_UNSPECIFIED
}

func (x *DateTime) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DateTime) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for decimal.
// Primitive Type decimal.
// See http://hl7.org/fhir/StructureDefinition/decimal
type Decimal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for decimal
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Decimal) Reset() {
	*x = Decimal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Decimal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Decimal) ProtoMessage() {}

func (x *Decimal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Decimal.ProtoReflect.Descriptor instead.
func (*Decimal) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{23}
}

func (x *Decimal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Decimal) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Decimal) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for Distance.
// A length - a value with a unit that is a physical distance.
// See http://hl7.org/fhir/StructureDefinition/Distance
type Distance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value      *Decimal                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Comparator *Distance_ComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Distance) Reset() {
	*x = Distance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distance) ProtoMessage() {}

func (x *Distance) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distance.ProtoReflect.Descriptor instead.
func (*Distance) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{24}
}

func (x *Distance) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Distance) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Distance) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Distance) GetComparator() *Distance_ComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Distance) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Distance) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Distance) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Dosage.
// How the medication is/was taken or should be taken.
// See http://hl7.org/fhir/StructureDefinition/Dosage
type Dosage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The order of the dosage instructions
	Sequence *Integer `protobuf:"bytes,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Free text dosage instructions e.g. SIG
	Text *String `protobuf:"bytes,5,opt,name=text,proto3" json:"text,omitempty"`
	// Supplemental instruction or warnings to the patient - e.g. "with meals",
	// "may cause drowsiness"
	AdditionalInstruction []*CodeableConcept `protobuf:"bytes,6,rep,name=additional_instruction,json=additionalInstruction,proto3" json:"additional_instruction,omitempty"`
	// Patient or consumer oriented instructions
	PatientInstruction *String `protobuf:"bytes,7,opt,name=patient_instruction,json=patientInstruction,proto3" json:"patient_instruction,omitempty"`
	// When medication should be administered
	Timing *Timing `protobuf:"bytes,8,opt,name=timing,proto3" json:"timing,omitempty"`
	// Take "as needed"
	AsNeeded *Boolean `protobuf:"bytes,17,opt,name=as_needed,json=asNeeded,proto3" json:"as_needed,omitempty"`
	// Take "as needed" (for x)
	AsNeededFor []*CodeableConcept `protobuf:"bytes,18,rep,name=as_needed_for,json=asNeededFor,proto3" json:"as_needed_for,omitempty"`
	// Body site to administer to
	Site *CodeableConcept `protobuf:"bytes,10,opt,name=site,proto3" json:"site,omitempty"`
	// How drug should enter body
	Route *CodeableConcept `protobuf:"bytes,11,opt,name=route,proto3" json:"route,omitempty"`
	// Technique for administering medication
	Method      *CodeableConcept      `protobuf:"bytes,12,opt,name=method,proto3" json:"method,omitempty"`
	DoseAndRate []*Dosage_DoseAndRate `protobuf:"bytes,13,rep,name=dose_and_rate,json=doseAndRate,proto3" json:"dose_and_rate,omitempty"`
	// Upper limit on medication per unit of time
	MaxDosePerPeriod []*Ratio `protobuf:"bytes,19,rep,name=max_dose_per_period,json=maxDosePerPeriod,proto3" json:"max_dose_per_period,omitempty"`
	// Upper limit on medication per administration
	MaxDosePerAdministration *SimpleQuantity `protobuf:"bytes,15,opt,name=max_dose_per_administration,json=maxDosePerAdministration,proto3" json:"max_dose_per_administration,omitempty"`
	// Upper limit on medication per lifetime of the patient
	MaxDosePerLifetime *SimpleQuantity `protobuf:"bytes,16,opt,name=max_dose_per_lifetime,json=maxDosePerLifetime,proto3" json:"max_dose_per_lifetime,omitempty"`
}

func (x *Dosage) Reset() {
	*x = Dosage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dosage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dosage) ProtoMessage() {}

func (x *Dosage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dosage.ProtoReflect.Descriptor instead.
func (*Dosage) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{25}
}

func (x *Dosage) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Dosage) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Dosage) GetModifierExtension() []*Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Dosage) GetSequence() *Integer {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Dosage) GetText() *String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Dosage) GetAdditionalInstruction() []*CodeableConcept {
	if x != nil {
		return x.AdditionalInstruction
	}
	return nil
}

func (x *Dosage) GetPatientInstruction() *String {
	if x != nil {
		return x.PatientInstruction
	}
	return nil
}

func (x *Dosage) GetTiming() *Timing {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *Dosage) GetAsNeeded() *Boolean {
	if x != nil {
		return x.AsNeeded
	}
	return nil
}

func (x *Dosage) GetAsNeededFor() []*CodeableConcept {
	if x != nil {
		return x.AsNeededFor
	}
	return nil
}

func (x *Dosage) GetSite() *CodeableConcept {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Dosage) GetRoute() *CodeableConcept {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *Dosage) GetMethod() *CodeableConcept {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *Dosage) GetDoseAndRate() []*Dosage_DoseAndRate {
	if x != nil {
		return x.DoseAndRate
	}
	return nil
}

func (x *Dosage) GetMaxDosePerPeriod() []*Ratio {
	if x != nil {
		return x.MaxDosePerPeriod
	}
	return nil
}

func (x *Dosage) GetMaxDosePerAdministration() *SimpleQuantity {
	if x != nil {
		return x.MaxDosePerAdministration
	}
	return nil
}

func (x *Dosage) GetMaxDosePerLifetime() *SimpleQuantity {
	if x != nil {
		return x.MaxDosePerLifetime
	}
	return nil
}

// Auto-generated from StructureDefinition for Duration.
// A length of time.
// See http://hl7.org/fhir/StructureDefinition/Duration
type Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value      *Decimal                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Comparator *Duration_ComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Duration) Reset() {
	*x = Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{26}
}

func (x *Duration) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Duration) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Duration) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Duration) GetComparator() *Duration_ComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Duration) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Duration) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Duration) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Element.
// Base for all elements.
// See http://hl7.org/fhir/StructureDefinition/Element
type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Element) Reset() {
	*x = Element{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Element) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Element) ProtoMessage() {}

func (x *Element) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Element.ProtoReflect.Descriptor instead.
func (*Element) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{27}
}

func (x *Element) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Element) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for ElementDefinition.
// Definition of an element in a resource or extension.
// See http://hl7.org/fhir/StructureDefinition/ElementDefinition
type ElementDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// Path of the element in the hierarchy of elements
	Path           *String                                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Representation []*ElementDefinition_RepresentationCode `protobuf:"bytes,5,rep,name=representation,proto3" json:"representation,omitempty"`
	// Name for this particular element (in a set of slices)
	SliceName *String `protobuf:"bytes,6,opt,name=slice_name,json=sliceName,proto3" json:"slice_name,omitempty"`
	// If this slice definition constrains an inherited slice definition (or not)
	SliceIsConstraining *Boolean `protobuf:"bytes,7,opt,name=slice_is_constraining,json=sliceIsConstraining,proto3" json:"slice_is_constraining,omitempty"`
	// Name for element to display with or prompt for element
	Label *String `protobuf:"bytes,8,opt,name=label,proto3" json:"label,omitempty"`
	// Corresponding codes in terminologies
	Code    []*Coding                  `protobuf:"bytes,9,rep,name=code,proto3" json:"code,omitempty"`
	Slicing *ElementDefinition_Slicing `protobuf:"bytes,10,opt,name=slicing,proto3" json:"slicing,omitempty"`
	// Concise definition for space-constrained presentation
	Short *String `protobuf:"bytes,11,opt,name=short,proto3" json:"short,omitempty"`
	// Full formal definition as narrative text
	Definition *Markdown `protobuf:"bytes,12,opt,name=definition,proto3" json:"definition,omitempty"`
	// Comments about the use of this element
	Comment *Markdown `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	// Why this resource has been created
	Requirements *Markdown `protobuf:"bytes,14,opt,name=requirements,proto3" json:"requirements,omitempty"`
	// Other names
	Alias []*String `protobuf:"bytes,15,rep,name=alias,proto3" json:"alias,omitempty"`
	// Minimum Cardinality
	Min *UnsignedInt `protobuf:"bytes,16,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum Cardinality (a number or *)
	Max  *String                 `protobuf:"bytes,17,opt,name=max,proto3" json:"max,omitempty"`
	Base *ElementDefinition_Base `protobuf:"bytes,18,opt,name=base,proto3" json:"base,omitempty"`
	// Reference to definition of content for the element
	ContentReference *Uri                             `protobuf:"bytes,19,opt,name=content_reference,json=contentReference,proto3" json:"content_reference,omitempty"`
	Type             []*ElementDefinition_TypeRef     `protobuf:"bytes,20,rep,name=type,proto3" json:"type,omitempty"`
	DefaultValue     *ElementDefinition_DefaultValueX `protobuf:"bytes,21,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Implicit meaning when this element is missing
	MeaningWhenMissing *Markdown `protobuf:"bytes,22,opt,name=meaning_when_missing,json=meaningWhenMissing,proto3" json:"meaning_when_missing,omitempty"`
	// What the order of the elements means
	OrderMeaning *String                      `protobuf:"bytes,23,opt,name=order_meaning,json=orderMeaning,proto3" json:"order_meaning,omitempty"`
	Fixed        *ElementDefinition_FixedX    `protobuf:"bytes,24,opt,name=fixed,proto3" json:"fixed,omitempty"`
	Pattern      *ElementDefinition_PatternX  `protobuf:"bytes,25,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Example      []*ElementDefinition_Example `protobuf:"bytes,26,rep,name=example,proto3" json:"example,omitempty"`
	MinValue     *ElementDefinition_MinValueX `protobuf:"bytes,27,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	MaxValue     *ElementDefinition_MaxValueX `protobuf:"bytes,28,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// Max length for string type data
	MaxLength *Integer `protobuf:"bytes,29,opt,name=max_length,json=maxLength,proto3" json:"max_length,omitempty"`
	// Reference to invariant about presence
	Condition  []*Id                           `protobuf:"bytes,30,rep,name=condition,proto3" json:"condition,omitempty"`
	Constraint []*ElementDefinition_Constraint `protobuf:"bytes,31,rep,name=constraint,proto3" json:"constraint,omitempty"`
	// For primitives, that a value must be present - not replaced by an extension
	MustHaveValue *Boolean `protobuf:"bytes,38,opt,name=must_have_value,json=mustHaveValue,proto3" json:"must_have_value,omitempty"`
	// Extensions that are allowed to replace a primitive value
	ValueAlternatives []*Canonical `protobuf:"bytes,39,rep,name=value_alternatives,json=valueAlternatives,proto3" json:"value_alternatives,omitempty"`
	// If the element must be supported (discouraged - see obligations)
	MustSupport *Boolean `protobuf:"bytes,32,opt,name=must_support,json=mustSupport,proto3" json:"must_support,omitempty"`
	// If this modifies the meaning of other elements
	IsModifier *Boolean `protobuf:"bytes,33,opt,name=is_modifier,json=isModifier,proto3" json:"is_modifier,omitempty"`
	// Reason that this element is marked as a modifier
	IsModifierReason *String `protobuf:"bytes,34,opt,name=is_modifier_reason,json=isModifierReason,proto3" json:"is_modifier_reason,omitempty"`
	// Include when _summary = true?
	IsSummary *Boolean                                    `protobuf:"bytes,35,opt,name=is_summary,json=isSummary,proto3" json:"is_summary,omitempty"`
	Binding   *ElementDefinition_ElementDefinitionBinding `protobuf:"bytes,36,opt,name=binding,proto3" json:"binding,omitempty"`
	Mapping   []*ElementDefinition_Mapping                `protobuf:"bytes,37,rep,name=mapping,proto3" json:"mapping,omitempty"`
}

func (x *ElementDefinition) Reset() {
	*x = ElementDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition) ProtoMessage() {}

func (x *ElementDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition.ProtoReflect.Descriptor instead.
func (*ElementDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28}
}

func (x *ElementDefinition) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition) GetModifierExtension() []*Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ElementDefinition) GetPath() *String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ElementDefinition) GetRepresentation() []*ElementDefinition_RepresentationCode {
	if x != nil {
		return x.Representation
	}
	return nil
}

func (x *ElementDefinition) GetSliceName() *String {
	if x != nil {
		return x.SliceName
	}
	return nil
}

func (x *ElementDefinition) GetSliceIsConstraining() *Boolean {
	if x != nil {
		return x.SliceIsConstraining
	}
	return nil
}

func (x *ElementDefinition) GetLabel() *String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ElementDefinition) GetCode() []*Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition) GetSlicing() *ElementDefinition_Slicing {
	if x != nil {
		return x.Slicing
	}
	return nil
}

func (x *ElementDefinition) GetShort() *String {
	if x != nil {
		return x.Short
	}
	return nil
}

func (x *ElementDefinition) GetDefinition() *Markdown {
	if x != nil {
		return x.Definition
	}
	return nil
}

func (x *ElementDefinition) GetComment() *Markdown {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ElementDefinition) GetRequirements() *Markdown {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ElementDefinition) GetAlias() []*String {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *ElementDefinition) GetMin() *UnsignedInt {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ElementDefinition) GetMax() *String {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *ElementDefinition) GetBase() *ElementDefinition_Base {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ElementDefinition) GetContentReference() *Uri {
	if x != nil {
		return x.ContentReference
	}
	return nil
}

func (x *ElementDefinition) GetType() []*ElementDefinition_TypeRef {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ElementDefinition) GetDefaultValue() *ElementDefinition_DefaultValueX {
	if x != nil {
		return x.DefaultValue
	}
	return nil
}

func (x *ElementDefinition) GetMeaningWhenMissing() *Markdown {
	if x != nil {
		return x.MeaningWhenMissing
	}
	return nil
}

func (x *ElementDefinition) GetOrderMeaning() *String {
	if x != nil {
		return x.OrderMeaning
	}
	return nil
}

func (x *ElementDefinition) GetFixed() *ElementDefinition_FixedX {
	if x != nil {
		return x.Fixed
	}
	return nil
}

func (x *ElementDefinition) GetPattern() *ElementDefinition_PatternX {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *ElementDefinition) GetExample() []*ElementDefinition_Example {
	if x != nil {
		return x.Example
	}
	return nil
}

func (x *ElementDefinition) GetMinValue() *ElementDefinition_MinValueX {
	if x != nil {
		return x.MinValue
	}
	return nil
}

func (x *ElementDefinition) GetMaxValue() *ElementDefinition_MaxValueX {
	if x != nil {
		return x.MaxValue
	}
	return nil
}

func (x *ElementDefinition) GetMaxLength() *Integer {
	if x != nil {
		return x.MaxLength
	}
	return nil
}

func (x *ElementDefinition) GetCondition() []*Id {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ElementDefinition) GetConstraint() []*ElementDefinition_Constraint {
	if x != nil {
		return x.Constraint
	}
	return nil
}

func (x *ElementDefinition) GetMustHaveValue() *Boolean {
	if x != nil {
		return x.MustHaveValue
	}
	return nil
}

func (x *ElementDefinition) GetValueAlternatives() []*Canonical {
	if x != nil {
		return x.ValueAlternatives
	}
	return nil
}

func (x *ElementDefinition) GetMustSupport() *Boolean {
	if x != nil {
		return x.MustSupport
	}
	return nil
}

func (x *ElementDefinition) GetIsModifier() *Boolean {
	if x != nil {
		return x.IsModifier
	}
	return nil
}

func (x *ElementDefinition) GetIsModifierReason() *String {
	if x != nil {
		return x.IsModifierReason
	}
	return nil
}

func (x *ElementDefinition) GetIsSummary() *Boolean {
	if x != nil {
		return x.IsSummary
	}
	return nil
}

func (x *ElementDefinition) GetBinding() *ElementDefinition_ElementDefinitionBinding {
	if x != nil {
		return x.Binding
	}
	return nil
}

func (x *ElementDefinition) GetMapping() []*ElementDefinition_Mapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

// Auto-generated from StructureDefinition for Expression.
// An expression that can be used to generate a value.
// See http://hl7.org/fhir/StructureDefinition/Expression
type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Natural language description of the condition
	Description *String `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Short name assigned to expression for reuse
	Name *Code `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// text/cql | text/fhirpath | application/x-fhir-query | etc.
	Language *Code `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	// Expression in specified language
	Expression *String `protobuf:"bytes,6,opt,name=expression,proto3" json:"expression,omitempty"`
	// Where the expression is found
	Reference *Uri `protobuf:"bytes,7,opt,name=reference,proto3" json:"reference,omitempty"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{29}
}

func (x *Expression) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Expression) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Expression) GetDescription() *String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Expression) GetName() *Code {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Expression) GetLanguage() *Code {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *Expression) GetExpression() *String {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Expression) GetReference() *Uri {
	if x != nil {
		return x.Reference
	}
	return nil
}

// Auto-generated from StructureDefinition for ExtendedContactDetail.
// Contact information.
// See http://hl7.org/fhir/StructureDefinition/ExtendedContactDetail
type ExtendedContactDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The type of contact
	Purpose *CodeableConcept `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// Name of an individual to contact
	Name []*HumanName `protobuf:"bytes,4,rep,name=name,proto3" json:"name,omitempty"`
	// Contact details (e.g.phone/fax/url)
	Telecom []*ContactPoint `protobuf:"bytes,5,rep,name=telecom,proto3" json:"telecom,omitempty"`
	// Address for the contact
	Address *Address `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	// This contact detail is handled/monitored by a specific organization
	Organization *Reference `protobuf:"bytes,7,opt,name=organization,proto3" json:"organization,omitempty"`
	// Period that this contact was valid for usage
	Period *Period `protobuf:"bytes,8,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *ExtendedContactDetail) Reset() {
	*x = ExtendedContactDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtendedContactDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtendedContactDetail) ProtoMessage() {}

func (x *ExtendedContactDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtendedContactDetail.ProtoReflect.Descriptor instead.
func (*ExtendedContactDetail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{30}
}

func (x *ExtendedContactDetail) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ExtendedContactDetail) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ExtendedContactDetail) GetPurpose() *CodeableConcept {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *ExtendedContactDetail) GetName() []*HumanName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ExtendedContactDetail) GetTelecom() []*ContactPoint {
	if x != nil {
		return x.Telecom
	}
	return nil
}

func (x *ExtendedContactDetail) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *ExtendedContactDetail) GetOrganization() *Reference {
	if x != nil {
		return x.Organization
	}
	return nil
}

func (x *ExtendedContactDetail) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for Extension.
// Optional Extensions Element.
// See http://hl7.org/fhir/StructureDefinition/Extension
type Extension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	// identifies the meaning of the extension
	Url   *Uri              `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Value *Extension_ValueX `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Extension) Reset() {
	*x = Extension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension) ProtoMessage() {}

func (x *Extension) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension.ProtoReflect.Descriptor instead.
func (*Extension) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{31}
}

func (x *Extension) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Extension) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Extension) GetUrl() *Uri {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Extension) GetValue() *Extension_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for HumanName.
// Name of a human or other living entity - parts and usage.
// See http://hl7.org/fhir/StructureDefinition/HumanName
type HumanName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension       `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Use       *HumanName_UseCode `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// Text representation of the full name
	Text *String `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	// Family name (often called 'Surname')
	Family *String `protobuf:"bytes,5,opt,name=family,proto3" json:"family,omitempty"`
	// Given names (not always 'first'). Includes middle names
	Given []*String `protobuf:"bytes,6,rep,name=given,proto3" json:"given,omitempty"`
	// Parts that come before the name
	Prefix []*String `protobuf:"bytes,7,rep,name=prefix,proto3" json:"prefix,omitempty"`
	// Parts that come after the name
	Suffix []*String `protobuf:"bytes,8,rep,name=suffix,proto3" json:"suffix,omitempty"`
	// Time period when name was/is in use
	Period *Period `protobuf:"bytes,9,opt,name=period,proto3" json:"period,omitempty"`
}

func (x *HumanName) Reset() {
	*x = HumanName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanName) ProtoMessage() {}

func (x *HumanName) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanName.ProtoReflect.Descriptor instead.
func (*HumanName) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{32}
}

func (x *HumanName) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanName) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *HumanName) GetUse() *HumanName_UseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *HumanName) GetText() *String {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *HumanName) GetFamily() *String {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *HumanName) GetGiven() []*String {
	if x != nil {
		return x.Given
	}
	return nil
}

func (x *HumanName) GetPrefix() []*String {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *HumanName) GetSuffix() []*String {
	if x != nil {
		return x.Suffix
	}
	return nil
}

func (x *HumanName) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

// Auto-generated from StructureDefinition for id.
// Primitive Type id.
// See http://hl7.org/fhir/StructureDefinition/id
type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for id
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{33}
}

func (x *Id) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Id) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Id) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for Identifier.
// An identifier intended for computation.
// See http://hl7.org/fhir/StructureDefinition/Identifier
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension        `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Use       *Identifier_UseCode `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	// Description of identifier
	Type *CodeableConcept `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// The namespace for the identifier value
	System *Uri `protobuf:"bytes,5,opt,name=system,proto3" json:"system,omitempty"`
	// The value that is unique
	Value *String `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// Time period when id is/was valid for use
	Period *Period `protobuf:"bytes,7,opt,name=period,proto3" json:"period,omitempty"`
	// Organization that issued id (may be just text)
	Assigner *Reference `protobuf:"bytes,8,opt,name=assigner,proto3" json:"assigner,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{34}
}

func (x *Identifier) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Identifier) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Identifier) GetUse() *Identifier_UseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *Identifier) GetType() *CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Identifier) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Identifier) GetValue() *String {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Identifier) GetPeriod() *Period {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Identifier) GetAssigner() *Reference {
	if x != nil {
		return x.Assigner
	}
	return nil
}

// Auto-generated from StructureDefinition for instant.
// Primitive Type instant.
// See http://hl7.org/fhir/StructureDefinition/instant
type Instant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The absolute time of the event as a Unix epoch in microseconds.
	ValueUs int64 `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	// The local timezone in which the event was recorded.
	Timezone  string            `protobuf:"bytes,2,opt,name=timezone,proto3" json:"timezone,omitempty"`
	Precision Instant_Precision `protobuf:"varint,3,opt,name=precision,proto3,enum=google.fhir.r5.core.Instant_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,5,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Instant) Reset() {
	*x = Instant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instant) ProtoMessage() {}

func (x *Instant) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instant.ProtoReflect.Descriptor instead.
func (*Instant) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{35}
}

func (x *Instant) GetValueUs() int64 {
	if x != nil {
		return x.ValueUs
	}
	return 0
}

func (x *Instant) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *Instant) GetPrecision() Instant_Precision {
	if x != nil {
		return x.Precision
	}
	return Instant_PRECISION_UNSPECIFIED
}

func (x *Instant) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Instant) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for integer.
// Primitive Type integer.
// See http://hl7.org/fhir/StructureDefinition/integer
type Integer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for integer
	Value int32 `protobuf:"zigzag32,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Integer) Reset() {
	*x = Integer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integer) ProtoMessage() {}

func (x *Integer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integer.ProtoReflect.Descriptor instead.
func (*Integer) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{36}
}

func (x *Integer) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Integer) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Integer) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for integer64.
// Primitive Type integer64.
// See http://hl7.org/fhir/StructureDefinition/integer64
type Integer64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for integer64
	Value int64 `protobuf:"zigzag64,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Integer64) Reset() {
	*x = Integer64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Integer64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Integer64) ProtoMessage() {}

func (x *Integer64) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Integer64.ProtoReflect.Descriptor instead.
func (*Integer64) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{37}
}

func (x *Integer64) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Integer64) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Integer64) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for markdown.
// Primitive Type markdown.
// See http://hl7.org/fhir/StructureDefinition/markdown
type Markdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for markdown
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Markdown) Reset() {
	*x = Markdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Markdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Markdown) ProtoMessage() {}

func (x *Markdown) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Markdown.ProtoReflect.Descriptor instead.
func (*Markdown) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{38}
}

func (x *Markdown) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Markdown) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Markdown) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for MarketingStatus.
// The marketing status describes the date when a medicinal product is actually
// put on the market or the date as of which it is no longer available. See
// http://hl7.org/fhir/StructureDefinition/MarketingStatus
type MarketingStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// The country in which the marketing authorization has been granted shall be
	// specified It should be specified using the ISO 3166 ‑ 1 alpha-2 code
	// elements
	Country *CodeableConcept `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	// Where a Medicines Regulatory Agency has granted a marketing authorization
	// for which specific provisions within a jurisdiction apply, the jurisdiction
	// can be specified using an appropriate controlled terminology The controlled
	// term and the controlled term identifier shall be specified
	Jurisdiction *CodeableConcept `protobuf:"bytes,5,opt,name=jurisdiction,proto3" json:"jurisdiction,omitempty"`
	// This attribute provides information on the status of the marketing of the
	// medicinal product See ISO/TS 20443 for more information and examples
	Status *CodeableConcept `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	// The date when the Medicinal Product is placed on the market by the
	// Marketing Authorization Holder (or where applicable, the
	// manufacturer/distributor) in a country and/or jurisdiction shall be
	// provided A complete date consisting of day, month and year shall be
	// specified using the ISO 8601 date format NOTE “Placed on the market” refers
	// to the release of the Medicinal Product into the distribution chain
	DateRange *Period `protobuf:"bytes,7,opt,name=date_range,json=dateRange,proto3" json:"date_range,omitempty"`
	// The date when the Medicinal Product is placed on the market by the
	// Marketing Authorization Holder (or where applicable, the
	// manufacturer/distributor) in a country and/or jurisdiction shall be
	// provided A complete date consisting of day, month and year shall be
	// specified using the ISO 8601 date format NOTE “Placed on the market” refers
	// to the release of the Medicinal Product into the distribution chain
	RestoreDate *DateTime `protobuf:"bytes,8,opt,name=restore_date,json=restoreDate,proto3" json:"restore_date,omitempty"`
}

func (x *MarketingStatus) Reset() {
	*x = MarketingStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketingStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketingStatus) ProtoMessage() {}

func (x *MarketingStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketingStatus.ProtoReflect.Descriptor instead.
func (*MarketingStatus) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{39}
}

func (x *MarketingStatus) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MarketingStatus) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MarketingStatus) GetModifierExtension() []*Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *MarketingStatus) GetCountry() *CodeableConcept {
	if x != nil {
		return x.Country
	}
	return nil
}

func (x *MarketingStatus) GetJurisdiction() *CodeableConcept {
	if x != nil {
		return x.Jurisdiction
	}
	return nil
}

func (x *MarketingStatus) GetStatus() *CodeableConcept {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *MarketingStatus) GetDateRange() *Period {
	if x != nil {
		return x.DateRange
	}
	return nil
}

func (x *MarketingStatus) GetRestoreDate() *DateTime {
	if x != nil {
		return x.RestoreDate
	}
	return nil
}

// Auto-generated from StructureDefinition for Meta.
// Metadata about a resource.
// See http://hl7.org/fhir/StructureDefinition/Meta
type Meta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Version specific identifier
	VersionId *Id `protobuf:"bytes,3,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// When the resource version last changed
	LastUpdated *Instant `protobuf:"bytes,4,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	// Identifies where the resource comes from
	Source *Uri `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	// Profiles this resource claims to conform to
	Profile []*Canonical `protobuf:"bytes,6,rep,name=profile,proto3" json:"profile,omitempty"`
	// Security Labels applied to this resource
	Security []*Coding `protobuf:"bytes,7,rep,name=security,proto3" json:"security,omitempty"`
	// Tags applied to this resource
	Tag []*Coding `protobuf:"bytes,8,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *Meta) Reset() {
	*x = Meta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Meta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Meta) ProtoMessage() {}

func (x *Meta) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Meta.ProtoReflect.Descriptor instead.
func (*Meta) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{40}
}

func (x *Meta) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Meta) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Meta) GetVersionId() *Id {
	if x != nil {
		return x.VersionId
	}
	return nil
}

func (x *Meta) GetLastUpdated() *Instant {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *Meta) GetSource() *Uri {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Meta) GetProfile() []*Canonical {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *Meta) GetSecurity() []*Coding {
	if x != nil {
		return x.Security
	}
	return nil
}

func (x *Meta) GetTag() []*Coding {
	if x != nil {
		return x.Tag
	}
	return nil
}

// Auto-generated from StructureDefinition for MonetaryComponent.
// Availability data for an {item}.
// See http://hl7.org/fhir/StructureDefinition/MonetaryComponent
type MonetaryComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension                `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Type      *MonetaryComponent_TypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Codes may be used to differentiate between kinds of taxes, surcharges,
	// discounts etc.
	Code *CodeableConcept `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	// Factor used for calculating this component
	Factor *Decimal `protobuf:"bytes,5,opt,name=factor,proto3" json:"factor,omitempty"`
	// Explicit value amount to be used
	Amount *Money `protobuf:"bytes,6,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *MonetaryComponent) Reset() {
	*x = MonetaryComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonetaryComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonetaryComponent) ProtoMessage() {}

func (x *MonetaryComponent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonetaryComponent.ProtoReflect.Descriptor instead.
func (*MonetaryComponent) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{41}
}

func (x *MonetaryComponent) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MonetaryComponent) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MonetaryComponent) GetType() *MonetaryComponent_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MonetaryComponent) GetCode() *CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *MonetaryComponent) GetFactor() *Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *MonetaryComponent) GetAmount() *Money {
	if x != nil {
		return x.Amount
	}
	return nil
}

// Auto-generated from StructureDefinition for Money.
// An amount of economic utility in some recognized currency.
// See http://hl7.org/fhir/StructureDefinition/Money
type Money struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value    *Decimal            `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Currency *Money_CurrencyCode `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Money) Reset() {
	*x = Money{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Money) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money) ProtoMessage() {}

func (x *Money) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money.ProtoReflect.Descriptor instead.
func (*Money) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{42}
}

func (x *Money) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Money) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Money) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Money) GetCurrency() *Money_CurrencyCode {
	if x != nil {
		return x.Currency
	}
	return nil
}

// Auto-generated from StructureDefinition for MoneyQuantity.
// An amount of money. With regard to precision, see [Decimal
// Precision](datatypes.html#precision). See
// http://hl7.org/fhir/StructureDefinition/MoneyQuantity
type MoneyQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value      *Decimal                      `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Comparator *MoneyQuantity_ComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *MoneyQuantity) Reset() {
	*x = MoneyQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyQuantity) ProtoMessage() {}

func (x *MoneyQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyQuantity.ProtoReflect.Descriptor instead.
func (*MoneyQuantity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{43}
}

func (x *MoneyQuantity) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MoneyQuantity) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *MoneyQuantity) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *MoneyQuantity) GetComparator() *MoneyQuantity_ComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *MoneyQuantity) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *MoneyQuantity) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *MoneyQuantity) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Narrative.
// Human-readable summary of the resource (essential clinical and business
// information). See http://hl7.org/fhir/StructureDefinition/Narrative
type Narrative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension          `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Status    *Narrative_StatusCode `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Limited xhtml content
	Div *Xhtml `protobuf:"bytes,4,opt,name=div,proto3" json:"div,omitempty"`
}

func (x *Narrative) Reset() {
	*x = Narrative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Narrative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Narrative) ProtoMessage() {}

func (x *Narrative) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Narrative.ProtoReflect.Descriptor instead.
func (*Narrative) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{44}
}

func (x *Narrative) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Narrative) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Narrative) GetStatus() *Narrative_StatusCode {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *Narrative) GetDiv() *Xhtml {
	if x != nil {
		return x.Div
	}
	return nil
}

// Auto-generated from StructureDefinition for oid.
// Primitive Type oid.
// See http://hl7.org/fhir/StructureDefinition/oid
type Oid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for oid
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Oid) Reset() {
	*x = Oid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Oid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Oid) ProtoMessage() {}

func (x *Oid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Oid.ProtoReflect.Descriptor instead.
func (*Oid) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{45}
}

func (x *Oid) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Oid) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Oid) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for ParameterDefinition.
// Definition of a parameter to a module.
// See http://hl7.org/fhir/StructureDefinition/ParameterDefinition
type ParameterDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Name used to access the parameter value
	Name *Code                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Use  *ParameterDefinition_UseCode `protobuf:"bytes,4,opt,name=use,proto3" json:"use,omitempty"`
	// Minimum cardinality
	Min *Integer `protobuf:"bytes,5,opt,name=min,proto3" json:"min,omitempty"`
	// Maximum cardinality (a number of *)
	Max *String `protobuf:"bytes,6,opt,name=max,proto3" json:"max,omitempty"`
	// A brief description of the parameter
	Documentation *String                       `protobuf:"bytes,7,opt,name=documentation,proto3" json:"documentation,omitempty"`
	Type          *ParameterDefinition_TypeCode `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	// What profile the value is expected to be
	Profile *Canonical `protobuf:"bytes,9,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ParameterDefinition) Reset() {
	*x = ParameterDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterDefinition) ProtoMessage() {}

func (x *ParameterDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterDefinition.ProtoReflect.Descriptor instead.
func (*ParameterDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{46}
}

func (x *ParameterDefinition) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParameterDefinition) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ParameterDefinition) GetName() *Code {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ParameterDefinition) GetUse() *ParameterDefinition_UseCode {
	if x != nil {
		return x.Use
	}
	return nil
}

func (x *ParameterDefinition) GetMin() *Integer {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ParameterDefinition) GetMax() *String {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *ParameterDefinition) GetDocumentation() *String {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *ParameterDefinition) GetType() *ParameterDefinition_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ParameterDefinition) GetProfile() *Canonical {
	if x != nil {
		return x.Profile
	}
	return nil
}

// Auto-generated from StructureDefinition for Period.
// Time range defined by start and end date/time.
// See http://hl7.org/fhir/StructureDefinition/Period
type Period struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Starting time with inclusive boundary
	Start *DateTime `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// End time with inclusive boundary, if not ongoing
	End *DateTime `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *Period) Reset() {
	*x = Period{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Period) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Period) ProtoMessage() {}

func (x *Period) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Period.ProtoReflect.Descriptor instead.
func (*Period) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{47}
}

func (x *Period) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Period) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Period) GetStart() *DateTime {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Period) GetEnd() *DateTime {
	if x != nil {
		return x.End
	}
	return nil
}

// Auto-generated from StructureDefinition for positiveInt.
// Primitive Type positiveInt.
// See http://hl7.org/fhir/StructureDefinition/positiveInt
type PositiveInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for positiveInt
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PositiveInt) Reset() {
	*x = PositiveInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PositiveInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PositiveInt) ProtoMessage() {}

func (x *PositiveInt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PositiveInt.ProtoReflect.Descriptor instead.
func (*PositiveInt) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{48}
}

func (x *PositiveInt) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PositiveInt) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PositiveInt) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for PrimitiveType.
// Parent type for DataTypes with a simple value.
// See http://hl7.org/fhir/StructureDefinition/PrimitiveType
type PrimitiveType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *PrimitiveType) Reset() {
	*x = PrimitiveType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimitiveType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimitiveType) ProtoMessage() {}

func (x *PrimitiveType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimitiveType.ProtoReflect.Descriptor instead.
func (*PrimitiveType) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{49}
}

func (x *PrimitiveType) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *PrimitiveType) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for ProductShelfLife.
// The shelf-life and storage information for a medicinal product item or
// container can be described using this class. See
// http://hl7.org/fhir/StructureDefinition/ProductShelfLife
type ProductShelfLife struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// This describes the shelf life, taking into account various scenarios such
	// as shelf life of the packaged Medicinal Product itself, shelf life after
	// transformation where necessary and shelf life after the first opening of a
	// bottle, etc. The shelf life type shall be specified using an appropriate
	// controlled vocabulary The controlled term and the controlled term
	// identifier shall be specified
	Type   *CodeableConcept          `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Period *ProductShelfLife_PeriodX `protobuf:"bytes,8,opt,name=period,proto3" json:"period,omitempty"`
	// Special precautions for storage, if any, can be specified using an
	// appropriate controlled vocabulary The controlled term and the controlled
	// term identifier shall be specified
	SpecialPrecautionsForStorage []*CodeableConcept `protobuf:"bytes,7,rep,name=special_precautions_for_storage,json=specialPrecautionsForStorage,proto3" json:"special_precautions_for_storage,omitempty"`
}

func (x *ProductShelfLife) Reset() {
	*x = ProductShelfLife{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductShelfLife) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductShelfLife) ProtoMessage() {}

func (x *ProductShelfLife) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductShelfLife.ProtoReflect.Descriptor instead.
func (*ProductShelfLife) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{50}
}

func (x *ProductShelfLife) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ProductShelfLife) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ProductShelfLife) GetModifierExtension() []*Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *ProductShelfLife) GetType() *CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ProductShelfLife) GetPeriod() *ProductShelfLife_PeriodX {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *ProductShelfLife) GetSpecialPrecautionsForStorage() []*CodeableConcept {
	if x != nil {
		return x.SpecialPrecautionsForStorage
	}
	return nil
}

// Auto-generated from StructureDefinition for Quantity.
// A measured or measurable amount.
// See http://hl7.org/fhir/StructureDefinition/Quantity
type Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value      *Decimal                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Comparator *Quantity_ComparatorCode `protobuf:"bytes,4,opt,name=comparator,proto3" json:"comparator,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Quantity) Reset() {
	*x = Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity) ProtoMessage() {}

func (x *Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity.ProtoReflect.Descriptor instead.
func (*Quantity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{51}
}

func (x *Quantity) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Quantity) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Quantity) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Quantity) GetComparator() *Quantity_ComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *Quantity) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *Quantity) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *Quantity) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for Range.
// Set of values bounded by low and high.
// See http://hl7.org/fhir/StructureDefinition/Range
type Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Low limit
	Low *SimpleQuantity `protobuf:"bytes,3,opt,name=low,proto3" json:"low,omitempty"`
	// High limit
	High *SimpleQuantity `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
}

func (x *Range) Reset() {
	*x = Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{52}
}

func (x *Range) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Range) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Range) GetLow() *SimpleQuantity {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *Range) GetHigh() *SimpleQuantity {
	if x != nil {
		return x.High
	}
	return nil
}

// Auto-generated from StructureDefinition for Ratio.
// A ratio of two Quantity values - a numerator and a denominator.
// See http://hl7.org/fhir/StructureDefinition/Ratio
type Ratio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerator value
	Numerator *Quantity `protobuf:"bytes,3,opt,name=numerator,proto3" json:"numerator,omitempty"`
	// Denominator value
	Denominator *SimpleQuantity `protobuf:"bytes,5,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *Ratio) Reset() {
	*x = Ratio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ratio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ratio) ProtoMessage() {}

func (x *Ratio) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ratio.ProtoReflect.Descriptor instead.
func (*Ratio) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{53}
}

func (x *Ratio) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Ratio) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Ratio) GetNumerator() *Quantity {
	if x != nil {
		return x.Numerator
	}
	return nil
}

func (x *Ratio) GetDenominator() *SimpleQuantity {
	if x != nil {
		return x.Denominator
	}
	return nil
}

// Auto-generated from StructureDefinition for RatioRange.
// Range of ratio values.
// See http://hl7.org/fhir/StructureDefinition/RatioRange
type RatioRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Low Numerator limit
	LowNumerator *SimpleQuantity `protobuf:"bytes,3,opt,name=low_numerator,json=lowNumerator,proto3" json:"low_numerator,omitempty"`
	// High Numerator limit
	HighNumerator *SimpleQuantity `protobuf:"bytes,4,opt,name=high_numerator,json=highNumerator,proto3" json:"high_numerator,omitempty"`
	// Denominator value
	Denominator *SimpleQuantity `protobuf:"bytes,5,opt,name=denominator,proto3" json:"denominator,omitempty"`
}

func (x *RatioRange) Reset() {
	*x = RatioRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatioRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatioRange) ProtoMessage() {}

func (x *RatioRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatioRange.ProtoReflect.Descriptor instead.
func (*RatioRange) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{54}
}

func (x *RatioRange) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RatioRange) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *RatioRange) GetLowNumerator() *SimpleQuantity {
	if x != nil {
		return x.LowNumerator
	}
	return nil
}

func (x *RatioRange) GetHighNumerator() *SimpleQuantity {
	if x != nil {
		return x.HighNumerator
	}
	return nil
}

func (x *RatioRange) GetDenominator() *SimpleQuantity {
	if x != nil {
		return x.Denominator
	}
	return nil
}

// A reference from one resource to another. See
// https://www.hl7.org/fhir/datatypes.html#Reference.
type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Type the reference refers to (e.g. "Patient") - must be a resource in
	// resources
	Type *Uri `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Logical reference, when literal reference is not known
	Identifier *Identifier `protobuf:"bytes,155,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Text alternative for the resource.
	Display *String `protobuf:"bytes,156,opt,name=display,proto3" json:"display,omitempty"`
	// Types that are assignable to Reference:
	//
	//	*Reference_Uri
	//	*Reference_Fragment
	//	*Reference_ResourceId
	//	*Reference_AccountId
	//	*Reference_ActivityDefinitionId
	//	*Reference_ActorDefinitionId
	//	*Reference_AdministrableProductDefinitionId
	//	*Reference_AdverseEventId
	//	*Reference_AllergyIntoleranceId
	//	*Reference_AppointmentId
	//	*Reference_AppointmentResponseId
	//	*Reference_ArtifactAssessmentId
	//	*Reference_AuditEventId
	//	*Reference_BasicId
	//	*Reference_BinaryId
	//	*Reference_BiologicallyDerivedProductId
	//	*Reference_BiologicallyDerivedProductDispenseId
	//	*Reference_BodyStructureId
	//	*Reference_BundleId
	//	*Reference_CapabilityStatementId
	//	*Reference_CarePlanId
	//	*Reference_CareTeamId
	//	*Reference_ChargeItemId
	//	*Reference_ChargeItemDefinitionId
	//	*Reference_CitationId
	//	*Reference_ClaimId
	//	*Reference_ClaimResponseId
	//	*Reference_ClinicalImpressionId
	//	*Reference_ClinicalUseDefinitionId
	//	*Reference_CodeSystemId
	//	*Reference_CommunicationId
	//	*Reference_CommunicationRequestId
	//	*Reference_CompartmentDefinitionId
	//	*Reference_CompositionId
	//	*Reference_ConceptMapId
	//	*Reference_ConditionId
	//	*Reference_ConditionDefinitionId
	//	*Reference_ConsentId
	//	*Reference_ContractId
	//	*Reference_CoverageId
	//	*Reference_CoverageEligibilityRequestId
	//	*Reference_CoverageEligibilityResponseId
	//	*Reference_DetectedIssueId
	//	*Reference_DeviceId
	//	*Reference_DeviceAssociationId
	//	*Reference_DeviceDefinitionId
	//	*Reference_DeviceDispenseId
	//	*Reference_DeviceMetricId
	//	*Reference_DeviceRequestId
	//	*Reference_DeviceUsageId
	//	*Reference_DiagnosticReportId
	//	*Reference_DocumentReferenceId
	//	*Reference_EncounterId
	//	*Reference_EncounterHistoryId
	//	*Reference_EndpointId
	//	*Reference_EnrollmentRequestId
	//	*Reference_EnrollmentResponseId
	//	*Reference_EpisodeOfCareId
	//	*Reference_EventDefinitionId
	//	*Reference_EvidenceId
	//	*Reference_EvidenceReportId
	//	*Reference_EvidenceVariableId
	//	*Reference_ExampleScenarioId
	//	*Reference_ExplanationOfBenefitId
	//	*Reference_FamilyMemberHistoryId
	//	*Reference_FlagId
	//	*Reference_FormularyItemId
	//	*Reference_GenomicStudyId
	//	*Reference_GoalId
	//	*Reference_GraphDefinitionId
	//	*Reference_GroupId
	//	*Reference_GuidanceResponseId
	//	*Reference_HealthcareServiceId
	//	*Reference_ImagingSelectionId
	//	*Reference_ImagingStudyId
	//	*Reference_ImmunizationId
	//	*Reference_ImmunizationEvaluationId
	//	*Reference_ImmunizationRecommendationId
	//	*Reference_ImplementationGuideId
	//	*Reference_IngredientId
	//	*Reference_InsurancePlanId
	//	*Reference_InventoryItemId
	//	*Reference_InventoryReportId
	//	*Reference_InvoiceId
	//	*Reference_LibraryId
	//	*Reference_LinkageId
	//	*Reference_ListId
	//	*Reference_LocationId
	//	*Reference_ManufacturedItemDefinitionId
	//	*Reference_MeasureId
	//	*Reference_MeasureReportId
	//	*Reference_MedicationId
	//	*Reference_MedicationAdministrationId
	//	*Reference_MedicationDispenseId
	//	*Reference_MedicationKnowledgeId
	//	*Reference_MedicationRequestId
	//	*Reference_MedicationStatementId
	//	*Reference_MedicinalProductDefinitionId
	//	*Reference_MessageDefinitionId
	//	*Reference_MessageHeaderId
	//	*Reference_MolecularSequenceId
	//	*Reference_NamingSystemId
	//	*Reference_NutritionIntakeId
	//	*Reference_NutritionOrderId
	//	*Reference_NutritionProductId
	//	*Reference_ObservationId
	//	*Reference_ObservationDefinitionId
	//	*Reference_OperationDefinitionId
	//	*Reference_OperationOutcomeId
	//	*Reference_OrganizationId
	//	*Reference_OrganizationAffiliationId
	//	*Reference_PackagedProductDefinitionId
	//	*Reference_ParametersId
	//	*Reference_PatientId
	//	*Reference_PaymentNoticeId
	//	*Reference_PaymentReconciliationId
	//	*Reference_PermissionId
	//	*Reference_PersonId
	//	*Reference_PlanDefinitionId
	//	*Reference_PractitionerId
	//	*Reference_PractitionerRoleId
	//	*Reference_ProcedureId
	//	*Reference_ProvenanceId
	//	*Reference_QuestionnaireId
	//	*Reference_QuestionnaireResponseId
	//	*Reference_RegulatedAuthorizationId
	//	*Reference_RelatedPersonId
	//	*Reference_RequestOrchestrationId
	//	*Reference_RequirementsId
	//	*Reference_ResearchStudyId
	//	*Reference_ResearchSubjectId
	//	*Reference_RiskAssessmentId
	//	*Reference_ScheduleId
	//	*Reference_SearchParameterId
	//	*Reference_ServiceRequestId
	//	*Reference_SlotId
	//	*Reference_SpecimenId
	//	*Reference_SpecimenDefinitionId
	//	*Reference_StructureDefinitionId
	//	*Reference_StructureMapId
	//	*Reference_SubscriptionId
	//	*Reference_SubscriptionStatusId
	//	*Reference_SubscriptionTopicId
	//	*Reference_SubstanceId
	//	*Reference_SubstanceDefinitionId
	//	*Reference_SubstanceNucleicAcidId
	//	*Reference_SubstancePolymerId
	//	*Reference_SubstanceProteinId
	//	*Reference_SubstanceReferenceInformationId
	//	*Reference_SubstanceSourceMaterialId
	//	*Reference_SupplyDeliveryId
	//	*Reference_SupplyRequestId
	//	*Reference_TaskId
	//	*Reference_TerminologyCapabilitiesId
	//	*Reference_TestPlanId
	//	*Reference_TestReportId
	//	*Reference_TestScriptId
	//	*Reference_TransportId
	//	*Reference_ValueSetId
	//	*Reference_VerificationResultId
	//	*Reference_VisionPrescriptionId
	Reference isReference_Reference `protobuf_oneof:"reference"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{55}
}

func (x *Reference) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Reference) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Reference) GetType() *Uri {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Reference) GetIdentifier() *Identifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *Reference) GetDisplay() *String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (m *Reference) GetReference() isReference_Reference {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (x *Reference) GetUri() *String {
	if x, ok := x.GetReference().(*Reference_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Reference) GetFragment() *String {
	if x, ok := x.GetReference().(*Reference_Fragment); ok {
		return x.Fragment
	}
	return nil
}

func (x *Reference) GetResourceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ResourceId); ok {
		return x.ResourceId
	}
	return nil
}

func (x *Reference) GetAccountId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AccountId); ok {
		return x.AccountId
	}
	return nil
}

func (x *Reference) GetActivityDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ActivityDefinitionId); ok {
		return x.ActivityDefinitionId
	}
	return nil
}

func (x *Reference) GetActorDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ActorDefinitionId); ok {
		return x.ActorDefinitionId
	}
	return nil
}

func (x *Reference) GetAdministrableProductDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AdministrableProductDefinitionId); ok {
		return x.AdministrableProductDefinitionId
	}
	return nil
}

func (x *Reference) GetAdverseEventId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AdverseEventId); ok {
		return x.AdverseEventId
	}
	return nil
}

func (x *Reference) GetAllergyIntoleranceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AllergyIntoleranceId); ok {
		return x.AllergyIntoleranceId
	}
	return nil
}

func (x *Reference) GetAppointmentId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AppointmentId); ok {
		return x.AppointmentId
	}
	return nil
}

func (x *Reference) GetAppointmentResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AppointmentResponseId); ok {
		return x.AppointmentResponseId
	}
	return nil
}

func (x *Reference) GetArtifactAssessmentId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ArtifactAssessmentId); ok {
		return x.ArtifactAssessmentId
	}
	return nil
}

func (x *Reference) GetAuditEventId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_AuditEventId); ok {
		return x.AuditEventId
	}
	return nil
}

func (x *Reference) GetBasicId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BasicId); ok {
		return x.BasicId
	}
	return nil
}

func (x *Reference) GetBinaryId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BinaryId); ok {
		return x.BinaryId
	}
	return nil
}

func (x *Reference) GetBiologicallyDerivedProductId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BiologicallyDerivedProductId); ok {
		return x.BiologicallyDerivedProductId
	}
	return nil
}

func (x *Reference) GetBiologicallyDerivedProductDispenseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BiologicallyDerivedProductDispenseId); ok {
		return x.BiologicallyDerivedProductDispenseId
	}
	return nil
}

func (x *Reference) GetBodyStructureId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BodyStructureId); ok {
		return x.BodyStructureId
	}
	return nil
}

func (x *Reference) GetBundleId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_BundleId); ok {
		return x.BundleId
	}
	return nil
}

func (x *Reference) GetCapabilityStatementId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CapabilityStatementId); ok {
		return x.CapabilityStatementId
	}
	return nil
}

func (x *Reference) GetCarePlanId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CarePlanId); ok {
		return x.CarePlanId
	}
	return nil
}

func (x *Reference) GetCareTeamId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CareTeamId); ok {
		return x.CareTeamId
	}
	return nil
}

func (x *Reference) GetChargeItemId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ChargeItemId); ok {
		return x.ChargeItemId
	}
	return nil
}

func (x *Reference) GetChargeItemDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ChargeItemDefinitionId); ok {
		return x.ChargeItemDefinitionId
	}
	return nil
}

func (x *Reference) GetCitationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CitationId); ok {
		return x.CitationId
	}
	return nil
}

func (x *Reference) GetClaimId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ClaimId); ok {
		return x.ClaimId
	}
	return nil
}

func (x *Reference) GetClaimResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ClaimResponseId); ok {
		return x.ClaimResponseId
	}
	return nil
}

func (x *Reference) GetClinicalImpressionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ClinicalImpressionId); ok {
		return x.ClinicalImpressionId
	}
	return nil
}

func (x *Reference) GetClinicalUseDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ClinicalUseDefinitionId); ok {
		return x.ClinicalUseDefinitionId
	}
	return nil
}

func (x *Reference) GetCodeSystemId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CodeSystemId); ok {
		return x.CodeSystemId
	}
	return nil
}

func (x *Reference) GetCommunicationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CommunicationId); ok {
		return x.CommunicationId
	}
	return nil
}

func (x *Reference) GetCommunicationRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CommunicationRequestId); ok {
		return x.CommunicationRequestId
	}
	return nil
}

func (x *Reference) GetCompartmentDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CompartmentDefinitionId); ok {
		return x.CompartmentDefinitionId
	}
	return nil
}

func (x *Reference) GetCompositionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CompositionId); ok {
		return x.CompositionId
	}
	return nil
}

func (x *Reference) GetConceptMapId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ConceptMapId); ok {
		return x.ConceptMapId
	}
	return nil
}

func (x *Reference) GetConditionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ConditionId); ok {
		return x.ConditionId
	}
	return nil
}

func (x *Reference) GetConditionDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ConditionDefinitionId); ok {
		return x.ConditionDefinitionId
	}
	return nil
}

func (x *Reference) GetConsentId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ConsentId); ok {
		return x.ConsentId
	}
	return nil
}

func (x *Reference) GetContractId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ContractId); ok {
		return x.ContractId
	}
	return nil
}

func (x *Reference) GetCoverageId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CoverageId); ok {
		return x.CoverageId
	}
	return nil
}

func (x *Reference) GetCoverageEligibilityRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CoverageEligibilityRequestId); ok {
		return x.CoverageEligibilityRequestId
	}
	return nil
}

func (x *Reference) GetCoverageEligibilityResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_CoverageEligibilityResponseId); ok {
		return x.CoverageEligibilityResponseId
	}
	return nil
}

func (x *Reference) GetDetectedIssueId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DetectedIssueId); ok {
		return x.DetectedIssueId
	}
	return nil
}

func (x *Reference) GetDeviceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceId); ok {
		return x.DeviceId
	}
	return nil
}

func (x *Reference) GetDeviceAssociationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceAssociationId); ok {
		return x.DeviceAssociationId
	}
	return nil
}

func (x *Reference) GetDeviceDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceDefinitionId); ok {
		return x.DeviceDefinitionId
	}
	return nil
}

func (x *Reference) GetDeviceDispenseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceDispenseId); ok {
		return x.DeviceDispenseId
	}
	return nil
}

func (x *Reference) GetDeviceMetricId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceMetricId); ok {
		return x.DeviceMetricId
	}
	return nil
}

func (x *Reference) GetDeviceRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceRequestId); ok {
		return x.DeviceRequestId
	}
	return nil
}

func (x *Reference) GetDeviceUsageId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DeviceUsageId); ok {
		return x.DeviceUsageId
	}
	return nil
}

func (x *Reference) GetDiagnosticReportId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DiagnosticReportId); ok {
		return x.DiagnosticReportId
	}
	return nil
}

func (x *Reference) GetDocumentReferenceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_DocumentReferenceId); ok {
		return x.DocumentReferenceId
	}
	return nil
}

func (x *Reference) GetEncounterId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EncounterId); ok {
		return x.EncounterId
	}
	return nil
}

func (x *Reference) GetEncounterHistoryId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EncounterHistoryId); ok {
		return x.EncounterHistoryId
	}
	return nil
}

func (x *Reference) GetEndpointId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EndpointId); ok {
		return x.EndpointId
	}
	return nil
}

func (x *Reference) GetEnrollmentRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EnrollmentRequestId); ok {
		return x.EnrollmentRequestId
	}
	return nil
}

func (x *Reference) GetEnrollmentResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EnrollmentResponseId); ok {
		return x.EnrollmentResponseId
	}
	return nil
}

func (x *Reference) GetEpisodeOfCareId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EpisodeOfCareId); ok {
		return x.EpisodeOfCareId
	}
	return nil
}

func (x *Reference) GetEventDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EventDefinitionId); ok {
		return x.EventDefinitionId
	}
	return nil
}

func (x *Reference) GetEvidenceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EvidenceId); ok {
		return x.EvidenceId
	}
	return nil
}

func (x *Reference) GetEvidenceReportId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EvidenceReportId); ok {
		return x.EvidenceReportId
	}
	return nil
}

func (x *Reference) GetEvidenceVariableId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_EvidenceVariableId); ok {
		return x.EvidenceVariableId
	}
	return nil
}

func (x *Reference) GetExampleScenarioId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ExampleScenarioId); ok {
		return x.ExampleScenarioId
	}
	return nil
}

func (x *Reference) GetExplanationOfBenefitId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ExplanationOfBenefitId); ok {
		return x.ExplanationOfBenefitId
	}
	return nil
}

func (x *Reference) GetFamilyMemberHistoryId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_FamilyMemberHistoryId); ok {
		return x.FamilyMemberHistoryId
	}
	return nil
}

func (x *Reference) GetFlagId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_FlagId); ok {
		return x.FlagId
	}
	return nil
}

func (x *Reference) GetFormularyItemId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_FormularyItemId); ok {
		return x.FormularyItemId
	}
	return nil
}

func (x *Reference) GetGenomicStudyId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_GenomicStudyId); ok {
		return x.GenomicStudyId
	}
	return nil
}

func (x *Reference) GetGoalId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_GoalId); ok {
		return x.GoalId
	}
	return nil
}

func (x *Reference) GetGraphDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_GraphDefinitionId); ok {
		return x.GraphDefinitionId
	}
	return nil
}

func (x *Reference) GetGroupId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_GroupId); ok {
		return x.GroupId
	}
	return nil
}

func (x *Reference) GetGuidanceResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_GuidanceResponseId); ok {
		return x.GuidanceResponseId
	}
	return nil
}

func (x *Reference) GetHealthcareServiceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_HealthcareServiceId); ok {
		return x.HealthcareServiceId
	}
	return nil
}

func (x *Reference) GetImagingSelectionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImagingSelectionId); ok {
		return x.ImagingSelectionId
	}
	return nil
}

func (x *Reference) GetImagingStudyId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImagingStudyId); ok {
		return x.ImagingStudyId
	}
	return nil
}

func (x *Reference) GetImmunizationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImmunizationId); ok {
		return x.ImmunizationId
	}
	return nil
}

func (x *Reference) GetImmunizationEvaluationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImmunizationEvaluationId); ok {
		return x.ImmunizationEvaluationId
	}
	return nil
}

func (x *Reference) GetImmunizationRecommendationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImmunizationRecommendationId); ok {
		return x.ImmunizationRecommendationId
	}
	return nil
}

func (x *Reference) GetImplementationGuideId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ImplementationGuideId); ok {
		return x.ImplementationGuideId
	}
	return nil
}

func (x *Reference) GetIngredientId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_IngredientId); ok {
		return x.IngredientId
	}
	return nil
}

func (x *Reference) GetInsurancePlanId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_InsurancePlanId); ok {
		return x.InsurancePlanId
	}
	return nil
}

func (x *Reference) GetInventoryItemId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_InventoryItemId); ok {
		return x.InventoryItemId
	}
	return nil
}

func (x *Reference) GetInventoryReportId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_InventoryReportId); ok {
		return x.InventoryReportId
	}
	return nil
}

func (x *Reference) GetInvoiceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_InvoiceId); ok {
		return x.InvoiceId
	}
	return nil
}

func (x *Reference) GetLibraryId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_LibraryId); ok {
		return x.LibraryId
	}
	return nil
}

func (x *Reference) GetLinkageId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_LinkageId); ok {
		return x.LinkageId
	}
	return nil
}

func (x *Reference) GetListId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ListId); ok {
		return x.ListId
	}
	return nil
}

func (x *Reference) GetLocationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_LocationId); ok {
		return x.LocationId
	}
	return nil
}

func (x *Reference) GetManufacturedItemDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ManufacturedItemDefinitionId); ok {
		return x.ManufacturedItemDefinitionId
	}
	return nil
}

func (x *Reference) GetMeasureId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MeasureId); ok {
		return x.MeasureId
	}
	return nil
}

func (x *Reference) GetMeasureReportId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MeasureReportId); ok {
		return x.MeasureReportId
	}
	return nil
}

func (x *Reference) GetMedicationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationId); ok {
		return x.MedicationId
	}
	return nil
}

func (x *Reference) GetMedicationAdministrationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationAdministrationId); ok {
		return x.MedicationAdministrationId
	}
	return nil
}

func (x *Reference) GetMedicationDispenseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationDispenseId); ok {
		return x.MedicationDispenseId
	}
	return nil
}

func (x *Reference) GetMedicationKnowledgeId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationKnowledgeId); ok {
		return x.MedicationKnowledgeId
	}
	return nil
}

func (x *Reference) GetMedicationRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationRequestId); ok {
		return x.MedicationRequestId
	}
	return nil
}

func (x *Reference) GetMedicationStatementId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicationStatementId); ok {
		return x.MedicationStatementId
	}
	return nil
}

func (x *Reference) GetMedicinalProductDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MedicinalProductDefinitionId); ok {
		return x.MedicinalProductDefinitionId
	}
	return nil
}

func (x *Reference) GetMessageDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MessageDefinitionId); ok {
		return x.MessageDefinitionId
	}
	return nil
}

func (x *Reference) GetMessageHeaderId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MessageHeaderId); ok {
		return x.MessageHeaderId
	}
	return nil
}

func (x *Reference) GetMolecularSequenceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_MolecularSequenceId); ok {
		return x.MolecularSequenceId
	}
	return nil
}

func (x *Reference) GetNamingSystemId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_NamingSystemId); ok {
		return x.NamingSystemId
	}
	return nil
}

func (x *Reference) GetNutritionIntakeId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_NutritionIntakeId); ok {
		return x.NutritionIntakeId
	}
	return nil
}

func (x *Reference) GetNutritionOrderId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_NutritionOrderId); ok {
		return x.NutritionOrderId
	}
	return nil
}

func (x *Reference) GetNutritionProductId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_NutritionProductId); ok {
		return x.NutritionProductId
	}
	return nil
}

func (x *Reference) GetObservationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ObservationId); ok {
		return x.ObservationId
	}
	return nil
}

func (x *Reference) GetObservationDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ObservationDefinitionId); ok {
		return x.ObservationDefinitionId
	}
	return nil
}

func (x *Reference) GetOperationDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_OperationDefinitionId); ok {
		return x.OperationDefinitionId
	}
	return nil
}

func (x *Reference) GetOperationOutcomeId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_OperationOutcomeId); ok {
		return x.OperationOutcomeId
	}
	return nil
}

func (x *Reference) GetOrganizationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_OrganizationId); ok {
		return x.OrganizationId
	}
	return nil
}

func (x *Reference) GetOrganizationAffiliationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_OrganizationAffiliationId); ok {
		return x.OrganizationAffiliationId
	}
	return nil
}

func (x *Reference) GetPackagedProductDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PackagedProductDefinitionId); ok {
		return x.PackagedProductDefinitionId
	}
	return nil
}

func (x *Reference) GetParametersId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ParametersId); ok {
		return x.ParametersId
	}
	return nil
}

func (x *Reference) GetPatientId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PatientId); ok {
		return x.PatientId
	}
	return nil
}

func (x *Reference) GetPaymentNoticeId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PaymentNoticeId); ok {
		return x.PaymentNoticeId
	}
	return nil
}

func (x *Reference) GetPaymentReconciliationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PaymentReconciliationId); ok {
		return x.PaymentReconciliationId
	}
	return nil
}

func (x *Reference) GetPermissionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PermissionId); ok {
		return x.PermissionId
	}
	return nil
}

func (x *Reference) GetPersonId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PersonId); ok {
		return x.PersonId
	}
	return nil
}

func (x *Reference) GetPlanDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PlanDefinitionId); ok {
		return x.PlanDefinitionId
	}
	return nil
}

func (x *Reference) GetPractitionerId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PractitionerId); ok {
		return x.PractitionerId
	}
	return nil
}

func (x *Reference) GetPractitionerRoleId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_PractitionerRoleId); ok {
		return x.PractitionerRoleId
	}
	return nil
}

func (x *Reference) GetProcedureId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ProcedureId); ok {
		return x.ProcedureId
	}
	return nil
}

func (x *Reference) GetProvenanceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ProvenanceId); ok {
		return x.ProvenanceId
	}
	return nil
}

func (x *Reference) GetQuestionnaireId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_QuestionnaireId); ok {
		return x.QuestionnaireId
	}
	return nil
}

func (x *Reference) GetQuestionnaireResponseId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_QuestionnaireResponseId); ok {
		return x.QuestionnaireResponseId
	}
	return nil
}

func (x *Reference) GetRegulatedAuthorizationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_RegulatedAuthorizationId); ok {
		return x.RegulatedAuthorizationId
	}
	return nil
}

func (x *Reference) GetRelatedPersonId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_RelatedPersonId); ok {
		return x.RelatedPersonId
	}
	return nil
}

func (x *Reference) GetRequestOrchestrationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_RequestOrchestrationId); ok {
		return x.RequestOrchestrationId
	}
	return nil
}

func (x *Reference) GetRequirementsId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_RequirementsId); ok {
		return x.RequirementsId
	}
	return nil
}

func (x *Reference) GetResearchStudyId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ResearchStudyId); ok {
		return x.ResearchStudyId
	}
	return nil
}

func (x *Reference) GetResearchSubjectId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ResearchSubjectId); ok {
		return x.ResearchSubjectId
	}
	return nil
}

func (x *Reference) GetRiskAssessmentId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_RiskAssessmentId); ok {
		return x.RiskAssessmentId
	}
	return nil
}

func (x *Reference) GetScheduleId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ScheduleId); ok {
		return x.ScheduleId
	}
	return nil
}

func (x *Reference) GetSearchParameterId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SearchParameterId); ok {
		return x.SearchParameterId
	}
	return nil
}

func (x *Reference) GetServiceRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ServiceRequestId); ok {
		return x.ServiceRequestId
	}
	return nil
}

func (x *Reference) GetSlotId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SlotId); ok {
		return x.SlotId
	}
	return nil
}

func (x *Reference) GetSpecimenId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SpecimenId); ok {
		return x.SpecimenId
	}
	return nil
}

func (x *Reference) GetSpecimenDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SpecimenDefinitionId); ok {
		return x.SpecimenDefinitionId
	}
	return nil
}

func (x *Reference) GetStructureDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_StructureDefinitionId); ok {
		return x.StructureDefinitionId
	}
	return nil
}

func (x *Reference) GetStructureMapId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_StructureMapId); ok {
		return x.StructureMapId
	}
	return nil
}

func (x *Reference) GetSubscriptionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubscriptionId); ok {
		return x.SubscriptionId
	}
	return nil
}

func (x *Reference) GetSubscriptionStatusId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubscriptionStatusId); ok {
		return x.SubscriptionStatusId
	}
	return nil
}

func (x *Reference) GetSubscriptionTopicId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubscriptionTopicId); ok {
		return x.SubscriptionTopicId
	}
	return nil
}

func (x *Reference) GetSubstanceId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubstanceId); ok {
		return x.SubstanceId
	}
	return nil
}

func (x *Reference) GetSubstanceDefinitionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubstanceDefinitionId); ok {
		return x.SubstanceDefinitionId
	}
	return nil
}

func (x *Reference) GetSubstanceNucleicAcidId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubstanceNucleicAcidId); ok {
		return x.SubstanceNucleicAcidId
	}
	return nil
}

func (x *Reference) GetSubstancePolymerId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubstancePolymerId); ok {
		return x.SubstancePolymerId
	}
	return nil
}

func (x *Reference) GetSubstanceProteinId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubstanceProteinId); ok {
		return x.SubstanceProteinId
	}
	return nil
}

func (x *Reference) GetSubstanceReferenceInformationId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubstanceReferenceInformationId); ok {
		return x.SubstanceReferenceInformationId
	}
	return nil
}

func (x *Reference) GetSubstanceSourceMaterialId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SubstanceSourceMaterialId); ok {
		return x.SubstanceSourceMaterialId
	}
	return nil
}

func (x *Reference) GetSupplyDeliveryId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SupplyDeliveryId); ok {
		return x.SupplyDeliveryId
	}
	return nil
}

func (x *Reference) GetSupplyRequestId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_SupplyRequestId); ok {
		return x.SupplyRequestId
	}
	return nil
}

func (x *Reference) GetTaskId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_TaskId); ok {
		return x.TaskId
	}
	return nil
}

func (x *Reference) GetTerminologyCapabilitiesId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_TerminologyCapabilitiesId); ok {
		return x.TerminologyCapabilitiesId
	}
	return nil
}

func (x *Reference) GetTestPlanId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_TestPlanId); ok {
		return x.TestPlanId
	}
	return nil
}

func (x *Reference) GetTestReportId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_TestReportId); ok {
		return x.TestReportId
	}
	return nil
}

func (x *Reference) GetTestScriptId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_TestScriptId); ok {
		return x.TestScriptId
	}
	return nil
}

func (x *Reference) GetTransportId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_TransportId); ok {
		return x.TransportId
	}
	return nil
}

func (x *Reference) GetValueSetId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_ValueSetId); ok {
		return x.ValueSetId
	}
	return nil
}

func (x *Reference) GetVerificationResultId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_VerificationResultId); ok {
		return x.VerificationResultId
	}
	return nil
}

func (x *Reference) GetVisionPrescriptionId() *ReferenceId {
	if x, ok := x.GetReference().(*Reference_VisionPrescriptionId); ok {
		return x.VisionPrescriptionId
	}
	return nil
}

type isReference_Reference interface {
	isReference_Reference()
}

type Reference_Uri struct {
	// Field representing absolute URIs, which are untyped.
	Uri *String `protobuf:"bytes,4,opt,name=uri,proto3,oneof"`
}

type Reference_Fragment struct {
	// Field representing fragment URIs, which are untyped, and represented here
	// without the leading '#'
	Fragment *String `protobuf:"bytes,5,opt,name=fragment,proto3,oneof"`
}

type Reference_ResourceId struct {
	// Typed relative urls are represented here.
	ResourceId *ReferenceId `protobuf:"bytes,6,opt,name=resource_id,json=resourceId,proto3,oneof"`
}

type Reference_AccountId struct {
	AccountId *ReferenceId `protobuf:"bytes,7,opt,name=account_id,json=accountId,proto3,oneof"`
}

type Reference_ActivityDefinitionId struct {
	ActivityDefinitionId *ReferenceId `protobuf:"bytes,8,opt,name=activity_definition_id,json=activityDefinitionId,proto3,oneof"`
}

type Reference_ActorDefinitionId struct {
	ActorDefinitionId *ReferenceId `protobuf:"bytes,157,opt,name=actor_definition_id,json=actorDefinitionId,proto3,oneof"`
}

type Reference_AdministrableProductDefinitionId struct {
	AdministrableProductDefinitionId *ReferenceId `protobuf:"bytes,158,opt,name=administrable_product_definition_id,json=administrableProductDefinitionId,proto3,oneof"`
}

type Reference_AdverseEventId struct {
	AdverseEventId *ReferenceId `protobuf:"bytes,9,opt,name=adverse_event_id,json=adverseEventId,proto3,oneof"`
}

type Reference_AllergyIntoleranceId struct {
	AllergyIntoleranceId *ReferenceId `protobuf:"bytes,10,opt,name=allergy_intolerance_id,json=allergyIntoleranceId,proto3,oneof"`
}

type Reference_AppointmentId struct {
	AppointmentId *ReferenceId `protobuf:"bytes,11,opt,name=appointment_id,json=appointmentId,proto3,oneof"`
}

type Reference_AppointmentResponseId struct {
	AppointmentResponseId *ReferenceId `protobuf:"bytes,12,opt,name=appointment_response_id,json=appointmentResponseId,proto3,oneof"`
}

type Reference_ArtifactAssessmentId struct {
	ArtifactAssessmentId *ReferenceId `protobuf:"bytes,159,opt,name=artifact_assessment_id,json=artifactAssessmentId,proto3,oneof"`
}

type Reference_AuditEventId struct {
	AuditEventId *ReferenceId `protobuf:"bytes,13,opt,name=audit_event_id,json=auditEventId,proto3,oneof"`
}

type Reference_BasicId struct {
	BasicId *ReferenceId `protobuf:"bytes,14,opt,name=basic_id,json=basicId,proto3,oneof"`
}

type Reference_BinaryId struct {
	BinaryId *ReferenceId `protobuf:"bytes,15,opt,name=binary_id,json=binaryId,proto3,oneof"`
}

type Reference_BiologicallyDerivedProductId struct {
	BiologicallyDerivedProductId *ReferenceId `protobuf:"bytes,16,opt,name=biologically_derived_product_id,json=biologicallyDerivedProductId,proto3,oneof"`
}

type Reference_BiologicallyDerivedProductDispenseId struct {
	BiologicallyDerivedProductDispenseId *ReferenceId `protobuf:"bytes,160,opt,name=biologically_derived_product_dispense_id,json=biologicallyDerivedProductDispenseId,proto3,oneof"`
}

type Reference_BodyStructureId struct {
	BodyStructureId *ReferenceId `protobuf:"bytes,17,opt,name=body_structure_id,json=bodyStructureId,proto3,oneof"`
}

type Reference_BundleId struct {
	BundleId *ReferenceId `protobuf:"bytes,18,opt,name=bundle_id,json=bundleId,proto3,oneof"`
}

type Reference_CapabilityStatementId struct {
	CapabilityStatementId *ReferenceId `protobuf:"bytes,19,opt,name=capability_statement_id,json=capabilityStatementId,proto3,oneof"`
}

type Reference_CarePlanId struct {
	CarePlanId *ReferenceId `protobuf:"bytes,20,opt,name=care_plan_id,json=carePlanId,proto3,oneof"`
}

type Reference_CareTeamId struct {
	CareTeamId *ReferenceId `protobuf:"bytes,21,opt,name=care_team_id,json=careTeamId,proto3,oneof"`
}

type Reference_ChargeItemId struct {
	ChargeItemId *ReferenceId `protobuf:"bytes,23,opt,name=charge_item_id,json=chargeItemId,proto3,oneof"`
}

type Reference_ChargeItemDefinitionId struct {
	ChargeItemDefinitionId *ReferenceId `protobuf:"bytes,24,opt,name=charge_item_definition_id,json=chargeItemDefinitionId,proto3,oneof"`
}

type Reference_CitationId struct {
	CitationId *ReferenceId `protobuf:"bytes,161,opt,name=citation_id,json=citationId,proto3,oneof"`
}

type Reference_ClaimId struct {
	ClaimId *ReferenceId `protobuf:"bytes,25,opt,name=claim_id,json=claimId,proto3,oneof"`
}

type Reference_ClaimResponseId struct {
	ClaimResponseId *ReferenceId `protobuf:"bytes,26,opt,name=claim_response_id,json=claimResponseId,proto3,oneof"`
}

type Reference_ClinicalImpressionId struct {
	ClinicalImpressionId *ReferenceId `protobuf:"bytes,27,opt,name=clinical_impression_id,json=clinicalImpressionId,proto3,oneof"`
}

type Reference_ClinicalUseDefinitionId struct {
	ClinicalUseDefinitionId *ReferenceId `protobuf:"bytes,162,opt,name=clinical_use_definition_id,json=clinicalUseDefinitionId,proto3,oneof"`
}

type Reference_CodeSystemId struct {
	CodeSystemId *ReferenceId `protobuf:"bytes,28,opt,name=code_system_id,json=codeSystemId,proto3,oneof"`
}

type Reference_CommunicationId struct {
	CommunicationId *ReferenceId `protobuf:"bytes,29,opt,name=communication_id,json=communicationId,proto3,oneof"`
}

type Reference_CommunicationRequestId struct {
	CommunicationRequestId *ReferenceId `protobuf:"bytes,30,opt,name=communication_request_id,json=communicationRequestId,proto3,oneof"`
}

type Reference_CompartmentDefinitionId struct {
	CompartmentDefinitionId *ReferenceId `protobuf:"bytes,31,opt,name=compartment_definition_id,json=compartmentDefinitionId,proto3,oneof"`
}

type Reference_CompositionId struct {
	CompositionId *ReferenceId `protobuf:"bytes,32,opt,name=composition_id,json=compositionId,proto3,oneof"`
}

type Reference_ConceptMapId struct {
	ConceptMapId *ReferenceId `protobuf:"bytes,33,opt,name=concept_map_id,json=conceptMapId,proto3,oneof"`
}

type Reference_ConditionId struct {
	ConditionId *ReferenceId `protobuf:"bytes,34,opt,name=condition_id,json=conditionId,proto3,oneof"`
}

type Reference_ConditionDefinitionId struct {
	ConditionDefinitionId *ReferenceId `protobuf:"bytes,163,opt,name=condition_definition_id,json=conditionDefinitionId,proto3,oneof"`
}

type Reference_ConsentId struct {
	ConsentId *ReferenceId `protobuf:"bytes,35,opt,name=consent_id,json=consentId,proto3,oneof"`
}

type Reference_ContractId struct {
	ContractId *ReferenceId `protobuf:"bytes,36,opt,name=contract_id,json=contractId,proto3,oneof"`
}

type Reference_CoverageId struct {
	CoverageId *ReferenceId `protobuf:"bytes,37,opt,name=coverage_id,json=coverageId,proto3,oneof"`
}

type Reference_CoverageEligibilityRequestId struct {
	CoverageEligibilityRequestId *ReferenceId `protobuf:"bytes,38,opt,name=coverage_eligibility_request_id,json=coverageEligibilityRequestId,proto3,oneof"`
}

type Reference_CoverageEligibilityResponseId struct {
	CoverageEligibilityResponseId *ReferenceId `protobuf:"bytes,39,opt,name=coverage_eligibility_response_id,json=coverageEligibilityResponseId,proto3,oneof"`
}

type Reference_DetectedIssueId struct {
	DetectedIssueId *ReferenceId `protobuf:"bytes,40,opt,name=detected_issue_id,json=detectedIssueId,proto3,oneof"`
}

type Reference_DeviceId struct {
	DeviceId *ReferenceId `protobuf:"bytes,41,opt,name=device_id,json=deviceId,proto3,oneof"`
}

type Reference_DeviceAssociationId struct {
	DeviceAssociationId *ReferenceId `protobuf:"bytes,164,opt,name=device_association_id,json=deviceAssociationId,proto3,oneof"`
}

type Reference_DeviceDefinitionId struct {
	DeviceDefinitionId *ReferenceId `protobuf:"bytes,42,opt,name=device_definition_id,json=deviceDefinitionId,proto3,oneof"`
}

type Reference_DeviceDispenseId struct {
	DeviceDispenseId *ReferenceId `protobuf:"bytes,165,opt,name=device_dispense_id,json=deviceDispenseId,proto3,oneof"`
}

type Reference_DeviceMetricId struct {
	DeviceMetricId *ReferenceId `protobuf:"bytes,43,opt,name=device_metric_id,json=deviceMetricId,proto3,oneof"`
}

type Reference_DeviceRequestId struct {
	DeviceRequestId *ReferenceId `protobuf:"bytes,44,opt,name=device_request_id,json=deviceRequestId,proto3,oneof"`
}

type Reference_DeviceUsageId struct {
	DeviceUsageId *ReferenceId `protobuf:"bytes,166,opt,name=device_usage_id,json=deviceUsageId,proto3,oneof"`
}

type Reference_DiagnosticReportId struct {
	DiagnosticReportId *ReferenceId `protobuf:"bytes,46,opt,name=diagnostic_report_id,json=diagnosticReportId,proto3,oneof"`
}

type Reference_DocumentReferenceId struct {
	DocumentReferenceId *ReferenceId `protobuf:"bytes,48,opt,name=document_reference_id,json=documentReferenceId,proto3,oneof"`
}

type Reference_EncounterId struct {
	EncounterId *ReferenceId `protobuf:"bytes,51,opt,name=encounter_id,json=encounterId,proto3,oneof"`
}

type Reference_EncounterHistoryId struct {
	EncounterHistoryId *ReferenceId `protobuf:"bytes,167,opt,name=encounter_history_id,json=encounterHistoryId,proto3,oneof"`
}

type Reference_EndpointId struct {
	EndpointId *ReferenceId `protobuf:"bytes,52,opt,name=endpoint_id,json=endpointId,proto3,oneof"`
}

type Reference_EnrollmentRequestId struct {
	EnrollmentRequestId *ReferenceId `protobuf:"bytes,53,opt,name=enrollment_request_id,json=enrollmentRequestId,proto3,oneof"`
}

type Reference_EnrollmentResponseId struct {
	EnrollmentResponseId *ReferenceId `protobuf:"bytes,54,opt,name=enrollment_response_id,json=enrollmentResponseId,proto3,oneof"`
}

type Reference_EpisodeOfCareId struct {
	EpisodeOfCareId *ReferenceId `protobuf:"bytes,55,opt,name=episode_of_care_id,json=episodeOfCareId,proto3,oneof"`
}

type Reference_EventDefinitionId struct {
	EventDefinitionId *ReferenceId `protobuf:"bytes,56,opt,name=event_definition_id,json=eventDefinitionId,proto3,oneof"`
}

type Reference_EvidenceId struct {
	EvidenceId *ReferenceId `protobuf:"bytes,57,opt,name=evidence_id,json=evidenceId,proto3,oneof"`
}

type Reference_EvidenceReportId struct {
	EvidenceReportId *ReferenceId `protobuf:"bytes,168,opt,name=evidence_report_id,json=evidenceReportId,proto3,oneof"`
}

type Reference_EvidenceVariableId struct {
	EvidenceVariableId *ReferenceId `protobuf:"bytes,58,opt,name=evidence_variable_id,json=evidenceVariableId,proto3,oneof"`
}

type Reference_ExampleScenarioId struct {
	ExampleScenarioId *ReferenceId `protobuf:"bytes,59,opt,name=example_scenario_id,json=exampleScenarioId,proto3,oneof"`
}

type Reference_ExplanationOfBenefitId struct {
	ExplanationOfBenefitId *ReferenceId `protobuf:"bytes,60,opt,name=explanation_of_benefit_id,json=explanationOfBenefitId,proto3,oneof"`
}

type Reference_FamilyMemberHistoryId struct {
	FamilyMemberHistoryId *ReferenceId `protobuf:"bytes,61,opt,name=family_member_history_id,json=familyMemberHistoryId,proto3,oneof"`
}

type Reference_FlagId struct {
	FlagId *ReferenceId `protobuf:"bytes,62,opt,name=flag_id,json=flagId,proto3,oneof"`
}

type Reference_FormularyItemId struct {
	FormularyItemId *ReferenceId `protobuf:"bytes,169,opt,name=formulary_item_id,json=formularyItemId,proto3,oneof"`
}

type Reference_GenomicStudyId struct {
	GenomicStudyId *ReferenceId `protobuf:"bytes,170,opt,name=genomic_study_id,json=genomicStudyId,proto3,oneof"`
}

type Reference_GoalId struct {
	GoalId *ReferenceId `protobuf:"bytes,63,opt,name=goal_id,json=goalId,proto3,oneof"`
}

type Reference_GraphDefinitionId struct {
	GraphDefinitionId *ReferenceId `protobuf:"bytes,64,opt,name=graph_definition_id,json=graphDefinitionId,proto3,oneof"`
}

type Reference_GroupId struct {
	GroupId *ReferenceId `protobuf:"bytes,65,opt,name=group_id,json=groupId,proto3,oneof"`
}

type Reference_GuidanceResponseId struct {
	GuidanceResponseId *ReferenceId `protobuf:"bytes,66,opt,name=guidance_response_id,json=guidanceResponseId,proto3,oneof"`
}

type Reference_HealthcareServiceId struct {
	HealthcareServiceId *ReferenceId `protobuf:"bytes,67,opt,name=healthcare_service_id,json=healthcareServiceId,proto3,oneof"`
}

type Reference_ImagingSelectionId struct {
	ImagingSelectionId *ReferenceId `protobuf:"bytes,171,opt,name=imaging_selection_id,json=imagingSelectionId,proto3,oneof"`
}

type Reference_ImagingStudyId struct {
	ImagingStudyId *ReferenceId `protobuf:"bytes,68,opt,name=imaging_study_id,json=imagingStudyId,proto3,oneof"`
}

type Reference_ImmunizationId struct {
	ImmunizationId *ReferenceId `protobuf:"bytes,69,opt,name=immunization_id,json=immunizationId,proto3,oneof"`
}

type Reference_ImmunizationEvaluationId struct {
	ImmunizationEvaluationId *ReferenceId `protobuf:"bytes,70,opt,name=immunization_evaluation_id,json=immunizationEvaluationId,proto3,oneof"`
}

type Reference_ImmunizationRecommendationId struct {
	ImmunizationRecommendationId *ReferenceId `protobuf:"bytes,71,opt,name=immunization_recommendation_id,json=immunizationRecommendationId,proto3,oneof"`
}

type Reference_ImplementationGuideId struct {
	ImplementationGuideId *ReferenceId `protobuf:"bytes,72,opt,name=implementation_guide_id,json=implementationGuideId,proto3,oneof"`
}

type Reference_IngredientId struct {
	IngredientId *ReferenceId `protobuf:"bytes,172,opt,name=ingredient_id,json=ingredientId,proto3,oneof"`
}

type Reference_InsurancePlanId struct {
	InsurancePlanId *ReferenceId `protobuf:"bytes,73,opt,name=insurance_plan_id,json=insurancePlanId,proto3,oneof"`
}

type Reference_InventoryItemId struct {
	InventoryItemId *ReferenceId `protobuf:"bytes,173,opt,name=inventory_item_id,json=inventoryItemId,proto3,oneof"`
}

type Reference_InventoryReportId struct {
	InventoryReportId *ReferenceId `protobuf:"bytes,174,opt,name=inventory_report_id,json=inventoryReportId,proto3,oneof"`
}

type Reference_InvoiceId struct {
	InvoiceId *ReferenceId `protobuf:"bytes,74,opt,name=invoice_id,json=invoiceId,proto3,oneof"`
}

type Reference_LibraryId struct {
	LibraryId *ReferenceId `protobuf:"bytes,75,opt,name=library_id,json=libraryId,proto3,oneof"`
}

type Reference_LinkageId struct {
	LinkageId *ReferenceId `protobuf:"bytes,76,opt,name=linkage_id,json=linkageId,proto3,oneof"`
}

type Reference_ListId struct {
	ListId *ReferenceId `protobuf:"bytes,77,opt,name=list_id,json=listId,proto3,oneof"`
}

type Reference_LocationId struct {
	LocationId *ReferenceId `protobuf:"bytes,78,opt,name=location_id,json=locationId,proto3,oneof"`
}

type Reference_ManufacturedItemDefinitionId struct {
	ManufacturedItemDefinitionId *ReferenceId `protobuf:"bytes,175,opt,name=manufactured_item_definition_id,json=manufacturedItemDefinitionId,proto3,oneof"`
}

type Reference_MeasureId struct {
	MeasureId *ReferenceId `protobuf:"bytes,79,opt,name=measure_id,json=measureId,proto3,oneof"`
}

type Reference_MeasureReportId struct {
	MeasureReportId *ReferenceId `protobuf:"bytes,80,opt,name=measure_report_id,json=measureReportId,proto3,oneof"`
}

type Reference_MedicationId struct {
	MedicationId *ReferenceId `protobuf:"bytes,82,opt,name=medication_id,json=medicationId,proto3,oneof"`
}

type Reference_MedicationAdministrationId struct {
	MedicationAdministrationId *ReferenceId `protobuf:"bytes,83,opt,name=medication_administration_id,json=medicationAdministrationId,proto3,oneof"`
}

type Reference_MedicationDispenseId struct {
	MedicationDispenseId *ReferenceId `protobuf:"bytes,84,opt,name=medication_dispense_id,json=medicationDispenseId,proto3,oneof"`
}

type Reference_MedicationKnowledgeId struct {
	MedicationKnowledgeId *ReferenceId `protobuf:"bytes,85,opt,name=medication_knowledge_id,json=medicationKnowledgeId,proto3,oneof"`
}

type Reference_MedicationRequestId struct {
	MedicationRequestId *ReferenceId `protobuf:"bytes,86,opt,name=medication_request_id,json=medicationRequestId,proto3,oneof"`
}

type Reference_MedicationStatementId struct {
	MedicationStatementId *ReferenceId `protobuf:"bytes,87,opt,name=medication_statement_id,json=medicationStatementId,proto3,oneof"`
}

type Reference_MedicinalProductDefinitionId struct {
	MedicinalProductDefinitionId *ReferenceId `protobuf:"bytes,176,opt,name=medicinal_product_definition_id,json=medicinalProductDefinitionId,proto3,oneof"`
}

type Reference_MessageDefinitionId struct {
	MessageDefinitionId *ReferenceId `protobuf:"bytes,98,opt,name=message_definition_id,json=messageDefinitionId,proto3,oneof"`
}

type Reference_MessageHeaderId struct {
	MessageHeaderId *ReferenceId `protobuf:"bytes,99,opt,name=message_header_id,json=messageHeaderId,proto3,oneof"`
}

type Reference_MolecularSequenceId struct {
	MolecularSequenceId *ReferenceId `protobuf:"bytes,100,opt,name=molecular_sequence_id,json=molecularSequenceId,proto3,oneof"`
}

type Reference_NamingSystemId struct {
	NamingSystemId *ReferenceId `protobuf:"bytes,101,opt,name=naming_system_id,json=namingSystemId,proto3,oneof"`
}

type Reference_NutritionIntakeId struct {
	NutritionIntakeId *ReferenceId `protobuf:"bytes,177,opt,name=nutrition_intake_id,json=nutritionIntakeId,proto3,oneof"`
}

type Reference_NutritionOrderId struct {
	NutritionOrderId *ReferenceId `protobuf:"bytes,102,opt,name=nutrition_order_id,json=nutritionOrderId,proto3,oneof"`
}

type Reference_NutritionProductId struct {
	NutritionProductId *ReferenceId `protobuf:"bytes,178,opt,name=nutrition_product_id,json=nutritionProductId,proto3,oneof"`
}

type Reference_ObservationId struct {
	ObservationId *ReferenceId `protobuf:"bytes,103,opt,name=observation_id,json=observationId,proto3,oneof"`
}

type Reference_ObservationDefinitionId struct {
	ObservationDefinitionId *ReferenceId `protobuf:"bytes,104,opt,name=observation_definition_id,json=observationDefinitionId,proto3,oneof"`
}

type Reference_OperationDefinitionId struct {
	OperationDefinitionId *ReferenceId `protobuf:"bytes,105,opt,name=operation_definition_id,json=operationDefinitionId,proto3,oneof"`
}

type Reference_OperationOutcomeId struct {
	OperationOutcomeId *ReferenceId `protobuf:"bytes,106,opt,name=operation_outcome_id,json=operationOutcomeId,proto3,oneof"`
}

type Reference_OrganizationId struct {
	OrganizationId *ReferenceId `protobuf:"bytes,107,opt,name=organization_id,json=organizationId,proto3,oneof"`
}

type Reference_OrganizationAffiliationId struct {
	OrganizationAffiliationId *ReferenceId `protobuf:"bytes,108,opt,name=organization_affiliation_id,json=organizationAffiliationId,proto3,oneof"`
}

type Reference_PackagedProductDefinitionId struct {
	PackagedProductDefinitionId *ReferenceId `protobuf:"bytes,179,opt,name=packaged_product_definition_id,json=packagedProductDefinitionId,proto3,oneof"`
}

type Reference_ParametersId struct {
	ParametersId *ReferenceId `protobuf:"bytes,109,opt,name=parameters_id,json=parametersId,proto3,oneof"`
}

type Reference_PatientId struct {
	PatientId *ReferenceId `protobuf:"bytes,110,opt,name=patient_id,json=patientId,proto3,oneof"`
}

type Reference_PaymentNoticeId struct {
	PaymentNoticeId *ReferenceId `protobuf:"bytes,111,opt,name=payment_notice_id,json=paymentNoticeId,proto3,oneof"`
}

type Reference_PaymentReconciliationId struct {
	PaymentReconciliationId *ReferenceId `protobuf:"bytes,112,opt,name=payment_reconciliation_id,json=paymentReconciliationId,proto3,oneof"`
}

type Reference_PermissionId struct {
	PermissionId *ReferenceId `protobuf:"bytes,180,opt,name=permission_id,json=permissionId,proto3,oneof"`
}

type Reference_PersonId struct {
	PersonId *ReferenceId `protobuf:"bytes,113,opt,name=person_id,json=personId,proto3,oneof"`
}

type Reference_PlanDefinitionId struct {
	PlanDefinitionId *ReferenceId `protobuf:"bytes,114,opt,name=plan_definition_id,json=planDefinitionId,proto3,oneof"`
}

type Reference_PractitionerId struct {
	PractitionerId *ReferenceId `protobuf:"bytes,115,opt,name=practitioner_id,json=practitionerId,proto3,oneof"`
}

type Reference_PractitionerRoleId struct {
	PractitionerRoleId *ReferenceId `protobuf:"bytes,116,opt,name=practitioner_role_id,json=practitionerRoleId,proto3,oneof"`
}

type Reference_ProcedureId struct {
	ProcedureId *ReferenceId `protobuf:"bytes,117,opt,name=procedure_id,json=procedureId,proto3,oneof"`
}

type Reference_ProvenanceId struct {
	ProvenanceId *ReferenceId `protobuf:"bytes,118,opt,name=provenance_id,json=provenanceId,proto3,oneof"`
}

type Reference_QuestionnaireId struct {
	QuestionnaireId *ReferenceId `protobuf:"bytes,119,opt,name=questionnaire_id,json=questionnaireId,proto3,oneof"`
}

type Reference_QuestionnaireResponseId struct {
	QuestionnaireResponseId *ReferenceId `protobuf:"bytes,120,opt,name=questionnaire_response_id,json=questionnaireResponseId,proto3,oneof"`
}

type Reference_RegulatedAuthorizationId struct {
	RegulatedAuthorizationId *ReferenceId `protobuf:"bytes,181,opt,name=regulated_authorization_id,json=regulatedAuthorizationId,proto3,oneof"`
}

type Reference_RelatedPersonId struct {
	RelatedPersonId *ReferenceId `protobuf:"bytes,121,opt,name=related_person_id,json=relatedPersonId,proto3,oneof"`
}

type Reference_RequestOrchestrationId struct {
	RequestOrchestrationId *ReferenceId `protobuf:"bytes,182,opt,name=request_orchestration_id,json=requestOrchestrationId,proto3,oneof"`
}

type Reference_RequirementsId struct {
	RequirementsId *ReferenceId `protobuf:"bytes,183,opt,name=requirements_id,json=requirementsId,proto3,oneof"`
}

type Reference_ResearchStudyId struct {
	ResearchStudyId *ReferenceId `protobuf:"bytes,125,opt,name=research_study_id,json=researchStudyId,proto3,oneof"`
}

type Reference_ResearchSubjectId struct {
	ResearchSubjectId *ReferenceId `protobuf:"bytes,126,opt,name=research_subject_id,json=researchSubjectId,proto3,oneof"`
}

type Reference_RiskAssessmentId struct {
	RiskAssessmentId *ReferenceId `protobuf:"bytes,127,opt,name=risk_assessment_id,json=riskAssessmentId,proto3,oneof"`
}

type Reference_ScheduleId struct {
	ScheduleId *ReferenceId `protobuf:"bytes,129,opt,name=schedule_id,json=scheduleId,proto3,oneof"`
}

type Reference_SearchParameterId struct {
	SearchParameterId *ReferenceId `protobuf:"bytes,130,opt,name=search_parameter_id,json=searchParameterId,proto3,oneof"`
}

type Reference_ServiceRequestId struct {
	ServiceRequestId *ReferenceId `protobuf:"bytes,131,opt,name=service_request_id,json=serviceRequestId,proto3,oneof"`
}

type Reference_SlotId struct {
	SlotId *ReferenceId `protobuf:"bytes,132,opt,name=slot_id,json=slotId,proto3,oneof"`
}

type Reference_SpecimenId struct {
	SpecimenId *ReferenceId `protobuf:"bytes,133,opt,name=specimen_id,json=specimenId,proto3,oneof"`
}

type Reference_SpecimenDefinitionId struct {
	SpecimenDefinitionId *ReferenceId `protobuf:"bytes,134,opt,name=specimen_definition_id,json=specimenDefinitionId,proto3,oneof"`
}

type Reference_StructureDefinitionId struct {
	StructureDefinitionId *ReferenceId `protobuf:"bytes,135,opt,name=structure_definition_id,json=structureDefinitionId,proto3,oneof"`
}

type Reference_StructureMapId struct {
	StructureMapId *ReferenceId `protobuf:"bytes,136,opt,name=structure_map_id,json=structureMapId,proto3,oneof"`
}

type Reference_SubscriptionId struct {
	SubscriptionId *ReferenceId `protobuf:"bytes,137,opt,name=subscription_id,json=subscriptionId,proto3,oneof"`
}

type Reference_SubscriptionStatusId struct {
	SubscriptionStatusId *ReferenceId `protobuf:"bytes,184,opt,name=subscription_status_id,json=subscriptionStatusId,proto3,oneof"`
}

type Reference_SubscriptionTopicId struct {
	SubscriptionTopicId *ReferenceId `protobuf:"bytes,185,opt,name=subscription_topic_id,json=subscriptionTopicId,proto3,oneof"`
}

type Reference_SubstanceId struct {
	SubstanceId *ReferenceId `protobuf:"bytes,138,opt,name=substance_id,json=substanceId,proto3,oneof"`
}

type Reference_SubstanceDefinitionId struct {
	SubstanceDefinitionId *ReferenceId `protobuf:"bytes,186,opt,name=substance_definition_id,json=substanceDefinitionId,proto3,oneof"`
}

type Reference_SubstanceNucleicAcidId struct {
	SubstanceNucleicAcidId *ReferenceId `protobuf:"bytes,139,opt,name=substance_nucleic_acid_id,json=substanceNucleicAcidId,proto3,oneof"`
}

type Reference_SubstancePolymerId struct {
	SubstancePolymerId *ReferenceId `protobuf:"bytes,140,opt,name=substance_polymer_id,json=substancePolymerId,proto3,oneof"`
}

type Reference_SubstanceProteinId struct {
	SubstanceProteinId *ReferenceId `protobuf:"bytes,141,opt,name=substance_protein_id,json=substanceProteinId,proto3,oneof"`
}

type Reference_SubstanceReferenceInformationId struct {
	SubstanceReferenceInformationId *ReferenceId `protobuf:"bytes,142,opt,name=substance_reference_information_id,json=substanceReferenceInformationId,proto3,oneof"`
}

type Reference_SubstanceSourceMaterialId struct {
	SubstanceSourceMaterialId *ReferenceId `protobuf:"bytes,143,opt,name=substance_source_material_id,json=substanceSourceMaterialId,proto3,oneof"`
}

type Reference_SupplyDeliveryId struct {
	SupplyDeliveryId *ReferenceId `protobuf:"bytes,145,opt,name=supply_delivery_id,json=supplyDeliveryId,proto3,oneof"`
}

type Reference_SupplyRequestId struct {
	SupplyRequestId *ReferenceId `protobuf:"bytes,146,opt,name=supply_request_id,json=supplyRequestId,proto3,oneof"`
}

type Reference_TaskId struct {
	TaskId *ReferenceId `protobuf:"bytes,147,opt,name=task_id,json=taskId,proto3,oneof"`
}

type Reference_TerminologyCapabilitiesId struct {
	TerminologyCapabilitiesId *ReferenceId `protobuf:"bytes,148,opt,name=terminology_capabilities_id,json=terminologyCapabilitiesId,proto3,oneof"`
}

type Reference_TestPlanId struct {
	TestPlanId *ReferenceId `protobuf:"bytes,187,opt,name=test_plan_id,json=testPlanId,proto3,oneof"`
}

type Reference_TestReportId struct {
	TestReportId *ReferenceId `protobuf:"bytes,149,opt,name=test_report_id,json=testReportId,proto3,oneof"`
}

type Reference_TestScriptId struct {
	TestScriptId *ReferenceId `protobuf:"bytes,150,opt,name=test_script_id,json=testScriptId,proto3,oneof"`
}

type Reference_TransportId struct {
	TransportId *ReferenceId `protobuf:"bytes,188,opt,name=transport_id,json=transportId,proto3,oneof"`
}

type Reference_ValueSetId struct {
	ValueSetId *ReferenceId `protobuf:"bytes,151,opt,name=value_set_id,json=valueSetId,proto3,oneof"`
}

type Reference_VerificationResultId struct {
	VerificationResultId *ReferenceId `protobuf:"bytes,152,opt,name=verification_result_id,json=verificationResultId,proto3,oneof"`
}

type Reference_VisionPrescriptionId struct {
	VisionPrescriptionId *ReferenceId `protobuf:"bytes,153,opt,name=vision_prescription_id,json=visionPrescriptionId,proto3,oneof"`
}

func (*Reference_Uri) isReference_Reference() {}

func (*Reference_Fragment) isReference_Reference() {}

func (*Reference_ResourceId) isReference_Reference() {}

func (*Reference_AccountId) isReference_Reference() {}

func (*Reference_ActivityDefinitionId) isReference_Reference() {}

func (*Reference_ActorDefinitionId) isReference_Reference() {}

func (*Reference_AdministrableProductDefinitionId) isReference_Reference() {}

func (*Reference_AdverseEventId) isReference_Reference() {}

func (*Reference_AllergyIntoleranceId) isReference_Reference() {}

func (*Reference_AppointmentId) isReference_Reference() {}

func (*Reference_AppointmentResponseId) isReference_Reference() {}

func (*Reference_ArtifactAssessmentId) isReference_Reference() {}

func (*Reference_AuditEventId) isReference_Reference() {}

func (*Reference_BasicId) isReference_Reference() {}

func (*Reference_BinaryId) isReference_Reference() {}

func (*Reference_BiologicallyDerivedProductId) isReference_Reference() {}

func (*Reference_BiologicallyDerivedProductDispenseId) isReference_Reference() {}

func (*Reference_BodyStructureId) isReference_Reference() {}

func (*Reference_BundleId) isReference_Reference() {}

func (*Reference_CapabilityStatementId) isReference_Reference() {}

func (*Reference_CarePlanId) isReference_Reference() {}

func (*Reference_CareTeamId) isReference_Reference() {}

func (*Reference_ChargeItemId) isReference_Reference() {}

func (*Reference_ChargeItemDefinitionId) isReference_Reference() {}

func (*Reference_CitationId) isReference_Reference() {}

func (*Reference_ClaimId) isReference_Reference() {}

func (*Reference_ClaimResponseId) isReference_Reference() {}

func (*Reference_ClinicalImpressionId) isReference_Reference() {}

func (*Reference_ClinicalUseDefinitionId) isReference_Reference() {}

func (*Reference_CodeSystemId) isReference_Reference() {}

func (*Reference_CommunicationId) isReference_Reference() {}

func (*Reference_CommunicationRequestId) isReference_Reference() {}

func (*Reference_CompartmentDefinitionId) isReference_Reference() {}

func (*Reference_CompositionId) isReference_Reference() {}

func (*Reference_ConceptMapId) isReference_Reference() {}

func (*Reference_ConditionId) isReference_Reference() {}

func (*Reference_ConditionDefinitionId) isReference_Reference() {}

func (*Reference_ConsentId) isReference_Reference() {}

func (*Reference_ContractId) isReference_Reference() {}

func (*Reference_CoverageId) isReference_Reference() {}

func (*Reference_CoverageEligibilityRequestId) isReference_Reference() {}

func (*Reference_CoverageEligibilityResponseId) isReference_Reference() {}

func (*Reference_DetectedIssueId) isReference_Reference() {}

func (*Reference_DeviceId) isReference_Reference() {}

func (*Reference_DeviceAssociationId) isReference_Reference() {}

func (*Reference_DeviceDefinitionId) isReference_Reference() {}

func (*Reference_DeviceDispenseId) isReference_Reference() {}

func (*Reference_DeviceMetricId) isReference_Reference() {}

func (*Reference_DeviceRequestId) isReference_Reference() {}

func (*Reference_DeviceUsageId) isReference_Reference() {}

func (*Reference_DiagnosticReportId) isReference_Reference() {}

func (*Reference_DocumentReferenceId) isReference_Reference() {}

func (*Reference_EncounterId) isReference_Reference() {}

func (*Reference_EncounterHistoryId) isReference_Reference() {}

func (*Reference_EndpointId) isReference_Reference() {}

func (*Reference_EnrollmentRequestId) isReference_Reference() {}

func (*Reference_EnrollmentResponseId) isReference_Reference() {}

func (*Reference_EpisodeOfCareId) isReference_Reference() {}

func (*Reference_EventDefinitionId) isReference_Reference() {}

func (*Reference_EvidenceId) isReference_Reference() {}

func (*Reference_EvidenceReportId) isReference_Reference() {}

func (*Reference_EvidenceVariableId) isReference_Reference() {}

func (*Reference_ExampleScenarioId) isReference_Reference() {}

func (*Reference_ExplanationOfBenefitId) isReference_Reference() {}

func (*Reference_FamilyMemberHistoryId) isReference_Reference() {}

func (*Reference_FlagId) isReference_Reference() {}

func (*Reference_FormularyItemId) isReference_Reference() {}

func (*Reference_GenomicStudyId) isReference_Reference() {}

func (*Reference_GoalId) isReference_Reference() {}

func (*Reference_GraphDefinitionId) isReference_Reference() {}

func (*Reference_GroupId) isReference_Reference() {}

func (*Reference_GuidanceResponseId) isReference_Reference() {}

func (*Reference_HealthcareServiceId) isReference_Reference() {}

func (*Reference_ImagingSelectionId) isReference_Reference() {}

func (*Reference_ImagingStudyId) isReference_Reference() {}

func (*Reference_ImmunizationId) isReference_Reference() {}

func (*Reference_ImmunizationEvaluationId) isReference_Reference() {}

func (*Reference_ImmunizationRecommendationId) isReference_Reference() {}

func (*Reference_ImplementationGuideId) isReference_Reference() {}

func (*Reference_IngredientId) isReference_Reference() {}

func (*Reference_InsurancePlanId) isReference_Reference() {}

func (*Reference_InventoryItemId) isReference_Reference() {}

func (*Reference_InventoryReportId) isReference_Reference() {}

func (*Reference_InvoiceId) isReference_Reference() {}

func (*Reference_LibraryId) isReference_Reference() {}

func (*Reference_LinkageId) isReference_Reference() {}

func (*Reference_ListId) isReference_Reference() {}

func (*Reference_LocationId) isReference_Reference() {}

func (*Reference_ManufacturedItemDefinitionId) isReference_Reference() {}

func (*Reference_MeasureId) isReference_Reference() {}

func (*Reference_MeasureReportId) isReference_Reference() {}

func (*Reference_MedicationId) isReference_Reference() {}

func (*Reference_MedicationAdministrationId) isReference_Reference() {}

func (*Reference_MedicationDispenseId) isReference_Reference() {}

func (*Reference_MedicationKnowledgeId) isReference_Reference() {}

func (*Reference_MedicationRequestId) isReference_Reference() {}

func (*Reference_MedicationStatementId) isReference_Reference() {}

func (*Reference_MedicinalProductDefinitionId) isReference_Reference() {}

func (*Reference_MessageDefinitionId) isReference_Reference() {}

func (*Reference_MessageHeaderId) isReference_Reference() {}

func (*Reference_MolecularSequenceId) isReference_Reference() {}

func (*Reference_NamingSystemId) isReference_Reference() {}

func (*Reference_NutritionIntakeId) isReference_Reference() {}

func (*Reference_NutritionOrderId) isReference_Reference() {}

func (*Reference_NutritionProductId) isReference_Reference() {}

func (*Reference_ObservationId) isReference_Reference() {}

func (*Reference_ObservationDefinitionId) isReference_Reference() {}

func (*Reference_OperationDefinitionId) isReference_Reference() {}

func (*Reference_OperationOutcomeId) isReference_Reference() {}

func (*Reference_OrganizationId) isReference_Reference() {}

func (*Reference_OrganizationAffiliationId) isReference_Reference() {}

func (*Reference_PackagedProductDefinitionId) isReference_Reference() {}

func (*Reference_ParametersId) isReference_Reference() {}

func (*Reference_PatientId) isReference_Reference() {}

func (*Reference_PaymentNoticeId) isReference_Reference() {}

func (*Reference_PaymentReconciliationId) isReference_Reference() {}

func (*Reference_PermissionId) isReference_Reference() {}

func (*Reference_PersonId) isReference_Reference() {}

func (*Reference_PlanDefinitionId) isReference_Reference() {}

func (*Reference_PractitionerId) isReference_Reference() {}

func (*Reference_PractitionerRoleId) isReference_Reference() {}

func (*Reference_ProcedureId) isReference_Reference() {}

func (*Reference_ProvenanceId) isReference_Reference() {}

func (*Reference_QuestionnaireId) isReference_Reference() {}

func (*Reference_QuestionnaireResponseId) isReference_Reference() {}

func (*Reference_RegulatedAuthorizationId) isReference_Reference() {}

func (*Reference_RelatedPersonId) isReference_Reference() {}

func (*Reference_RequestOrchestrationId) isReference_Reference() {}

func (*Reference_RequirementsId) isReference_Reference() {}

func (*Reference_ResearchStudyId) isReference_Reference() {}

func (*Reference_ResearchSubjectId) isReference_Reference() {}

func (*Reference_RiskAssessmentId) isReference_Reference() {}

func (*Reference_ScheduleId) isReference_Reference() {}

func (*Reference_SearchParameterId) isReference_Reference() {}

func (*Reference_ServiceRequestId) isReference_Reference() {}

func (*Reference_SlotId) isReference_Reference() {}

func (*Reference_SpecimenId) isReference_Reference() {}

func (*Reference_SpecimenDefinitionId) isReference_Reference() {}

func (*Reference_StructureDefinitionId) isReference_Reference() {}

func (*Reference_StructureMapId) isReference_Reference() {}

func (*Reference_SubscriptionId) isReference_Reference() {}

func (*Reference_SubscriptionStatusId) isReference_Reference() {}

func (*Reference_SubscriptionTopicId) isReference_Reference() {}

func (*Reference_SubstanceId) isReference_Reference() {}

func (*Reference_SubstanceDefinitionId) isReference_Reference() {}

func (*Reference_SubstanceNucleicAcidId) isReference_Reference() {}

func (*Reference_SubstancePolymerId) isReference_Reference() {}

func (*Reference_SubstanceProteinId) isReference_Reference() {}

func (*Reference_SubstanceReferenceInformationId) isReference_Reference() {}

func (*Reference_SubstanceSourceMaterialId) isReference_Reference() {}

func (*Reference_SupplyDeliveryId) isReference_Reference() {}

func (*Reference_SupplyRequestId) isReference_Reference() {}

func (*Reference_TaskId) isReference_Reference() {}

func (*Reference_TerminologyCapabilitiesId) isReference_Reference() {}

func (*Reference_TestPlanId) isReference_Reference() {}

func (*Reference_TestReportId) isReference_Reference() {}

func (*Reference_TestScriptId) isReference_Reference() {}

func (*Reference_TransportId) isReference_Reference() {}

func (*Reference_ValueSetId) isReference_Reference() {}

func (*Reference_VerificationResultId) isReference_Reference() {}

func (*Reference_VisionPrescriptionId) isReference_Reference() {}

// Typed representation of relative references for the Reference.reference
// field. For instance, a JSON FHIR reference of 'Patient/1234' is represented
// in FhirProto as {patientId {value:'1234'} }, where patientId is a field of
// type ReferenceId.
type ReferenceId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the resource being referenced.
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// History version, if present.
	History *Id `protobuf:"bytes,2,opt,name=history,proto3" json:"history,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Additional Content defined by implementations
	Extension []*Extension `protobuf:"bytes,4,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ReferenceId) Reset() {
	*x = ReferenceId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceId) ProtoMessage() {}

func (x *ReferenceId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceId.ProtoReflect.Descriptor instead.
func (*ReferenceId) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{56}
}

func (x *ReferenceId) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ReferenceId) GetHistory() *Id {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *ReferenceId) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ReferenceId) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for RelatedArtifact.
// Related artifacts for a knowledge resource.
// See http://hl7.org/fhir/StructureDefinition/RelatedArtifact
type RelatedArtifact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension              `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Type      *RelatedArtifact_TypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Additional classifiers
	Classifier []*CodeableConcept `protobuf:"bytes,10,rep,name=classifier,proto3" json:"classifier,omitempty"`
	// Short label
	Label *String `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	// Brief description of the related artifact
	Display *String `protobuf:"bytes,5,opt,name=display,proto3" json:"display,omitempty"`
	// Bibliographic citation for the artifact
	Citation *Markdown `protobuf:"bytes,6,opt,name=citation,proto3" json:"citation,omitempty"`
	// What document is being referenced
	Document *Attachment `protobuf:"bytes,8,opt,name=document,proto3" json:"document,omitempty"`
	// What artifact is being referenced
	Resource *Canonical `protobuf:"bytes,9,opt,name=resource,proto3" json:"resource,omitempty"`
	// What artifact, if not a conformance resource
	ResourceReference *Reference                             `protobuf:"bytes,11,opt,name=resource_reference,json=resourceReference,proto3" json:"resource_reference,omitempty"`
	PublicationStatus *RelatedArtifact_PublicationStatusCode `protobuf:"bytes,12,opt,name=publication_status,json=publicationStatus,proto3" json:"publication_status,omitempty"`
	// Date of publication of the artifact being referred to
	PublicationDate *Date `protobuf:"bytes,13,opt,name=publication_date,json=publicationDate,proto3" json:"publication_date,omitempty"`
}

func (x *RelatedArtifact) Reset() {
	*x = RelatedArtifact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedArtifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedArtifact) ProtoMessage() {}

func (x *RelatedArtifact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedArtifact.ProtoReflect.Descriptor instead.
func (*RelatedArtifact) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{57}
}

func (x *RelatedArtifact) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RelatedArtifact) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *RelatedArtifact) GetType() *RelatedArtifact_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RelatedArtifact) GetClassifier() []*CodeableConcept {
	if x != nil {
		return x.Classifier
	}
	return nil
}

func (x *RelatedArtifact) GetLabel() *String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *RelatedArtifact) GetDisplay() *String {
	if x != nil {
		return x.Display
	}
	return nil
}

func (x *RelatedArtifact) GetCitation() *Markdown {
	if x != nil {
		return x.Citation
	}
	return nil
}

func (x *RelatedArtifact) GetDocument() *Attachment {
	if x != nil {
		return x.Document
	}
	return nil
}

func (x *RelatedArtifact) GetResource() *Canonical {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *RelatedArtifact) GetResourceReference() *Reference {
	if x != nil {
		return x.ResourceReference
	}
	return nil
}

func (x *RelatedArtifact) GetPublicationStatus() *RelatedArtifact_PublicationStatusCode {
	if x != nil {
		return x.PublicationStatus
	}
	return nil
}

func (x *RelatedArtifact) GetPublicationDate() *Date {
	if x != nil {
		return x.PublicationDate
	}
	return nil
}

// Auto-generated from StructureDefinition for SampledData.
// A series of measurements taken by a device.
// See http://hl7.org/fhir/StructureDefinition/SampledData
type SampledData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Zero value and units
	Origin *SimpleQuantity `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	// Number of intervalUnits between samples
	Interval     *Decimal                      `protobuf:"bytes,10,opt,name=interval,proto3" json:"interval,omitempty"`
	IntervalUnit *SampledData_IntervalUnitCode `protobuf:"bytes,11,opt,name=interval_unit,json=intervalUnit,proto3" json:"interval_unit,omitempty"`
	// Multiply data by this before adding to origin
	Factor *Decimal `protobuf:"bytes,5,opt,name=factor,proto3" json:"factor,omitempty"`
	// Lower limit of detection
	LowerLimit *Decimal `protobuf:"bytes,6,opt,name=lower_limit,json=lowerLimit,proto3" json:"lower_limit,omitempty"`
	// Upper limit of detection
	UpperLimit *Decimal `protobuf:"bytes,7,opt,name=upper_limit,json=upperLimit,proto3" json:"upper_limit,omitempty"`
	// Number of sample points at each time point
	Dimensions *PositiveInt `protobuf:"bytes,8,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Defines the codes used in the data
	CodeMap *Canonical `protobuf:"bytes,12,opt,name=code_map,json=codeMap,proto3" json:"code_map,omitempty"`
	// Offsets, typically in time, at which data values were taken
	Offsets *String `protobuf:"bytes,13,opt,name=offsets,proto3" json:"offsets,omitempty"`
	// Decimal values with spaces, or "E" | "U" | "L", or another code
	Data *String `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SampledData) Reset() {
	*x = SampledData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampledData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampledData) ProtoMessage() {}

func (x *SampledData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampledData.ProtoReflect.Descriptor instead.
func (*SampledData) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{58}
}

func (x *SampledData) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SampledData) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SampledData) GetOrigin() *SimpleQuantity {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *SampledData) GetInterval() *Decimal {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *SampledData) GetIntervalUnit() *SampledData_IntervalUnitCode {
	if x != nil {
		return x.IntervalUnit
	}
	return nil
}

func (x *SampledData) GetFactor() *Decimal {
	if x != nil {
		return x.Factor
	}
	return nil
}

func (x *SampledData) GetLowerLimit() *Decimal {
	if x != nil {
		return x.LowerLimit
	}
	return nil
}

func (x *SampledData) GetUpperLimit() *Decimal {
	if x != nil {
		return x.UpperLimit
	}
	return nil
}

func (x *SampledData) GetDimensions() *PositiveInt {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *SampledData) GetCodeMap() *Canonical {
	if x != nil {
		return x.CodeMap
	}
	return nil
}

func (x *SampledData) GetOffsets() *String {
	if x != nil {
		return x.Offsets
	}
	return nil
}

func (x *SampledData) GetData() *String {
	if x != nil {
		return x.Data
	}
	return nil
}

// Auto-generated from StructureDefinition for Signature.
// A Signature - XML DigSig, JWS, Graphical image of signature, etc.
// See http://hl7.org/fhir/StructureDefinition/Signature
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Indication of the reason the entity signed the object(s)
	Type []*Coding `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// When the signature was created
	When *Instant `protobuf:"bytes,4,opt,name=when,proto3" json:"when,omitempty"`
	// Who signed
	Who *Reference `protobuf:"bytes,5,opt,name=who,proto3" json:"who,omitempty"`
	// The party represented
	OnBehalfOf   *Reference                  `protobuf:"bytes,6,opt,name=on_behalf_of,json=onBehalfOf,proto3" json:"on_behalf_of,omitempty"`
	TargetFormat *Signature_TargetFormatCode `protobuf:"bytes,7,opt,name=target_format,json=targetFormat,proto3" json:"target_format,omitempty"`
	SigFormat    *Signature_SigFormatCode    `protobuf:"bytes,8,opt,name=sig_format,json=sigFormat,proto3" json:"sig_format,omitempty"`
	// The actual signature content (XML DigSig. JWS, picture, etc.)
	Data *Base64Binary `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{59}
}

func (x *Signature) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Signature) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Signature) GetType() []*Coding {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Signature) GetWhen() *Instant {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Signature) GetWho() *Reference {
	if x != nil {
		return x.Who
	}
	return nil
}

func (x *Signature) GetOnBehalfOf() *Reference {
	if x != nil {
		return x.OnBehalfOf
	}
	return nil
}

func (x *Signature) GetTargetFormat() *Signature_TargetFormatCode {
	if x != nil {
		return x.TargetFormat
	}
	return nil
}

func (x *Signature) GetSigFormat() *Signature_SigFormatCode {
	if x != nil {
		return x.SigFormat
	}
	return nil
}

func (x *Signature) GetData() *Base64Binary {
	if x != nil {
		return x.Data
	}
	return nil
}

// Auto-generated from StructureDefinition for SimpleQuantity.
// A fixed quantity (no comparator).
// See http://hl7.org/fhir/StructureDefinition/SimpleQuantity
type SimpleQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Numerical value (with implicit precision)
	Value *Decimal `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Unit representation
	Unit *String `protobuf:"bytes,5,opt,name=unit,proto3" json:"unit,omitempty"`
	// System that defines coded unit form
	System *Uri `protobuf:"bytes,6,opt,name=system,proto3" json:"system,omitempty"`
	// Coded form of the unit
	Code *Code `protobuf:"bytes,7,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *SimpleQuantity) Reset() {
	*x = SimpleQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleQuantity) ProtoMessage() {}

func (x *SimpleQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleQuantity.ProtoReflect.Descriptor instead.
func (*SimpleQuantity) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{60}
}

func (x *SimpleQuantity) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SimpleQuantity) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SimpleQuantity) GetValue() *Decimal {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SimpleQuantity) GetUnit() *String {
	if x != nil {
		return x.Unit
	}
	return nil
}

func (x *SimpleQuantity) GetSystem() *Uri {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *SimpleQuantity) GetCode() *Code {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for string.
// Primitive Type string.
// See http://hl7.org/fhir/StructureDefinition/string
type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for string
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{61}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *String) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *String) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for time.
// Primitive Type time.
// See http://hl7.org/fhir/StructureDefinition/time
type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The absolute time of the event as a Unix epoch in microseconds.
	ValueUs   int64          `protobuf:"varint,1,opt,name=value_us,json=valueUs,proto3" json:"value_us,omitempty"`
	Precision Time_Precision `protobuf:"varint,2,opt,name=precision,proto3,enum=google.fhir.r5.core.Time_Precision" json:"precision,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,4,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{62}
}

func (x *Time) GetValueUs() int64 {
	if x != nil {
		return x.ValueUs
	}
	return 0
}

func (x *Time) GetPrecision() Time_Precision {
	if x != nil {
		return x.Precision
	}
	return Time_PRECISION_UNSPECIFIED
}

func (x *Time) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Time) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for Timing.
// A timing schedule that specifies an event that may occur multiple times.
// See http://hl7.org/fhir/StructureDefinition/Timing
type Timing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Extensions that cannot be ignored even if unrecognized
	ModifierExtension []*Extension `protobuf:"bytes,3,rep,name=modifier_extension,json=modifierExtension,proto3" json:"modifier_extension,omitempty"`
	// When the event occurs
	Event  []*DateTime    `protobuf:"bytes,4,rep,name=event,proto3" json:"event,omitempty"`
	Repeat *Timing_Repeat `protobuf:"bytes,5,opt,name=repeat,proto3" json:"repeat,omitempty"`
	// C | BID | TID | QID | AM | PM | QD | QOD | +
	Code *CodeableConcept `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *Timing) Reset() {
	*x = Timing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing) ProtoMessage() {}

func (x *Timing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing.ProtoReflect.Descriptor instead.
func (*Timing) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{63}
}

func (x *Timing) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Timing) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Timing) GetModifierExtension() []*Extension {
	if x != nil {
		return x.ModifierExtension
	}
	return nil
}

func (x *Timing) GetEvent() []*DateTime {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Timing) GetRepeat() *Timing_Repeat {
	if x != nil {
		return x.Repeat
	}
	return nil
}

func (x *Timing) GetCode() *CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

// Auto-generated from StructureDefinition for TriggerDefinition.
// Defines an expected trigger for a module.
// See http://hl7.org/fhir/StructureDefinition/TriggerDefinition
type TriggerDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension                `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Type      *TriggerDefinition_TypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Name or URI that identifies the event
	Name *String `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Coded definition of the event
	Code *CodeableConcept `protobuf:"bytes,8,opt,name=code,proto3" json:"code,omitempty"`
	// What event
	SubscriptionTopic *Canonical                 `protobuf:"bytes,9,opt,name=subscription_topic,json=subscriptionTopic,proto3" json:"subscription_topic,omitempty"`
	Timing            *TriggerDefinition_TimingX `protobuf:"bytes,5,opt,name=timing,proto3" json:"timing,omitempty"`
	// Triggering data of the event (multiple = 'and')
	Data []*DataRequirement `protobuf:"bytes,6,rep,name=data,proto3" json:"data,omitempty"`
	// Whether the event triggers (boolean expression)
	Condition *Expression `protobuf:"bytes,7,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *TriggerDefinition) Reset() {
	*x = TriggerDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDefinition) ProtoMessage() {}

func (x *TriggerDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDefinition.ProtoReflect.Descriptor instead.
func (*TriggerDefinition) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{64}
}

func (x *TriggerDefinition) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TriggerDefinition) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *TriggerDefinition) GetType() *TriggerDefinition_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *TriggerDefinition) GetName() *String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TriggerDefinition) GetCode() *CodeableConcept {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *TriggerDefinition) GetSubscriptionTopic() *Canonical {
	if x != nil {
		return x.SubscriptionTopic
	}
	return nil
}

func (x *TriggerDefinition) GetTiming() *TriggerDefinition_TimingX {
	if x != nil {
		return x.Timing
	}
	return nil
}

func (x *TriggerDefinition) GetData() []*DataRequirement {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TriggerDefinition) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

// Auto-generated from StructureDefinition for unsignedInt.
// Primitive Type unsignedInt.
// See http://hl7.org/fhir/StructureDefinition/unsignedInt
type UnsignedInt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for unsignedInt
	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *UnsignedInt) Reset() {
	*x = UnsignedInt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsignedInt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsignedInt) ProtoMessage() {}

func (x *UnsignedInt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsignedInt.ProtoReflect.Descriptor instead.
func (*UnsignedInt) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{65}
}

func (x *UnsignedInt) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *UnsignedInt) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UnsignedInt) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for uri.
// Primitive Type uri.
// See http://hl7.org/fhir/StructureDefinition/uri
type Uri struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for uri
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Uri) Reset() {
	*x = Uri{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uri) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uri) ProtoMessage() {}

func (x *Uri) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uri.ProtoReflect.Descriptor instead.
func (*Uri) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{66}
}

func (x *Uri) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Uri) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Uri) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for url.
// Primitive Type url.
// See http://hl7.org/fhir/StructureDefinition/url
type Url struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for url
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Url) Reset() {
	*x = Url{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Url) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Url) ProtoMessage() {}

func (x *Url) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Url.ProtoReflect.Descriptor instead.
func (*Url) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{67}
}

func (x *Url) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Url) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Url) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for UsageContext.
// Describes the context of use for a conformance or knowledge resource.
// See http://hl7.org/fhir/StructureDefinition/UsageContext
type UsageContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Type of context being specified
	Code  *Coding              `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Value *UsageContext_ValueX `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UsageContext) Reset() {
	*x = UsageContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageContext) ProtoMessage() {}

func (x *UsageContext) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageContext.ProtoReflect.Descriptor instead.
func (*UsageContext) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{68}
}

func (x *UsageContext) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UsageContext) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *UsageContext) GetCode() *Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *UsageContext) GetValue() *UsageContext_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Auto-generated from StructureDefinition for uuid.
// Primitive Type uuid.
// See http://hl7.org/fhir/StructureDefinition/uuid
type Uuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primitive value for uuid
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Uuid) Reset() {
	*x = Uuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uuid) ProtoMessage() {}

func (x *Uuid) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uuid.ProtoReflect.Descriptor instead.
func (*Uuid) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{69}
}

func (x *Uuid) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Uuid) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Uuid) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Auto-generated from StructureDefinition for VirtualServiceDetail.
// Virtual Service Contact Details.
// See http://hl7.org/fhir/StructureDefinition/VirtualServiceDetail
type VirtualServiceDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Channel Type
	ChannelType *Coding                        `protobuf:"bytes,3,opt,name=channel_type,json=channelType,proto3" json:"channel_type,omitempty"`
	Address     *VirtualServiceDetail_AddressX `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// Address to see alternative connection details
	AdditionalInfo []*Url `protobuf:"bytes,5,rep,name=additional_info,json=additionalInfo,proto3" json:"additional_info,omitempty"`
	// Maximum number of participants supported by the virtual service
	MaxParticipants *PositiveInt `protobuf:"bytes,6,opt,name=max_participants,json=maxParticipants,proto3" json:"max_participants,omitempty"`
	// Session Key required by the virtual service
	SessionKey *String `protobuf:"bytes,7,opt,name=session_key,json=sessionKey,proto3" json:"session_key,omitempty"`
}

func (x *VirtualServiceDetail) Reset() {
	*x = VirtualServiceDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualServiceDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServiceDetail) ProtoMessage() {}

func (x *VirtualServiceDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServiceDetail.ProtoReflect.Descriptor instead.
func (*VirtualServiceDetail) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{70}
}

func (x *VirtualServiceDetail) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VirtualServiceDetail) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *VirtualServiceDetail) GetChannelType() *Coding {
	if x != nil {
		return x.ChannelType
	}
	return nil
}

func (x *VirtualServiceDetail) GetAddress() *VirtualServiceDetail_AddressX {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *VirtualServiceDetail) GetAdditionalInfo() []*Url {
	if x != nil {
		return x.AdditionalInfo
	}
	return nil
}

func (x *VirtualServiceDetail) GetMaxParticipants() *PositiveInt {
	if x != nil {
		return x.MaxParticipants
	}
	return nil
}

func (x *VirtualServiceDetail) GetSessionKey() *String {
	if x != nil {
		return x.SessionKey
	}
	return nil
}

// Auto-generated from StructureDefinition for xhtml.
// Primitive Type xhtml.
// See http://hl7.org/fhir/StructureDefinition/xhtml
type Xhtml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actual xhtml
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// xml:id (or equivalent in JSON)
	Id *String `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Xhtml) Reset() {
	*x = Xhtml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Xhtml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Xhtml) ProtoMessage() {}

func (x *Xhtml) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Xhtml.ProtoReflect.Descriptor instead.
func (*Xhtml) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{71}
}

func (x *Xhtml) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Xhtml) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

// home | work | temp | old | billing - purpose of this address
type Address_UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AddressUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.AddressUseCode_Value" json:"value,omitempty"`
	Id        *String                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Address_UseCode) Reset() {
	*x = Address_UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address_UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address_UseCode) ProtoMessage() {}

func (x *Address_UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address_UseCode.ProtoReflect.Descriptor instead.
func (*Address_UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Address_UseCode) GetValue() codes_go_proto.AddressUseCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AddressUseCode_Value(0)
}

func (x *Address_UseCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Address_UseCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// postal | physical | both
type Address_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AddressTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.AddressTypeCode_Value" json:"value,omitempty"`
	Id        *String                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Address_TypeCode) Reset() {
	*x = Address_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address_TypeCode) ProtoMessage() {}

func (x *Address_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address_TypeCode.ProtoReflect.Descriptor instead.
func (*Address_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Address_TypeCode) GetValue() codes_go_proto.AddressTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AddressTypeCode_Value(0)
}

func (x *Address_TypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Address_TypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// < | <= | >= | > | ad - how to understand the value
type Age_ComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuantityComparatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuantityComparatorCode_Value" json:"value,omitempty"`
	Id        *String                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Age_ComparatorCode) Reset() {
	*x = Age_ComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Age_ComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Age_ComparatorCode) ProtoMessage() {}

func (x *Age_ComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Age_ComparatorCode.ProtoReflect.Descriptor instead.
func (*Age_ComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Age_ComparatorCode) GetValue() codes_go_proto.QuantityComparatorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuantityComparatorCode_Value(0)
}

func (x *Age_ComparatorCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Age_ComparatorCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Individual responsible for the annotation
type Annotation_AuthorX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Annotation_AuthorX_Reference
	//	*Annotation_AuthorX_StringValue
	Choice isAnnotation_AuthorX_Choice `protobuf_oneof:"choice"`
}

func (x *Annotation_AuthorX) Reset() {
	*x = Annotation_AuthorX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Annotation_AuthorX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Annotation_AuthorX) ProtoMessage() {}

func (x *Annotation_AuthorX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Annotation_AuthorX.ProtoReflect.Descriptor instead.
func (*Annotation_AuthorX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{2, 0}
}

func (m *Annotation_AuthorX) GetChoice() isAnnotation_AuthorX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Annotation_AuthorX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*Annotation_AuthorX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *Annotation_AuthorX) GetStringValue() *String {
	if x, ok := x.GetChoice().(*Annotation_AuthorX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isAnnotation_AuthorX_Choice interface {
	isAnnotation_AuthorX_Choice()
}

type Annotation_AuthorX_Reference struct {
	Reference *Reference `protobuf:"bytes,1,opt,name=reference,proto3,oneof"`
}

type Annotation_AuthorX_StringValue struct {
	StringValue *String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*Annotation_AuthorX_Reference) isAnnotation_AuthorX_Choice() {}

func (*Annotation_AuthorX_StringValue) isAnnotation_AuthorX_Choice() {}

// Mime type of the content, with charset etc.
type Attachment_ContentTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	// This valueset is not enumerable, and so is represented as a string.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Attachment_ContentTypeCode) Reset() {
	*x = Attachment_ContentTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attachment_ContentTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attachment_ContentTypeCode) ProtoMessage() {}

func (x *Attachment_ContentTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attachment_ContentTypeCode.ProtoReflect.Descriptor instead.
func (*Attachment_ContentTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Attachment_ContentTypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Attachment_ContentTypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Attachment_ContentTypeCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Times the {item} is available
type Availability_AvailableTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension  []*Extension                                 `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	DaysOfWeek []*Availability_AvailableTime_DaysOfWeekCode `protobuf:"bytes,3,rep,name=days_of_week,json=daysOfWeek,proto3" json:"days_of_week,omitempty"`
	// Always available? i.e. 24 hour service
	AllDay *Boolean `protobuf:"bytes,4,opt,name=all_day,json=allDay,proto3" json:"all_day,omitempty"`
	// Opening time of day (ignored if allDay = true)
	AvailableStartTime *Time `protobuf:"bytes,5,opt,name=available_start_time,json=availableStartTime,proto3" json:"available_start_time,omitempty"`
	// Closing time of day (ignored if allDay = true)
	AvailableEndTime *Time `protobuf:"bytes,6,opt,name=available_end_time,json=availableEndTime,proto3" json:"available_end_time,omitempty"`
}

func (x *Availability_AvailableTime) Reset() {
	*x = Availability_AvailableTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Availability_AvailableTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availability_AvailableTime) ProtoMessage() {}

func (x *Availability_AvailableTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availability_AvailableTime.ProtoReflect.Descriptor instead.
func (*Availability_AvailableTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{4, 0}
}

func (x *Availability_AvailableTime) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Availability_AvailableTime) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Availability_AvailableTime) GetDaysOfWeek() []*Availability_AvailableTime_DaysOfWeekCode {
	if x != nil {
		return x.DaysOfWeek
	}
	return nil
}

func (x *Availability_AvailableTime) GetAllDay() *Boolean {
	if x != nil {
		return x.AllDay
	}
	return nil
}

func (x *Availability_AvailableTime) GetAvailableStartTime() *Time {
	if x != nil {
		return x.AvailableStartTime
	}
	return nil
}

func (x *Availability_AvailableTime) GetAvailableEndTime() *Time {
	if x != nil {
		return x.AvailableEndTime
	}
	return nil
}

// Not available during this time due to provided reason
type Availability_NotAvailableTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Reason presented to the user explaining why time not available
	Description *String `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Service not available during this period
	During *Period `protobuf:"bytes,4,opt,name=during,proto3" json:"during,omitempty"`
}

func (x *Availability_NotAvailableTime) Reset() {
	*x = Availability_NotAvailableTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Availability_NotAvailableTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availability_NotAvailableTime) ProtoMessage() {}

func (x *Availability_NotAvailableTime) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availability_NotAvailableTime.ProtoReflect.Descriptor instead.
func (*Availability_NotAvailableTime) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{4, 1}
}

func (x *Availability_NotAvailableTime) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Availability_NotAvailableTime) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Availability_NotAvailableTime) GetDescription() *String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *Availability_NotAvailableTime) GetDuring() *Period {
	if x != nil {
		return x.During
	}
	return nil
}

// mon | tue | wed | thu | fri | sat | sun
type Availability_AvailableTime_DaysOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DaysOfWeekCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.DaysOfWeekCode_Value" json:"value,omitempty"`
	Id        *String                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Availability_AvailableTime_DaysOfWeekCode) Reset() {
	*x = Availability_AvailableTime_DaysOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Availability_AvailableTime_DaysOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Availability_AvailableTime_DaysOfWeekCode) ProtoMessage() {}

func (x *Availability_AvailableTime_DaysOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Availability_AvailableTime_DaysOfWeekCode.ProtoReflect.Descriptor instead.
func (*Availability_AvailableTime_DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *Availability_AvailableTime_DaysOfWeekCode) GetValue() codes_go_proto.DaysOfWeekCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DaysOfWeekCode_Value(0)
}

func (x *Availability_AvailableTime_DaysOfWeekCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Availability_AvailableTime_DaysOfWeekCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// phone | fax | email | pager | url | sms | other
type ContactPoint_SystemCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ContactPointSystemCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ContactPointSystemCode_Value" json:"value,omitempty"`
	Id        *String                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContactPoint_SystemCode) Reset() {
	*x = ContactPoint_SystemCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPoint_SystemCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPoint_SystemCode) ProtoMessage() {}

func (x *ContactPoint_SystemCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPoint_SystemCode.ProtoReflect.Descriptor instead.
func (*ContactPoint_SystemCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ContactPoint_SystemCode) GetValue() codes_go_proto.ContactPointSystemCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ContactPointSystemCode_Value(0)
}

func (x *ContactPoint_SystemCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactPoint_SystemCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// home | work | temp | old | mobile - purpose of this contact point
type ContactPoint_UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ContactPointUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ContactPointUseCode_Value" json:"value,omitempty"`
	Id        *String                                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                             `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ContactPoint_UseCode) Reset() {
	*x = ContactPoint_UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPoint_UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPoint_UseCode) ProtoMessage() {}

func (x *ContactPoint_UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPoint_UseCode.ProtoReflect.Descriptor instead.
func (*ContactPoint_UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{16, 1}
}

func (x *ContactPoint_UseCode) GetValue() codes_go_proto.ContactPointUseCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ContactPointUseCode_Value(0)
}

func (x *ContactPoint_UseCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ContactPoint_UseCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// author | editor | reviewer | endorser
type Contributor_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ContributorTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ContributorTypeCode_Value" json:"value,omitempty"`
	Id        *String                                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                             `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Contributor_TypeCode) Reset() {
	*x = Contributor_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contributor_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contributor_TypeCode) ProtoMessage() {}

func (x *Contributor_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contributor_TypeCode.ProtoReflect.Descriptor instead.
func (*Contributor_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Contributor_TypeCode) GetValue() codes_go_proto.ContributorTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ContributorTypeCode_Value(0)
}

func (x *Contributor_TypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Contributor_TypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// < | <= | >= | > | ad - how to understand the value
type Count_ComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuantityComparatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuantityComparatorCode_Value" json:"value,omitempty"`
	Id        *String                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Count_ComparatorCode) Reset() {
	*x = Count_ComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Count_ComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Count_ComparatorCode) ProtoMessage() {}

func (x *Count_ComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Count_ComparatorCode.ProtoReflect.Descriptor instead.
func (*Count_ComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{18, 0}
}

func (x *Count_ComparatorCode) GetValue() codes_go_proto.QuantityComparatorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuantityComparatorCode_Value(0)
}

func (x *Count_ComparatorCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Count_ComparatorCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The type of the required data
type DataRequirement_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FHIRTypesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.FHIRTypesCode_Value" json:"value,omitempty"`
	Id        *String                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DataRequirement_TypeCode) Reset() {
	*x = DataRequirement_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_TypeCode) ProtoMessage() {}

func (x *DataRequirement_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_TypeCode.ProtoReflect.Descriptor instead.
func (*DataRequirement_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 0}
}

func (x *DataRequirement_TypeCode) GetValue() codes_go_proto.FHIRTypesCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FHIRTypesCode_Value(0)
}

func (x *DataRequirement_TypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement_TypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device
type DataRequirement_SubjectX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*DataRequirement_SubjectX_CodeableConcept
	//	*DataRequirement_SubjectX_Reference
	Choice isDataRequirement_SubjectX_Choice `protobuf_oneof:"choice"`
}

func (x *DataRequirement_SubjectX) Reset() {
	*x = DataRequirement_SubjectX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_SubjectX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_SubjectX) ProtoMessage() {}

func (x *DataRequirement_SubjectX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_SubjectX.ProtoReflect.Descriptor instead.
func (*DataRequirement_SubjectX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 1}
}

func (m *DataRequirement_SubjectX) GetChoice() isDataRequirement_SubjectX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *DataRequirement_SubjectX) GetCodeableConcept() *CodeableConcept {
	if x, ok := x.GetChoice().(*DataRequirement_SubjectX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *DataRequirement_SubjectX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*DataRequirement_SubjectX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isDataRequirement_SubjectX_Choice interface {
	isDataRequirement_SubjectX_Choice()
}

type DataRequirement_SubjectX_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type DataRequirement_SubjectX_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*DataRequirement_SubjectX_CodeableConcept) isDataRequirement_SubjectX_Choice() {}

func (*DataRequirement_SubjectX_Reference) isDataRequirement_SubjectX_Choice() {}

// What codes are expected
type DataRequirement_CodeFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// A code-valued attribute to filter on
	Path *String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// A coded (token) parameter to search on
	SearchParam *String `protobuf:"bytes,4,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
	// ValueSet for the filter
	ValueSet *Canonical `protobuf:"bytes,5,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
	// What code is expected
	Code []*Coding `protobuf:"bytes,6,rep,name=code,proto3" json:"code,omitempty"`
}

func (x *DataRequirement_CodeFilter) Reset() {
	*x = DataRequirement_CodeFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_CodeFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_CodeFilter) ProtoMessage() {}

func (x *DataRequirement_CodeFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_CodeFilter.ProtoReflect.Descriptor instead.
func (*DataRequirement_CodeFilter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 2}
}

func (x *DataRequirement_CodeFilter) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetPath() *String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetSearchParam() *String {
	if x != nil {
		return x.SearchParam
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetValueSet() *Canonical {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

func (x *DataRequirement_CodeFilter) GetCode() []*Coding {
	if x != nil {
		return x.Code
	}
	return nil
}

// What dates/date ranges are expected
type DataRequirement_DateFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// A date-valued attribute to filter on
	Path *String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// A date valued parameter to search on
	SearchParam *String                            `protobuf:"bytes,4,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
	Value       *DataRequirement_DateFilter_ValueX `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataRequirement_DateFilter) Reset() {
	*x = DataRequirement_DateFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_DateFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_DateFilter) ProtoMessage() {}

func (x *DataRequirement_DateFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_DateFilter.ProtoReflect.Descriptor instead.
func (*DataRequirement_DateFilter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 3}
}

func (x *DataRequirement_DateFilter) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement_DateFilter) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataRequirement_DateFilter) GetPath() *String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DataRequirement_DateFilter) GetSearchParam() *String {
	if x != nil {
		return x.SearchParam
	}
	return nil
}

func (x *DataRequirement_DateFilter) GetValue() *DataRequirement_DateFilter_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// What values are expected
type DataRequirement_ValueFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// An attribute to filter on
	Path *String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// A parameter to search on
	SearchParam *String                                     `protobuf:"bytes,4,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
	Comparator  *DataRequirement_ValueFilter_ComparatorCode `protobuf:"bytes,5,opt,name=comparator,proto3" json:"comparator,omitempty"`
	Value       *DataRequirement_ValueFilter_ValueX         `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataRequirement_ValueFilter) Reset() {
	*x = DataRequirement_ValueFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_ValueFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_ValueFilter) ProtoMessage() {}

func (x *DataRequirement_ValueFilter) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_ValueFilter.ProtoReflect.Descriptor instead.
func (*DataRequirement_ValueFilter) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 4}
}

func (x *DataRequirement_ValueFilter) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement_ValueFilter) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataRequirement_ValueFilter) GetPath() *String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DataRequirement_ValueFilter) GetSearchParam() *String {
	if x != nil {
		return x.SearchParam
	}
	return nil
}

func (x *DataRequirement_ValueFilter) GetComparator() *DataRequirement_ValueFilter_ComparatorCode {
	if x != nil {
		return x.Comparator
	}
	return nil
}

func (x *DataRequirement_ValueFilter) GetValue() *DataRequirement_ValueFilter_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Order of the results
type DataRequirement_Sort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The name of the attribute to perform the sort
	Path      *String                             `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Direction *DataRequirement_Sort_DirectionCode `protobuf:"bytes,4,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *DataRequirement_Sort) Reset() {
	*x = DataRequirement_Sort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_Sort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_Sort) ProtoMessage() {}

func (x *DataRequirement_Sort) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_Sort.ProtoReflect.Descriptor instead.
func (*DataRequirement_Sort) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 5}
}

func (x *DataRequirement_Sort) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement_Sort) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *DataRequirement_Sort) GetPath() *String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *DataRequirement_Sort) GetDirection() *DataRequirement_Sort_DirectionCode {
	if x != nil {
		return x.Direction
	}
	return nil
}

// The value of the filter, as a Period, DateTime, or Duration value
type DataRequirement_DateFilter_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*DataRequirement_DateFilter_ValueX_DateTime
	//	*DataRequirement_DateFilter_ValueX_Period
	//	*DataRequirement_DateFilter_ValueX_Duration
	Choice isDataRequirement_DateFilter_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *DataRequirement_DateFilter_ValueX) Reset() {
	*x = DataRequirement_DateFilter_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_DateFilter_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_DateFilter_ValueX) ProtoMessage() {}

func (x *DataRequirement_DateFilter_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_DateFilter_ValueX.ProtoReflect.Descriptor instead.
func (*DataRequirement_DateFilter_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 3, 0}
}

func (m *DataRequirement_DateFilter_ValueX) GetChoice() isDataRequirement_DateFilter_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *DataRequirement_DateFilter_ValueX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*DataRequirement_DateFilter_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *DataRequirement_DateFilter_ValueX) GetPeriod() *Period {
	if x, ok := x.GetChoice().(*DataRequirement_DateFilter_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *DataRequirement_DateFilter_ValueX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*DataRequirement_DateFilter_ValueX_Duration); ok {
		return x.Duration
	}
	return nil
}

type isDataRequirement_DateFilter_ValueX_Choice interface {
	isDataRequirement_DateFilter_ValueX_Choice()
}

type DataRequirement_DateFilter_ValueX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type DataRequirement_DateFilter_ValueX_Period struct {
	Period *Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type DataRequirement_DateFilter_ValueX_Duration struct {
	Duration *Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof"`
}

func (*DataRequirement_DateFilter_ValueX_DateTime) isDataRequirement_DateFilter_ValueX_Choice() {}

func (*DataRequirement_DateFilter_ValueX_Period) isDataRequirement_DateFilter_ValueX_Choice() {}

func (*DataRequirement_DateFilter_ValueX_Duration) isDataRequirement_DateFilter_ValueX_Choice() {}

// eq | gt | lt | ge | le | sa | eb
type DataRequirement_ValueFilter_ComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.ValueFilterComparatorValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ValueFilterComparatorValueSet_Value" json:"value,omitempty"`
	Id        *String                                                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DataRequirement_ValueFilter_ComparatorCode) Reset() {
	*x = DataRequirement_ValueFilter_ComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_ValueFilter_ComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_ValueFilter_ComparatorCode) ProtoMessage() {}

func (x *DataRequirement_ValueFilter_ComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_ValueFilter_ComparatorCode.ProtoReflect.Descriptor instead.
func (*DataRequirement_ValueFilter_ComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 4, 0}
}

func (x *DataRequirement_ValueFilter_ComparatorCode) GetValue() valuesets_go_proto.ValueFilterComparatorValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.ValueFilterComparatorValueSet_Value(0)
}

func (x *DataRequirement_ValueFilter_ComparatorCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement_ValueFilter_ComparatorCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The value of the filter, as a Period, DateTime, or Duration value
type DataRequirement_ValueFilter_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*DataRequirement_ValueFilter_ValueX_DateTime
	//	*DataRequirement_ValueFilter_ValueX_Period
	//	*DataRequirement_ValueFilter_ValueX_Duration
	Choice isDataRequirement_ValueFilter_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *DataRequirement_ValueFilter_ValueX) Reset() {
	*x = DataRequirement_ValueFilter_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_ValueFilter_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_ValueFilter_ValueX) ProtoMessage() {}

func (x *DataRequirement_ValueFilter_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_ValueFilter_ValueX.ProtoReflect.Descriptor instead.
func (*DataRequirement_ValueFilter_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 4, 1}
}

func (m *DataRequirement_ValueFilter_ValueX) GetChoice() isDataRequirement_ValueFilter_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *DataRequirement_ValueFilter_ValueX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*DataRequirement_ValueFilter_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *DataRequirement_ValueFilter_ValueX) GetPeriod() *Period {
	if x, ok := x.GetChoice().(*DataRequirement_ValueFilter_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *DataRequirement_ValueFilter_ValueX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*DataRequirement_ValueFilter_ValueX_Duration); ok {
		return x.Duration
	}
	return nil
}

type isDataRequirement_ValueFilter_ValueX_Choice interface {
	isDataRequirement_ValueFilter_ValueX_Choice()
}

type DataRequirement_ValueFilter_ValueX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,1,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type DataRequirement_ValueFilter_ValueX_Period struct {
	Period *Period `protobuf:"bytes,2,opt,name=period,proto3,oneof"`
}

type DataRequirement_ValueFilter_ValueX_Duration struct {
	Duration *Duration `protobuf:"bytes,3,opt,name=duration,proto3,oneof"`
}

func (*DataRequirement_ValueFilter_ValueX_DateTime) isDataRequirement_ValueFilter_ValueX_Choice() {}

func (*DataRequirement_ValueFilter_ValueX_Period) isDataRequirement_ValueFilter_ValueX_Choice() {}

func (*DataRequirement_ValueFilter_ValueX_Duration) isDataRequirement_ValueFilter_ValueX_Choice() {}

// ascending | descending
type DataRequirement_Sort_DirectionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.SortDirectionCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.SortDirectionCode_Value" json:"value,omitempty"`
	Id        *String                                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *DataRequirement_Sort_DirectionCode) Reset() {
	*x = DataRequirement_Sort_DirectionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataRequirement_Sort_DirectionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataRequirement_Sort_DirectionCode) ProtoMessage() {}

func (x *DataRequirement_Sort_DirectionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataRequirement_Sort_DirectionCode.ProtoReflect.Descriptor instead.
func (*DataRequirement_Sort_DirectionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{19, 5, 0}
}

func (x *DataRequirement_Sort_DirectionCode) GetValue() codes_go_proto.SortDirectionCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.SortDirectionCode_Value(0)
}

func (x *DataRequirement_Sort_DirectionCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DataRequirement_Sort_DirectionCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// < | <= | >= | > | ad - how to understand the value
type Distance_ComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuantityComparatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuantityComparatorCode_Value" json:"value,omitempty"`
	Id        *String                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Distance_ComparatorCode) Reset() {
	*x = Distance_ComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Distance_ComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Distance_ComparatorCode) ProtoMessage() {}

func (x *Distance_ComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Distance_ComparatorCode.ProtoReflect.Descriptor instead.
func (*Distance_ComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{24, 0}
}

func (x *Distance_ComparatorCode) GetValue() codes_go_proto.QuantityComparatorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuantityComparatorCode_Value(0)
}

func (x *Distance_ComparatorCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Distance_ComparatorCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Amount of medication administered, to be administered or typical amount to
// be administered
type Dosage_DoseAndRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// The kind of dose or rate specified
	Type *CodeableConcept          `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Dose *Dosage_DoseAndRate_DoseX `protobuf:"bytes,4,opt,name=dose,proto3" json:"dose,omitempty"`
	Rate *Dosage_DoseAndRate_RateX `protobuf:"bytes,5,opt,name=rate,proto3" json:"rate,omitempty"`
}

func (x *Dosage_DoseAndRate) Reset() {
	*x = Dosage_DoseAndRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dosage_DoseAndRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dosage_DoseAndRate) ProtoMessage() {}

func (x *Dosage_DoseAndRate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dosage_DoseAndRate.ProtoReflect.Descriptor instead.
func (*Dosage_DoseAndRate) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{25, 0}
}

func (x *Dosage_DoseAndRate) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Dosage_DoseAndRate) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Dosage_DoseAndRate) GetType() *CodeableConcept {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Dosage_DoseAndRate) GetDose() *Dosage_DoseAndRate_DoseX {
	if x != nil {
		return x.Dose
	}
	return nil
}

func (x *Dosage_DoseAndRate) GetRate() *Dosage_DoseAndRate_RateX {
	if x != nil {
		return x.Rate
	}
	return nil
}

// Amount of medication per dose
type Dosage_DoseAndRate_DoseX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Dosage_DoseAndRate_DoseX_Range
	//	*Dosage_DoseAndRate_DoseX_Quantity
	Choice isDosage_DoseAndRate_DoseX_Choice `protobuf_oneof:"choice"`
}

func (x *Dosage_DoseAndRate_DoseX) Reset() {
	*x = Dosage_DoseAndRate_DoseX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dosage_DoseAndRate_DoseX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dosage_DoseAndRate_DoseX) ProtoMessage() {}

func (x *Dosage_DoseAndRate_DoseX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dosage_DoseAndRate_DoseX.ProtoReflect.Descriptor instead.
func (*Dosage_DoseAndRate_DoseX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{25, 0, 0}
}

func (m *Dosage_DoseAndRate_DoseX) GetChoice() isDosage_DoseAndRate_DoseX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Dosage_DoseAndRate_DoseX) GetRange() *Range {
	if x, ok := x.GetChoice().(*Dosage_DoseAndRate_DoseX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Dosage_DoseAndRate_DoseX) GetQuantity() *SimpleQuantity {
	if x, ok := x.GetChoice().(*Dosage_DoseAndRate_DoseX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isDosage_DoseAndRate_DoseX_Choice interface {
	isDosage_DoseAndRate_DoseX_Choice()
}

type Dosage_DoseAndRate_DoseX_Range struct {
	Range *Range `protobuf:"bytes,1,opt,name=range,proto3,oneof"`
}

type Dosage_DoseAndRate_DoseX_Quantity struct {
	Quantity *SimpleQuantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

func (*Dosage_DoseAndRate_DoseX_Range) isDosage_DoseAndRate_DoseX_Choice() {}

func (*Dosage_DoseAndRate_DoseX_Quantity) isDosage_DoseAndRate_DoseX_Choice() {}

// Amount of medication per unit of time
type Dosage_DoseAndRate_RateX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Dosage_DoseAndRate_RateX_Ratio
	//	*Dosage_DoseAndRate_RateX_Range
	//	*Dosage_DoseAndRate_RateX_Quantity
	Choice isDosage_DoseAndRate_RateX_Choice `protobuf_oneof:"choice"`
}

func (x *Dosage_DoseAndRate_RateX) Reset() {
	*x = Dosage_DoseAndRate_RateX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dosage_DoseAndRate_RateX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dosage_DoseAndRate_RateX) ProtoMessage() {}

func (x *Dosage_DoseAndRate_RateX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dosage_DoseAndRate_RateX.ProtoReflect.Descriptor instead.
func (*Dosage_DoseAndRate_RateX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{25, 0, 1}
}

func (m *Dosage_DoseAndRate_RateX) GetChoice() isDosage_DoseAndRate_RateX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Dosage_DoseAndRate_RateX) GetRatio() *Ratio {
	if x, ok := x.GetChoice().(*Dosage_DoseAndRate_RateX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Dosage_DoseAndRate_RateX) GetRange() *Range {
	if x, ok := x.GetChoice().(*Dosage_DoseAndRate_RateX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Dosage_DoseAndRate_RateX) GetQuantity() *SimpleQuantity {
	if x, ok := x.GetChoice().(*Dosage_DoseAndRate_RateX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isDosage_DoseAndRate_RateX_Choice interface {
	isDosage_DoseAndRate_RateX_Choice()
}

type Dosage_DoseAndRate_RateX_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,1,opt,name=ratio,proto3,oneof"`
}

type Dosage_DoseAndRate_RateX_Range struct {
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type Dosage_DoseAndRate_RateX_Quantity struct {
	Quantity *SimpleQuantity `protobuf:"bytes,3,opt,name=quantity,proto3,oneof"`
}

func (*Dosage_DoseAndRate_RateX_Ratio) isDosage_DoseAndRate_RateX_Choice() {}

func (*Dosage_DoseAndRate_RateX_Range) isDosage_DoseAndRate_RateX_Choice() {}

func (*Dosage_DoseAndRate_RateX_Quantity) isDosage_DoseAndRate_RateX_Choice() {}

// < | <= | >= | > | ad - how to understand the value
type Duration_ComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuantityComparatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuantityComparatorCode_Value" json:"value,omitempty"`
	Id        *String                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Duration_ComparatorCode) Reset() {
	*x = Duration_ComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duration_ComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration_ComparatorCode) ProtoMessage() {}

func (x *Duration_ComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration_ComparatorCode.ProtoReflect.Descriptor instead.
func (*Duration_ComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{26, 0}
}

func (x *Duration_ComparatorCode) GetValue() codes_go_proto.QuantityComparatorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuantityComparatorCode_Value(0)
}

func (x *Duration_ComparatorCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Duration_ComparatorCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// xmlAttr | xmlText | typeAttr | cdaText | xhtml
type ElementDefinition_RepresentationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PropertyRepresentationCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.PropertyRepresentationCode_Value" json:"value,omitempty"`
	Id        *String                                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                    `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ElementDefinition_RepresentationCode) Reset() {
	*x = ElementDefinition_RepresentationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_RepresentationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_RepresentationCode) ProtoMessage() {}

func (x *ElementDefinition_RepresentationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_RepresentationCode.ProtoReflect.Descriptor instead.
func (*ElementDefinition_RepresentationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 0}
}

func (x *ElementDefinition_RepresentationCode) GetValue() codes_go_proto.PropertyRepresentationCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PropertyRepresentationCode_Value(0)
}

func (x *ElementDefinition_RepresentationCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_RepresentationCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// This element is sliced - slices follow
type ElementDefinition_Slicing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension     []*Extension                               `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Discriminator []*ElementDefinition_Slicing_Discriminator `protobuf:"bytes,3,rep,name=discriminator,proto3" json:"discriminator,omitempty"`
	// Text description of how slicing works (or not)
	Description *String `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	// If elements must be in same order as slices
	Ordered *Boolean                             `protobuf:"bytes,5,opt,name=ordered,proto3" json:"ordered,omitempty"`
	Rules   *ElementDefinition_Slicing_RulesCode `protobuf:"bytes,6,opt,name=rules,proto3" json:"rules,omitempty"`
}

func (x *ElementDefinition_Slicing) Reset() {
	*x = ElementDefinition_Slicing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Slicing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Slicing) ProtoMessage() {}

func (x *ElementDefinition_Slicing) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Slicing.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Slicing) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 1}
}

func (x *ElementDefinition_Slicing) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetDiscriminator() []*ElementDefinition_Slicing_Discriminator {
	if x != nil {
		return x.Discriminator
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetDescription() *String {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetOrdered() *Boolean {
	if x != nil {
		return x.Ordered
	}
	return nil
}

func (x *ElementDefinition_Slicing) GetRules() *ElementDefinition_Slicing_RulesCode {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Base definition information for tools
type ElementDefinition_Base struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Path that identifies the base element
	Path *String `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	// Min cardinality of the base element
	Min *UnsignedInt `protobuf:"bytes,4,opt,name=min,proto3" json:"min,omitempty"`
	// Max cardinality of the base element
	Max *String `protobuf:"bytes,5,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *ElementDefinition_Base) Reset() {
	*x = ElementDefinition_Base{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Base) ProtoMessage() {}

func (x *ElementDefinition_Base) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Base.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Base) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 2}
}

func (x *ElementDefinition_Base) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Base) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Base) GetPath() *String {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ElementDefinition_Base) GetMin() *UnsignedInt {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *ElementDefinition_Base) GetMax() *String {
	if x != nil {
		return x.Max
	}
	return nil
}

// Data type and Profile for this element
type ElementDefinition_TypeRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Data type or Resource (reference to definition)
	Code *Uri `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// Profiles (StructureDefinition or IG) - one must apply
	Profile []*Canonical `protobuf:"bytes,4,rep,name=profile,proto3" json:"profile,omitempty"`
	// Profile (StructureDefinition or IG) on the Reference/canonical target -
	// one must apply
	TargetProfile []*Canonical                                 `protobuf:"bytes,5,rep,name=target_profile,json=targetProfile,proto3" json:"target_profile,omitempty"`
	Aggregation   []*ElementDefinition_TypeRef_AggregationCode `protobuf:"bytes,6,rep,name=aggregation,proto3" json:"aggregation,omitempty"`
	Versioning    *ElementDefinition_TypeRef_VersioningCode    `protobuf:"bytes,7,opt,name=versioning,proto3" json:"versioning,omitempty"`
}

func (x *ElementDefinition_TypeRef) Reset() {
	*x = ElementDefinition_TypeRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_TypeRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_TypeRef) ProtoMessage() {}

func (x *ElementDefinition_TypeRef) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_TypeRef.ProtoReflect.Descriptor instead.
func (*ElementDefinition_TypeRef) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 3}
}

func (x *ElementDefinition_TypeRef) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetCode() *Uri {
	if x != nil {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetProfile() []*Canonical {
	if x != nil {
		return x.Profile
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetTargetProfile() []*Canonical {
	if x != nil {
		return x.TargetProfile
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetAggregation() []*ElementDefinition_TypeRef_AggregationCode {
	if x != nil {
		return x.Aggregation
	}
	return nil
}

func (x *ElementDefinition_TypeRef) GetVersioning() *ElementDefinition_TypeRef_VersioningCode {
	if x != nil {
		return x.Versioning
	}
	return nil
}

// Specified value if missing from instance
type ElementDefinition_DefaultValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ElementDefinition_DefaultValueX_Base64Binary
	//	*ElementDefinition_DefaultValueX_Boolean
	//	*ElementDefinition_DefaultValueX_Canonical
	//	*ElementDefinition_DefaultValueX_Code
	//	*ElementDefinition_DefaultValueX_Date
	//	*ElementDefinition_DefaultValueX_DateTime
	//	*ElementDefinition_DefaultValueX_Decimal
	//	*ElementDefinition_DefaultValueX_Id
	//	*ElementDefinition_DefaultValueX_Instant
	//	*ElementDefinition_DefaultValueX_Integer
	//	*ElementDefinition_DefaultValueX_Integer64
	//	*ElementDefinition_DefaultValueX_Markdown
	//	*ElementDefinition_DefaultValueX_Oid
	//	*ElementDefinition_DefaultValueX_PositiveInt
	//	*ElementDefinition_DefaultValueX_StringValue
	//	*ElementDefinition_DefaultValueX_Time
	//	*ElementDefinition_DefaultValueX_UnsignedInt
	//	*ElementDefinition_DefaultValueX_Uri
	//	*ElementDefinition_DefaultValueX_Url
	//	*ElementDefinition_DefaultValueX_Uuid
	//	*ElementDefinition_DefaultValueX_Address
	//	*ElementDefinition_DefaultValueX_Age
	//	*ElementDefinition_DefaultValueX_Annotation
	//	*ElementDefinition_DefaultValueX_Attachment
	//	*ElementDefinition_DefaultValueX_CodeableConcept
	//	*ElementDefinition_DefaultValueX_CodeableReference
	//	*ElementDefinition_DefaultValueX_Coding
	//	*ElementDefinition_DefaultValueX_ContactPoint
	//	*ElementDefinition_DefaultValueX_Count
	//	*ElementDefinition_DefaultValueX_Distance
	//	*ElementDefinition_DefaultValueX_Duration
	//	*ElementDefinition_DefaultValueX_HumanName
	//	*ElementDefinition_DefaultValueX_Identifier
	//	*ElementDefinition_DefaultValueX_Money
	//	*ElementDefinition_DefaultValueX_Period
	//	*ElementDefinition_DefaultValueX_Quantity
	//	*ElementDefinition_DefaultValueX_Range
	//	*ElementDefinition_DefaultValueX_Ratio
	//	*ElementDefinition_DefaultValueX_RatioRange
	//	*ElementDefinition_DefaultValueX_Reference
	//	*ElementDefinition_DefaultValueX_SampledData
	//	*ElementDefinition_DefaultValueX_Signature
	//	*ElementDefinition_DefaultValueX_Timing
	//	*ElementDefinition_DefaultValueX_ContactDetail
	//	*ElementDefinition_DefaultValueX_DataRequirement
	//	*ElementDefinition_DefaultValueX_Expression
	//	*ElementDefinition_DefaultValueX_ParameterDefinition
	//	*ElementDefinition_DefaultValueX_RelatedArtifact
	//	*ElementDefinition_DefaultValueX_TriggerDefinition
	//	*ElementDefinition_DefaultValueX_UsageContext
	//	*ElementDefinition_DefaultValueX_Availability
	//	*ElementDefinition_DefaultValueX_ExtendedContactDetail
	//	*ElementDefinition_DefaultValueX_Dosage
	//	*ElementDefinition_DefaultValueX_Meta
	Choice isElementDefinition_DefaultValueX_Choice `protobuf_oneof:"choice"`
}

func (x *ElementDefinition_DefaultValueX) Reset() {
	*x = ElementDefinition_DefaultValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_DefaultValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_DefaultValueX) ProtoMessage() {}

func (x *ElementDefinition_DefaultValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_DefaultValueX.ProtoReflect.Descriptor instead.
func (*ElementDefinition_DefaultValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 4}
}

func (m *ElementDefinition_DefaultValueX) GetChoice() isElementDefinition_DefaultValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetBase64Binary() *Base64Binary {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetBoolean() *Boolean {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetCanonical() *Canonical {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetCode() *Code {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetDate() *Date {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetDecimal() *Decimal {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetId() *Id {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetInstant() *Instant {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetInteger() *Integer {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetInteger64() *Integer64 {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Integer64); ok {
		return x.Integer64
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetMarkdown() *Markdown {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetOid() *Oid {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetPositiveInt() *PositiveInt {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetStringValue() *String {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetTime() *Time {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetUnsignedInt() *UnsignedInt {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetUri() *Uri {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetUrl() *Url {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Url); ok {
		return x.Url
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetUuid() *Uuid {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetAddress() *Address {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetAge() *Age {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetAnnotation() *Annotation {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetAttachment() *Attachment {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetCodeableConcept() *CodeableConcept {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetCodeableReference() *CodeableReference {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_CodeableReference); ok {
		return x.CodeableReference
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetCoding() *Coding {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetContactPoint() *ContactPoint {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetCount() *Count {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetDistance() *Distance {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetHumanName() *HumanName {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetIdentifier() *Identifier {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetMoney() *Money {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetPeriod() *Period {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetQuantity() *Quantity {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetRange() *Range {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetRatio() *Ratio {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetRatioRange() *RatioRange {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_RatioRange); ok {
		return x.RatioRange
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetSampledData() *SampledData {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetSignature() *Signature {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetTiming() *Timing {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetContactDetail() *ContactDetail {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_ContactDetail); ok {
		return x.ContactDetail
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetDataRequirement() *DataRequirement {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_DataRequirement); ok {
		return x.DataRequirement
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetExpression() *Expression {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetParameterDefinition() *ParameterDefinition {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_ParameterDefinition); ok {
		return x.ParameterDefinition
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetRelatedArtifact() *RelatedArtifact {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_RelatedArtifact); ok {
		return x.RelatedArtifact
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetTriggerDefinition() *TriggerDefinition {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_TriggerDefinition); ok {
		return x.TriggerDefinition
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetUsageContext() *UsageContext {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_UsageContext); ok {
		return x.UsageContext
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetAvailability() *Availability {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Availability); ok {
		return x.Availability
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetExtendedContactDetail() *ExtendedContactDetail {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_ExtendedContactDetail); ok {
		return x.ExtendedContactDetail
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetDosage() *Dosage {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Dosage); ok {
		return x.Dosage
	}
	return nil
}

func (x *ElementDefinition_DefaultValueX) GetMeta() *Meta {
	if x, ok := x.GetChoice().(*ElementDefinition_DefaultValueX_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_DefaultValueX_Choice interface {
	isElementDefinition_DefaultValueX_Choice()
}

type ElementDefinition_DefaultValueX_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Canonical struct {
	Canonical *Canonical `protobuf:"bytes,3,opt,name=canonical,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Code struct {
	Code *Code `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Date struct {
	Date *Date `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,7,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Id struct {
	Id *Id `protobuf:"bytes,8,opt,name=id,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Instant struct {
	Instant *Instant `protobuf:"bytes,9,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Integer struct {
	Integer *Integer `protobuf:"bytes,10,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Integer64 struct {
	Integer64 *Integer64 `protobuf:"bytes,51,opt,name=integer64,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,11,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Oid struct {
	Oid *Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,13,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_StringValue struct {
	StringValue *String `protobuf:"bytes,14,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Time struct {
	Time *Time `protobuf:"bytes,15,opt,name=time,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,16,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Uri struct {
	Uri *Uri `protobuf:"bytes,17,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Url struct {
	Url *Url `protobuf:"bytes,18,opt,name=url,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Uuid struct {
	Uuid *Uuid `protobuf:"bytes,19,opt,name=uuid,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Address struct {
	Address *Address `protobuf:"bytes,20,opt,name=address,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Age struct {
	Age *Age `protobuf:"bytes,21,opt,name=age,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,22,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,23,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,24,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_CodeableReference struct {
	CodeableReference *CodeableReference `protobuf:"bytes,52,opt,name=codeable_reference,json=codeableReference,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Coding struct {
	Coding *Coding `protobuf:"bytes,25,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,26,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Count struct {
	Count *Count `protobuf:"bytes,27,opt,name=count,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Distance struct {
	Distance *Distance `protobuf:"bytes,28,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Duration struct {
	Duration *Duration `protobuf:"bytes,29,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,30,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,31,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Money struct {
	Money *Money `protobuf:"bytes,32,opt,name=money,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Period struct {
	Period *Period `protobuf:"bytes,33,opt,name=period,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,34,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Range struct {
	Range *Range `protobuf:"bytes,35,opt,name=range,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,36,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_RatioRange struct {
	RatioRange *RatioRange `protobuf:"bytes,53,opt,name=ratio_range,json=ratioRange,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Reference struct {
	Reference *Reference `protobuf:"bytes,37,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,38,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Signature struct {
	Signature *Signature `protobuf:"bytes,39,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Timing struct {
	Timing *Timing `protobuf:"bytes,40,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_ContactDetail struct {
	ContactDetail *ContactDetail `protobuf:"bytes,41,opt,name=contact_detail,json=contactDetail,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_DataRequirement struct {
	DataRequirement *DataRequirement `protobuf:"bytes,43,opt,name=data_requirement,json=dataRequirement,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Expression struct {
	Expression *Expression `protobuf:"bytes,44,opt,name=expression,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_ParameterDefinition struct {
	ParameterDefinition *ParameterDefinition `protobuf:"bytes,45,opt,name=parameter_definition,json=parameterDefinition,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_RelatedArtifact struct {
	RelatedArtifact *RelatedArtifact `protobuf:"bytes,46,opt,name=related_artifact,json=relatedArtifact,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_TriggerDefinition struct {
	TriggerDefinition *TriggerDefinition `protobuf:"bytes,47,opt,name=trigger_definition,json=triggerDefinition,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_UsageContext struct {
	UsageContext *UsageContext `protobuf:"bytes,48,opt,name=usage_context,json=usageContext,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Availability struct {
	Availability *Availability `protobuf:"bytes,54,opt,name=availability,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_ExtendedContactDetail struct {
	ExtendedContactDetail *ExtendedContactDetail `protobuf:"bytes,55,opt,name=extended_contact_detail,json=extendedContactDetail,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Dosage struct {
	Dosage *Dosage `protobuf:"bytes,49,opt,name=dosage,proto3,oneof"`
}

type ElementDefinition_DefaultValueX_Meta struct {
	Meta *Meta `protobuf:"bytes,50,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_DefaultValueX_Base64Binary) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Boolean) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Canonical) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Code) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Date) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_DateTime) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Decimal) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Id) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Instant) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Integer) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Integer64) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Markdown) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Oid) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_PositiveInt) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_StringValue) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Time) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_UnsignedInt) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Uri) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Url) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Uuid) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Address) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Age) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Annotation) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Attachment) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_CodeableConcept) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_CodeableReference) isElementDefinition_DefaultValueX_Choice() {
}

func (*ElementDefinition_DefaultValueX_Coding) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_ContactPoint) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Count) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Distance) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Duration) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_HumanName) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Identifier) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Money) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Period) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Quantity) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Range) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Ratio) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_RatioRange) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Reference) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_SampledData) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Signature) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Timing) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_ContactDetail) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_DataRequirement) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Expression) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_ParameterDefinition) isElementDefinition_DefaultValueX_Choice() {
}

func (*ElementDefinition_DefaultValueX_RelatedArtifact) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_TriggerDefinition) isElementDefinition_DefaultValueX_Choice() {
}

func (*ElementDefinition_DefaultValueX_UsageContext) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Availability) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_ExtendedContactDetail) isElementDefinition_DefaultValueX_Choice() {
}

func (*ElementDefinition_DefaultValueX_Dosage) isElementDefinition_DefaultValueX_Choice() {}

func (*ElementDefinition_DefaultValueX_Meta) isElementDefinition_DefaultValueX_Choice() {}

// Value must be exactly this
type ElementDefinition_FixedX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ElementDefinition_FixedX_Base64Binary
	//	*ElementDefinition_FixedX_Boolean
	//	*ElementDefinition_FixedX_Canonical
	//	*ElementDefinition_FixedX_Code
	//	*ElementDefinition_FixedX_Date
	//	*ElementDefinition_FixedX_DateTime
	//	*ElementDefinition_FixedX_Decimal
	//	*ElementDefinition_FixedX_Id
	//	*ElementDefinition_FixedX_Instant
	//	*ElementDefinition_FixedX_Integer
	//	*ElementDefinition_FixedX_Integer64
	//	*ElementDefinition_FixedX_Markdown
	//	*ElementDefinition_FixedX_Oid
	//	*ElementDefinition_FixedX_PositiveInt
	//	*ElementDefinition_FixedX_StringValue
	//	*ElementDefinition_FixedX_Time
	//	*ElementDefinition_FixedX_UnsignedInt
	//	*ElementDefinition_FixedX_Uri
	//	*ElementDefinition_FixedX_Url
	//	*ElementDefinition_FixedX_Uuid
	//	*ElementDefinition_FixedX_Address
	//	*ElementDefinition_FixedX_Age
	//	*ElementDefinition_FixedX_Annotation
	//	*ElementDefinition_FixedX_Attachment
	//	*ElementDefinition_FixedX_CodeableConcept
	//	*ElementDefinition_FixedX_CodeableReference
	//	*ElementDefinition_FixedX_Coding
	//	*ElementDefinition_FixedX_ContactPoint
	//	*ElementDefinition_FixedX_Count
	//	*ElementDefinition_FixedX_Distance
	//	*ElementDefinition_FixedX_Duration
	//	*ElementDefinition_FixedX_HumanName
	//	*ElementDefinition_FixedX_Identifier
	//	*ElementDefinition_FixedX_Money
	//	*ElementDefinition_FixedX_Period
	//	*ElementDefinition_FixedX_Quantity
	//	*ElementDefinition_FixedX_Range
	//	*ElementDefinition_FixedX_Ratio
	//	*ElementDefinition_FixedX_RatioRange
	//	*ElementDefinition_FixedX_Reference
	//	*ElementDefinition_FixedX_SampledData
	//	*ElementDefinition_FixedX_Signature
	//	*ElementDefinition_FixedX_Timing
	//	*ElementDefinition_FixedX_ContactDetail
	//	*ElementDefinition_FixedX_DataRequirement
	//	*ElementDefinition_FixedX_Expression
	//	*ElementDefinition_FixedX_ParameterDefinition
	//	*ElementDefinition_FixedX_RelatedArtifact
	//	*ElementDefinition_FixedX_TriggerDefinition
	//	*ElementDefinition_FixedX_UsageContext
	//	*ElementDefinition_FixedX_Availability
	//	*ElementDefinition_FixedX_ExtendedContactDetail
	//	*ElementDefinition_FixedX_Dosage
	//	*ElementDefinition_FixedX_Meta
	Choice isElementDefinition_FixedX_Choice `protobuf_oneof:"choice"`
}

func (x *ElementDefinition_FixedX) Reset() {
	*x = ElementDefinition_FixedX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_FixedX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_FixedX) ProtoMessage() {}

func (x *ElementDefinition_FixedX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_FixedX.ProtoReflect.Descriptor instead.
func (*ElementDefinition_FixedX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 5}
}

func (m *ElementDefinition_FixedX) GetChoice() isElementDefinition_FixedX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetBase64Binary() *Base64Binary {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetBoolean() *Boolean {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetCanonical() *Canonical {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetCode() *Code {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetDate() *Date {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetDecimal() *Decimal {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetId() *Id {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetInstant() *Instant {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetInteger() *Integer {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetInteger64() *Integer64 {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Integer64); ok {
		return x.Integer64
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetMarkdown() *Markdown {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetOid() *Oid {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetPositiveInt() *PositiveInt {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetStringValue() *String {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetTime() *Time {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetUnsignedInt() *UnsignedInt {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetUri() *Uri {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetUrl() *Url {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Url); ok {
		return x.Url
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetUuid() *Uuid {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetAddress() *Address {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetAge() *Age {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetAnnotation() *Annotation {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetAttachment() *Attachment {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetCodeableConcept() *CodeableConcept {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetCodeableReference() *CodeableReference {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_CodeableReference); ok {
		return x.CodeableReference
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetCoding() *Coding {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetContactPoint() *ContactPoint {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetCount() *Count {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetDistance() *Distance {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetHumanName() *HumanName {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetIdentifier() *Identifier {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetMoney() *Money {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetPeriod() *Period {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetQuantity() *Quantity {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetRange() *Range {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetRatio() *Ratio {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetRatioRange() *RatioRange {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_RatioRange); ok {
		return x.RatioRange
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetSampledData() *SampledData {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetSignature() *Signature {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetTiming() *Timing {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetContactDetail() *ContactDetail {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_ContactDetail); ok {
		return x.ContactDetail
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetDataRequirement() *DataRequirement {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_DataRequirement); ok {
		return x.DataRequirement
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetExpression() *Expression {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetParameterDefinition() *ParameterDefinition {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_ParameterDefinition); ok {
		return x.ParameterDefinition
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetRelatedArtifact() *RelatedArtifact {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_RelatedArtifact); ok {
		return x.RelatedArtifact
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetTriggerDefinition() *TriggerDefinition {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_TriggerDefinition); ok {
		return x.TriggerDefinition
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetUsageContext() *UsageContext {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_UsageContext); ok {
		return x.UsageContext
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetAvailability() *Availability {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Availability); ok {
		return x.Availability
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetExtendedContactDetail() *ExtendedContactDetail {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_ExtendedContactDetail); ok {
		return x.ExtendedContactDetail
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetDosage() *Dosage {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Dosage); ok {
		return x.Dosage
	}
	return nil
}

func (x *ElementDefinition_FixedX) GetMeta() *Meta {
	if x, ok := x.GetChoice().(*ElementDefinition_FixedX_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_FixedX_Choice interface {
	isElementDefinition_FixedX_Choice()
}

type ElementDefinition_FixedX_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_FixedX_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_FixedX_Canonical struct {
	Canonical *Canonical `protobuf:"bytes,3,opt,name=canonical,proto3,oneof"`
}

type ElementDefinition_FixedX_Code struct {
	Code *Code `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type ElementDefinition_FixedX_Date struct {
	Date *Date `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

type ElementDefinition_FixedX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_FixedX_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,7,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_FixedX_Id struct {
	Id *Id `protobuf:"bytes,8,opt,name=id,proto3,oneof"`
}

type ElementDefinition_FixedX_Instant struct {
	Instant *Instant `protobuf:"bytes,9,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_FixedX_Integer struct {
	Integer *Integer `protobuf:"bytes,10,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_FixedX_Integer64 struct {
	Integer64 *Integer64 `protobuf:"bytes,51,opt,name=integer64,proto3,oneof"`
}

type ElementDefinition_FixedX_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,11,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_FixedX_Oid struct {
	Oid *Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_FixedX_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,13,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_FixedX_StringValue struct {
	StringValue *String `protobuf:"bytes,14,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_FixedX_Time struct {
	Time *Time `protobuf:"bytes,15,opt,name=time,proto3,oneof"`
}

type ElementDefinition_FixedX_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,16,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_FixedX_Uri struct {
	Uri *Uri `protobuf:"bytes,17,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_FixedX_Url struct {
	Url *Url `protobuf:"bytes,18,opt,name=url,proto3,oneof"`
}

type ElementDefinition_FixedX_Uuid struct {
	Uuid *Uuid `protobuf:"bytes,19,opt,name=uuid,proto3,oneof"`
}

type ElementDefinition_FixedX_Address struct {
	Address *Address `protobuf:"bytes,20,opt,name=address,proto3,oneof"`
}

type ElementDefinition_FixedX_Age struct {
	Age *Age `protobuf:"bytes,21,opt,name=age,proto3,oneof"`
}

type ElementDefinition_FixedX_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,22,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_FixedX_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,23,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_FixedX_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,24,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_FixedX_CodeableReference struct {
	CodeableReference *CodeableReference `protobuf:"bytes,52,opt,name=codeable_reference,json=codeableReference,proto3,oneof"`
}

type ElementDefinition_FixedX_Coding struct {
	Coding *Coding `protobuf:"bytes,25,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_FixedX_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,26,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_FixedX_Count struct {
	Count *Count `protobuf:"bytes,27,opt,name=count,proto3,oneof"`
}

type ElementDefinition_FixedX_Distance struct {
	Distance *Distance `protobuf:"bytes,28,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_FixedX_Duration struct {
	Duration *Duration `protobuf:"bytes,29,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_FixedX_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,30,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_FixedX_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,31,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_FixedX_Money struct {
	Money *Money `protobuf:"bytes,32,opt,name=money,proto3,oneof"`
}

type ElementDefinition_FixedX_Period struct {
	Period *Period `protobuf:"bytes,33,opt,name=period,proto3,oneof"`
}

type ElementDefinition_FixedX_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,34,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_FixedX_Range struct {
	Range *Range `protobuf:"bytes,35,opt,name=range,proto3,oneof"`
}

type ElementDefinition_FixedX_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,36,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_FixedX_RatioRange struct {
	RatioRange *RatioRange `protobuf:"bytes,53,opt,name=ratio_range,json=ratioRange,proto3,oneof"`
}

type ElementDefinition_FixedX_Reference struct {
	Reference *Reference `protobuf:"bytes,37,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_FixedX_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,38,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_FixedX_Signature struct {
	Signature *Signature `protobuf:"bytes,39,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_FixedX_Timing struct {
	Timing *Timing `protobuf:"bytes,40,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_FixedX_ContactDetail struct {
	ContactDetail *ContactDetail `protobuf:"bytes,41,opt,name=contact_detail,json=contactDetail,proto3,oneof"`
}

type ElementDefinition_FixedX_DataRequirement struct {
	DataRequirement *DataRequirement `protobuf:"bytes,43,opt,name=data_requirement,json=dataRequirement,proto3,oneof"`
}

type ElementDefinition_FixedX_Expression struct {
	Expression *Expression `protobuf:"bytes,44,opt,name=expression,proto3,oneof"`
}

type ElementDefinition_FixedX_ParameterDefinition struct {
	ParameterDefinition *ParameterDefinition `protobuf:"bytes,45,opt,name=parameter_definition,json=parameterDefinition,proto3,oneof"`
}

type ElementDefinition_FixedX_RelatedArtifact struct {
	RelatedArtifact *RelatedArtifact `protobuf:"bytes,46,opt,name=related_artifact,json=relatedArtifact,proto3,oneof"`
}

type ElementDefinition_FixedX_TriggerDefinition struct {
	TriggerDefinition *TriggerDefinition `protobuf:"bytes,47,opt,name=trigger_definition,json=triggerDefinition,proto3,oneof"`
}

type ElementDefinition_FixedX_UsageContext struct {
	UsageContext *UsageContext `protobuf:"bytes,48,opt,name=usage_context,json=usageContext,proto3,oneof"`
}

type ElementDefinition_FixedX_Availability struct {
	Availability *Availability `protobuf:"bytes,54,opt,name=availability,proto3,oneof"`
}

type ElementDefinition_FixedX_ExtendedContactDetail struct {
	ExtendedContactDetail *ExtendedContactDetail `protobuf:"bytes,55,opt,name=extended_contact_detail,json=extendedContactDetail,proto3,oneof"`
}

type ElementDefinition_FixedX_Dosage struct {
	Dosage *Dosage `protobuf:"bytes,49,opt,name=dosage,proto3,oneof"`
}

type ElementDefinition_FixedX_Meta struct {
	Meta *Meta `protobuf:"bytes,50,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_FixedX_Base64Binary) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Boolean) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Canonical) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Code) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Date) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_DateTime) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Decimal) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Id) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Instant) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Integer) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Integer64) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Markdown) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Oid) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_PositiveInt) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_StringValue) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Time) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_UnsignedInt) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Uri) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Url) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Uuid) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Address) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Age) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Annotation) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Attachment) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_CodeableConcept) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_CodeableReference) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Coding) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_ContactPoint) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Count) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Distance) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Duration) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_HumanName) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Identifier) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Money) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Period) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Quantity) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Range) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Ratio) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_RatioRange) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Reference) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_SampledData) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Signature) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Timing) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_ContactDetail) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_DataRequirement) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Expression) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_ParameterDefinition) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_RelatedArtifact) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_TriggerDefinition) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_UsageContext) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Availability) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_ExtendedContactDetail) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Dosage) isElementDefinition_FixedX_Choice() {}

func (*ElementDefinition_FixedX_Meta) isElementDefinition_FixedX_Choice() {}

// Value must have at least these property values
type ElementDefinition_PatternX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ElementDefinition_PatternX_Base64Binary
	//	*ElementDefinition_PatternX_Boolean
	//	*ElementDefinition_PatternX_Canonical
	//	*ElementDefinition_PatternX_Code
	//	*ElementDefinition_PatternX_Date
	//	*ElementDefinition_PatternX_DateTime
	//	*ElementDefinition_PatternX_Decimal
	//	*ElementDefinition_PatternX_Id
	//	*ElementDefinition_PatternX_Instant
	//	*ElementDefinition_PatternX_Integer
	//	*ElementDefinition_PatternX_Integer64
	//	*ElementDefinition_PatternX_Markdown
	//	*ElementDefinition_PatternX_Oid
	//	*ElementDefinition_PatternX_PositiveInt
	//	*ElementDefinition_PatternX_StringValue
	//	*ElementDefinition_PatternX_Time
	//	*ElementDefinition_PatternX_UnsignedInt
	//	*ElementDefinition_PatternX_Uri
	//	*ElementDefinition_PatternX_Url
	//	*ElementDefinition_PatternX_Uuid
	//	*ElementDefinition_PatternX_Address
	//	*ElementDefinition_PatternX_Age
	//	*ElementDefinition_PatternX_Annotation
	//	*ElementDefinition_PatternX_Attachment
	//	*ElementDefinition_PatternX_CodeableConcept
	//	*ElementDefinition_PatternX_CodeableReference
	//	*ElementDefinition_PatternX_Coding
	//	*ElementDefinition_PatternX_ContactPoint
	//	*ElementDefinition_PatternX_Count
	//	*ElementDefinition_PatternX_Distance
	//	*ElementDefinition_PatternX_Duration
	//	*ElementDefinition_PatternX_HumanName
	//	*ElementDefinition_PatternX_Identifier
	//	*ElementDefinition_PatternX_Money
	//	*ElementDefinition_PatternX_Period
	//	*ElementDefinition_PatternX_Quantity
	//	*ElementDefinition_PatternX_Range
	//	*ElementDefinition_PatternX_Ratio
	//	*ElementDefinition_PatternX_RatioRange
	//	*ElementDefinition_PatternX_Reference
	//	*ElementDefinition_PatternX_SampledData
	//	*ElementDefinition_PatternX_Signature
	//	*ElementDefinition_PatternX_Timing
	//	*ElementDefinition_PatternX_ContactDetail
	//	*ElementDefinition_PatternX_DataRequirement
	//	*ElementDefinition_PatternX_Expression
	//	*ElementDefinition_PatternX_ParameterDefinition
	//	*ElementDefinition_PatternX_RelatedArtifact
	//	*ElementDefinition_PatternX_TriggerDefinition
	//	*ElementDefinition_PatternX_UsageContext
	//	*ElementDefinition_PatternX_Availability
	//	*ElementDefinition_PatternX_ExtendedContactDetail
	//	*ElementDefinition_PatternX_Dosage
	//	*ElementDefinition_PatternX_Meta
	Choice isElementDefinition_PatternX_Choice `protobuf_oneof:"choice"`
}

func (x *ElementDefinition_PatternX) Reset() {
	*x = ElementDefinition_PatternX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_PatternX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_PatternX) ProtoMessage() {}

func (x *ElementDefinition_PatternX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_PatternX.ProtoReflect.Descriptor instead.
func (*ElementDefinition_PatternX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 6}
}

func (m *ElementDefinition_PatternX) GetChoice() isElementDefinition_PatternX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetBase64Binary() *Base64Binary {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetBoolean() *Boolean {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetCanonical() *Canonical {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetCode() *Code {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetDate() *Date {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetDecimal() *Decimal {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetId() *Id {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetInstant() *Instant {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetInteger() *Integer {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetInteger64() *Integer64 {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Integer64); ok {
		return x.Integer64
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetMarkdown() *Markdown {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetOid() *Oid {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetPositiveInt() *PositiveInt {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetStringValue() *String {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetTime() *Time {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetUnsignedInt() *UnsignedInt {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetUri() *Uri {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetUrl() *Url {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Url); ok {
		return x.Url
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetUuid() *Uuid {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetAddress() *Address {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetAge() *Age {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetAnnotation() *Annotation {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetAttachment() *Attachment {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetCodeableConcept() *CodeableConcept {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetCodeableReference() *CodeableReference {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_CodeableReference); ok {
		return x.CodeableReference
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetCoding() *Coding {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetContactPoint() *ContactPoint {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetCount() *Count {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetDistance() *Distance {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetHumanName() *HumanName {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetIdentifier() *Identifier {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetMoney() *Money {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetPeriod() *Period {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetQuantity() *Quantity {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetRange() *Range {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetRatio() *Ratio {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetRatioRange() *RatioRange {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_RatioRange); ok {
		return x.RatioRange
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetSampledData() *SampledData {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetSignature() *Signature {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetTiming() *Timing {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetContactDetail() *ContactDetail {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_ContactDetail); ok {
		return x.ContactDetail
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetDataRequirement() *DataRequirement {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_DataRequirement); ok {
		return x.DataRequirement
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetExpression() *Expression {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetParameterDefinition() *ParameterDefinition {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_ParameterDefinition); ok {
		return x.ParameterDefinition
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetRelatedArtifact() *RelatedArtifact {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_RelatedArtifact); ok {
		return x.RelatedArtifact
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetTriggerDefinition() *TriggerDefinition {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_TriggerDefinition); ok {
		return x.TriggerDefinition
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetUsageContext() *UsageContext {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_UsageContext); ok {
		return x.UsageContext
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetAvailability() *Availability {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Availability); ok {
		return x.Availability
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetExtendedContactDetail() *ExtendedContactDetail {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_ExtendedContactDetail); ok {
		return x.ExtendedContactDetail
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetDosage() *Dosage {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Dosage); ok {
		return x.Dosage
	}
	return nil
}

func (x *ElementDefinition_PatternX) GetMeta() *Meta {
	if x, ok := x.GetChoice().(*ElementDefinition_PatternX_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_PatternX_Choice interface {
	isElementDefinition_PatternX_Choice()
}

type ElementDefinition_PatternX_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_PatternX_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_PatternX_Canonical struct {
	Canonical *Canonical `protobuf:"bytes,3,opt,name=canonical,proto3,oneof"`
}

type ElementDefinition_PatternX_Code struct {
	Code *Code `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type ElementDefinition_PatternX_Date struct {
	Date *Date `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

type ElementDefinition_PatternX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_PatternX_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,7,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_PatternX_Id struct {
	Id *Id `protobuf:"bytes,8,opt,name=id,proto3,oneof"`
}

type ElementDefinition_PatternX_Instant struct {
	Instant *Instant `protobuf:"bytes,9,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_PatternX_Integer struct {
	Integer *Integer `protobuf:"bytes,10,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_PatternX_Integer64 struct {
	Integer64 *Integer64 `protobuf:"bytes,51,opt,name=integer64,proto3,oneof"`
}

type ElementDefinition_PatternX_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,11,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_PatternX_Oid struct {
	Oid *Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_PatternX_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,13,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_PatternX_StringValue struct {
	StringValue *String `protobuf:"bytes,14,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_PatternX_Time struct {
	Time *Time `protobuf:"bytes,15,opt,name=time,proto3,oneof"`
}

type ElementDefinition_PatternX_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,16,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_PatternX_Uri struct {
	Uri *Uri `protobuf:"bytes,17,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_PatternX_Url struct {
	Url *Url `protobuf:"bytes,18,opt,name=url,proto3,oneof"`
}

type ElementDefinition_PatternX_Uuid struct {
	Uuid *Uuid `protobuf:"bytes,19,opt,name=uuid,proto3,oneof"`
}

type ElementDefinition_PatternX_Address struct {
	Address *Address `protobuf:"bytes,20,opt,name=address,proto3,oneof"`
}

type ElementDefinition_PatternX_Age struct {
	Age *Age `protobuf:"bytes,21,opt,name=age,proto3,oneof"`
}

type ElementDefinition_PatternX_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,22,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_PatternX_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,23,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_PatternX_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,24,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_PatternX_CodeableReference struct {
	CodeableReference *CodeableReference `protobuf:"bytes,52,opt,name=codeable_reference,json=codeableReference,proto3,oneof"`
}

type ElementDefinition_PatternX_Coding struct {
	Coding *Coding `protobuf:"bytes,25,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_PatternX_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,26,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_PatternX_Count struct {
	Count *Count `protobuf:"bytes,27,opt,name=count,proto3,oneof"`
}

type ElementDefinition_PatternX_Distance struct {
	Distance *Distance `protobuf:"bytes,28,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_PatternX_Duration struct {
	Duration *Duration `protobuf:"bytes,29,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_PatternX_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,30,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_PatternX_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,31,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_PatternX_Money struct {
	Money *Money `protobuf:"bytes,32,opt,name=money,proto3,oneof"`
}

type ElementDefinition_PatternX_Period struct {
	Period *Period `protobuf:"bytes,33,opt,name=period,proto3,oneof"`
}

type ElementDefinition_PatternX_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,34,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_PatternX_Range struct {
	Range *Range `protobuf:"bytes,35,opt,name=range,proto3,oneof"`
}

type ElementDefinition_PatternX_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,36,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_PatternX_RatioRange struct {
	RatioRange *RatioRange `protobuf:"bytes,53,opt,name=ratio_range,json=ratioRange,proto3,oneof"`
}

type ElementDefinition_PatternX_Reference struct {
	Reference *Reference `protobuf:"bytes,37,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_PatternX_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,38,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_PatternX_Signature struct {
	Signature *Signature `protobuf:"bytes,39,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_PatternX_Timing struct {
	Timing *Timing `protobuf:"bytes,40,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_PatternX_ContactDetail struct {
	ContactDetail *ContactDetail `protobuf:"bytes,41,opt,name=contact_detail,json=contactDetail,proto3,oneof"`
}

type ElementDefinition_PatternX_DataRequirement struct {
	DataRequirement *DataRequirement `protobuf:"bytes,43,opt,name=data_requirement,json=dataRequirement,proto3,oneof"`
}

type ElementDefinition_PatternX_Expression struct {
	Expression *Expression `protobuf:"bytes,44,opt,name=expression,proto3,oneof"`
}

type ElementDefinition_PatternX_ParameterDefinition struct {
	ParameterDefinition *ParameterDefinition `protobuf:"bytes,45,opt,name=parameter_definition,json=parameterDefinition,proto3,oneof"`
}

type ElementDefinition_PatternX_RelatedArtifact struct {
	RelatedArtifact *RelatedArtifact `protobuf:"bytes,46,opt,name=related_artifact,json=relatedArtifact,proto3,oneof"`
}

type ElementDefinition_PatternX_TriggerDefinition struct {
	TriggerDefinition *TriggerDefinition `protobuf:"bytes,47,opt,name=trigger_definition,json=triggerDefinition,proto3,oneof"`
}

type ElementDefinition_PatternX_UsageContext struct {
	UsageContext *UsageContext `protobuf:"bytes,48,opt,name=usage_context,json=usageContext,proto3,oneof"`
}

type ElementDefinition_PatternX_Availability struct {
	Availability *Availability `protobuf:"bytes,54,opt,name=availability,proto3,oneof"`
}

type ElementDefinition_PatternX_ExtendedContactDetail struct {
	ExtendedContactDetail *ExtendedContactDetail `protobuf:"bytes,55,opt,name=extended_contact_detail,json=extendedContactDetail,proto3,oneof"`
}

type ElementDefinition_PatternX_Dosage struct {
	Dosage *Dosage `protobuf:"bytes,49,opt,name=dosage,proto3,oneof"`
}

type ElementDefinition_PatternX_Meta struct {
	Meta *Meta `protobuf:"bytes,50,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_PatternX_Base64Binary) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Boolean) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Canonical) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Code) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Date) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_DateTime) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Decimal) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Id) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Instant) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Integer) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Integer64) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Markdown) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Oid) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_PositiveInt) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_StringValue) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Time) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_UnsignedInt) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Uri) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Url) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Uuid) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Address) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Age) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Annotation) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Attachment) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_CodeableConcept) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_CodeableReference) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Coding) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_ContactPoint) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Count) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Distance) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Duration) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_HumanName) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Identifier) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Money) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Period) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Quantity) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Range) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Ratio) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_RatioRange) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Reference) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_SampledData) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Signature) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Timing) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_ContactDetail) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_DataRequirement) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Expression) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_ParameterDefinition) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_RelatedArtifact) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_TriggerDefinition) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_UsageContext) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Availability) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_ExtendedContactDetail) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Dosage) isElementDefinition_PatternX_Choice() {}

func (*ElementDefinition_PatternX_Meta) isElementDefinition_PatternX_Choice() {}

// Example value (as defined for type)
type ElementDefinition_Example struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Describes the purpose of this example
	Label *String                           `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	Value *ElementDefinition_Example_ValueX `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElementDefinition_Example) Reset() {
	*x = ElementDefinition_Example{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Example) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Example) ProtoMessage() {}

func (x *ElementDefinition_Example) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Example.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Example) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 7}
}

func (x *ElementDefinition_Example) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Example) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Example) GetLabel() *String {
	if x != nil {
		return x.Label
	}
	return nil
}

func (x *ElementDefinition_Example) GetValue() *ElementDefinition_Example_ValueX {
	if x != nil {
		return x.Value
	}
	return nil
}

// Minimum Allowed Value (for some types)
type ElementDefinition_MinValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ElementDefinition_MinValueX_Date
	//	*ElementDefinition_MinValueX_DateTime
	//	*ElementDefinition_MinValueX_Instant
	//	*ElementDefinition_MinValueX_Time
	//	*ElementDefinition_MinValueX_Decimal
	//	*ElementDefinition_MinValueX_Integer
	//	*ElementDefinition_MinValueX_Integer64
	//	*ElementDefinition_MinValueX_PositiveInt
	//	*ElementDefinition_MinValueX_UnsignedInt
	//	*ElementDefinition_MinValueX_Quantity
	Choice isElementDefinition_MinValueX_Choice `protobuf_oneof:"choice"`
}

func (x *ElementDefinition_MinValueX) Reset() {
	*x = ElementDefinition_MinValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_MinValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_MinValueX) ProtoMessage() {}

func (x *ElementDefinition_MinValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_MinValueX.ProtoReflect.Descriptor instead.
func (*ElementDefinition_MinValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 8}
}

func (m *ElementDefinition_MinValueX) GetChoice() isElementDefinition_MinValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetDate() *Date {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetInstant() *Instant {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetTime() *Time {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetDecimal() *Decimal {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetInteger() *Integer {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetInteger64() *Integer64 {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_Integer64); ok {
		return x.Integer64
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetPositiveInt() *PositiveInt {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetUnsignedInt() *UnsignedInt {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_MinValueX) GetQuantity() *Quantity {
	if x, ok := x.GetChoice().(*ElementDefinition_MinValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isElementDefinition_MinValueX_Choice interface {
	isElementDefinition_MinValueX_Choice()
}

type ElementDefinition_MinValueX_Date struct {
	Date *Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type ElementDefinition_MinValueX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_MinValueX_Instant struct {
	Instant *Instant `protobuf:"bytes,3,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_MinValueX_Time struct {
	Time *Time `protobuf:"bytes,4,opt,name=time,proto3,oneof"`
}

type ElementDefinition_MinValueX_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_MinValueX_Integer struct {
	Integer *Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_MinValueX_Integer64 struct {
	Integer64 *Integer64 `protobuf:"bytes,10,opt,name=integer64,proto3,oneof"`
}

type ElementDefinition_MinValueX_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,7,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_MinValueX_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,8,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_MinValueX_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,9,opt,name=quantity,proto3,oneof"`
}

func (*ElementDefinition_MinValueX_Date) isElementDefinition_MinValueX_Choice() {}

func (*ElementDefinition_MinValueX_DateTime) isElementDefinition_MinValueX_Choice() {}

func (*ElementDefinition_MinValueX_Instant) isElementDefinition_MinValueX_Choice() {}

func (*ElementDefinition_MinValueX_Time) isElementDefinition_MinValueX_Choice() {}

func (*ElementDefinition_MinValueX_Decimal) isElementDefinition_MinValueX_Choice() {}

func (*ElementDefinition_MinValueX_Integer) isElementDefinition_MinValueX_Choice() {}

func (*ElementDefinition_MinValueX_Integer64) isElementDefinition_MinValueX_Choice() {}

func (*ElementDefinition_MinValueX_PositiveInt) isElementDefinition_MinValueX_Choice() {}

func (*ElementDefinition_MinValueX_UnsignedInt) isElementDefinition_MinValueX_Choice() {}

func (*ElementDefinition_MinValueX_Quantity) isElementDefinition_MinValueX_Choice() {}

// Maximum Allowed Value (for some types)
type ElementDefinition_MaxValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ElementDefinition_MaxValueX_Date
	//	*ElementDefinition_MaxValueX_DateTime
	//	*ElementDefinition_MaxValueX_Instant
	//	*ElementDefinition_MaxValueX_Time
	//	*ElementDefinition_MaxValueX_Decimal
	//	*ElementDefinition_MaxValueX_Integer
	//	*ElementDefinition_MaxValueX_Integer64
	//	*ElementDefinition_MaxValueX_PositiveInt
	//	*ElementDefinition_MaxValueX_UnsignedInt
	//	*ElementDefinition_MaxValueX_Quantity
	Choice isElementDefinition_MaxValueX_Choice `protobuf_oneof:"choice"`
}

func (x *ElementDefinition_MaxValueX) Reset() {
	*x = ElementDefinition_MaxValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_MaxValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_MaxValueX) ProtoMessage() {}

func (x *ElementDefinition_MaxValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_MaxValueX.ProtoReflect.Descriptor instead.
func (*ElementDefinition_MaxValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 9}
}

func (m *ElementDefinition_MaxValueX) GetChoice() isElementDefinition_MaxValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetDate() *Date {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetInstant() *Instant {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetTime() *Time {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetDecimal() *Decimal {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetInteger() *Integer {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetInteger64() *Integer64 {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_Integer64); ok {
		return x.Integer64
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetPositiveInt() *PositiveInt {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetUnsignedInt() *UnsignedInt {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_MaxValueX) GetQuantity() *Quantity {
	if x, ok := x.GetChoice().(*ElementDefinition_MaxValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

type isElementDefinition_MaxValueX_Choice interface {
	isElementDefinition_MaxValueX_Choice()
}

type ElementDefinition_MaxValueX_Date struct {
	Date *Date `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type ElementDefinition_MaxValueX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_MaxValueX_Instant struct {
	Instant *Instant `protobuf:"bytes,3,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_MaxValueX_Time struct {
	Time *Time `protobuf:"bytes,4,opt,name=time,proto3,oneof"`
}

type ElementDefinition_MaxValueX_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,5,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_MaxValueX_Integer struct {
	Integer *Integer `protobuf:"bytes,6,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_MaxValueX_Integer64 struct {
	Integer64 *Integer64 `protobuf:"bytes,10,opt,name=integer64,proto3,oneof"`
}

type ElementDefinition_MaxValueX_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,7,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_MaxValueX_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,8,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_MaxValueX_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,9,opt,name=quantity,proto3,oneof"`
}

func (*ElementDefinition_MaxValueX_Date) isElementDefinition_MaxValueX_Choice() {}

func (*ElementDefinition_MaxValueX_DateTime) isElementDefinition_MaxValueX_Choice() {}

func (*ElementDefinition_MaxValueX_Instant) isElementDefinition_MaxValueX_Choice() {}

func (*ElementDefinition_MaxValueX_Time) isElementDefinition_MaxValueX_Choice() {}

func (*ElementDefinition_MaxValueX_Decimal) isElementDefinition_MaxValueX_Choice() {}

func (*ElementDefinition_MaxValueX_Integer) isElementDefinition_MaxValueX_Choice() {}

func (*ElementDefinition_MaxValueX_Integer64) isElementDefinition_MaxValueX_Choice() {}

func (*ElementDefinition_MaxValueX_PositiveInt) isElementDefinition_MaxValueX_Choice() {}

func (*ElementDefinition_MaxValueX_UnsignedInt) isElementDefinition_MaxValueX_Choice() {}

func (*ElementDefinition_MaxValueX_Quantity) isElementDefinition_MaxValueX_Choice() {}

// Condition that must evaluate to true
type ElementDefinition_Constraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Target of 'condition' reference above
	Key *Id `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Why this constraint is necessary or appropriate
	Requirements *Markdown                                  `protobuf:"bytes,10,opt,name=requirements,proto3" json:"requirements,omitempty"`
	Severity     *ElementDefinition_Constraint_SeverityCode `protobuf:"bytes,5,opt,name=severity,proto3" json:"severity,omitempty"`
	// Suppress warning or hint in profile
	Suppress *Boolean `protobuf:"bytes,11,opt,name=suppress,proto3" json:"suppress,omitempty"`
	// Human description of constraint
	Human *String `protobuf:"bytes,6,opt,name=human,proto3" json:"human,omitempty"`
	// FHIRPath expression of constraint
	Expression *String `protobuf:"bytes,7,opt,name=expression,proto3" json:"expression,omitempty"`
	// Reference to original source of constraint
	Source *Canonical `protobuf:"bytes,9,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *ElementDefinition_Constraint) Reset() {
	*x = ElementDefinition_Constraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Constraint) ProtoMessage() {}

func (x *ElementDefinition_Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Constraint.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Constraint) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 10}
}

func (x *ElementDefinition_Constraint) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetKey() *Id {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetRequirements() *Markdown {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetSeverity() *ElementDefinition_Constraint_SeverityCode {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetSuppress() *Boolean {
	if x != nil {
		return x.Suppress
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetHuman() *String {
	if x != nil {
		return x.Human
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetExpression() *String {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *ElementDefinition_Constraint) GetSource() *Canonical {
	if x != nil {
		return x.Source
	}
	return nil
}

// ValueSet details if this is coded
type ElementDefinition_ElementDefinitionBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension                                             `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Strength  *ElementDefinition_ElementDefinitionBinding_StrengthCode `protobuf:"bytes,3,opt,name=strength,proto3" json:"strength,omitempty"`
	// Intended use of codes in the bound value set
	Description *Markdown `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Source of value set
	ValueSet   *Canonical                                               `protobuf:"bytes,5,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
	Additional []*ElementDefinition_ElementDefinitionBinding_Additional `protobuf:"bytes,7,rep,name=additional,proto3" json:"additional,omitempty"`
}

func (x *ElementDefinition_ElementDefinitionBinding) Reset() {
	*x = ElementDefinition_ElementDefinitionBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_ElementDefinitionBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_ElementDefinitionBinding) ProtoMessage() {}

func (x *ElementDefinition_ElementDefinitionBinding) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_ElementDefinitionBinding.ProtoReflect.Descriptor instead.
func (*ElementDefinition_ElementDefinitionBinding) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 11}
}

func (x *ElementDefinition_ElementDefinitionBinding) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding) GetStrength() *ElementDefinition_ElementDefinitionBinding_StrengthCode {
	if x != nil {
		return x.Strength
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding) GetDescription() *Markdown {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding) GetValueSet() *Canonical {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding) GetAdditional() []*ElementDefinition_ElementDefinitionBinding_Additional {
	if x != nil {
		return x.Additional
	}
	return nil
}

// Map element to another set of definitions
type ElementDefinition_Mapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	// Reference to mapping declaration
	Identity *Id                                     `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	Language *ElementDefinition_Mapping_LanguageCode `protobuf:"bytes,4,opt,name=language,proto3" json:"language,omitempty"`
	// Details of the mapping
	Map *String `protobuf:"bytes,5,opt,name=map,proto3" json:"map,omitempty"`
	// Comments about the mapping or its use
	Comment *Markdown `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *ElementDefinition_Mapping) Reset() {
	*x = ElementDefinition_Mapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Mapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Mapping) ProtoMessage() {}

func (x *ElementDefinition_Mapping) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Mapping.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Mapping) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 12}
}

func (x *ElementDefinition_Mapping) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetIdentity() *Id {
	if x != nil {
		return x.Identity
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetLanguage() *ElementDefinition_Mapping_LanguageCode {
	if x != nil {
		return x.Language
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetMap() *String {
	if x != nil {
		return x.Map
	}
	return nil
}

func (x *ElementDefinition_Mapping) GetComment() *Markdown {
	if x != nil {
		return x.Comment
	}
	return nil
}

// Element values that are used to distinguish the slices
type ElementDefinition_Slicing_Discriminator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension                                      `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Type      *ElementDefinition_Slicing_Discriminator_TypeCode `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Path to element value
	Path *String `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *ElementDefinition_Slicing_Discriminator) Reset() {
	*x = ElementDefinition_Slicing_Discriminator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Slicing_Discriminator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Slicing_Discriminator) ProtoMessage() {}

func (x *ElementDefinition_Slicing_Discriminator) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Slicing_Discriminator.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Slicing_Discriminator) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 1, 0}
}

func (x *ElementDefinition_Slicing_Discriminator) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Slicing_Discriminator) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Slicing_Discriminator) GetType() *ElementDefinition_Slicing_Discriminator_TypeCode {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ElementDefinition_Slicing_Discriminator) GetPath() *String {
	if x != nil {
		return x.Path
	}
	return nil
}

// closed | open | openAtEnd
type ElementDefinition_Slicing_RulesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.SlicingRulesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.SlicingRulesCode_Value" json:"value,omitempty"`
	Id        *String                               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                          `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ElementDefinition_Slicing_RulesCode) Reset() {
	*x = ElementDefinition_Slicing_RulesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Slicing_RulesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Slicing_RulesCode) ProtoMessage() {}

func (x *ElementDefinition_Slicing_RulesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Slicing_RulesCode.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Slicing_RulesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 1, 1}
}

func (x *ElementDefinition_Slicing_RulesCode) GetValue() codes_go_proto.SlicingRulesCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.SlicingRulesCode_Value(0)
}

func (x *ElementDefinition_Slicing_RulesCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Slicing_RulesCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// value | exists | type | profile | position
type ElementDefinition_Slicing_Discriminator_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DiscriminatorTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.DiscriminatorTypeCode_Value" json:"value,omitempty"`
	Id        *String                                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ElementDefinition_Slicing_Discriminator_TypeCode) Reset() {
	*x = ElementDefinition_Slicing_Discriminator_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Slicing_Discriminator_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Slicing_Discriminator_TypeCode) ProtoMessage() {}

func (x *ElementDefinition_Slicing_Discriminator_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Slicing_Discriminator_TypeCode.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Slicing_Discriminator_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 1, 0, 0}
}

func (x *ElementDefinition_Slicing_Discriminator_TypeCode) GetValue() codes_go_proto.DiscriminatorTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DiscriminatorTypeCode_Value(0)
}

func (x *ElementDefinition_Slicing_Discriminator_TypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Slicing_Discriminator_TypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// contained | referenced | bundled - how aggregated
type ElementDefinition_TypeRef_AggregationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AggregationModeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.AggregationModeCode_Value" json:"value,omitempty"`
	Id        *String                                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                             `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ElementDefinition_TypeRef_AggregationCode) Reset() {
	*x = ElementDefinition_TypeRef_AggregationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_TypeRef_AggregationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_TypeRef_AggregationCode) ProtoMessage() {}

func (x *ElementDefinition_TypeRef_AggregationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_TypeRef_AggregationCode.ProtoReflect.Descriptor instead.
func (*ElementDefinition_TypeRef_AggregationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 3, 0}
}

func (x *ElementDefinition_TypeRef_AggregationCode) GetValue() codes_go_proto.AggregationModeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AggregationModeCode_Value(0)
}

func (x *ElementDefinition_TypeRef_AggregationCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_TypeRef_AggregationCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// either | independent | specific
type ElementDefinition_TypeRef_VersioningCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ReferenceVersionRulesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ReferenceVersionRulesCode_Value" json:"value,omitempty"`
	Id        *String                                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ElementDefinition_TypeRef_VersioningCode) Reset() {
	*x = ElementDefinition_TypeRef_VersioningCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_TypeRef_VersioningCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_TypeRef_VersioningCode) ProtoMessage() {}

func (x *ElementDefinition_TypeRef_VersioningCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_TypeRef_VersioningCode.ProtoReflect.Descriptor instead.
func (*ElementDefinition_TypeRef_VersioningCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 3, 1}
}

func (x *ElementDefinition_TypeRef_VersioningCode) GetValue() codes_go_proto.ReferenceVersionRulesCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ReferenceVersionRulesCode_Value(0)
}

func (x *ElementDefinition_TypeRef_VersioningCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_TypeRef_VersioningCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Value of Example (one of allowed types)
type ElementDefinition_Example_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ElementDefinition_Example_ValueX_Base64Binary
	//	*ElementDefinition_Example_ValueX_Boolean
	//	*ElementDefinition_Example_ValueX_Canonical
	//	*ElementDefinition_Example_ValueX_Code
	//	*ElementDefinition_Example_ValueX_Date
	//	*ElementDefinition_Example_ValueX_DateTime
	//	*ElementDefinition_Example_ValueX_Decimal
	//	*ElementDefinition_Example_ValueX_Id
	//	*ElementDefinition_Example_ValueX_Instant
	//	*ElementDefinition_Example_ValueX_Integer
	//	*ElementDefinition_Example_ValueX_Integer64
	//	*ElementDefinition_Example_ValueX_Markdown
	//	*ElementDefinition_Example_ValueX_Oid
	//	*ElementDefinition_Example_ValueX_PositiveInt
	//	*ElementDefinition_Example_ValueX_StringValue
	//	*ElementDefinition_Example_ValueX_Time
	//	*ElementDefinition_Example_ValueX_UnsignedInt
	//	*ElementDefinition_Example_ValueX_Uri
	//	*ElementDefinition_Example_ValueX_Url
	//	*ElementDefinition_Example_ValueX_Uuid
	//	*ElementDefinition_Example_ValueX_Address
	//	*ElementDefinition_Example_ValueX_Age
	//	*ElementDefinition_Example_ValueX_Annotation
	//	*ElementDefinition_Example_ValueX_Attachment
	//	*ElementDefinition_Example_ValueX_CodeableConcept
	//	*ElementDefinition_Example_ValueX_CodeableReference
	//	*ElementDefinition_Example_ValueX_Coding
	//	*ElementDefinition_Example_ValueX_ContactPoint
	//	*ElementDefinition_Example_ValueX_Count
	//	*ElementDefinition_Example_ValueX_Distance
	//	*ElementDefinition_Example_ValueX_Duration
	//	*ElementDefinition_Example_ValueX_HumanName
	//	*ElementDefinition_Example_ValueX_Identifier
	//	*ElementDefinition_Example_ValueX_Money
	//	*ElementDefinition_Example_ValueX_Period
	//	*ElementDefinition_Example_ValueX_Quantity
	//	*ElementDefinition_Example_ValueX_Range
	//	*ElementDefinition_Example_ValueX_Ratio
	//	*ElementDefinition_Example_ValueX_RatioRange
	//	*ElementDefinition_Example_ValueX_Reference
	//	*ElementDefinition_Example_ValueX_SampledData
	//	*ElementDefinition_Example_ValueX_Signature
	//	*ElementDefinition_Example_ValueX_Timing
	//	*ElementDefinition_Example_ValueX_ContactDetail
	//	*ElementDefinition_Example_ValueX_DataRequirement
	//	*ElementDefinition_Example_ValueX_Expression
	//	*ElementDefinition_Example_ValueX_ParameterDefinition
	//	*ElementDefinition_Example_ValueX_RelatedArtifact
	//	*ElementDefinition_Example_ValueX_TriggerDefinition
	//	*ElementDefinition_Example_ValueX_UsageContext
	//	*ElementDefinition_Example_ValueX_Availability
	//	*ElementDefinition_Example_ValueX_ExtendedContactDetail
	//	*ElementDefinition_Example_ValueX_Dosage
	//	*ElementDefinition_Example_ValueX_Meta
	Choice isElementDefinition_Example_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *ElementDefinition_Example_ValueX) Reset() {
	*x = ElementDefinition_Example_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Example_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Example_ValueX) ProtoMessage() {}

func (x *ElementDefinition_Example_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Example_ValueX.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Example_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 7, 0}
}

func (m *ElementDefinition_Example_ValueX) GetChoice() isElementDefinition_Example_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetBase64Binary() *Base64Binary {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetBoolean() *Boolean {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetCanonical() *Canonical {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetCode() *Code {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetDate() *Date {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetDecimal() *Decimal {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetId() *Id {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Id); ok {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetInstant() *Instant {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetInteger() *Integer {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetInteger64() *Integer64 {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Integer64); ok {
		return x.Integer64
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetMarkdown() *Markdown {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetOid() *Oid {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetPositiveInt() *PositiveInt {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetStringValue() *String {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetTime() *Time {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetUnsignedInt() *UnsignedInt {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetUri() *Uri {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetUrl() *Url {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Url); ok {
		return x.Url
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetUuid() *Uuid {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetAddress() *Address {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetAge() *Age {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetAnnotation() *Annotation {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetAttachment() *Attachment {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetCodeableConcept() *CodeableConcept {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetCodeableReference() *CodeableReference {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_CodeableReference); ok {
		return x.CodeableReference
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetCoding() *Coding {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetContactPoint() *ContactPoint {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetCount() *Count {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Count); ok {
		return x.Count
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetDistance() *Distance {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetHumanName() *HumanName {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetIdentifier() *Identifier {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetMoney() *Money {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Money); ok {
		return x.Money
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetPeriod() *Period {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetQuantity() *Quantity {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetRange() *Range {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetRatio() *Ratio {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetRatioRange() *RatioRange {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_RatioRange); ok {
		return x.RatioRange
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetSampledData() *SampledData {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetSignature() *Signature {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetTiming() *Timing {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetContactDetail() *ContactDetail {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_ContactDetail); ok {
		return x.ContactDetail
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetDataRequirement() *DataRequirement {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_DataRequirement); ok {
		return x.DataRequirement
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetExpression() *Expression {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetParameterDefinition() *ParameterDefinition {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_ParameterDefinition); ok {
		return x.ParameterDefinition
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetRelatedArtifact() *RelatedArtifact {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_RelatedArtifact); ok {
		return x.RelatedArtifact
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetTriggerDefinition() *TriggerDefinition {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_TriggerDefinition); ok {
		return x.TriggerDefinition
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetUsageContext() *UsageContext {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_UsageContext); ok {
		return x.UsageContext
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetAvailability() *Availability {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Availability); ok {
		return x.Availability
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetExtendedContactDetail() *ExtendedContactDetail {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_ExtendedContactDetail); ok {
		return x.ExtendedContactDetail
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetDosage() *Dosage {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Dosage); ok {
		return x.Dosage
	}
	return nil
}

func (x *ElementDefinition_Example_ValueX) GetMeta() *Meta {
	if x, ok := x.GetChoice().(*ElementDefinition_Example_ValueX_Meta); ok {
		return x.Meta
	}
	return nil
}

type isElementDefinition_Example_ValueX_Choice interface {
	isElementDefinition_Example_ValueX_Choice()
}

type ElementDefinition_Example_ValueX_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Canonical struct {
	Canonical *Canonical `protobuf:"bytes,3,opt,name=canonical,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Code struct {
	Code *Code `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Date struct {
	Date *Date `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,7,opt,name=decimal,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Id struct {
	Id *Id `protobuf:"bytes,8,opt,name=id,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Instant struct {
	Instant *Instant `protobuf:"bytes,9,opt,name=instant,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Integer struct {
	Integer *Integer `protobuf:"bytes,10,opt,name=integer,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Integer64 struct {
	Integer64 *Integer64 `protobuf:"bytes,51,opt,name=integer64,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,11,opt,name=markdown,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Oid struct {
	Oid *Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,13,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_StringValue struct {
	StringValue *String `protobuf:"bytes,14,opt,name=string_value,json=string,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Time struct {
	Time *Time `protobuf:"bytes,15,opt,name=time,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,16,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Uri struct {
	Uri *Uri `protobuf:"bytes,17,opt,name=uri,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Url struct {
	Url *Url `protobuf:"bytes,18,opt,name=url,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Uuid struct {
	Uuid *Uuid `protobuf:"bytes,19,opt,name=uuid,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Address struct {
	Address *Address `protobuf:"bytes,20,opt,name=address,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Age struct {
	Age *Age `protobuf:"bytes,21,opt,name=age,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,22,opt,name=annotation,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,23,opt,name=attachment,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,24,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_CodeableReference struct {
	CodeableReference *CodeableReference `protobuf:"bytes,52,opt,name=codeable_reference,json=codeableReference,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Coding struct {
	Coding *Coding `protobuf:"bytes,25,opt,name=coding,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,26,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Count struct {
	Count *Count `protobuf:"bytes,27,opt,name=count,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Distance struct {
	Distance *Distance `protobuf:"bytes,28,opt,name=distance,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Duration struct {
	Duration *Duration `protobuf:"bytes,29,opt,name=duration,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,30,opt,name=human_name,json=humanName,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,31,opt,name=identifier,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Money struct {
	Money *Money `protobuf:"bytes,32,opt,name=money,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Period struct {
	Period *Period `protobuf:"bytes,33,opt,name=period,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,34,opt,name=quantity,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Range struct {
	Range *Range `protobuf:"bytes,35,opt,name=range,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,36,opt,name=ratio,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_RatioRange struct {
	RatioRange *RatioRange `protobuf:"bytes,53,opt,name=ratio_range,json=ratioRange,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Reference struct {
	Reference *Reference `protobuf:"bytes,37,opt,name=reference,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,38,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Signature struct {
	Signature *Signature `protobuf:"bytes,39,opt,name=signature,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Timing struct {
	Timing *Timing `protobuf:"bytes,40,opt,name=timing,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_ContactDetail struct {
	ContactDetail *ContactDetail `protobuf:"bytes,41,opt,name=contact_detail,json=contactDetail,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_DataRequirement struct {
	DataRequirement *DataRequirement `protobuf:"bytes,43,opt,name=data_requirement,json=dataRequirement,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Expression struct {
	Expression *Expression `protobuf:"bytes,44,opt,name=expression,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_ParameterDefinition struct {
	ParameterDefinition *ParameterDefinition `protobuf:"bytes,45,opt,name=parameter_definition,json=parameterDefinition,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_RelatedArtifact struct {
	RelatedArtifact *RelatedArtifact `protobuf:"bytes,46,opt,name=related_artifact,json=relatedArtifact,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_TriggerDefinition struct {
	TriggerDefinition *TriggerDefinition `protobuf:"bytes,47,opt,name=trigger_definition,json=triggerDefinition,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_UsageContext struct {
	UsageContext *UsageContext `protobuf:"bytes,48,opt,name=usage_context,json=usageContext,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Availability struct {
	Availability *Availability `protobuf:"bytes,54,opt,name=availability,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_ExtendedContactDetail struct {
	ExtendedContactDetail *ExtendedContactDetail `protobuf:"bytes,55,opt,name=extended_contact_detail,json=extendedContactDetail,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Dosage struct {
	Dosage *Dosage `protobuf:"bytes,49,opt,name=dosage,proto3,oneof"`
}

type ElementDefinition_Example_ValueX_Meta struct {
	Meta *Meta `protobuf:"bytes,50,opt,name=meta,proto3,oneof"`
}

func (*ElementDefinition_Example_ValueX_Base64Binary) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Boolean) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Canonical) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Code) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Date) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_DateTime) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Decimal) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Id) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Instant) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Integer) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Integer64) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Markdown) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Oid) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_PositiveInt) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_StringValue) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Time) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_UnsignedInt) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Uri) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Url) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Uuid) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Address) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Age) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Annotation) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Attachment) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_CodeableConcept) isElementDefinition_Example_ValueX_Choice() {
}

func (*ElementDefinition_Example_ValueX_CodeableReference) isElementDefinition_Example_ValueX_Choice() {
}

func (*ElementDefinition_Example_ValueX_Coding) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_ContactPoint) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Count) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Distance) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Duration) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_HumanName) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Identifier) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Money) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Period) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Quantity) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Range) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Ratio) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_RatioRange) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Reference) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_SampledData) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Signature) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Timing) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_ContactDetail) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_DataRequirement) isElementDefinition_Example_ValueX_Choice() {
}

func (*ElementDefinition_Example_ValueX_Expression) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_ParameterDefinition) isElementDefinition_Example_ValueX_Choice() {
}

func (*ElementDefinition_Example_ValueX_RelatedArtifact) isElementDefinition_Example_ValueX_Choice() {
}

func (*ElementDefinition_Example_ValueX_TriggerDefinition) isElementDefinition_Example_ValueX_Choice() {
}

func (*ElementDefinition_Example_ValueX_UsageContext) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Availability) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_ExtendedContactDetail) isElementDefinition_Example_ValueX_Choice() {
}

func (*ElementDefinition_Example_ValueX_Dosage) isElementDefinition_Example_ValueX_Choice() {}

func (*ElementDefinition_Example_ValueX_Meta) isElementDefinition_Example_ValueX_Choice() {}

// error | warning
type ElementDefinition_Constraint_SeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.ConstraintSeverityCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.ConstraintSeverityCode_Value" json:"value,omitempty"`
	Id        *String                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ElementDefinition_Constraint_SeverityCode) Reset() {
	*x = ElementDefinition_Constraint_SeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Constraint_SeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Constraint_SeverityCode) ProtoMessage() {}

func (x *ElementDefinition_Constraint_SeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Constraint_SeverityCode.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Constraint_SeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 10, 0}
}

func (x *ElementDefinition_Constraint_SeverityCode) GetValue() codes_go_proto.ConstraintSeverityCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.ConstraintSeverityCode_Value(0)
}

func (x *ElementDefinition_Constraint_SeverityCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Constraint_SeverityCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// required | extensible | preferred | example
type ElementDefinition_ElementDefinitionBinding_StrengthCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.BindingStrengthCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.BindingStrengthCode_Value" json:"value,omitempty"`
	Id        *String                                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                             `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ElementDefinition_ElementDefinitionBinding_StrengthCode) Reset() {
	*x = ElementDefinition_ElementDefinitionBinding_StrengthCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_ElementDefinitionBinding_StrengthCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_ElementDefinitionBinding_StrengthCode) ProtoMessage() {}

func (x *ElementDefinition_ElementDefinitionBinding_StrengthCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_ElementDefinitionBinding_StrengthCode.ProtoReflect.Descriptor instead.
func (*ElementDefinition_ElementDefinitionBinding_StrengthCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 11, 0}
}

func (x *ElementDefinition_ElementDefinitionBinding_StrengthCode) GetValue() codes_go_proto.BindingStrengthCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.BindingStrengthCode_Value(0)
}

func (x *ElementDefinition_ElementDefinitionBinding_StrengthCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_StrengthCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Additional Bindings - more rules about the binding
type ElementDefinition_ElementDefinitionBinding_Additional struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension                                                       `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Purpose   *ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode `protobuf:"bytes,3,opt,name=purpose,proto3" json:"purpose,omitempty"`
	// The value set for the additional binding
	ValueSet *Canonical `protobuf:"bytes,4,opt,name=value_set,json=valueSet,proto3" json:"value_set,omitempty"`
	// Documentation of the purpose of use of the binding
	Documentation *Markdown `protobuf:"bytes,5,opt,name=documentation,proto3" json:"documentation,omitempty"`
	// Concise documentation - for summary tables
	ShortDoco *String `protobuf:"bytes,6,opt,name=short_doco,json=shortDoco,proto3" json:"short_doco,omitempty"`
	// Qualifies the usage - jurisdiction, gender, workflow status etc.
	Usage []*UsageContext `protobuf:"bytes,7,rep,name=usage,proto3" json:"usage,omitempty"`
	// Whether binding can applies to all repeats, or just one
	Any *Boolean `protobuf:"bytes,8,opt,name=any,proto3" json:"any,omitempty"`
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) Reset() {
	*x = ElementDefinition_ElementDefinitionBinding_Additional{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_ElementDefinitionBinding_Additional) ProtoMessage() {}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_ElementDefinitionBinding_Additional.ProtoReflect.Descriptor instead.
func (*ElementDefinition_ElementDefinitionBinding_Additional) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 11, 1}
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) GetPurpose() *ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode {
	if x != nil {
		return x.Purpose
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) GetValueSet() *Canonical {
	if x != nil {
		return x.ValueSet
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) GetDocumentation() *Markdown {
	if x != nil {
		return x.Documentation
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) GetShortDoco() *String {
	if x != nil {
		return x.ShortDoco
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) GetUsage() []*UsageContext {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional) GetAny() *Boolean {
	if x != nil {
		return x.Any
	}
	return nil
}

// maximum | minimum | required | extensible | candidate | current |
// preferred | ui | starter | component
type ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.AdditionalBindingPurposeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.AdditionalBindingPurposeCode_Value" json:"value,omitempty"`
	Id        *String                                           `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                      `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode) Reset() {
	*x = ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode) ProtoMessage() {}

func (x *ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode.ProtoReflect.Descriptor instead.
func (*ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 11, 1, 0}
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode) GetValue() codes_go_proto.AdditionalBindingPurposeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.AdditionalBindingPurposeCode_Value(0)
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Computable language of mapping
type ElementDefinition_Mapping_LanguageCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	// This valueset is not enumerable, and so is represented as a string.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ElementDefinition_Mapping_LanguageCode) Reset() {
	*x = ElementDefinition_Mapping_LanguageCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementDefinition_Mapping_LanguageCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementDefinition_Mapping_LanguageCode) ProtoMessage() {}

func (x *ElementDefinition_Mapping_LanguageCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementDefinition_Mapping_LanguageCode.ProtoReflect.Descriptor instead.
func (*ElementDefinition_Mapping_LanguageCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{28, 12, 0}
}

func (x *ElementDefinition_Mapping_LanguageCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ElementDefinition_Mapping_LanguageCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *ElementDefinition_Mapping_LanguageCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Value of extension
type Extension_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Extension_ValueX_Base64Binary
	//	*Extension_ValueX_Boolean
	//	*Extension_ValueX_Canonical
	//	*Extension_ValueX_Code
	//	*Extension_ValueX_Date
	//	*Extension_ValueX_DateTime
	//	*Extension_ValueX_Decimal
	//	*Extension_ValueX_Id
	//	*Extension_ValueX_Instant
	//	*Extension_ValueX_Integer
	//	*Extension_ValueX_Integer64
	//	*Extension_ValueX_Markdown
	//	*Extension_ValueX_Oid
	//	*Extension_ValueX_PositiveInt
	//	*Extension_ValueX_StringValue
	//	*Extension_ValueX_Time
	//	*Extension_ValueX_UnsignedInt
	//	*Extension_ValueX_Uri
	//	*Extension_ValueX_Url
	//	*Extension_ValueX_Uuid
	//	*Extension_ValueX_Address
	//	*Extension_ValueX_Age
	//	*Extension_ValueX_Annotation
	//	*Extension_ValueX_Attachment
	//	*Extension_ValueX_CodeableConcept
	//	*Extension_ValueX_CodeableReference
	//	*Extension_ValueX_Coding
	//	*Extension_ValueX_ContactPoint
	//	*Extension_ValueX_Count
	//	*Extension_ValueX_Distance
	//	*Extension_ValueX_Duration
	//	*Extension_ValueX_HumanName
	//	*Extension_ValueX_Identifier
	//	*Extension_ValueX_Money
	//	*Extension_ValueX_Period
	//	*Extension_ValueX_Quantity
	//	*Extension_ValueX_Range
	//	*Extension_ValueX_Ratio
	//	*Extension_ValueX_RatioRange
	//	*Extension_ValueX_Reference
	//	*Extension_ValueX_SampledData
	//	*Extension_ValueX_Signature
	//	*Extension_ValueX_Timing
	//	*Extension_ValueX_ContactDetail
	//	*Extension_ValueX_DataRequirement
	//	*Extension_ValueX_Expression
	//	*Extension_ValueX_ParameterDefinition
	//	*Extension_ValueX_RelatedArtifact
	//	*Extension_ValueX_TriggerDefinition
	//	*Extension_ValueX_UsageContext
	//	*Extension_ValueX_Availability
	//	*Extension_ValueX_ExtendedContactDetail
	//	*Extension_ValueX_Dosage
	//	*Extension_ValueX_Meta
	Choice isExtension_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *Extension_ValueX) Reset() {
	*x = Extension_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Extension_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Extension_ValueX) ProtoMessage() {}

func (x *Extension_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Extension_ValueX.ProtoReflect.Descriptor instead.
func (*Extension_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{31, 0}
}

func (m *Extension_ValueX) GetChoice() isExtension_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Extension_ValueX) GetBase64Binary() *Base64Binary {
	if x, ok := x.GetChoice().(*Extension_ValueX_Base64Binary); ok {
		return x.Base64Binary
	}
	return nil
}

func (x *Extension_ValueX) GetBoolean() *Boolean {
	if x, ok := x.GetChoice().(*Extension_ValueX_Boolean); ok {
		return x.Boolean
	}
	return nil
}

func (x *Extension_ValueX) GetCanonical() *Canonical {
	if x, ok := x.GetChoice().(*Extension_ValueX_Canonical); ok {
		return x.Canonical
	}
	return nil
}

func (x *Extension_ValueX) GetCode() *Code {
	if x, ok := x.GetChoice().(*Extension_ValueX_Code); ok {
		return x.Code
	}
	return nil
}

func (x *Extension_ValueX) GetDate() *Date {
	if x, ok := x.GetChoice().(*Extension_ValueX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *Extension_ValueX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*Extension_ValueX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

func (x *Extension_ValueX) GetDecimal() *Decimal {
	if x, ok := x.GetChoice().(*Extension_ValueX_Decimal); ok {
		return x.Decimal
	}
	return nil
}

func (x *Extension_ValueX) GetId() *Id {
	if x, ok := x.GetChoice().(*Extension_ValueX_Id); ok {
		return x.Id
	}
	return nil
}

func (x *Extension_ValueX) GetInstant() *Instant {
	if x, ok := x.GetChoice().(*Extension_ValueX_Instant); ok {
		return x.Instant
	}
	return nil
}

func (x *Extension_ValueX) GetInteger() *Integer {
	if x, ok := x.GetChoice().(*Extension_ValueX_Integer); ok {
		return x.Integer
	}
	return nil
}

func (x *Extension_ValueX) GetInteger64() *Integer64 {
	if x, ok := x.GetChoice().(*Extension_ValueX_Integer64); ok {
		return x.Integer64
	}
	return nil
}

func (x *Extension_ValueX) GetMarkdown() *Markdown {
	if x, ok := x.GetChoice().(*Extension_ValueX_Markdown); ok {
		return x.Markdown
	}
	return nil
}

func (x *Extension_ValueX) GetOid() *Oid {
	if x, ok := x.GetChoice().(*Extension_ValueX_Oid); ok {
		return x.Oid
	}
	return nil
}

func (x *Extension_ValueX) GetPositiveInt() *PositiveInt {
	if x, ok := x.GetChoice().(*Extension_ValueX_PositiveInt); ok {
		return x.PositiveInt
	}
	return nil
}

func (x *Extension_ValueX) GetStringValue() *String {
	if x, ok := x.GetChoice().(*Extension_ValueX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *Extension_ValueX) GetTime() *Time {
	if x, ok := x.GetChoice().(*Extension_ValueX_Time); ok {
		return x.Time
	}
	return nil
}

func (x *Extension_ValueX) GetUnsignedInt() *UnsignedInt {
	if x, ok := x.GetChoice().(*Extension_ValueX_UnsignedInt); ok {
		return x.UnsignedInt
	}
	return nil
}

func (x *Extension_ValueX) GetUri() *Uri {
	if x, ok := x.GetChoice().(*Extension_ValueX_Uri); ok {
		return x.Uri
	}
	return nil
}

func (x *Extension_ValueX) GetUrl() *Url {
	if x, ok := x.GetChoice().(*Extension_ValueX_Url); ok {
		return x.Url
	}
	return nil
}

func (x *Extension_ValueX) GetUuid() *Uuid {
	if x, ok := x.GetChoice().(*Extension_ValueX_Uuid); ok {
		return x.Uuid
	}
	return nil
}

func (x *Extension_ValueX) GetAddress() *Address {
	if x, ok := x.GetChoice().(*Extension_ValueX_Address); ok {
		return x.Address
	}
	return nil
}

func (x *Extension_ValueX) GetAge() *Age {
	if x, ok := x.GetChoice().(*Extension_ValueX_Age); ok {
		return x.Age
	}
	return nil
}

func (x *Extension_ValueX) GetAnnotation() *Annotation {
	if x, ok := x.GetChoice().(*Extension_ValueX_Annotation); ok {
		return x.Annotation
	}
	return nil
}

func (x *Extension_ValueX) GetAttachment() *Attachment {
	if x, ok := x.GetChoice().(*Extension_ValueX_Attachment); ok {
		return x.Attachment
	}
	return nil
}

func (x *Extension_ValueX) GetCodeableConcept() *CodeableConcept {
	if x, ok := x.GetChoice().(*Extension_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *Extension_ValueX) GetCodeableReference() *CodeableReference {
	if x, ok := x.GetChoice().(*Extension_ValueX_CodeableReference); ok {
		return x.CodeableReference
	}
	return nil
}

func (x *Extension_ValueX) GetCoding() *Coding {
	if x, ok := x.GetChoice().(*Extension_ValueX_Coding); ok {
		return x.Coding
	}
	return nil
}

func (x *Extension_ValueX) GetContactPoint() *ContactPoint {
	if x, ok := x.GetChoice().(*Extension_ValueX_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *Extension_ValueX) GetCount() *Count {
	if x, ok := x.GetChoice().(*Extension_ValueX_Count); ok {
		return x.Count
	}
	return nil
}

func (x *Extension_ValueX) GetDistance() *Distance {
	if x, ok := x.GetChoice().(*Extension_ValueX_Distance); ok {
		return x.Distance
	}
	return nil
}

func (x *Extension_ValueX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*Extension_ValueX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *Extension_ValueX) GetHumanName() *HumanName {
	if x, ok := x.GetChoice().(*Extension_ValueX_HumanName); ok {
		return x.HumanName
	}
	return nil
}

func (x *Extension_ValueX) GetIdentifier() *Identifier {
	if x, ok := x.GetChoice().(*Extension_ValueX_Identifier); ok {
		return x.Identifier
	}
	return nil
}

func (x *Extension_ValueX) GetMoney() *Money {
	if x, ok := x.GetChoice().(*Extension_ValueX_Money); ok {
		return x.Money
	}
	return nil
}

func (x *Extension_ValueX) GetPeriod() *Period {
	if x, ok := x.GetChoice().(*Extension_ValueX_Period); ok {
		return x.Period
	}
	return nil
}

func (x *Extension_ValueX) GetQuantity() *Quantity {
	if x, ok := x.GetChoice().(*Extension_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *Extension_ValueX) GetRange() *Range {
	if x, ok := x.GetChoice().(*Extension_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Extension_ValueX) GetRatio() *Ratio {
	if x, ok := x.GetChoice().(*Extension_ValueX_Ratio); ok {
		return x.Ratio
	}
	return nil
}

func (x *Extension_ValueX) GetRatioRange() *RatioRange {
	if x, ok := x.GetChoice().(*Extension_ValueX_RatioRange); ok {
		return x.RatioRange
	}
	return nil
}

func (x *Extension_ValueX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*Extension_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *Extension_ValueX) GetSampledData() *SampledData {
	if x, ok := x.GetChoice().(*Extension_ValueX_SampledData); ok {
		return x.SampledData
	}
	return nil
}

func (x *Extension_ValueX) GetSignature() *Signature {
	if x, ok := x.GetChoice().(*Extension_ValueX_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *Extension_ValueX) GetTiming() *Timing {
	if x, ok := x.GetChoice().(*Extension_ValueX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *Extension_ValueX) GetContactDetail() *ContactDetail {
	if x, ok := x.GetChoice().(*Extension_ValueX_ContactDetail); ok {
		return x.ContactDetail
	}
	return nil
}

func (x *Extension_ValueX) GetDataRequirement() *DataRequirement {
	if x, ok := x.GetChoice().(*Extension_ValueX_DataRequirement); ok {
		return x.DataRequirement
	}
	return nil
}

func (x *Extension_ValueX) GetExpression() *Expression {
	if x, ok := x.GetChoice().(*Extension_ValueX_Expression); ok {
		return x.Expression
	}
	return nil
}

func (x *Extension_ValueX) GetParameterDefinition() *ParameterDefinition {
	if x, ok := x.GetChoice().(*Extension_ValueX_ParameterDefinition); ok {
		return x.ParameterDefinition
	}
	return nil
}

func (x *Extension_ValueX) GetRelatedArtifact() *RelatedArtifact {
	if x, ok := x.GetChoice().(*Extension_ValueX_RelatedArtifact); ok {
		return x.RelatedArtifact
	}
	return nil
}

func (x *Extension_ValueX) GetTriggerDefinition() *TriggerDefinition {
	if x, ok := x.GetChoice().(*Extension_ValueX_TriggerDefinition); ok {
		return x.TriggerDefinition
	}
	return nil
}

func (x *Extension_ValueX) GetUsageContext() *UsageContext {
	if x, ok := x.GetChoice().(*Extension_ValueX_UsageContext); ok {
		return x.UsageContext
	}
	return nil
}

func (x *Extension_ValueX) GetAvailability() *Availability {
	if x, ok := x.GetChoice().(*Extension_ValueX_Availability); ok {
		return x.Availability
	}
	return nil
}

func (x *Extension_ValueX) GetExtendedContactDetail() *ExtendedContactDetail {
	if x, ok := x.GetChoice().(*Extension_ValueX_ExtendedContactDetail); ok {
		return x.ExtendedContactDetail
	}
	return nil
}

func (x *Extension_ValueX) GetDosage() *Dosage {
	if x, ok := x.GetChoice().(*Extension_ValueX_Dosage); ok {
		return x.Dosage
	}
	return nil
}

func (x *Extension_ValueX) GetMeta() *Meta {
	if x, ok := x.GetChoice().(*Extension_ValueX_Meta); ok {
		return x.Meta
	}
	return nil
}

type isExtension_ValueX_Choice interface {
	isExtension_ValueX_Choice()
}

type Extension_ValueX_Base64Binary struct {
	Base64Binary *Base64Binary `protobuf:"bytes,1,opt,name=base64_binary,json=base64Binary,proto3,oneof"`
}

type Extension_ValueX_Boolean struct {
	Boolean *Boolean `protobuf:"bytes,2,opt,name=boolean,proto3,oneof"`
}

type Extension_ValueX_Canonical struct {
	Canonical *Canonical `protobuf:"bytes,3,opt,name=canonical,proto3,oneof"`
}

type Extension_ValueX_Code struct {
	Code *Code `protobuf:"bytes,4,opt,name=code,proto3,oneof"`
}

type Extension_ValueX_Date struct {
	Date *Date `protobuf:"bytes,5,opt,name=date,proto3,oneof"`
}

type Extension_ValueX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,6,opt,name=date_time,json=dateTime,proto3,oneof"`
}

type Extension_ValueX_Decimal struct {
	Decimal *Decimal `protobuf:"bytes,7,opt,name=decimal,proto3,oneof"`
}

type Extension_ValueX_Id struct {
	Id *Id `protobuf:"bytes,8,opt,name=id,proto3,oneof"`
}

type Extension_ValueX_Instant struct {
	Instant *Instant `protobuf:"bytes,9,opt,name=instant,proto3,oneof"`
}

type Extension_ValueX_Integer struct {
	Integer *Integer `protobuf:"bytes,10,opt,name=integer,proto3,oneof"`
}

type Extension_ValueX_Integer64 struct {
	Integer64 *Integer64 `protobuf:"bytes,50,opt,name=integer64,proto3,oneof"`
}

type Extension_ValueX_Markdown struct {
	Markdown *Markdown `protobuf:"bytes,11,opt,name=markdown,proto3,oneof"`
}

type Extension_ValueX_Oid struct {
	Oid *Oid `protobuf:"bytes,12,opt,name=oid,proto3,oneof"`
}

type Extension_ValueX_PositiveInt struct {
	PositiveInt *PositiveInt `protobuf:"bytes,13,opt,name=positive_int,json=positiveInt,proto3,oneof"`
}

type Extension_ValueX_StringValue struct {
	StringValue *String `protobuf:"bytes,14,opt,name=string_value,json=string,proto3,oneof"`
}

type Extension_ValueX_Time struct {
	Time *Time `protobuf:"bytes,15,opt,name=time,proto3,oneof"`
}

type Extension_ValueX_UnsignedInt struct {
	UnsignedInt *UnsignedInt `protobuf:"bytes,16,opt,name=unsigned_int,json=unsignedInt,proto3,oneof"`
}

type Extension_ValueX_Uri struct {
	Uri *Uri `protobuf:"bytes,17,opt,name=uri,proto3,oneof"`
}

type Extension_ValueX_Url struct {
	Url *Url `protobuf:"bytes,18,opt,name=url,proto3,oneof"`
}

type Extension_ValueX_Uuid struct {
	Uuid *Uuid `protobuf:"bytes,19,opt,name=uuid,proto3,oneof"`
}

type Extension_ValueX_Address struct {
	Address *Address `protobuf:"bytes,20,opt,name=address,proto3,oneof"`
}

type Extension_ValueX_Age struct {
	Age *Age `protobuf:"bytes,21,opt,name=age,proto3,oneof"`
}

type Extension_ValueX_Annotation struct {
	Annotation *Annotation `protobuf:"bytes,22,opt,name=annotation,proto3,oneof"`
}

type Extension_ValueX_Attachment struct {
	Attachment *Attachment `protobuf:"bytes,23,opt,name=attachment,proto3,oneof"`
}

type Extension_ValueX_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,24,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type Extension_ValueX_CodeableReference struct {
	CodeableReference *CodeableReference `protobuf:"bytes,51,opt,name=codeable_reference,json=codeableReference,proto3,oneof"`
}

type Extension_ValueX_Coding struct {
	Coding *Coding `protobuf:"bytes,25,opt,name=coding,proto3,oneof"`
}

type Extension_ValueX_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,26,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type Extension_ValueX_Count struct {
	Count *Count `protobuf:"bytes,27,opt,name=count,proto3,oneof"`
}

type Extension_ValueX_Distance struct {
	Distance *Distance `protobuf:"bytes,28,opt,name=distance,proto3,oneof"`
}

type Extension_ValueX_Duration struct {
	Duration *Duration `protobuf:"bytes,29,opt,name=duration,proto3,oneof"`
}

type Extension_ValueX_HumanName struct {
	HumanName *HumanName `protobuf:"bytes,30,opt,name=human_name,json=humanName,proto3,oneof"`
}

type Extension_ValueX_Identifier struct {
	Identifier *Identifier `protobuf:"bytes,31,opt,name=identifier,proto3,oneof"`
}

type Extension_ValueX_Money struct {
	Money *Money `protobuf:"bytes,32,opt,name=money,proto3,oneof"`
}

type Extension_ValueX_Period struct {
	Period *Period `protobuf:"bytes,33,opt,name=period,proto3,oneof"`
}

type Extension_ValueX_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,34,opt,name=quantity,proto3,oneof"`
}

type Extension_ValueX_Range struct {
	Range *Range `protobuf:"bytes,35,opt,name=range,proto3,oneof"`
}

type Extension_ValueX_Ratio struct {
	Ratio *Ratio `protobuf:"bytes,36,opt,name=ratio,proto3,oneof"`
}

type Extension_ValueX_RatioRange struct {
	RatioRange *RatioRange `protobuf:"bytes,52,opt,name=ratio_range,json=ratioRange,proto3,oneof"`
}

type Extension_ValueX_Reference struct {
	Reference *Reference `protobuf:"bytes,37,opt,name=reference,proto3,oneof"`
}

type Extension_ValueX_SampledData struct {
	SampledData *SampledData `protobuf:"bytes,38,opt,name=sampled_data,json=sampledData,proto3,oneof"`
}

type Extension_ValueX_Signature struct {
	Signature *Signature `protobuf:"bytes,39,opt,name=signature,proto3,oneof"`
}

type Extension_ValueX_Timing struct {
	Timing *Timing `protobuf:"bytes,40,opt,name=timing,proto3,oneof"`
}

type Extension_ValueX_ContactDetail struct {
	ContactDetail *ContactDetail `protobuf:"bytes,41,opt,name=contact_detail,json=contactDetail,proto3,oneof"`
}

type Extension_ValueX_DataRequirement struct {
	DataRequirement *DataRequirement `protobuf:"bytes,43,opt,name=data_requirement,json=dataRequirement,proto3,oneof"`
}

type Extension_ValueX_Expression struct {
	Expression *Expression `protobuf:"bytes,44,opt,name=expression,proto3,oneof"`
}

type Extension_ValueX_ParameterDefinition struct {
	ParameterDefinition *ParameterDefinition `protobuf:"bytes,45,opt,name=parameter_definition,json=parameterDefinition,proto3,oneof"`
}

type Extension_ValueX_RelatedArtifact struct {
	RelatedArtifact *RelatedArtifact `protobuf:"bytes,46,opt,name=related_artifact,json=relatedArtifact,proto3,oneof"`
}

type Extension_ValueX_TriggerDefinition struct {
	TriggerDefinition *TriggerDefinition `protobuf:"bytes,47,opt,name=trigger_definition,json=triggerDefinition,proto3,oneof"`
}

type Extension_ValueX_UsageContext struct {
	UsageContext *UsageContext `protobuf:"bytes,48,opt,name=usage_context,json=usageContext,proto3,oneof"`
}

type Extension_ValueX_Availability struct {
	Availability *Availability `protobuf:"bytes,53,opt,name=availability,proto3,oneof"`
}

type Extension_ValueX_ExtendedContactDetail struct {
	ExtendedContactDetail *ExtendedContactDetail `protobuf:"bytes,54,opt,name=extended_contact_detail,json=extendedContactDetail,proto3,oneof"`
}

type Extension_ValueX_Dosage struct {
	Dosage *Dosage `protobuf:"bytes,49,opt,name=dosage,proto3,oneof"`
}

type Extension_ValueX_Meta struct {
	Meta *Meta `protobuf:"bytes,55,opt,name=meta,proto3,oneof"`
}

func (*Extension_ValueX_Base64Binary) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Boolean) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Canonical) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Code) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Date) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_DateTime) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Decimal) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Id) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Instant) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Integer) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Integer64) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Markdown) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Oid) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_PositiveInt) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_StringValue) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Time) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_UnsignedInt) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Uri) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Url) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Uuid) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Address) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Age) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Annotation) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Attachment) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_CodeableConcept) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_CodeableReference) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Coding) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_ContactPoint) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Count) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Distance) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Duration) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_HumanName) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Identifier) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Money) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Period) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Quantity) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Range) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Ratio) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_RatioRange) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Reference) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_SampledData) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Signature) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Timing) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_ContactDetail) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_DataRequirement) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Expression) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_ParameterDefinition) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_RelatedArtifact) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_TriggerDefinition) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_UsageContext) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Availability) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_ExtendedContactDetail) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Dosage) isExtension_ValueX_Choice() {}

func (*Extension_ValueX_Meta) isExtension_ValueX_Choice() {}

// usual | official | temp | nickname | anonymous | old | maiden
type HumanName_UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.NameUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.NameUseCode_Value" json:"value,omitempty"`
	Id        *String                          `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                     `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *HumanName_UseCode) Reset() {
	*x = HumanName_UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanName_UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanName_UseCode) ProtoMessage() {}

func (x *HumanName_UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanName_UseCode.ProtoReflect.Descriptor instead.
func (*HumanName_UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{32, 0}
}

func (x *HumanName_UseCode) GetValue() codes_go_proto.NameUseCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.NameUseCode_Value(0)
}

func (x *HumanName_UseCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *HumanName_UseCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// usual | official | temp | secondary | old (If known)
type Identifier_UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.IdentifierUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.IdentifierUseCode_Value" json:"value,omitempty"`
	Id        *String                                `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                           `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Identifier_UseCode) Reset() {
	*x = Identifier_UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier_UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier_UseCode) ProtoMessage() {}

func (x *Identifier_UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier_UseCode.ProtoReflect.Descriptor instead.
func (*Identifier_UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{34, 0}
}

func (x *Identifier_UseCode) GetValue() codes_go_proto.IdentifierUseCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.IdentifierUseCode_Value(0)
}

func (x *Identifier_UseCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Identifier_UseCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// base | surcharge | deduction | discount | tax | informational
type MonetaryComponent_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PriceComponentTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.PriceComponentTypeCode_Value" json:"value,omitempty"`
	Id        *String                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MonetaryComponent_TypeCode) Reset() {
	*x = MonetaryComponent_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonetaryComponent_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonetaryComponent_TypeCode) ProtoMessage() {}

func (x *MonetaryComponent_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonetaryComponent_TypeCode.ProtoReflect.Descriptor instead.
func (*MonetaryComponent_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{41, 0}
}

func (x *MonetaryComponent_TypeCode) GetValue() codes_go_proto.PriceComponentTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PriceComponentTypeCode_Value(0)
}

func (x *MonetaryComponent_TypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MonetaryComponent_TypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// ISO 4217 Currency Code
type Money_CurrencyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	// This valueset is not enumerable, and so is represented as a string.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Money_CurrencyCode) Reset() {
	*x = Money_CurrencyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Money_CurrencyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Money_CurrencyCode) ProtoMessage() {}

func (x *Money_CurrencyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Money_CurrencyCode.ProtoReflect.Descriptor instead.
func (*Money_CurrencyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{42, 0}
}

func (x *Money_CurrencyCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Money_CurrencyCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Money_CurrencyCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// < | <= | >= | > | ad - how to understand the value
type MoneyQuantity_ComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuantityComparatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuantityComparatorCode_Value" json:"value,omitempty"`
	Id        *String                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *MoneyQuantity_ComparatorCode) Reset() {
	*x = MoneyQuantity_ComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyQuantity_ComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyQuantity_ComparatorCode) ProtoMessage() {}

func (x *MoneyQuantity_ComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyQuantity_ComparatorCode.ProtoReflect.Descriptor instead.
func (*MoneyQuantity_ComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{43, 0}
}

func (x *MoneyQuantity_ComparatorCode) GetValue() codes_go_proto.QuantityComparatorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuantityComparatorCode_Value(0)
}

func (x *MoneyQuantity_ComparatorCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MoneyQuantity_ComparatorCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// generated | extensions | additional | empty
type Narrative_StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.NarrativeStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.NarrativeStatusCode_Value" json:"value,omitempty"`
	Id        *String                                  `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                             `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Narrative_StatusCode) Reset() {
	*x = Narrative_StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Narrative_StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Narrative_StatusCode) ProtoMessage() {}

func (x *Narrative_StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Narrative_StatusCode.ProtoReflect.Descriptor instead.
func (*Narrative_StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{44, 0}
}

func (x *Narrative_StatusCode) GetValue() codes_go_proto.NarrativeStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.NarrativeStatusCode_Value(0)
}

func (x *Narrative_StatusCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Narrative_StatusCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// in | out
type ParameterDefinition_UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.OperationParameterUseCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.OperationParameterUseCode_Value" json:"value,omitempty"`
	Id        *String                                        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                   `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ParameterDefinition_UseCode) Reset() {
	*x = ParameterDefinition_UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterDefinition_UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterDefinition_UseCode) ProtoMessage() {}

func (x *ParameterDefinition_UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterDefinition_UseCode.ProtoReflect.Descriptor instead.
func (*ParameterDefinition_UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{46, 0}
}

func (x *ParameterDefinition_UseCode) GetValue() codes_go_proto.OperationParameterUseCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.OperationParameterUseCode_Value(0)
}

func (x *ParameterDefinition_UseCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParameterDefinition_UseCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// What type of value
type ParameterDefinition_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.FHIRTypesCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.FHIRTypesCode_Value" json:"value,omitempty"`
	Id        *String                            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                       `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *ParameterDefinition_TypeCode) Reset() {
	*x = ParameterDefinition_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterDefinition_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterDefinition_TypeCode) ProtoMessage() {}

func (x *ParameterDefinition_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterDefinition_TypeCode.ProtoReflect.Descriptor instead.
func (*ParameterDefinition_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{46, 1}
}

func (x *ParameterDefinition_TypeCode) GetValue() codes_go_proto.FHIRTypesCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.FHIRTypesCode_Value(0)
}

func (x *ParameterDefinition_TypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ParameterDefinition_TypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The shelf life time period can be specified using a numerical value for the
// period of time and its unit of time measurement The unit of measurement
// shall be specified in accordance with ISO 11240 and the resulting
// terminology The symbol and the symbol identifier shall be used
type ProductShelfLife_PeriodX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*ProductShelfLife_PeriodX_Duration
	//	*ProductShelfLife_PeriodX_StringValue
	Choice isProductShelfLife_PeriodX_Choice `protobuf_oneof:"choice"`
}

func (x *ProductShelfLife_PeriodX) Reset() {
	*x = ProductShelfLife_PeriodX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductShelfLife_PeriodX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductShelfLife_PeriodX) ProtoMessage() {}

func (x *ProductShelfLife_PeriodX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductShelfLife_PeriodX.ProtoReflect.Descriptor instead.
func (*ProductShelfLife_PeriodX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{50, 0}
}

func (m *ProductShelfLife_PeriodX) GetChoice() isProductShelfLife_PeriodX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *ProductShelfLife_PeriodX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*ProductShelfLife_PeriodX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ProductShelfLife_PeriodX) GetStringValue() *String {
	if x, ok := x.GetChoice().(*ProductShelfLife_PeriodX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

type isProductShelfLife_PeriodX_Choice interface {
	isProductShelfLife_PeriodX_Choice()
}

type ProductShelfLife_PeriodX_Duration struct {
	Duration *Duration `protobuf:"bytes,1,opt,name=duration,proto3,oneof"`
}

type ProductShelfLife_PeriodX_StringValue struct {
	StringValue *String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

func (*ProductShelfLife_PeriodX_Duration) isProductShelfLife_PeriodX_Choice() {}

func (*ProductShelfLife_PeriodX_StringValue) isProductShelfLife_PeriodX_Choice() {}

// < | <= | >= | > | ad - how to understand the value
type Quantity_ComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.QuantityComparatorCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.QuantityComparatorCode_Value" json:"value,omitempty"`
	Id        *String                                     `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Quantity_ComparatorCode) Reset() {
	*x = Quantity_ComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity_ComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity_ComparatorCode) ProtoMessage() {}

func (x *Quantity_ComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity_ComparatorCode.ProtoReflect.Descriptor instead.
func (*Quantity_ComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{51, 0}
}

func (x *Quantity_ComparatorCode) GetValue() codes_go_proto.QuantityComparatorCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.QuantityComparatorCode_Value(0)
}

func (x *Quantity_ComparatorCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Quantity_ComparatorCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// documentation | justification | citation | predecessor | successor |
// derived-from | depends-on | composed-of | part-of | amends | amended-with |
// appends | appended-with | cites | cited-by | comments-on | comment-in |
// contains | contained-in | corrects | correction-in | replaces |
// replaced-with | retracts | retracted-by | signs | similar-to | supports |
// supported-with | transforms | transformed-into | transformed-with |
// documents | specification-of | created-with | cite-as
type RelatedArtifact_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.RelatedArtifactTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.RelatedArtifactTypeCode_Value" json:"value,omitempty"`
	Id        *String                                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RelatedArtifact_TypeCode) Reset() {
	*x = RelatedArtifact_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedArtifact_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedArtifact_TypeCode) ProtoMessage() {}

func (x *RelatedArtifact_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedArtifact_TypeCode.ProtoReflect.Descriptor instead.
func (*RelatedArtifact_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{57, 0}
}

func (x *RelatedArtifact_TypeCode) GetValue() codes_go_proto.RelatedArtifactTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.RelatedArtifactTypeCode_Value(0)
}

func (x *RelatedArtifact_TypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RelatedArtifact_TypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// draft | active | retired | unknown
type RelatedArtifact_PublicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.PublicationStatusCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.PublicationStatusCode_Value" json:"value,omitempty"`
	Id        *String                                    `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                               `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *RelatedArtifact_PublicationStatusCode) Reset() {
	*x = RelatedArtifact_PublicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedArtifact_PublicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedArtifact_PublicationStatusCode) ProtoMessage() {}

func (x *RelatedArtifact_PublicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedArtifact_PublicationStatusCode.ProtoReflect.Descriptor instead.
func (*RelatedArtifact_PublicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{57, 1}
}

func (x *RelatedArtifact_PublicationStatusCode) GetValue() codes_go_proto.PublicationStatusCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.PublicationStatusCode_Value(0)
}

func (x *RelatedArtifact_PublicationStatusCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RelatedArtifact_PublicationStatusCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// The measurement unit of the interval between samples
type SampledData_IntervalUnitCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	// This valueset is not enumerable, and so is represented as a string.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SampledData_IntervalUnitCode) Reset() {
	*x = SampledData_IntervalUnitCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampledData_IntervalUnitCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampledData_IntervalUnitCode) ProtoMessage() {}

func (x *SampledData_IntervalUnitCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampledData_IntervalUnitCode.ProtoReflect.Descriptor instead.
func (*SampledData_IntervalUnitCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{58, 0}
}

func (x *SampledData_IntervalUnitCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SampledData_IntervalUnitCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *SampledData_IntervalUnitCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The technical format of the signed resources
type Signature_TargetFormatCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	// This valueset is not enumerable, and so is represented as a string.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Signature_TargetFormatCode) Reset() {
	*x = Signature_TargetFormatCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature_TargetFormatCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature_TargetFormatCode) ProtoMessage() {}

func (x *Signature_TargetFormatCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature_TargetFormatCode.ProtoReflect.Descriptor instead.
func (*Signature_TargetFormatCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{59, 0}
}

func (x *Signature_TargetFormatCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Signature_TargetFormatCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Signature_TargetFormatCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// The technical format of the signature
type Signature_SigFormatCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *String      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
	// This valueset is not enumerable, and so is represented as a string.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Signature_SigFormatCode) Reset() {
	*x = Signature_SigFormatCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature_SigFormatCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature_SigFormatCode) ProtoMessage() {}

func (x *Signature_SigFormatCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature_SigFormatCode.ProtoReflect.Descriptor instead.
func (*Signature_SigFormatCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{59, 1}
}

func (x *Signature_SigFormatCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Signature_SigFormatCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Signature_SigFormatCode) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// When the event is to occur
type Timing_Repeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id for inter-element referencing
	Id *String `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Additional content defined by implementations
	Extension []*Extension           `protobuf:"bytes,2,rep,name=extension,proto3" json:"extension,omitempty"`
	Bounds    *Timing_Repeat_BoundsX `protobuf:"bytes,3,opt,name=bounds,proto3" json:"bounds,omitempty"`
	// Number of times to repeat
	Count *PositiveInt `protobuf:"bytes,4,opt,name=count,proto3" json:"count,omitempty"`
	// Maximum number of times to repeat
	CountMax *PositiveInt `protobuf:"bytes,5,opt,name=count_max,json=countMax,proto3" json:"count_max,omitempty"`
	// How long when it happens
	Duration *Decimal `protobuf:"bytes,6,opt,name=duration,proto3" json:"duration,omitempty"`
	// How long when it happens (Max)
	DurationMax  *Decimal                        `protobuf:"bytes,7,opt,name=duration_max,json=durationMax,proto3" json:"duration_max,omitempty"`
	DurationUnit *Timing_Repeat_DurationUnitCode `protobuf:"bytes,8,opt,name=duration_unit,json=durationUnit,proto3" json:"duration_unit,omitempty"`
	// Indicates the number of repetitions that should occur within a period.
	// I.e. Event occurs frequency times per period
	Frequency *PositiveInt `protobuf:"bytes,9,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Event occurs up to frequencyMax times per period
	FrequencyMax *PositiveInt `protobuf:"bytes,10,opt,name=frequency_max,json=frequencyMax,proto3" json:"frequency_max,omitempty"`
	// The duration to which the frequency applies. I.e. Event occurs frequency
	// times per period
	Period *Decimal `protobuf:"bytes,11,opt,name=period,proto3" json:"period,omitempty"`
	// Upper limit of period (3-4 hours)
	PeriodMax  *Decimal                       `protobuf:"bytes,12,opt,name=period_max,json=periodMax,proto3" json:"period_max,omitempty"`
	PeriodUnit *Timing_Repeat_PeriodUnitCode  `protobuf:"bytes,13,opt,name=period_unit,json=periodUnit,proto3" json:"period_unit,omitempty"`
	DayOfWeek  []*Timing_Repeat_DayOfWeekCode `protobuf:"bytes,14,rep,name=day_of_week,json=dayOfWeek,proto3" json:"day_of_week,omitempty"`
	// Time of day for action
	TimeOfDay []*Time                   `protobuf:"bytes,15,rep,name=time_of_day,json=timeOfDay,proto3" json:"time_of_day,omitempty"`
	When      []*Timing_Repeat_WhenCode `protobuf:"bytes,16,rep,name=when,proto3" json:"when,omitempty"`
	// Minutes from event (before or after)
	Offset *UnsignedInt `protobuf:"bytes,17,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *Timing_Repeat) Reset() {
	*x = Timing_Repeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing_Repeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing_Repeat) ProtoMessage() {}

func (x *Timing_Repeat) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing_Repeat.ProtoReflect.Descriptor instead.
func (*Timing_Repeat) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{63, 0}
}

func (x *Timing_Repeat) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Timing_Repeat) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

func (x *Timing_Repeat) GetBounds() *Timing_Repeat_BoundsX {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *Timing_Repeat) GetCount() *PositiveInt {
	if x != nil {
		return x.Count
	}
	return nil
}

func (x *Timing_Repeat) GetCountMax() *PositiveInt {
	if x != nil {
		return x.CountMax
	}
	return nil
}

func (x *Timing_Repeat) GetDuration() *Decimal {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Timing_Repeat) GetDurationMax() *Decimal {
	if x != nil {
		return x.DurationMax
	}
	return nil
}

func (x *Timing_Repeat) GetDurationUnit() *Timing_Repeat_DurationUnitCode {
	if x != nil {
		return x.DurationUnit
	}
	return nil
}

func (x *Timing_Repeat) GetFrequency() *PositiveInt {
	if x != nil {
		return x.Frequency
	}
	return nil
}

func (x *Timing_Repeat) GetFrequencyMax() *PositiveInt {
	if x != nil {
		return x.FrequencyMax
	}
	return nil
}

func (x *Timing_Repeat) GetPeriod() *Decimal {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *Timing_Repeat) GetPeriodMax() *Decimal {
	if x != nil {
		return x.PeriodMax
	}
	return nil
}

func (x *Timing_Repeat) GetPeriodUnit() *Timing_Repeat_PeriodUnitCode {
	if x != nil {
		return x.PeriodUnit
	}
	return nil
}

func (x *Timing_Repeat) GetDayOfWeek() []*Timing_Repeat_DayOfWeekCode {
	if x != nil {
		return x.DayOfWeek
	}
	return nil
}

func (x *Timing_Repeat) GetTimeOfDay() []*Time {
	if x != nil {
		return x.TimeOfDay
	}
	return nil
}

func (x *Timing_Repeat) GetWhen() []*Timing_Repeat_WhenCode {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *Timing_Repeat) GetOffset() *UnsignedInt {
	if x != nil {
		return x.Offset
	}
	return nil
}

// Length/Range of lengths, or (Start and/or end) limits
type Timing_Repeat_BoundsX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*Timing_Repeat_BoundsX_Duration
	//	*Timing_Repeat_BoundsX_Range
	//	*Timing_Repeat_BoundsX_Period
	Choice isTiming_Repeat_BoundsX_Choice `protobuf_oneof:"choice"`
}

func (x *Timing_Repeat_BoundsX) Reset() {
	*x = Timing_Repeat_BoundsX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing_Repeat_BoundsX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing_Repeat_BoundsX) ProtoMessage() {}

func (x *Timing_Repeat_BoundsX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing_Repeat_BoundsX.ProtoReflect.Descriptor instead.
func (*Timing_Repeat_BoundsX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{63, 0, 0}
}

func (m *Timing_Repeat_BoundsX) GetChoice() isTiming_Repeat_BoundsX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Timing_Repeat_BoundsX) GetDuration() *Duration {
	if x, ok := x.GetChoice().(*Timing_Repeat_BoundsX_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *Timing_Repeat_BoundsX) GetRange() *Range {
	if x, ok := x.GetChoice().(*Timing_Repeat_BoundsX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *Timing_Repeat_BoundsX) GetPeriod() *Period {
	if x, ok := x.GetChoice().(*Timing_Repeat_BoundsX_Period); ok {
		return x.Period
	}
	return nil
}

type isTiming_Repeat_BoundsX_Choice interface {
	isTiming_Repeat_BoundsX_Choice()
}

type Timing_Repeat_BoundsX_Duration struct {
	Duration *Duration `protobuf:"bytes,1,opt,name=duration,proto3,oneof"`
}

type Timing_Repeat_BoundsX_Range struct {
	Range *Range `protobuf:"bytes,2,opt,name=range,proto3,oneof"`
}

type Timing_Repeat_BoundsX_Period struct {
	Period *Period `protobuf:"bytes,3,opt,name=period,proto3,oneof"`
}

func (*Timing_Repeat_BoundsX_Duration) isTiming_Repeat_BoundsX_Choice() {}

func (*Timing_Repeat_BoundsX_Range) isTiming_Repeat_BoundsX_Choice() {}

func (*Timing_Repeat_BoundsX_Period) isTiming_Repeat_BoundsX_Choice() {}

// s | min | h | d | wk | mo | a - unit of time (UCUM)
type Timing_Repeat_DurationUnitCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.UnitsOfTimeValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.UnitsOfTimeValueSet_Value" json:"value,omitempty"`
	Id        *String                                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Timing_Repeat_DurationUnitCode) Reset() {
	*x = Timing_Repeat_DurationUnitCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing_Repeat_DurationUnitCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing_Repeat_DurationUnitCode) ProtoMessage() {}

func (x *Timing_Repeat_DurationUnitCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing_Repeat_DurationUnitCode.ProtoReflect.Descriptor instead.
func (*Timing_Repeat_DurationUnitCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{63, 0, 1}
}

func (x *Timing_Repeat_DurationUnitCode) GetValue() valuesets_go_proto.UnitsOfTimeValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.UnitsOfTimeValueSet_Value(0)
}

func (x *Timing_Repeat_DurationUnitCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Timing_Repeat_DurationUnitCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// s | min | h | d | wk | mo | a - unit of time (UCUM)
type Timing_Repeat_PeriodUnitCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.UnitsOfTimeValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.UnitsOfTimeValueSet_Value" json:"value,omitempty"`
	Id        *String                                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Timing_Repeat_PeriodUnitCode) Reset() {
	*x = Timing_Repeat_PeriodUnitCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing_Repeat_PeriodUnitCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing_Repeat_PeriodUnitCode) ProtoMessage() {}

func (x *Timing_Repeat_PeriodUnitCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing_Repeat_PeriodUnitCode.ProtoReflect.Descriptor instead.
func (*Timing_Repeat_PeriodUnitCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{63, 0, 2}
}

func (x *Timing_Repeat_PeriodUnitCode) GetValue() valuesets_go_proto.UnitsOfTimeValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.UnitsOfTimeValueSet_Value(0)
}

func (x *Timing_Repeat_PeriodUnitCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Timing_Repeat_PeriodUnitCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// mon | tue | wed | thu | fri | sat | sun
type Timing_Repeat_DayOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.DaysOfWeekCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.DaysOfWeekCode_Value" json:"value,omitempty"`
	Id        *String                             `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                        `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Timing_Repeat_DayOfWeekCode) Reset() {
	*x = Timing_Repeat_DayOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing_Repeat_DayOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing_Repeat_DayOfWeekCode) ProtoMessage() {}

func (x *Timing_Repeat_DayOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing_Repeat_DayOfWeekCode.ProtoReflect.Descriptor instead.
func (*Timing_Repeat_DayOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{63, 0, 3}
}

func (x *Timing_Repeat_DayOfWeekCode) GetValue() codes_go_proto.DaysOfWeekCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.DaysOfWeekCode_Value(0)
}

func (x *Timing_Repeat_DayOfWeekCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Timing_Repeat_DayOfWeekCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Code for time period of occurrence
type Timing_Repeat_WhenCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     valuesets_go_proto.EventTimingValueSet_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.EventTimingValueSet_Value" json:"value,omitempty"`
	Id        *String                                      `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                                 `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *Timing_Repeat_WhenCode) Reset() {
	*x = Timing_Repeat_WhenCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Timing_Repeat_WhenCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Timing_Repeat_WhenCode) ProtoMessage() {}

func (x *Timing_Repeat_WhenCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Timing_Repeat_WhenCode.ProtoReflect.Descriptor instead.
func (*Timing_Repeat_WhenCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{63, 0, 4}
}

func (x *Timing_Repeat_WhenCode) GetValue() valuesets_go_proto.EventTimingValueSet_Value {
	if x != nil {
		return x.Value
	}
	return valuesets_go_proto.EventTimingValueSet_Value(0)
}

func (x *Timing_Repeat_WhenCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Timing_Repeat_WhenCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// named-event | periodic | data-changed | data-added | data-modified |
// data-removed | data-accessed | data-access-ended
type TriggerDefinition_TypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value     codes_go_proto.TriggerTypeCode_Value `protobuf:"varint,1,opt,name=value,proto3,enum=google.fhir.r5.core.TriggerTypeCode_Value" json:"value,omitempty"`
	Id        *String                              `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Extension []*Extension                         `protobuf:"bytes,3,rep,name=extension,proto3" json:"extension,omitempty"`
}

func (x *TriggerDefinition_TypeCode) Reset() {
	*x = TriggerDefinition_TypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerDefinition_TypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDefinition_TypeCode) ProtoMessage() {}

func (x *TriggerDefinition_TypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDefinition_TypeCode.ProtoReflect.Descriptor instead.
func (*TriggerDefinition_TypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{64, 0}
}

func (x *TriggerDefinition_TypeCode) GetValue() codes_go_proto.TriggerTypeCode_Value {
	if x != nil {
		return x.Value
	}
	return codes_go_proto.TriggerTypeCode_Value(0)
}

func (x *TriggerDefinition_TypeCode) GetId() *String {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TriggerDefinition_TypeCode) GetExtension() []*Extension {
	if x != nil {
		return x.Extension
	}
	return nil
}

// Timing of the event
type TriggerDefinition_TimingX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*TriggerDefinition_TimingX_Timing
	//	*TriggerDefinition_TimingX_Reference
	//	*TriggerDefinition_TimingX_Date
	//	*TriggerDefinition_TimingX_DateTime
	Choice isTriggerDefinition_TimingX_Choice `protobuf_oneof:"choice"`
}

func (x *TriggerDefinition_TimingX) Reset() {
	*x = TriggerDefinition_TimingX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerDefinition_TimingX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerDefinition_TimingX) ProtoMessage() {}

func (x *TriggerDefinition_TimingX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerDefinition_TimingX.ProtoReflect.Descriptor instead.
func (*TriggerDefinition_TimingX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{64, 1}
}

func (m *TriggerDefinition_TimingX) GetChoice() isTriggerDefinition_TimingX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *TriggerDefinition_TimingX) GetTiming() *Timing {
	if x, ok := x.GetChoice().(*TriggerDefinition_TimingX_Timing); ok {
		return x.Timing
	}
	return nil
}

func (x *TriggerDefinition_TimingX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*TriggerDefinition_TimingX_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *TriggerDefinition_TimingX) GetDate() *Date {
	if x, ok := x.GetChoice().(*TriggerDefinition_TimingX_Date); ok {
		return x.Date
	}
	return nil
}

func (x *TriggerDefinition_TimingX) GetDateTime() *DateTime {
	if x, ok := x.GetChoice().(*TriggerDefinition_TimingX_DateTime); ok {
		return x.DateTime
	}
	return nil
}

type isTriggerDefinition_TimingX_Choice interface {
	isTriggerDefinition_TimingX_Choice()
}

type TriggerDefinition_TimingX_Timing struct {
	Timing *Timing `protobuf:"bytes,1,opt,name=timing,proto3,oneof"`
}

type TriggerDefinition_TimingX_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

type TriggerDefinition_TimingX_Date struct {
	Date *Date `protobuf:"bytes,3,opt,name=date,proto3,oneof"`
}

type TriggerDefinition_TimingX_DateTime struct {
	DateTime *DateTime `protobuf:"bytes,4,opt,name=date_time,json=dateTime,proto3,oneof"`
}

func (*TriggerDefinition_TimingX_Timing) isTriggerDefinition_TimingX_Choice() {}

func (*TriggerDefinition_TimingX_Reference) isTriggerDefinition_TimingX_Choice() {}

func (*TriggerDefinition_TimingX_Date) isTriggerDefinition_TimingX_Choice() {}

func (*TriggerDefinition_TimingX_DateTime) isTriggerDefinition_TimingX_Choice() {}

// Value that defines the context
type UsageContext_ValueX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*UsageContext_ValueX_CodeableConcept
	//	*UsageContext_ValueX_Quantity
	//	*UsageContext_ValueX_Range
	//	*UsageContext_ValueX_Reference
	Choice isUsageContext_ValueX_Choice `protobuf_oneof:"choice"`
}

func (x *UsageContext_ValueX) Reset() {
	*x = UsageContext_ValueX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsageContext_ValueX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsageContext_ValueX) ProtoMessage() {}

func (x *UsageContext_ValueX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsageContext_ValueX.ProtoReflect.Descriptor instead.
func (*UsageContext_ValueX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{68, 0}
}

func (m *UsageContext_ValueX) GetChoice() isUsageContext_ValueX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *UsageContext_ValueX) GetCodeableConcept() *CodeableConcept {
	if x, ok := x.GetChoice().(*UsageContext_ValueX_CodeableConcept); ok {
		return x.CodeableConcept
	}
	return nil
}

func (x *UsageContext_ValueX) GetQuantity() *Quantity {
	if x, ok := x.GetChoice().(*UsageContext_ValueX_Quantity); ok {
		return x.Quantity
	}
	return nil
}

func (x *UsageContext_ValueX) GetRange() *Range {
	if x, ok := x.GetChoice().(*UsageContext_ValueX_Range); ok {
		return x.Range
	}
	return nil
}

func (x *UsageContext_ValueX) GetReference() *Reference {
	if x, ok := x.GetChoice().(*UsageContext_ValueX_Reference); ok {
		return x.Reference
	}
	return nil
}

type isUsageContext_ValueX_Choice interface {
	isUsageContext_ValueX_Choice()
}

type UsageContext_ValueX_CodeableConcept struct {
	CodeableConcept *CodeableConcept `protobuf:"bytes,1,opt,name=codeable_concept,json=codeableConcept,proto3,oneof"`
}

type UsageContext_ValueX_Quantity struct {
	Quantity *Quantity `protobuf:"bytes,2,opt,name=quantity,proto3,oneof"`
}

type UsageContext_ValueX_Range struct {
	Range *Range `protobuf:"bytes,3,opt,name=range,proto3,oneof"`
}

type UsageContext_ValueX_Reference struct {
	Reference *Reference `protobuf:"bytes,4,opt,name=reference,proto3,oneof"`
}

func (*UsageContext_ValueX_CodeableConcept) isUsageContext_ValueX_Choice() {}

func (*UsageContext_ValueX_Quantity) isUsageContext_ValueX_Choice() {}

func (*UsageContext_ValueX_Range) isUsageContext_ValueX_Choice() {}

func (*UsageContext_ValueX_Reference) isUsageContext_ValueX_Choice() {}

// Contact address/number
type VirtualServiceDetail_AddressX struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//
	//	*VirtualServiceDetail_AddressX_Url
	//	*VirtualServiceDetail_AddressX_StringValue
	//	*VirtualServiceDetail_AddressX_ContactPoint
	//	*VirtualServiceDetail_AddressX_ExtendedContactDetail
	Choice isVirtualServiceDetail_AddressX_Choice `protobuf_oneof:"choice"`
}

func (x *VirtualServiceDetail_AddressX) Reset() {
	*x = VirtualServiceDetail_AddressX{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualServiceDetail_AddressX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualServiceDetail_AddressX) ProtoMessage() {}

func (x *VirtualServiceDetail_AddressX) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualServiceDetail_AddressX.ProtoReflect.Descriptor instead.
func (*VirtualServiceDetail_AddressX) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP(), []int{70, 0}
}

func (m *VirtualServiceDetail_AddressX) GetChoice() isVirtualServiceDetail_AddressX_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *VirtualServiceDetail_AddressX) GetUrl() *Url {
	if x, ok := x.GetChoice().(*VirtualServiceDetail_AddressX_Url); ok {
		return x.Url
	}
	return nil
}

func (x *VirtualServiceDetail_AddressX) GetStringValue() *String {
	if x, ok := x.GetChoice().(*VirtualServiceDetail_AddressX_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *VirtualServiceDetail_AddressX) GetContactPoint() *ContactPoint {
	if x, ok := x.GetChoice().(*VirtualServiceDetail_AddressX_ContactPoint); ok {
		return x.ContactPoint
	}
	return nil
}

func (x *VirtualServiceDetail_AddressX) GetExtendedContactDetail() *ExtendedContactDetail {
	if x, ok := x.GetChoice().(*VirtualServiceDetail_AddressX_ExtendedContactDetail); ok {
		return x.ExtendedContactDetail
	}
	return nil
}

type isVirtualServiceDetail_AddressX_Choice interface {
	isVirtualServiceDetail_AddressX_Choice()
}

type VirtualServiceDetail_AddressX_Url struct {
	Url *Url `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

type VirtualServiceDetail_AddressX_StringValue struct {
	StringValue *String `protobuf:"bytes,2,opt,name=string_value,json=string,proto3,oneof"`
}

type VirtualServiceDetail_AddressX_ContactPoint struct {
	ContactPoint *ContactPoint `protobuf:"bytes,3,opt,name=contact_point,json=contactPoint,proto3,oneof"`
}

type VirtualServiceDetail_AddressX_ExtendedContactDetail struct {
	ExtendedContactDetail *ExtendedContactDetail `protobuf:"bytes,4,opt,name=extended_contact_detail,json=extendedContactDetail,proto3,oneof"`
}

func (*VirtualServiceDetail_AddressX_Url) isVirtualServiceDetail_AddressX_Choice() {}

func (*VirtualServiceDetail_AddressX_StringValue) isVirtualServiceDetail_AddressX_Choice() {}

func (*VirtualServiceDetail_AddressX_ContactPoint) isVirtualServiceDetail_AddressX_Choice() {}

func (*VirtualServiceDetail_AddressX_ExtendedContactDetail) isVirtualServiceDetail_AddressX_Choice() {
}

var File_proto_google_fhir_proto_r5_core_datatypes_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f,
	0x72, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x90, 0x0a, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x33, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x1a, 0x9d, 0x02, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x66, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x75, 0x73, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x1a, 0xa0, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0x8a, 0xf9,
	0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x2f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x3b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x9e, 0x07, 0x0a, 0x03, 0x41, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xe5, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x41, 0x67, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x82, 0x01, 0x28, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x28, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d, 0x20, 0x25, 0x75, 0x63,
	0x75, 0x6d, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x3e, 0x20, 0x30, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x22, 0xde, 0x04, 0x0a, 0x0a, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x58, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x06,
	0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0xf5, 0x01, 0x0a,
	0x07, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x58, 0x12, 0x9a, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x5a, 0xf2, 0xff,
	0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc7, 0x09, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x2a, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x32, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x36, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x38, 0x0a, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0xfe, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x64, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x69, 0x6d,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x04,
	0x08, 0x01, 0x10, 0x02, 0x3a, 0x68, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x24, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x22, 0xb4,
	0x0b, 0x0a, 0x0c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0e, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x60, 0x0a, 0x12, 0x6e, 0x6f, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2e, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x10, 0x6e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x1a, 0xc8, 0x06, 0x0a, 0x0d, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x60, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57,
	0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x64, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57,
	0x65, 0x65, 0x6b, 0x12, 0x35, 0x0a, 0x07, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x06, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x12, 0x4b, 0x0a, 0x14, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x1a, 0xa5, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57,
	0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x67, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x53, 0x65, 0x74, 0x2f, 0x64, 0x61, 0x79, 0x73, 0x2d, 0x6f, 0x66, 0x2d, 0x77, 0x65, 0x65, 0x6b,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x75, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x6f,
	0x61, 0x6c, 0x6c, 0x44, 0x61, 0x79, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x2e,
	0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x61, 0x6c, 0x6c, 0x44, 0x61, 0x79,
	0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x29, 0x1a,
	0xf1, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x06, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x64, 0x75, 0x72,
	0x69, 0x6e, 0x67, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f,
	0x6e, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x49, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf0, 0xec, 0xc5, 0xe6, 0x06, 0x01, 0x22, 0x90,
	0x02, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x46, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x42,
	0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0xf0, 0xec, 0xc5, 0xe6, 0x06,
	0x01, 0x22, 0x46, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x3a, 0x3e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x42,
	0x61, 0x73, 0x65, 0xf0, 0xec, 0xc5, 0xe6, 0x06, 0x01, 0x22, 0x96, 0x02, 0x0a, 0x0c, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x84, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x3e, 0x28, 0x3f, 0x3a, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2b, 0x2f, 0x5d, 0x7b, 0x34, 0x7d, 0x29, 0x2a, 0x28,
	0x3f, 0x3a, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2b, 0x2f, 0x5d, 0x7b,
	0x32, 0x7d, 0x3d, 0x3d, 0x7c, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x2b,
	0x2f, 0x5d, 0x7b, 0x33, 0x7d, 0x3d, 0x29, 0x3f, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x34, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x22, 0xd7, 0x01, 0x0a, 0x07, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x4b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x0a, 0x74, 0x72, 0x75,
	0x65, 0x7c, 0x66, 0x61, 0x6c, 0x73, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x22, 0xd4, 0x01, 0x0a,
	0x09, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x46, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x03, 0x5c, 0x53, 0x2a, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x22, 0xd7, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x4e, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x10, 0x5b, 0x5e, 0x5c, 0x73, 0x5d,
	0x2b, 0x28, 0x20, 0x5b, 0x5e, 0x5c, 0x73, 0x5d, 0x2b, 0x29, 0x2a, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa7, 0x02,
	0x0a, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x45, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xf9, 0x03,
	0x0a, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x3a, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x9a, 0xaf, 0xae, 0xa4, 0x0b, 0x32, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x20, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x22, 0xab, 0x02, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63,
	0x6f, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x65, 0x6c,
	0x65, 0x63, 0x6f, 0x6d, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xe1, 0x08, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x03,
	0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x72, 0x61, 0x6e,
	0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12,
	0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x1a, 0xb1, 0x02, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6f, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa8, 0x02, 0x0a, 0x07, 0x55, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6c, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2e, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x2d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x75, 0x73, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x3a, 0x66, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x22, 0xa2, 0x05, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x1a, 0xa8, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x6b, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a,
	0x3f, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72,
	0x22, 0xe0, 0x07, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a,
	0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65,
	0x74, 0x2f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xa3, 0x02,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xbe, 0x01,
	0x28, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d,
	0x20, 0x25, 0x75, 0x63, 0x75, 0x6d, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x63, 0x6f, 0x64,
	0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x64,
	0x65, 0x20, 0x3d, 0x20, 0x27, 0x31, 0x27, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x2e,
	0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x74,
	0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x73, 0x28, 0x27, 0x2e, 0x27, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x22, 0xbf, 0x1d, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x58, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x3e, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x50, 0x0a, 0x0b, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x53, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x3d, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x1a, 0x9c, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x65, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0xbc, 0x01, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x58, 0x12, 0x51, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x4b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x0b, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x84,
	0x03, 0x0a, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3b, 0x0a, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x08, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x2c, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x26, 0x70,
	0x61, 0x74, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x78, 0x6f, 0x72,
	0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0xb3, 0x04, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2f, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x4c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xcc,
	0x01, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x2c, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0x26, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x78, 0x6f, 0x72, 0x20, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0xaa, 0x07, 0x0a, 0x0b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x5f, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xbf, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2d,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xcc, 0x01, 0x0a, 0x06, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x58, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48,
	0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xb5, 0x04, 0x0a, 0x04, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa9, 0x02, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x69, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x73, 0x6f, 0x72, 0x74, 0x2d, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x42, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0xf0, 0xec, 0xc5, 0xe6, 0x06,
	0x01, 0x22, 0xd5, 0x03, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x55, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x41, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x44, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x44, 0x41, 0x59, 0x10, 0x03, 0x3a, 0xa1, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa,
	0xa2, 0x8c, 0x06, 0x63, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39,
	0x5d, 0x30, 0x29, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x30, 0x30, 0x29, 0x7c, 0x5b, 0x31, 0x2d,
	0x39, 0x5d, 0x30, 0x30, 0x30, 0x29, 0x28, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c,
	0x31, 0x5b, 0x30, 0x2d, 0x32, 0x5d, 0x29, 0x28, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d,
	0x7c, 0x5b, 0x31, 0x2d, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x2d,
	0x31, 0x5d, 0x29, 0x29, 0x3f, 0x29, 0x3f, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xfe, 0x04, 0x0a, 0x08, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x45, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2e,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x72, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44,
	0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e,
	0x44, 0x10, 0x06, 0x3a, 0x94, 0x02, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c,
	0x06, 0xd1, 0x01, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x28,
	0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d,
	0x30, 0x29, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x30, 0x30, 0x29, 0x7c, 0x5b, 0x31, 0x2d, 0x39,
	0x5d, 0x30, 0x30, 0x30, 0x29, 0x28, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31,
	0x5b, 0x30, 0x2d, 0x32, 0x5d, 0x29, 0x28, 0x2d, 0x28, 0x30, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x7c,
	0x5b, 0x31, 0x2d, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x33, 0x5b, 0x30, 0x2d, 0x31,
	0x5d, 0x29, 0x28, 0x54, 0x28, 0x5b, 0x30, 0x31, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32,
	0x5b, 0x30, 0x2d, 0x33, 0x5d, 0x29, 0x3a, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x3a, 0x28, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x36, 0x30,
	0x29, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x39, 0x7d, 0x29, 0x3f,
	0x29, 0x3f, 0x29, 0x3f, 0x28, 0x5a, 0x7c, 0x28, 0x5c, 0x2b, 0x7c, 0x2d, 0x29, 0x28, 0x28, 0x30,
	0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x33, 0x5d, 0x29, 0x3a, 0x5b, 0x30,
	0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x34, 0x3a, 0x30, 0x30, 0x29, 0x3f,
	0x29, 0x3f, 0x29, 0x3f, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x02, 0x0a, 0x07, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x7e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92,
	0xfa, 0xa2, 0x8c, 0x06, 0x3d, 0x2d, 0x3f, 0x28, 0x30, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x31, 0x37, 0x7d, 0x29, 0x28, 0x5c, 0x2e, 0x5b, 0x30,
	0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x31, 0x37, 0x7d, 0x29, 0x3f, 0x28, 0x5b, 0x65, 0x45, 0x5d,
	0x5b, 0x2b, 0x2d, 0x5d, 0x3f, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x39, 0x7d, 0x7d,
	0x29, 0x3f, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x22, 0xf1, 0x06, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xae, 0x01, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x47, 0x28,
	0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x28, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d, 0x20,
	0x25, 0x75, 0x63, 0x75, 0x6d, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1f, 0x63, 0x6f, 0x64, 0x65,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x22, 0xa4, 0x0f, 0x0a, 0x06,
	0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5b, 0x0a, 0x16, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x70, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x12, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x09, 0x61,
	0x73, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x61, 0x73,
	0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x61, 0x73, 0x5f, 0x6e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x52, 0x0b, 0x61, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x12, 0x38, 0x0a, 0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x73, 0x69, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x65, 0x41, 0x6e, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x64, 0x6f, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x49, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x44,
	0x6f, 0x73, 0x65, 0x50, 0x65, 0x72, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x62, 0x0a, 0x1b,
	0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x73, 0x65, 0x50,
	0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x56, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x73, 0x65, 0x50, 0x65, 0x72,
	0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x92, 0x05, 0x0a, 0x0b, 0x44, 0x6f, 0x73,
	0x65, 0x41, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a,
	0x04, 0x64, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x65, 0x41, 0x6e, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x65, 0x58, 0x52, 0x04, 0x64, 0x6f, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x65,
	0x41, 0x6e, 0x64, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x58, 0x52, 0x04, 0x72,
	0x61, 0x74, 0x65, 0x1a, 0x90, 0x01, 0x0a, 0x05, 0x44, 0x6f, 0x73, 0x65, 0x58, 0x12, 0x32, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xc4, 0x01, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x65, 0x58,
	0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83,
	0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x73, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x33, 0x61,
	0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x73, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x61, 0x73, 0x4e, 0x65, 0x65, 0x64,
	0x65, 0x64, 0x22, 0xe5, 0x06, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xb4,
	0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xa2, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x3b, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20,
	0x28, 0x28, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d, 0x20, 0x25, 0x75, 0x63, 0x75, 0x6d,
	0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x22, 0xb7, 0x01, 0x0a, 0x07, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x41, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0xf0, 0xec,
	0xc5, 0xe6, 0x06, 0x01, 0x22, 0xcd, 0xca, 0x01, 0x0a, 0x11, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x61,
	0x0a, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x09, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x15, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x13, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x31, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a,
	0x05, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x12, 0x3d, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x61,
	0x6c, 0x69, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x32,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x63, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x34, 0xf2, 0xbe,
	0xc0, 0xa4, 0x07, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28,
	0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x27, 0x2a, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x28, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x28, 0x29, 0x20, 0x3e, 0x3d, 0x20,
	0x30, 0x29, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x3f, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58,
	0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4f,
	0x0a, 0x14, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x12, 0x6d, 0x65, 0x61,
	0x6e, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x6e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12,
	0x40, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x43, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x69, 0x78, 0x65, 0x64, 0x58, 0x52,
	0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x58, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x6e, 0x12, 0x48, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x1a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x64, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x1f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x44, 0x0a, 0x0f, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x6d, 0x75, 0x73, 0x74, 0x48, 0x61, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x52, 0x11, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0b, 0x6d, 0x75, 0x73, 0x74, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10,
	0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x59, 0x0a,
	0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x07, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x07, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x1a, 0xc0, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x72, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x72,
	0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x9e, 0x0a, 0x0a, 0x07, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x0d,
	0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x36, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a,
	0xc5, 0x04, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x1a, 0xac, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x64, 0x69, 0x73,
	0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xac, 0x02, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x71, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x73, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x9d, 0x02, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x3a, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12,
	0x35, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0xb6, 0x0a, 0x0a, 0x07, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x45, 0x0a,
	0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x66, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x1a, 0xb8, 0x02, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x74, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x1a, 0xbb, 0x02, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93,
	0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xce,
	0x01, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x63, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63,
	0x6f, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x63,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x63,
	0x6f, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x27, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x5f,
	0x28, 0x63, 0x6f, 0x64, 0x65, 0x3d, 0x27, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x27, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x3d, 0x20, 0x27, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x27, 0x20, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20,
	0x3d, 0x20, 0x27, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x1a,
	0x80, 0x1b, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x12, 0x48, 0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x62,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12,
	0x29, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36,
	0x34, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x12, 0x3b,
	0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74,
	0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45,
	0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x03,
	0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x67, 0x65, 0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x32, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f,
	0x6e, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x42, 0x0a, 0x0b, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x12, 0x4b, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x51,
	0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x41, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x0d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x64, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48,
	0x00, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x6f, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x1a, 0xf9, 0x1a, 0x0a, 0x06, 0x46, 0x69, 0x78, 0x65, 0x64, 0x58, 0x12, 0x48, 0x0a,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36,
	0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x48, 0x00, 0x52,
	0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48,
	0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12,
	0x2c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2f, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x38,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x10,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12,
	0x57, 0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68,
	0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12,
	0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x42, 0x0a, 0x0b, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x5d, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x51, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00,
	0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x64,
	0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83,
	0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xfb,
	0x1a, 0x0a, 0x08, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x58, 0x12, 0x48, 0x0a, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x12,
	0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x12,
	0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52,
	0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x65, 0x72, 0x36, 0x34, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x48, 0x00, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x12, 0x3b, 0x0a, 0x08, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x03,
	0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69,
	0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x2c, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x75, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x57, 0x0a,
	0x12, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x68, 0x75, 0x6d,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0a, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x65, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x42, 0x0a, 0x0b, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3e, 0x0a,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x45, 0x0a,
	0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5d,
	0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a,
	0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0c,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x64, 0x0a, 0x17,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8,
	0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x80, 0x1d, 0x0a,
	0x07, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x53,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xf9, 0x1a, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x48,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x48, 0x00,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x12, 0x3b, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2f,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x57, 0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x42, 0x0a, 0x0b,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4b,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x64, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x15,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xf6, 0x04, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x48, 0x00,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x12, 0x45, 0x0a, 0x0c, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0xf6, 0x04, 0x0a, 0x09, 0x4d, 0x61, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12,
	0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36,
	0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x65, 0x72, 0x36, 0x34, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a,
	0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x1a, 0xbe, 0x07, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x62, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x39, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0, 0x87,
	0xeb, 0x04, 0x01, 0x52, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a,
	0xb2, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x3a, 0x4c, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x2d, 0x28, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x20, 0x3d, 0x20, 0x27, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x27, 0x29,
	0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0xaf, 0xae, 0xa4, 0x0b, 0x13, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x1a, 0xc0, 0x0e, 0x0a, 0x18, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3f, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x6a, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e,
	0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x1a, 0xac, 0x02, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xe1, 0x06, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x78, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x12, 0x43,
	0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x6f, 0x63,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x63, 0x6f, 0x12,
	0x37, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x1a, 0xbe, 0x02, 0x0a, 0x0b, 0x50, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x75, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xc9, 0x01, 0x9a, 0x86, 0x93, 0xa0,
	0x08, 0x93, 0x01, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x28, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x28, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x28, 0x27, 0x68, 0x74, 0x74, 0x70, 0x73, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x28, 0x27, 0x75, 0x72, 0x6e, 0x3a, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x28, 0x27, 0x23, 0x27, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x29, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x1a, 0xf8, 0x04, 0x0a, 0x07, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x08,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x08, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x06, 0xf0, 0xd0,
	0x87, 0xeb, 0x04, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x1a, 0xfb, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x64, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x3a, 0x82, 0x09, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x54, 0x6d, 0x69,
	0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x6d, 0x61, 0x78,
	0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x6d, 0x61, 0x78,
	0x20, 0x3d, 0x20, 0x27, 0x2a, 0x27, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x69, 0x69, 0x66, 0x28, 0x6d,
	0x61, 0x78, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x2a, 0x27, 0x2c, 0x20, 0x6d, 0x69, 0x6e, 0x20, 0x3c,
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x2e, 0x74, 0x6f, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x28,
	0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xd1, 0x01, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d,
	0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x25,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x20,
	0x3c, 0x3d, 0x20, 0x31, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x26, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x31,
	0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x20, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x69, 0x78, 0x65, 0x64, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x29, 0x2e, 0x69,
	0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08,
	0x23, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x28, 0x6b, 0x65, 0x79, 0x29, 0x2e, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x63, 0x74, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x32, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x6e, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0,
	0x08, 0x48, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x28, 0x27, 0x5e, 0x5b, 0x61, 0x2d, 0x7a, 0x41,
	0x2d, 0x5a, 0x30, 0x2d, 0x39, 0x5c, 0x5c, 0x2f, 0x5c, 0x5c, 0x2d, 0x5f, 0x5c, 0x5c, 0x5b, 0x5c,
	0x5c, 0x5d, 0x5c, 0x5c, 0x40, 0x5d, 0x2b, 0x24, 0x27, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x46,
	0x28, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x69, 0x73, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x37, 0x73, 0x6c, 0x69, 0x63,
	0x65, 0x49, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x20, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x35, 0x6d, 0x75, 0x73, 0x74, 0x48, 0x61, 0x76,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x9a, 0xaf,
	0xae, 0xa4, 0x0b, 0x4f, 0x70, 0x61, 0x74, 0x68, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x28, 0x27, 0x5e, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x41, 0x2d, 0x5a, 0x61,
	0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x33, 0x7d, 0x28, 0x5c, 0x5c, 0x2e,
	0x5b, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5d,
	0x7b, 0x30, 0x2c, 0x36, 0x33, 0x7d, 0x28, 0x5c, 0x5c, 0x5b, 0x78, 0x5d, 0x29, 0x3f, 0x29, 0x2a,
	0x24, 0x27, 0x29, 0x9a, 0xaf, 0xae, 0xa4, 0x0b, 0x14, 0x66, 0x69, 0x78, 0x65, 0x64, 0x2e, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x9a, 0xaf, 0xae,
	0xa4, 0x0b, 0x57, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20,
	0x73, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x2e, 0x77, 0x68, 0x65, 0x72, 0x65, 0x28, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x3d, 0x27, 0x6f, 0x70, 0x65, 0x6e, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x27, 0x20,
	0x6f, 0x72, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x29, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x9a, 0xaf, 0xae, 0xa4, 0x0b, 0x25,
	0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x29, 0x2e, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x28, 0x29, 0x22, 0xcb, 0x04, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x3a, 0xb7, 0x01, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x29,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x44, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x20, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x6d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x28, 0x27, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x5d, 0x5b, 0x41, 0x2d,
	0x5a, 0x61, 0x2d, 0x7a, 0x30, 0x2d, 0x39, 0x5c, 0x5c, 0x5f, 0x5d, 0x7b, 0x30, 0x2c, 0x36, 0x33,
	0x7d, 0x27, 0x29, 0x22, 0xc3, 0x04, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x75, 0x72, 0x70,
	0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52,
	0x07, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d,
	0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07,
	0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x07, 0x74, 0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x56, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x49,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xa2, 0x1d, 0x0a, 0x09, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0xf9, 0x1a, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x12, 0x48,
	0x0a, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x36, 0x34, 0x5f, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65,
	0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x07, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x09, 0x69,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x48, 0x00,
	0x52, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x12, 0x3b, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x69, 0x64, 0x48,
	0x00, 0x52, 0x03, 0x6f, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x75,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69,
	0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x2f,
	0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12,
	0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x67, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a,
	0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x48, 0x00, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x57, 0x0a, 0x12, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0a, 0x68, 0x75, 0x6d, 0x61,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x68, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x48, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x65, 0x79,
	0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x48, 0x00, 0x52,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x42, 0x0a, 0x0b,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3e, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4b,
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x51, 0x0a, 0x10, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x5d, 0x0a, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x51, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x57, 0x0a, 0x12, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x47, 0x0a, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x0c, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x64, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x15,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x6f, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a,
	0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc1,
	0x06, 0x0a, 0x09, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x48, 0x75, 0x6d, 0x61, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x75, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x67, 0x69, 0x76, 0x65, 0x6e,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x05, 0x67, 0x69, 0x76, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x33, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x97, 0x02, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x55,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x63,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x75, 0x73, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x02, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x51, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x15, 0x5b, 0x41, 0x2d, 0x5a, 0x61, 0x2d, 0x7a, 0x30,
	0x2d, 0x39, 0x5c, 0x2d, 0x5c, 0x2e, 0x5d, 0x7b, 0x31, 0x2c, 0x36, 0x34, 0x7d, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x64, 0x22, 0xd0, 0x06,
	0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x75,
	0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x06,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x31,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x12, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x1a, 0xa3, 0x02, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x69, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x2d, 0x75, 0x73, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x52, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x9a, 0xaf, 0xae, 0xa4,
	0x0b, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29,
	0x22, 0xd2, 0x04, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a,
	0x6f, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4c, 0x4c,
	0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x43,
	0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x03, 0x3a, 0x88, 0x02, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0xc6, 0x01, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d,
	0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x5b, 0x31, 0x2d, 0x39,
	0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x30, 0x29, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x30,
	0x30, 0x29, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x30, 0x30, 0x30, 0x29, 0x2d, 0x28, 0x30, 0x5b,
	0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x32, 0x5d, 0x29, 0x2d, 0x28, 0x30, 0x5b,
	0x31, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x32, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c,
	0x33, 0x5b, 0x30, 0x2d, 0x31, 0x5d, 0x29, 0x54, 0x28, 0x5b, 0x30, 0x31, 0x5d, 0x5b, 0x30, 0x2d,
	0x39, 0x5d, 0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x33, 0x5d, 0x29, 0x3a, 0x5b, 0x30, 0x2d, 0x35, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x3a, 0x28, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39,
	0x5d, 0x7c, 0x36, 0x30, 0x29, 0x28, 0x5c, 0x2e, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x2c,
	0x39, 0x7d, 0x29, 0x3f, 0x28, 0x5a, 0x7c, 0x28, 0x5c, 0x2b, 0x7c, 0x2d, 0x29, 0x28, 0x28, 0x30,
	0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x33, 0x5d, 0x29, 0x3a, 0x5b, 0x30,
	0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x34, 0x3a, 0x30, 0x30, 0x29, 0x29,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0xe1, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x55, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x14,
	0x5b, 0x30, 0x5d, 0x7c, 0x5b, 0x2d, 0x2b, 0x5d, 0x3f, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x5d, 0x2a, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x22, 0xe5, 0x01, 0x0a, 0x09, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x65, 0x72, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x57, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x14, 0x5b, 0x30, 0x5d, 0x7c, 0x5b, 0x2d, 0x2b, 0x5d, 0x3f, 0x5b,
	0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x36,
	0x34, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x4b, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x09, 0x5e, 0x5b, 0x5c,
	0x73, 0x5c, 0x53, 0x5d, 0x2b, 0x24, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0xde, 0x04, 0x0a,
	0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x75,
	0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0c, 0x6a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb,
	0x04, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x09, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf8, 0x03,
	0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x09,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x2d, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x3a, 0x38,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xe8, 0x05, 0x0a, 0x11, 0x4d, 0x6f, 0x6e,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f,
	0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06,
	0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e,
	0x65, 0x79, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xaf, 0x02, 0x0a, 0x08, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6f, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x45, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x4d, 0x6f, 0x6e, 0x65, 0x74, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x22, 0xa5, 0x04, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x1a, 0xfc, 0x01, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x65, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xc7, 0x07, 0x0a, 0x0d,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2f, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xfa, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x58, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x3d, 0x20, 0x27, 0x75, 0x72, 0x6e, 0x3a, 0x69, 0x73,
	0x6f, 0x3a, 0x73, 0x74, 0x64, 0x3a, 0x69, 0x73, 0x6f, 0x3a, 0x34, 0x32, 0x31, 0x37, 0x27, 0x29,
	0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x22, 0x87, 0x05, 0x0a, 0x09, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x58, 0x0a, 0x03, 0x64, 0x69, 0x76,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x58, 0x68, 0x74,
	0x6d, 0x6c, 0x42, 0x2a, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0xf2, 0xbe, 0xc0, 0xa4, 0x07, 0x0c,
	0x68, 0x74, 0x6d, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x28, 0x29, 0xf2, 0xbe, 0xc0, 0xa4,
	0x07, 0x0c, 0x68, 0x74, 0x6d, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x28, 0x29, 0x52, 0x03,
	0x64, 0x69, 0x76, 0x1a, 0xaa, 0x02, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x6b, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5,
	0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65,
	0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x22,
	0xe6, 0x01, 0x0a, 0x03, 0x4f, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x5e, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01,
	0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x21, 0x75, 0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a, 0x5b, 0x30,
	0x2d, 0x32, 0x5d, 0x28, 0x5c, 0x2e, 0x28, 0x30, 0x7c, 0x5b, 0x31, 0x2d, 0x39, 0x5d, 0x5b, 0x30,
	0x2d, 0x39, 0x5d, 0x2a, 0x29, 0x29, 0x2b, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x69, 0x64, 0x22, 0xc5, 0x09, 0x0a, 0x13, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x03, 0x75, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65,
	0x72, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04,
	0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x72, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x9c, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x46, 0x48, 0x49, 0x52, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x3a, 0x65, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x47, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2,
	0xfe, 0xe4, 0x97, 0x06, 0x3b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf9, 0x02, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x3a, 0x9d, 0x01, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x5d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x2e, 0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x2e,
	0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x6f, 0x72,
	0x20, 0x28, 0x73, 0x74, 0x61, 0x72, 0x74, 0x2e, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x61, 0x72, 0x79, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x65, 0x6e, 0x64, 0x2e, 0x68, 0x69, 0x67,
	0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x28, 0x29, 0x29, 0x22, 0xe0, 0x01, 0x0a,
	0x0b, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x50, 0xc0,
	0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x0b, 0x5b, 0x31, 0x2d, 0x39, 0x5d,
	0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x22,
	0xc3, 0x01, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x47, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x35, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0xf0,
	0xec, 0xc5, 0xe6, 0x06, 0x01, 0x22, 0x98, 0x05, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x45,
	0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x65, 0x6c,
	0x66, 0x4c, 0x69, 0x66, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x58, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x6b, 0x0a, 0x1f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x52, 0x1c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x65,
	0x63, 0x61, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x1a, 0x95, 0x01, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x58, 0x12, 0x3b,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x44, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65,
	0x22, 0xa3, 0x06, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xb4, 0x02, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x6e, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x64, 0x65, 0x3a, 0x61, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x22, 0xb5, 0x03, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x6c,
	0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x03, 0x6c,
	0x6f, 0x77, 0x12, 0x37, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x3a, 0xd0, 0x01, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x90, 0x01, 0x6c, 0x6f,
	0x77, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20,
	0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x6c, 0x6f, 0x77, 0x2e, 0x6c, 0x6f, 0x77,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x28, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x72, 0x61, 0x62, 0x6c, 0x65, 0x28, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x28, 0x29, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29,
	0x20, 0x6f, 0x72, 0x20, 0x28, 0x6c, 0x6f, 0x77, 0x2e, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x72, 0x79, 0x28, 0x29, 0x20, 0x3c, 0x3d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x2e, 0x68,
	0x69, 0x67, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x28, 0x29, 0x29, 0x22, 0xab,
	0x03, 0x0a, 0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x45, 0x0a, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x3a, 0xb2, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x73, 0x28, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x22, 0xd2, 0x05, 0x0a,
	0x0a, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x75,
	0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x0c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x4a, 0x0a, 0x0e, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x68,
	0x69, 0x67, 0x68, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x0b,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x3a, 0xfb, 0x02, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97,
	0x06, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0xaf, 0x01, 0x28, 0x28, 0x6c, 0x6f, 0x77,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x61, 0x6e,
	0x64, 0x20, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x6c, 0x6f, 0x77, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x68, 0x69, 0x67, 0x68, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x80,
	0x01, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x68, 0x61,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x6f,
	0x72, 0x20, 0x68, 0x69, 0x67, 0x68, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x68, 0x61, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29,
	0x20, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x6c, 0x6f, 0x77, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x28, 0x29,
	0x20, 0x3c, 0x3d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x2e, 0x68, 0x69, 0x67, 0x68, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x28, 0x29,
	0x29, 0x22, 0xa9, 0x86, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x55, 0x72, 0x69, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x12, 0x2f, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x72, 0x69, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x08, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x53, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x13, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x9d, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x0f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x11, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x98, 0x01, 0x0a, 0x23, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x9e,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x24, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x1e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x60, 0x0a, 0x10, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x0c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69,
	0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x41, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x11, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x15, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x16,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x14, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a,
	0x08, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0b, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x48, 0x00,
	0x52, 0x07, 0x62, 0x61, 0x73, 0x69, 0x63, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x62, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0c,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08,
	0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x1f, 0x62, 0x69, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x20, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x1a, 0x42, 0x69, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0xa5, 0x01, 0x0a, 0x28, 0x62, 0x69, 0x6f, 0x6c, 0x6f,
	0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x28, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x22, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x69,
	0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x24, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x63,
	0x0a, 0x11, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0d, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x62, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0c, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x06,
	0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x75, 0x0a, 0x17, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x43, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x15, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0c, 0x63, 0x61, 0x72,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x54, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x43,
	0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x65, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x79, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x14, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0b,
	0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xa1, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x43, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0b, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x05, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x49, 0x64, 0x12, 0x63,
	0x0a, 0x11, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x16, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x43, 0x6c, 0x69,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7d, 0x0a, 0x1a, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xa2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1b,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x15, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x63,
	0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x62, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1a, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x7b, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1b, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x15, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5c, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x11, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0b, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4d, 0x61, 0x70, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x0f, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x76, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xa3, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x15, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x53,
	0x0a, 0x0b, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x43, 0x6f, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x8b, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x20, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x1a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x1c, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x8e, 0x01, 0x0a, 0x20, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x21,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x1b, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x1d, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x63, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0c, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0xa4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa5, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x60, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x48,
	0x00, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x49,
	0x64, 0x12, 0x63, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x5e, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x11, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x14, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00,
	0x52, 0x12, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x15, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x13, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0f, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00,
	0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6d, 0x0a,
	0x14, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0xa7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0b,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x6f, 0x0a, 0x15, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x65,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x72, 0x0a, 0x16, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x14, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x12, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64,
	0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x45, 0x70, 0x69, 0x73,
	0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x65, 0x70, 0x69,
	0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x13,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x65, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x12,
	0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xa8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x48, 0x00, 0x52, 0x10, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x14, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10, 0x45, 0x76, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x12, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x13, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x49, 0x64, 0x12, 0x79,
	0x0a, 0x19, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x1a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x16, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x18, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x15, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x07, 0x66, 0x6c, 0x61, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x3e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x04, 0x46, 0x6c, 0x61, 0x67,
	0x48, 0x00, 0x52, 0x06, 0x66, 0x6c, 0x61, 0x67, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x11, 0x66, 0x6f,
	0x72, 0x6d, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0xa9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d,
	0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52,
	0x0f, 0x66, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x61, 0x0a, 0x10, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x73, 0x74, 0x75, 0x64,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x0c, 0x47, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x3f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x04, 0x47, 0x6f,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6f, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x13,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x67, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0b, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x48, 0x00, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x42, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10, 0x47, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x64, 0x12, 0x6f, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x6d, 0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10, 0x49, 0x6d, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x69,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x60, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7e, 0x0a, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1c, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x16, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x69, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x1e, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x20, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x1c, 0x69, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x75, 0x0a, 0x17, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x49, 0x6d, 0x70, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x48,
	0x00, 0x52, 0x15, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x64, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x6e, 0x73, 0x75, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x11, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0xad,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x0f,
	0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12,
	0x6a, 0x0a, 0x13, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x15, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0f, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x0a, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x50, 0x0a,
	0x0a, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x4b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07, 0x4c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x50, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x4c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07, 0x4c, 0x69, 0x6e,
	0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x8c, 0x01, 0x0a, 0x1f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x20, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x1a, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x1c, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x50,
	0x0a, 0x0a, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x63, 0x0a, 0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x0d, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0d, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x10,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x84, 0x01, 0x0a, 0x1c, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1e, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x72, 0x0a, 0x16, 0x6d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x17, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x6f, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x56, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x75, 0x0a, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x57,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x4d, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x8c, 0x01, 0x0a, 0x1f, 0x6d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xb0,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x20, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x1a, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1c, 0x6d, 0x65, 0x64,
	0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6f, 0x0a, 0x15, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x11, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x6f, 0x0a, 0x15, 0x6d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63, 0x75, 0x6c, 0x61,
	0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x6d, 0x6f, 0x6c,
	0x65, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x60, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x48, 0x00, 0x52, 0x0e, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x64, 0x12, 0x6a, 0x0a, 0x13, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0f, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x61, 0x6b, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x75, 0x74,
	0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x64, 0x12, 0x66,
	0x0a, 0x12, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x0e, 0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x10, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x14, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0xb2,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x6e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a, 0x0e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x11, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x19, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1b, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x15,
	0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x75, 0x0a, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x69, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x15, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x81, 0x01, 0x0a, 0x1b, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1d,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x17, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x19, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66,
	0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x1e, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xb3, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1f, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x19, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x0a, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x07, 0x50,
	0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x7b, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1b, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5a, 0x0a, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x4d, 0x0a, 0x09, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x71,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0c, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x06, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x66, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x5f, 0x0a, 0x0f, 0x70, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x73, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x14, 0x70, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x75, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42,
	0x0f, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x59, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x76, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a,
	0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x62, 0x0a, 0x10, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x77,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0d, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x7b,
	0x0a, 0x19, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x1b, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x7f, 0x0a, 0x1a, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x1c, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x16, 0x52, 0x65, 0x67, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x18, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x63, 0x0a, 0x11,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91, 0x07,
	0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x79, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xb6, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x14, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x63, 0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x72, 0x63,
	0x68, 0x65, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x60, 0x0a, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0xb7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0c,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x64, 0x12, 0x63,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64,
	0x79, 0x49, 0x64, 0x12, 0x69, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x15, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x66,
	0x0a, 0x12, 0x72, 0x69, 0x73, 0x6b, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e,
	0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6a, 0x0a, 0x13,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x15, 0xf2, 0x82,
	0xb5, 0x91, 0x07, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x83,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x14, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x07, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x04, 0x53, 0x6c, 0x6f,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x54, 0x0a, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x85, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x6d, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x49,
	0x64, 0x12, 0x73, 0x0a, 0x16, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x86, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x13, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x61,
	0x0a, 0x10, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x0c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x49,
	0x64, 0x12, 0x60, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x12, 0xf2,
	0x82, 0xb5, 0x91, 0x07, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x69, 0x64, 0x18, 0xb8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0xb9, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x17, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x48, 0x00, 0x52, 0x13, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x0f, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x76, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0xba,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x19, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x13, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x7a, 0x0a, 0x19, 0x73,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63,
	0x5f, 0x61, 0x63, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x8b, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x42, 0x1a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x14, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69,
	0x63, 0x41, 0x63, 0x69, 0x64, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c,
	0x79, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x6d, 0x0a, 0x14, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x8d,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x16, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x65, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x95, 0x01, 0x0a, 0x22, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x8e, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x23, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x1d, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x83, 0x01,
	0x0a, 0x1c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x8f,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x17, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x19, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x67, 0x0a, 0x12, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x91, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x42, 0x14, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x64, 0x0a, 0x11,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x13, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x93, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0a, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x82, 0x01, 0x0a,
	0x1b, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x94, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x1d, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x17, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x48, 0x00, 0x52, 0x19, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x49,
	0x64, 0x12, 0x55, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0xbb, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x08, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x42, 0x10, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x49, 0x64, 0x12, 0x57, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0xbc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x0f, 0xf2, 0x82, 0xb5,
	0x91, 0x07, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x0c, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x97, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x42, 0x0e, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x08, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x73, 0x0a, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x98, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91, 0x07, 0x12, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x73, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x42, 0x18, 0xf2, 0x82, 0xb5, 0x91,
	0x07, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x3a, 0x4b, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0x8a, 0xa1, 0x96, 0xbc, 0x05, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x13, 0x0a, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x06, 0xb0, 0xee, 0x92, 0xb2, 0x06, 0x01, 0x22, 0xc9,
	0x01, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x64, 0x52, 0x07,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x06, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x22, 0xf0, 0x0b, 0x0a, 0x0f, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x0a,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x35, 0x0a,
	0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x63, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3b, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x12, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0xb1, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x70, 0x8a, 0xf9, 0x83, 0xb2,
	0x05, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xb9, 0x02, 0x0a,
	0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x6d, 0x8a, 0xf9, 0x83, 0xb2, 0x05,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x43, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02,
	0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0xf4, 0x08,
	0x0a, 0x0b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x06, 0xf0,
	0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x38, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x5e, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x3d, 0x0a,
	0x0b, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x0b,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52,
	0x0a, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x74, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61,
	0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x35, 0x0a, 0x07, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x80, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x65,
	0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53,
	0x65, 0x74, 0x2f, 0x75, 0x63, 0x75, 0x6d, 0x2d, 0x75, 0x6e, 0x69, 0x74, 0x73, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x3a, 0x77, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x9a, 0x86, 0x93, 0xa0,
	0x08, 0x32, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x28, 0x29, 0x2e, 0x6e, 0x6f, 0x74, 0x28, 0x29, 0x20, 0x78, 0x6f, 0x72, 0x20, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x73, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x2e, 0x6e,
	0x6f, 0x74, 0x28, 0x29, 0x22, 0xb9, 0x0a, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30,
	0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e,
	0x12, 0x98, 0x01, 0x0a, 0x03, 0x77, 0x68, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x66,
	0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x06, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x77, 0x68, 0x6f, 0x12, 0xa8, 0x01, 0x0a, 0x0c,
	0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x66, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6f, 0x6e, 0x42, 0x65,
	0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x12, 0x54, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x0a,
	0x73, 0x69, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x2e, 0x53, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0xff, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x64, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x69, 0x6d, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x01,
	0x10, 0x02, 0x1a, 0xfc, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x64, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x26, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x6d, 0x69, 0x6d, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x3a, 0x3d, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x31, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xff, 0x03, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x69, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x3a, 0xb5, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x9a,
	0x86, 0x93, 0xa0, 0x08, 0x1f, 0x63, 0x6f, 0x64, 0x65, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x4a, 0x04, 0x08, 0x04,
	0x10, 0x05, 0x22, 0xd4, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x49,
	0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x09, 0x5e, 0x5b, 0x5c, 0x73,
	0x5c, 0x53, 0x5d, 0x2b, 0x24, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xa1, 0x03, 0x0a, 0x04, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x73, 0x12, 0x41, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x54, 0x0a, 0x09, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x45, 0x43,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10,
	0x03, 0x3a, 0x7a, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x3c, 0x28,
	0x5b, 0x30, 0x31, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x32, 0x5b, 0x30, 0x2d, 0x33, 0x5d,
	0x29, 0x3a, 0x5b, 0x30, 0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x3a, 0x28, 0x5b, 0x30,
	0x2d, 0x35, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x36, 0x30, 0x29, 0x28, 0x5c, 0x2e, 0x5b,
	0x30, 0x2d, 0x39, 0x5d, 0x7b, 0x31, 0x2c, 0x39, 0x7d, 0x29, 0x3f, 0xb2, 0xfe, 0xe4, 0x97, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb8, 0x1a,
	0x0a, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x12, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x5f,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x8c, 0x17,
	0x0a, 0x06, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67,
	0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x58, 0x52,
	0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x38,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0b, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x58, 0x0a, 0x0d, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x0c, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x52, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x2e, 0x44, 0x61, 0x79, 0x4f, 0x66,
	0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x64, 0x61, 0x79, 0x4f, 0x66, 0x57,
	0x65, 0x65, 0x6b, 0x12, 0x39, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x64,
	0x61, 0x79, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x66, 0x44, 0x61, 0x79, 0x12, 0x3f,
	0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x2e, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12,
	0x38, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0xc3, 0x01, 0x0a, 0x07, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x58, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x48, 0x00, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x3a, 0x06, 0xa0,
	0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a,
	0xad, 0x02, 0x0a, 0x10, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x4f,
	0x66, 0x54, 0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x68, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2d,
	0x6f, 0x66, 0x2d, 0x74, 0x69, 0x6d, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e,
	0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a,
	0xab, 0x02, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x4f, 0x66, 0x54,
	0x69, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x3a, 0x68, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2d, 0x6f, 0x66,
	0x2d, 0x74, 0x69, 0x6d, 0x65, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06,
	0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa4, 0x02,
	0x0a, 0x0d, 0x44, 0x61, 0x79, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x64, 0x61, 0x79, 0x73, 0x2d, 0x6f, 0x66, 0x2d, 0x77, 0x65, 0x65, 0x6b, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0xa4, 0x02, 0x0a, 0x08, 0x57, 0x68, 0x65, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x67, 0x8a, 0xf9, 0x83, 0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0xbe, 0x03, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x29, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93,
	0xa0, 0x08, 0x25, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x27, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20,
	0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x23, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x24, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x4d, 0x61, 0x78, 0x2e, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2e,
	0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x28, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28,
	0x29, 0x20, 0x6f, 0x72, 0x20, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x22, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x78, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x9a, 0x86,
	0x93, 0xa0, 0x08, 0x61, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x28, 0x77, 0x68, 0x65, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x2e, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x28, 0x24, 0x74, 0x68, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x28, 0x27,
	0x43, 0x27, 0x20, 0x7c, 0x20, 0x27, 0x43, 0x4d, 0x27, 0x20, 0x7c, 0x20, 0x27, 0x43, 0x44, 0x27,
	0x20, 0x7c, 0x20, 0x27, 0x43, 0x56, 0x27, 0x29, 0x29, 0x2e, 0x61, 0x6c, 0x6c, 0x46, 0x61, 0x6c,
	0x73, 0x65, 0x28, 0x29, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x21, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x66, 0x44, 0x61, 0x79, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x20, 0x6f, 0x72, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x29, 0x3a, 0x3a, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0xaf, 0x0b, 0x0a, 0x11, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68,
	0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x11, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x46, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x58,
	0x52, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0xa0, 0x02, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x67, 0x8a, 0xf9, 0x83,
	0xb2, 0x05, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x65, 0x74, 0x2f,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0xc0, 0x9f, 0xe3, 0xb6,
	0x05, 0x01, 0x9a, 0xb5, 0x8e, 0x93, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x1a, 0x91, 0x02, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x58,
	0x12, 0x35, 0x0a, 0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x06, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0e, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66,
	0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0xaf, 0x02, 0xc0, 0x9f, 0xe3, 0xb6, 0x05,
	0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x9a, 0x86, 0x93, 0xa0, 0x08, 0x1e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x28, 0x29, 0x20, 0x6f, 0x72, 0x20, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x28, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x20, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x28, 0x29, 0x9a, 0x86, 0x93, 0xa0, 0x08, 0x91, 0x01, 0x28, 0x74, 0x79, 0x70, 0x65, 0x20, 0x3d,
	0x20, 0x27, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x27, 0x20, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x20,
	0x3d, 0x20, 0x27, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69, 0x63, 0x27, 0x20, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x20, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x2e, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x28, 0x29, 0x29, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x28, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x28, 0x27, 0x64, 0x61, 0x74, 0x61,
	0x2d, 0x27, 0x29, 0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x28, 0x29, 0x29, 0x22, 0xe6, 0x01, 0x0a, 0x0b, 0x55,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x56, 0xc0, 0x9f, 0xe3,
	0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x11, 0x5b, 0x30, 0x5d, 0x7c, 0x28, 0x5b, 0x31,
	0x2d, 0x39, 0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x2a, 0x29, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x33,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x03, 0x55, 0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x40, 0xc0, 0x9f,
	0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06, 0x03, 0x5c, 0x53, 0x2a, 0xb2, 0xfe, 0xe4,
	0x97, 0x06, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x72, 0x69, 0x22, 0xc8,
	0x01, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92,
	0xfa, 0xa2, 0x8c, 0x06, 0x03, 0x5c, 0x53, 0x2a, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2b, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x72, 0x6c, 0x22, 0xdc, 0x05, 0x0a, 0x0c, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x46,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x58, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x9d, 0x03, 0x0a, 0x06, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x58, 0x12, 0x51, 0x0a, 0x10, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x63, 0x65, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x32, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0xbc, 0x01, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x7c, 0xf2, 0xff, 0xfc, 0xc2, 0x06,
	0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0xf2,
	0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75,
	0x64, 0x79, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x63, 0x61, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xf2, 0xff, 0xfc, 0xc2,
	0x06, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x08, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0xf2, 0xff, 0xfc, 0xc2, 0x06, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06,
	0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x3a, 0x40, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe,
	0xe4, 0x97, 0x06, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x3a, 0x83, 0x01, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0x92, 0xfa, 0xa2, 0x8c, 0x06,
	0x45, 0x75, 0x72, 0x6e, 0x3a, 0x75, 0x75, 0x69, 0x64, 0x3a, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x38, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34,
	0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30,
	0x2d, 0x39, 0x61, 0x2d, 0x66, 0x5d, 0x7b, 0x34, 0x7d, 0x2d, 0x5b, 0x30, 0x2d, 0x39, 0x61, 0x2d,
	0x66, 0x5d, 0x7b, 0x31, 0x32, 0x7d, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2c, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x75, 0x69, 0x64, 0x22, 0xe1, 0x06, 0x0a, 0x14, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c,
	0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e,
	0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x58, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69,
	0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x52, 0x0e, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4b, 0x0a,
	0x10, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x1a, 0xb7, 0x02, 0x0a, 0x08, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x58, 0x12, 0x2c, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72,
	0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x12, 0x3b, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x48, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x17, 0x65, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x3a, 0x06, 0xa0, 0x83, 0x83, 0xe8, 0x06, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x3a, 0x48, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x02, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x3c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x93, 0x01, 0x0a,
	0x05, 0x58, 0x68, 0x74, 0x6d, 0x6c, 0x12, 0x1c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xf0, 0xd0, 0x87, 0xeb, 0x04, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72,
	0x35, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x02, 0x69,
	0x64, 0x3a, 0x39, 0xc0, 0x9f, 0xe3, 0xb6, 0x05, 0x01, 0xb2, 0xfe, 0xe4, 0x97, 0x06, 0x2d, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x78, 0x68, 0x74, 0x6d, 0x6c, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x42, 0x6f, 0x98, 0xc6, 0xb0, 0xb5, 0x07, 0x05, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x35, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x4c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x35, 0x2f, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescData = file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDesc
)

func file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDescData
}

var file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes = make([]protoimpl.MessageInfo, 149)
var file_proto_google_fhir_proto_r5_core_datatypes_proto_goTypes = []interface{}{
	(Date_Precision)(0),                   // 0: google.fhir.r5.core.Date.Precision
	(DateTime_Precision)(0),               // 1: google.fhir.r5.core.DateTime.Precision
	(Instant_Precision)(0),                // 2: google.fhir.r5.core.Instant.Precision
	(Time_Precision)(0),                   // 3: google.fhir.r5.core.Time.Precision
	(*Address)(nil),                       // 4: google.fhir.r5.core.Address
	(*Age)(nil),                           // 5: google.fhir.r5.core.Age
	(*Annotation)(nil),                    // 6: google.fhir.r5.core.Annotation
	(*Attachment)(nil),                    // 7: google.fhir.r5.core.Attachment
	(*Availability)(nil),                  // 8: google.fhir.r5.core.Availability
	(*BackboneElement)(nil),               // 9: google.fhir.r5.core.BackboneElement
	(*BackboneType)(nil),                  // 10: google.fhir.r5.core.BackboneType
	(*Base)(nil),                          // 11: google.fhir.r5.core.Base
	(*Base64Binary)(nil),                  // 12: google.fhir.r5.core.Base64Binary
	(*Boolean)(nil),                       // 13: google.fhir.r5.core.Boolean
	(*Canonical)(nil),                     // 14: google.fhir.r5.core.Canonical
	(*Code)(nil),                          // 15: google.fhir.r5.core.Code
	(*CodeableConcept)(nil),               // 16: google.fhir.r5.core.CodeableConcept
	(*CodeableReference)(nil),             // 17: google.fhir.r5.core.CodeableReference
	(*Coding)(nil),                        // 18: google.fhir.r5.core.Coding
	(*ContactDetail)(nil),                 // 19: google.fhir.r5.core.ContactDetail
	(*ContactPoint)(nil),                  // 20: google.fhir.r5.core.ContactPoint
	(*Contributor)(nil),                   // 21: google.fhir.r5.core.Contributor
	(*Count)(nil),                         // 22: google.fhir.r5.core.Count
	(*DataRequirement)(nil),               // 23: google.fhir.r5.core.DataRequirement
	(*DataType)(nil),                      // 24: google.fhir.r5.core.DataType
	(*Date)(nil),                          // 25: google.fhir.r5.core.Date
	(*DateTime)(nil),                      // 26: google.fhir.r5.core.DateTime
	(*Decimal)(nil),                       // 27: google.fhir.r5.core.Decimal
	(*Distance)(nil),                      // 28: google.fhir.r5.core.Distance
	(*Dosage)(nil),                        // 29: google.fhir.r5.core.Dosage
	(*Duration)(nil),                      // 30: google.fhir.r5.core.Duration
	(*Element)(nil),                       // 31: google.fhir.r5.core.Element
	(*ElementDefinition)(nil),             // 32: google.fhir.r5.core.ElementDefinition
	(*Expression)(nil),                    // 33: google.fhir.r5.core.Expression
	(*ExtendedContactDetail)(nil),         // 34: google.fhir.r5.core.ExtendedContactDetail
	(*Extension)(nil),                     // 35: google.fhir.r5.core.Extension
	(*HumanName)(nil),                     // 36: google.fhir.r5.core.HumanName
	(*Id)(nil),                            // 37: google.fhir.r5.core.Id
	(*Identifier)(nil),                    // 38: google.fhir.r5.core.Identifier
	(*Instant)(nil),                       // 39: google.fhir.r5.core.Instant
	(*Integer)(nil),                       // 40: google.fhir.r5.core.Integer
	(*Integer64)(nil),                     // 41: google.fhir.r5.core.Integer64
	(*Markdown)(nil),                      // 42: google.fhir.r5.core.Markdown
	(*MarketingStatus)(nil),               // 43: google.fhir.r5.core.MarketingStatus
	(*Meta)(nil),                          // 44: google.fhir.r5.core.Meta
	(*MonetaryComponent)(nil),             // 45: google.fhir.r5.core.MonetaryComponent
	(*Money)(nil),                         // 46: google.fhir.r5.core.Money
	(*MoneyQuantity)(nil),                 // 47: google.fhir.r5.core.MoneyQuantity
	(*Narrative)(nil),                     // 48: google.fhir.r5.core.Narrative
	(*Oid)(nil),                           // 49: google.fhir.r5.core.Oid
	(*ParameterDefinition)(nil),           // 50: google.fhir.r5.core.ParameterDefinition
	(*Period)(nil),                        // 51: google.fhir.r5.core.Period
	(*PositiveInt)(nil),                   // 52: google.fhir.r5.core.PositiveInt
	(*PrimitiveType)(nil),                 // 53: google.fhir.r5.core.PrimitiveType
	(*ProductShelfLife)(nil),              // 54: google.fhir.r5.core.ProductShelfLife
	(*Quantity)(nil),                      // 55: google.fhir.r5.core.Quantity
	(*Range)(nil),                         // 56: google.fhir.r5.core.Range
	(*Ratio)(nil),                         // 57: google.fhir.r5.core.Ratio
	(*RatioRange)(nil),                    // 58: google.fhir.r5.core.RatioRange
	(*Reference)(nil),                     // 59: google.fhir.r5.core.Reference
	(*ReferenceId)(nil),                   // 60: google.fhir.r5.core.ReferenceId
	(*RelatedArtifact)(nil),               // 61: google.fhir.r5.core.RelatedArtifact
	(*SampledData)(nil),                   // 62: google.fhir.r5.core.SampledData
	(*Signature)(nil),                     // 63: google.fhir.r5.core.Signature
	(*SimpleQuantity)(nil),                // 64: google.fhir.r5.core.SimpleQuantity
	(*String)(nil),                        // 65: google.fhir.r5.core.String
	(*Time)(nil),                          // 66: google.fhir.r5.core.Time
	(*Timing)(nil),                        // 67: google.fhir.r5.core.Timing
	(*TriggerDefinition)(nil),             // 68: google.fhir.r5.core.TriggerDefinition
	(*UnsignedInt)(nil),                   // 69: google.fhir.r5.core.UnsignedInt
	(*Uri)(nil),                           // 70: google.fhir.r5.core.Uri
	(*Url)(nil),                           // 71: google.fhir.r5.core.Url
	(*UsageContext)(nil),                  // 72: google.fhir.r5.core.UsageContext
	(*Uuid)(nil),                          // 73: google.fhir.r5.core.Uuid
	(*VirtualServiceDetail)(nil),          // 74: google.fhir.r5.core.VirtualServiceDetail
	(*Xhtml)(nil),                         // 75: google.fhir.r5.core.Xhtml
	(*Address_UseCode)(nil),               // 76: google.fhir.r5.core.Address.UseCode
	(*Address_TypeCode)(nil),              // 77: google.fhir.r5.core.Address.TypeCode
	(*Age_ComparatorCode)(nil),            // 78: google.fhir.r5.core.Age.ComparatorCode
	(*Annotation_AuthorX)(nil),            // 79: google.fhir.r5.core.Annotation.AuthorX
	(*Attachment_ContentTypeCode)(nil),    // 80: google.fhir.r5.core.Attachment.ContentTypeCode
	(*Availability_AvailableTime)(nil),    // 81: google.fhir.r5.core.Availability.AvailableTime
	(*Availability_NotAvailableTime)(nil), // 82: google.fhir.r5.core.Availability.NotAvailableTime
	(*Availability_AvailableTime_DaysOfWeekCode)(nil),                         // 83: google.fhir.r5.core.Availability.AvailableTime.DaysOfWeekCode
	(*ContactPoint_SystemCode)(nil),                                           // 84: google.fhir.r5.core.ContactPoint.SystemCode
	(*ContactPoint_UseCode)(nil),                                              // 85: google.fhir.r5.core.ContactPoint.UseCode
	(*Contributor_TypeCode)(nil),                                              // 86: google.fhir.r5.core.Contributor.TypeCode
	(*Count_ComparatorCode)(nil),                                              // 87: google.fhir.r5.core.Count.ComparatorCode
	(*DataRequirement_TypeCode)(nil),                                          // 88: google.fhir.r5.core.DataRequirement.TypeCode
	(*DataRequirement_SubjectX)(nil),                                          // 89: google.fhir.r5.core.DataRequirement.SubjectX
	(*DataRequirement_CodeFilter)(nil),                                        // 90: google.fhir.r5.core.DataRequirement.CodeFilter
	(*DataRequirement_DateFilter)(nil),                                        // 91: google.fhir.r5.core.DataRequirement.DateFilter
	(*DataRequirement_ValueFilter)(nil),                                       // 92: google.fhir.r5.core.DataRequirement.ValueFilter
	(*DataRequirement_Sort)(nil),                                              // 93: google.fhir.r5.core.DataRequirement.Sort
	(*DataRequirement_DateFilter_ValueX)(nil),                                 // 94: google.fhir.r5.core.DataRequirement.DateFilter.ValueX
	(*DataRequirement_ValueFilter_ComparatorCode)(nil),                        // 95: google.fhir.r5.core.DataRequirement.ValueFilter.ComparatorCode
	(*DataRequirement_ValueFilter_ValueX)(nil),                                // 96: google.fhir.r5.core.DataRequirement.ValueFilter.ValueX
	(*DataRequirement_Sort_DirectionCode)(nil),                                // 97: google.fhir.r5.core.DataRequirement.Sort.DirectionCode
	(*Distance_ComparatorCode)(nil),                                           // 98: google.fhir.r5.core.Distance.ComparatorCode
	(*Dosage_DoseAndRate)(nil),                                                // 99: google.fhir.r5.core.Dosage.DoseAndRate
	(*Dosage_DoseAndRate_DoseX)(nil),                                          // 100: google.fhir.r5.core.Dosage.DoseAndRate.DoseX
	(*Dosage_DoseAndRate_RateX)(nil),                                          // 101: google.fhir.r5.core.Dosage.DoseAndRate.RateX
	(*Duration_ComparatorCode)(nil),                                           // 102: google.fhir.r5.core.Duration.ComparatorCode
	(*ElementDefinition_RepresentationCode)(nil),                              // 103: google.fhir.r5.core.ElementDefinition.RepresentationCode
	(*ElementDefinition_Slicing)(nil),                                         // 104: google.fhir.r5.core.ElementDefinition.Slicing
	(*ElementDefinition_Base)(nil),                                            // 105: google.fhir.r5.core.ElementDefinition.Base
	(*ElementDefinition_TypeRef)(nil),                                         // 106: google.fhir.r5.core.ElementDefinition.TypeRef
	(*ElementDefinition_DefaultValueX)(nil),                                   // 107: google.fhir.r5.core.ElementDefinition.DefaultValueX
	(*ElementDefinition_FixedX)(nil),                                          // 108: google.fhir.r5.core.ElementDefinition.FixedX
	(*ElementDefinition_PatternX)(nil),                                        // 109: google.fhir.r5.core.ElementDefinition.PatternX
	(*ElementDefinition_Example)(nil),                                         // 110: google.fhir.r5.core.ElementDefinition.Example
	(*ElementDefinition_MinValueX)(nil),                                       // 111: google.fhir.r5.core.ElementDefinition.MinValueX
	(*ElementDefinition_MaxValueX)(nil),                                       // 112: google.fhir.r5.core.ElementDefinition.MaxValueX
	(*ElementDefinition_Constraint)(nil),                                      // 113: google.fhir.r5.core.ElementDefinition.Constraint
	(*ElementDefinition_ElementDefinitionBinding)(nil),                        // 114: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding
	(*ElementDefinition_Mapping)(nil),                                         // 115: google.fhir.r5.core.ElementDefinition.Mapping
	(*ElementDefinition_Slicing_Discriminator)(nil),                           // 116: google.fhir.r5.core.ElementDefinition.Slicing.Discriminator
	(*ElementDefinition_Slicing_RulesCode)(nil),                               // 117: google.fhir.r5.core.ElementDefinition.Slicing.RulesCode
	(*ElementDefinition_Slicing_Discriminator_TypeCode)(nil),                  // 118: google.fhir.r5.core.ElementDefinition.Slicing.Discriminator.TypeCode
	(*ElementDefinition_TypeRef_AggregationCode)(nil),                         // 119: google.fhir.r5.core.ElementDefinition.TypeRef.AggregationCode
	(*ElementDefinition_TypeRef_VersioningCode)(nil),                          // 120: google.fhir.r5.core.ElementDefinition.TypeRef.VersioningCode
	(*ElementDefinition_Example_ValueX)(nil),                                  // 121: google.fhir.r5.core.ElementDefinition.Example.ValueX
	(*ElementDefinition_Constraint_SeverityCode)(nil),                         // 122: google.fhir.r5.core.ElementDefinition.Constraint.SeverityCode
	(*ElementDefinition_ElementDefinitionBinding_StrengthCode)(nil),           // 123: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.StrengthCode
	(*ElementDefinition_ElementDefinitionBinding_Additional)(nil),             // 124: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional
	(*ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode)(nil), // 125: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.PurposeCode
	(*ElementDefinition_Mapping_LanguageCode)(nil),                            // 126: google.fhir.r5.core.ElementDefinition.Mapping.LanguageCode
	(*Extension_ValueX)(nil),                                                  // 127: google.fhir.r5.core.Extension.ValueX
	(*HumanName_UseCode)(nil),                                                 // 128: google.fhir.r5.core.HumanName.UseCode
	(*Identifier_UseCode)(nil),                                                // 129: google.fhir.r5.core.Identifier.UseCode
	(*MonetaryComponent_TypeCode)(nil),                                        // 130: google.fhir.r5.core.MonetaryComponent.TypeCode
	(*Money_CurrencyCode)(nil),                                                // 131: google.fhir.r5.core.Money.CurrencyCode
	(*MoneyQuantity_ComparatorCode)(nil),                                      // 132: google.fhir.r5.core.MoneyQuantity.ComparatorCode
	(*Narrative_StatusCode)(nil),                                              // 133: google.fhir.r5.core.Narrative.StatusCode
	(*ParameterDefinition_UseCode)(nil),                                       // 134: google.fhir.r5.core.ParameterDefinition.UseCode
	(*ParameterDefinition_TypeCode)(nil),                                      // 135: google.fhir.r5.core.ParameterDefinition.TypeCode
	(*ProductShelfLife_PeriodX)(nil),                                          // 136: google.fhir.r5.core.ProductShelfLife.PeriodX
	(*Quantity_ComparatorCode)(nil),                                           // 137: google.fhir.r5.core.Quantity.ComparatorCode
	(*RelatedArtifact_TypeCode)(nil),                                          // 138: google.fhir.r5.core.RelatedArtifact.TypeCode
	(*RelatedArtifact_PublicationStatusCode)(nil),                             // 139: google.fhir.r5.core.RelatedArtifact.PublicationStatusCode
	(*SampledData_IntervalUnitCode)(nil),                                      // 140: google.fhir.r5.core.SampledData.IntervalUnitCode
	(*Signature_TargetFormatCode)(nil),                                        // 141: google.fhir.r5.core.Signature.TargetFormatCode
	(*Signature_SigFormatCode)(nil),                                           // 142: google.fhir.r5.core.Signature.SigFormatCode
	(*Timing_Repeat)(nil),                                                     // 143: google.fhir.r5.core.Timing.Repeat
	(*Timing_Repeat_BoundsX)(nil),                                             // 144: google.fhir.r5.core.Timing.Repeat.BoundsX
	(*Timing_Repeat_DurationUnitCode)(nil),                                    // 145: google.fhir.r5.core.Timing.Repeat.DurationUnitCode
	(*Timing_Repeat_PeriodUnitCode)(nil),                                      // 146: google.fhir.r5.core.Timing.Repeat.PeriodUnitCode
	(*Timing_Repeat_DayOfWeekCode)(nil),                                       // 147: google.fhir.r5.core.Timing.Repeat.DayOfWeekCode
	(*Timing_Repeat_WhenCode)(nil),                                            // 148: google.fhir.r5.core.Timing.Repeat.WhenCode
	(*TriggerDefinition_TypeCode)(nil),                                        // 149: google.fhir.r5.core.TriggerDefinition.TypeCode
	(*TriggerDefinition_TimingX)(nil),                                         // 150: google.fhir.r5.core.TriggerDefinition.TimingX
	(*UsageContext_ValueX)(nil),                                               // 151: google.fhir.r5.core.UsageContext.ValueX
	(*VirtualServiceDetail_AddressX)(nil),                                     // 152: google.fhir.r5.core.VirtualServiceDetail.AddressX
	(codes_go_proto.AddressUseCode_Value)(0),                                  // 153: google.fhir.r5.core.AddressUseCode.Value
	(codes_go_proto.AddressTypeCode_Value)(0),                                 // 154: google.fhir.r5.core.AddressTypeCode.Value
	(codes_go_proto.QuantityComparatorCode_Value)(0),                          // 155: google.fhir.r5.core.QuantityComparatorCode.Value
	(codes_go_proto.DaysOfWeekCode_Value)(0),                                  // 156: google.fhir.r5.core.DaysOfWeekCode.Value
	(codes_go_proto.ContactPointSystemCode_Value)(0),                          // 157: google.fhir.r5.core.ContactPointSystemCode.Value
	(codes_go_proto.ContactPointUseCode_Value)(0),                             // 158: google.fhir.r5.core.ContactPointUseCode.Value
	(codes_go_proto.ContributorTypeCode_Value)(0),                             // 159: google.fhir.r5.core.ContributorTypeCode.Value
	(codes_go_proto.FHIRTypesCode_Value)(0),                                   // 160: google.fhir.r5.core.FHIRTypesCode.Value
	(valuesets_go_proto.ValueFilterComparatorValueSet_Value)(0),               // 161: google.fhir.r5.core.ValueFilterComparatorValueSet.Value
	(codes_go_proto.SortDirectionCode_Value)(0),                               // 162: google.fhir.r5.core.SortDirectionCode.Value
	(codes_go_proto.PropertyRepresentationCode_Value)(0),                      // 163: google.fhir.r5.core.PropertyRepresentationCode.Value
	(codes_go_proto.SlicingRulesCode_Value)(0),                                // 164: google.fhir.r5.core.SlicingRulesCode.Value
	(codes_go_proto.DiscriminatorTypeCode_Value)(0),                           // 165: google.fhir.r5.core.DiscriminatorTypeCode.Value
	(codes_go_proto.AggregationModeCode_Value)(0),                             // 166: google.fhir.r5.core.AggregationModeCode.Value
	(codes_go_proto.ReferenceVersionRulesCode_Value)(0),                       // 167: google.fhir.r5.core.ReferenceVersionRulesCode.Value
	(codes_go_proto.ConstraintSeverityCode_Value)(0),                          // 168: google.fhir.r5.core.ConstraintSeverityCode.Value
	(codes_go_proto.BindingStrengthCode_Value)(0),                             // 169: google.fhir.r5.core.BindingStrengthCode.Value
	(codes_go_proto.AdditionalBindingPurposeCode_Value)(0),                    // 170: google.fhir.r5.core.AdditionalBindingPurposeCode.Value
	(codes_go_proto.NameUseCode_Value)(0),                                     // 171: google.fhir.r5.core.NameUseCode.Value
	(codes_go_proto.IdentifierUseCode_Value)(0),                               // 172: google.fhir.r5.core.IdentifierUseCode.Value
	(codes_go_proto.PriceComponentTypeCode_Value)(0),                          // 173: google.fhir.r5.core.PriceComponentTypeCode.Value
	(codes_go_proto.NarrativeStatusCode_Value)(0),                             // 174: google.fhir.r5.core.NarrativeStatusCode.Value
	(codes_go_proto.OperationParameterUseCode_Value)(0),                       // 175: google.fhir.r5.core.OperationParameterUseCode.Value
	(codes_go_proto.RelatedArtifactTypeCode_Value)(0),                         // 176: google.fhir.r5.core.RelatedArtifactTypeCode.Value
	(codes_go_proto.PublicationStatusCode_Value)(0),                           // 177: google.fhir.r5.core.PublicationStatusCode.Value
	(valuesets_go_proto.UnitsOfTimeValueSet_Value)(0),                         // 178: google.fhir.r5.core.UnitsOfTimeValueSet.Value
	(valuesets_go_proto.EventTimingValueSet_Value)(0),                         // 179: google.fhir.r5.core.EventTimingValueSet.Value
	(codes_go_proto.TriggerTypeCode_Value)(0),                                 // 180: google.fhir.r5.core.TriggerTypeCode.Value
}
var file_proto_google_fhir_proto_r5_core_datatypes_proto_depIdxs = []int32{
	65,   // 0: google.fhir.r5.core.Address.id:type_name -> google.fhir.r5.core.String
	35,   // 1: google.fhir.r5.core.Address.extension:type_name -> google.fhir.r5.core.Extension
	76,   // 2: google.fhir.r5.core.Address.use:type_name -> google.fhir.r5.core.Address.UseCode
	77,   // 3: google.fhir.r5.core.Address.type:type_name -> google.fhir.r5.core.Address.TypeCode
	65,   // 4: google.fhir.r5.core.Address.text:type_name -> google.fhir.r5.core.String
	65,   // 5: google.fhir.r5.core.Address.line:type_name -> google.fhir.r5.core.String
	65,   // 6: google.fhir.r5.core.Address.city:type_name -> google.fhir.r5.core.String
	65,   // 7: google.fhir.r5.core.Address.district:type_name -> google.fhir.r5.core.String
	65,   // 8: google.fhir.r5.core.Address.state:type_name -> google.fhir.r5.core.String
	65,   // 9: google.fhir.r5.core.Address.postal_code:type_name -> google.fhir.r5.core.String
	65,   // 10: google.fhir.r5.core.Address.country:type_name -> google.fhir.r5.core.String
	51,   // 11: google.fhir.r5.core.Address.period:type_name -> google.fhir.r5.core.Period
	65,   // 12: google.fhir.r5.core.Age.id:type_name -> google.fhir.r5.core.String
	35,   // 13: google.fhir.r5.core.Age.extension:type_name -> google.fhir.r5.core.Extension
	27,   // 14: google.fhir.r5.core.Age.value:type_name -> google.fhir.r5.core.Decimal
	78,   // 15: google.fhir.r5.core.Age.comparator:type_name -> google.fhir.r5.core.Age.ComparatorCode
	65,   // 16: google.fhir.r5.core.Age.unit:type_name -> google.fhir.r5.core.String
	70,   // 17: google.fhir.r5.core.Age.system:type_name -> google.fhir.r5.core.Uri
	15,   // 18: google.fhir.r5.core.Age.code:type_name -> google.fhir.r5.core.Code
	65,   // 19: google.fhir.r5.core.Annotation.id:type_name -> google.fhir.r5.core.String
	35,   // 20: google.fhir.r5.core.Annotation.extension:type_name -> google.fhir.r5.core.Extension
	79,   // 21: google.fhir.r5.core.Annotation.author:type_name -> google.fhir.r5.core.Annotation.AuthorX
	26,   // 22: google.fhir.r5.core.Annotation.time:type_name -> google.fhir.r5.core.DateTime
	42,   // 23: google.fhir.r5.core.Annotation.text:type_name -> google.fhir.r5.core.Markdown
	65,   // 24: google.fhir.r5.core.Attachment.id:type_name -> google.fhir.r5.core.String
	35,   // 25: google.fhir.r5.core.Attachment.extension:type_name -> google.fhir.r5.core.Extension
	80,   // 26: google.fhir.r5.core.Attachment.content_type:type_name -> google.fhir.r5.core.Attachment.ContentTypeCode
	15,   // 27: google.fhir.r5.core.Attachment.language:type_name -> google.fhir.r5.core.Code
	12,   // 28: google.fhir.r5.core.Attachment.data:type_name -> google.fhir.r5.core.Base64Binary
	71,   // 29: google.fhir.r5.core.Attachment.url:type_name -> google.fhir.r5.core.Url
	41,   // 30: google.fhir.r5.core.Attachment.size:type_name -> google.fhir.r5.core.Integer64
	12,   // 31: google.fhir.r5.core.Attachment.hash:type_name -> google.fhir.r5.core.Base64Binary
	65,   // 32: google.fhir.r5.core.Attachment.title:type_name -> google.fhir.r5.core.String
	26,   // 33: google.fhir.r5.core.Attachment.creation:type_name -> google.fhir.r5.core.DateTime
	52,   // 34: google.fhir.r5.core.Attachment.height:type_name -> google.fhir.r5.core.PositiveInt
	52,   // 35: google.fhir.r5.core.Attachment.width:type_name -> google.fhir.r5.core.PositiveInt
	52,   // 36: google.fhir.r5.core.Attachment.frames:type_name -> google.fhir.r5.core.PositiveInt
	27,   // 37: google.fhir.r5.core.Attachment.duration:type_name -> google.fhir.r5.core.Decimal
	52,   // 38: google.fhir.r5.core.Attachment.pages:type_name -> google.fhir.r5.core.PositiveInt
	65,   // 39: google.fhir.r5.core.Availability.id:type_name -> google.fhir.r5.core.String
	35,   // 40: google.fhir.r5.core.Availability.extension:type_name -> google.fhir.r5.core.Extension
	81,   // 41: google.fhir.r5.core.Availability.available_time:type_name -> google.fhir.r5.core.Availability.AvailableTime
	82,   // 42: google.fhir.r5.core.Availability.not_available_time:type_name -> google.fhir.r5.core.Availability.NotAvailableTime
	65,   // 43: google.fhir.r5.core.BackboneElement.id:type_name -> google.fhir.r5.core.String
	35,   // 44: google.fhir.r5.core.BackboneElement.extension:type_name -> google.fhir.r5.core.Extension
	35,   // 45: google.fhir.r5.core.BackboneElement.modifier_extension:type_name -> google.fhir.r5.core.Extension
	65,   // 46: google.fhir.r5.core.BackboneType.id:type_name -> google.fhir.r5.core.String
	35,   // 47: google.fhir.r5.core.BackboneType.extension:type_name -> google.fhir.r5.core.Extension
	35,   // 48: google.fhir.r5.core.BackboneType.modifier_extension:type_name -> google.fhir.r5.core.Extension
	65,   // 49: google.fhir.r5.core.Base64Binary.id:type_name -> google.fhir.r5.core.String
	35,   // 50: google.fhir.r5.core.Base64Binary.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 51: google.fhir.r5.core.Boolean.id:type_name -> google.fhir.r5.core.String
	35,   // 52: google.fhir.r5.core.Boolean.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 53: google.fhir.r5.core.Canonical.id:type_name -> google.fhir.r5.core.String
	35,   // 54: google.fhir.r5.core.Canonical.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 55: google.fhir.r5.core.Code.id:type_name -> google.fhir.r5.core.String
	35,   // 56: google.fhir.r5.core.Code.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 57: google.fhir.r5.core.CodeableConcept.id:type_name -> google.fhir.r5.core.String
	35,   // 58: google.fhir.r5.core.CodeableConcept.extension:type_name -> google.fhir.r5.core.Extension
	18,   // 59: google.fhir.r5.core.CodeableConcept.coding:type_name -> google.fhir.r5.core.Coding
	65,   // 60: google.fhir.r5.core.CodeableConcept.text:type_name -> google.fhir.r5.core.String
	65,   // 61: google.fhir.r5.core.CodeableReference.id:type_name -> google.fhir.r5.core.String
	35,   // 62: google.fhir.r5.core.CodeableReference.extension:type_name -> google.fhir.r5.core.Extension
	16,   // 63: google.fhir.r5.core.CodeableReference.concept:type_name -> google.fhir.r5.core.CodeableConcept
	59,   // 64: google.fhir.r5.core.CodeableReference.reference:type_name -> google.fhir.r5.core.Reference
	65,   // 65: google.fhir.r5.core.Coding.id:type_name -> google.fhir.r5.core.String
	35,   // 66: google.fhir.r5.core.Coding.extension:type_name -> google.fhir.r5.core.Extension
	70,   // 67: google.fhir.r5.core.Coding.system:type_name -> google.fhir.r5.core.Uri
	65,   // 68: google.fhir.r5.core.Coding.version:type_name -> google.fhir.r5.core.String
	15,   // 69: google.fhir.r5.core.Coding.code:type_name -> google.fhir.r5.core.Code
	65,   // 70: google.fhir.r5.core.Coding.display:type_name -> google.fhir.r5.core.String
	13,   // 71: google.fhir.r5.core.Coding.user_selected:type_name -> google.fhir.r5.core.Boolean
	65,   // 72: google.fhir.r5.core.ContactDetail.id:type_name -> google.fhir.r5.core.String
	35,   // 73: google.fhir.r5.core.ContactDetail.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 74: google.fhir.r5.core.ContactDetail.name:type_name -> google.fhir.r5.core.String
	20,   // 75: google.fhir.r5.core.ContactDetail.telecom:type_name -> google.fhir.r5.core.ContactPoint
	65,   // 76: google.fhir.r5.core.ContactPoint.id:type_name -> google.fhir.r5.core.String
	35,   // 77: google.fhir.r5.core.ContactPoint.extension:type_name -> google.fhir.r5.core.Extension
	84,   // 78: google.fhir.r5.core.ContactPoint.system:type_name -> google.fhir.r5.core.ContactPoint.SystemCode
	65,   // 79: google.fhir.r5.core.ContactPoint.value:type_name -> google.fhir.r5.core.String
	85,   // 80: google.fhir.r5.core.ContactPoint.use:type_name -> google.fhir.r5.core.ContactPoint.UseCode
	52,   // 81: google.fhir.r5.core.ContactPoint.rank:type_name -> google.fhir.r5.core.PositiveInt
	51,   // 82: google.fhir.r5.core.ContactPoint.period:type_name -> google.fhir.r5.core.Period
	65,   // 83: google.fhir.r5.core.Contributor.id:type_name -> google.fhir.r5.core.String
	35,   // 84: google.fhir.r5.core.Contributor.extension:type_name -> google.fhir.r5.core.Extension
	86,   // 85: google.fhir.r5.core.Contributor.type:type_name -> google.fhir.r5.core.Contributor.TypeCode
	65,   // 86: google.fhir.r5.core.Contributor.name:type_name -> google.fhir.r5.core.String
	19,   // 87: google.fhir.r5.core.Contributor.contact:type_name -> google.fhir.r5.core.ContactDetail
	65,   // 88: google.fhir.r5.core.Count.id:type_name -> google.fhir.r5.core.String
	35,   // 89: google.fhir.r5.core.Count.extension:type_name -> google.fhir.r5.core.Extension
	27,   // 90: google.fhir.r5.core.Count.value:type_name -> google.fhir.r5.core.Decimal
	87,   // 91: google.fhir.r5.core.Count.comparator:type_name -> google.fhir.r5.core.Count.ComparatorCode
	65,   // 92: google.fhir.r5.core.Count.unit:type_name -> google.fhir.r5.core.String
	70,   // 93: google.fhir.r5.core.Count.system:type_name -> google.fhir.r5.core.Uri
	15,   // 94: google.fhir.r5.core.Count.code:type_name -> google.fhir.r5.core.Code
	65,   // 95: google.fhir.r5.core.DataRequirement.id:type_name -> google.fhir.r5.core.String
	35,   // 96: google.fhir.r5.core.DataRequirement.extension:type_name -> google.fhir.r5.core.Extension
	88,   // 97: google.fhir.r5.core.DataRequirement.type:type_name -> google.fhir.r5.core.DataRequirement.TypeCode
	14,   // 98: google.fhir.r5.core.DataRequirement.profile:type_name -> google.fhir.r5.core.Canonical
	89,   // 99: google.fhir.r5.core.DataRequirement.subject:type_name -> google.fhir.r5.core.DataRequirement.SubjectX
	65,   // 100: google.fhir.r5.core.DataRequirement.must_support:type_name -> google.fhir.r5.core.String
	90,   // 101: google.fhir.r5.core.DataRequirement.code_filter:type_name -> google.fhir.r5.core.DataRequirement.CodeFilter
	91,   // 102: google.fhir.r5.core.DataRequirement.date_filter:type_name -> google.fhir.r5.core.DataRequirement.DateFilter
	92,   // 103: google.fhir.r5.core.DataRequirement.value_filter:type_name -> google.fhir.r5.core.DataRequirement.ValueFilter
	52,   // 104: google.fhir.r5.core.DataRequirement.limit:type_name -> google.fhir.r5.core.PositiveInt
	93,   // 105: google.fhir.r5.core.DataRequirement.sort:type_name -> google.fhir.r5.core.DataRequirement.Sort
	65,   // 106: google.fhir.r5.core.DataType.id:type_name -> google.fhir.r5.core.String
	35,   // 107: google.fhir.r5.core.DataType.extension:type_name -> google.fhir.r5.core.Extension
	0,    // 108: google.fhir.r5.core.Date.precision:type_name -> google.fhir.r5.core.Date.Precision
	65,   // 109: google.fhir.r5.core.Date.id:type_name -> google.fhir.r5.core.String
	35,   // 110: google.fhir.r5.core.Date.extension:type_name -> google.fhir.r5.core.Extension
	1,    // 111: google.fhir.r5.core.DateTime.precision:type_name -> google.fhir.r5.core.DateTime.Precision
	65,   // 112: google.fhir.r5.core.DateTime.id:type_name -> google.fhir.r5.core.String
	35,   // 113: google.fhir.r5.core.DateTime.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 114: google.fhir.r5.core.Decimal.id:type_name -> google.fhir.r5.core.String
	35,   // 115: google.fhir.r5.core.Decimal.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 116: google.fhir.r5.core.Distance.id:type_name -> google.fhir.r5.core.String
	35,   // 117: google.fhir.r5.core.Distance.extension:type_name -> google.fhir.r5.core.Extension
	27,   // 118: google.fhir.r5.core.Distance.value:type_name -> google.fhir.r5.core.Decimal
	98,   // 119: google.fhir.r5.core.Distance.comparator:type_name -> google.fhir.r5.core.Distance.ComparatorCode
	65,   // 120: google.fhir.r5.core.Distance.unit:type_name -> google.fhir.r5.core.String
	70,   // 121: google.fhir.r5.core.Distance.system:type_name -> google.fhir.r5.core.Uri
	15,   // 122: google.fhir.r5.core.Distance.code:type_name -> google.fhir.r5.core.Code
	65,   // 123: google.fhir.r5.core.Dosage.id:type_name -> google.fhir.r5.core.String
	35,   // 124: google.fhir.r5.core.Dosage.extension:type_name -> google.fhir.r5.core.Extension
	35,   // 125: google.fhir.r5.core.Dosage.modifier_extension:type_name -> google.fhir.r5.core.Extension
	40,   // 126: google.fhir.r5.core.Dosage.sequence:type_name -> google.fhir.r5.core.Integer
	65,   // 127: google.fhir.r5.core.Dosage.text:type_name -> google.fhir.r5.core.String
	16,   // 128: google.fhir.r5.core.Dosage.additional_instruction:type_name -> google.fhir.r5.core.CodeableConcept
	65,   // 129: google.fhir.r5.core.Dosage.patient_instruction:type_name -> google.fhir.r5.core.String
	67,   // 130: google.fhir.r5.core.Dosage.timing:type_name -> google.fhir.r5.core.Timing
	13,   // 131: google.fhir.r5.core.Dosage.as_needed:type_name -> google.fhir.r5.core.Boolean
	16,   // 132: google.fhir.r5.core.Dosage.as_needed_for:type_name -> google.fhir.r5.core.CodeableConcept
	16,   // 133: google.fhir.r5.core.Dosage.site:type_name -> google.fhir.r5.core.CodeableConcept
	16,   // 134: google.fhir.r5.core.Dosage.route:type_name -> google.fhir.r5.core.CodeableConcept
	16,   // 135: google.fhir.r5.core.Dosage.method:type_name -> google.fhir.r5.core.CodeableConcept
	99,   // 136: google.fhir.r5.core.Dosage.dose_and_rate:type_name -> google.fhir.r5.core.Dosage.DoseAndRate
	57,   // 137: google.fhir.r5.core.Dosage.max_dose_per_period:type_name -> google.fhir.r5.core.Ratio
	64,   // 138: google.fhir.r5.core.Dosage.max_dose_per_administration:type_name -> google.fhir.r5.core.SimpleQuantity
	64,   // 139: google.fhir.r5.core.Dosage.max_dose_per_lifetime:type_name -> google.fhir.r5.core.SimpleQuantity
	65,   // 140: google.fhir.r5.core.Duration.id:type_name -> google.fhir.r5.core.String
	35,   // 141: google.fhir.r5.core.Duration.extension:type_name -> google.fhir.r5.core.Extension
	27,   // 142: google.fhir.r5.core.Duration.value:type_name -> google.fhir.r5.core.Decimal
	102,  // 143: google.fhir.r5.core.Duration.comparator:type_name -> google.fhir.r5.core.Duration.ComparatorCode
	65,   // 144: google.fhir.r5.core.Duration.unit:type_name -> google.fhir.r5.core.String
	70,   // 145: google.fhir.r5.core.Duration.system:type_name -> google.fhir.r5.core.Uri
	15,   // 146: google.fhir.r5.core.Duration.code:type_name -> google.fhir.r5.core.Code
	65,   // 147: google.fhir.r5.core.Element.id:type_name -> google.fhir.r5.core.String
	35,   // 148: google.fhir.r5.core.Element.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 149: google.fhir.r5.core.ElementDefinition.id:type_name -> google.fhir.r5.core.String
	35,   // 150: google.fhir.r5.core.ElementDefinition.extension:type_name -> google.fhir.r5.core.Extension
	35,   // 151: google.fhir.r5.core.ElementDefinition.modifier_extension:type_name -> google.fhir.r5.core.Extension
	65,   // 152: google.fhir.r5.core.ElementDefinition.path:type_name -> google.fhir.r5.core.String
	103,  // 153: google.fhir.r5.core.ElementDefinition.representation:type_name -> google.fhir.r5.core.ElementDefinition.RepresentationCode
	65,   // 154: google.fhir.r5.core.ElementDefinition.slice_name:type_name -> google.fhir.r5.core.String
	13,   // 155: google.fhir.r5.core.ElementDefinition.slice_is_constraining:type_name -> google.fhir.r5.core.Boolean
	65,   // 156: google.fhir.r5.core.ElementDefinition.label:type_name -> google.fhir.r5.core.String
	18,   // 157: google.fhir.r5.core.ElementDefinition.code:type_name -> google.fhir.r5.core.Coding
	104,  // 158: google.fhir.r5.core.ElementDefinition.slicing:type_name -> google.fhir.r5.core.ElementDefinition.Slicing
	65,   // 159: google.fhir.r5.core.ElementDefinition.short:type_name -> google.fhir.r5.core.String
	42,   // 160: google.fhir.r5.core.ElementDefinition.definition:type_name -> google.fhir.r5.core.Markdown
	42,   // 161: google.fhir.r5.core.ElementDefinition.comment:type_name -> google.fhir.r5.core.Markdown
	42,   // 162: google.fhir.r5.core.ElementDefinition.requirements:type_name -> google.fhir.r5.core.Markdown
	65,   // 163: google.fhir.r5.core.ElementDefinition.alias:type_name -> google.fhir.r5.core.String
	69,   // 164: google.fhir.r5.core.ElementDefinition.min:type_name -> google.fhir.r5.core.UnsignedInt
	65,   // 165: google.fhir.r5.core.ElementDefinition.max:type_name -> google.fhir.r5.core.String
	105,  // 166: google.fhir.r5.core.ElementDefinition.base:type_name -> google.fhir.r5.core.ElementDefinition.Base
	70,   // 167: google.fhir.r5.core.ElementDefinition.content_reference:type_name -> google.fhir.r5.core.Uri
	106,  // 168: google.fhir.r5.core.ElementDefinition.type:type_name -> google.fhir.r5.core.ElementDefinition.TypeRef
	107,  // 169: google.fhir.r5.core.ElementDefinition.default_value:type_name -> google.fhir.r5.core.ElementDefinition.DefaultValueX
	42,   // 170: google.fhir.r5.core.ElementDefinition.meaning_when_missing:type_name -> google.fhir.r5.core.Markdown
	65,   // 171: google.fhir.r5.core.ElementDefinition.order_meaning:type_name -> google.fhir.r5.core.String
	108,  // 172: google.fhir.r5.core.ElementDefinition.fixed:type_name -> google.fhir.r5.core.ElementDefinition.FixedX
	109,  // 173: google.fhir.r5.core.ElementDefinition.pattern:type_name -> google.fhir.r5.core.ElementDefinition.PatternX
	110,  // 174: google.fhir.r5.core.ElementDefinition.example:type_name -> google.fhir.r5.core.ElementDefinition.Example
	111,  // 175: google.fhir.r5.core.ElementDefinition.min_value:type_name -> google.fhir.r5.core.ElementDefinition.MinValueX
	112,  // 176: google.fhir.r5.core.ElementDefinition.max_value:type_name -> google.fhir.r5.core.ElementDefinition.MaxValueX
	40,   // 177: google.fhir.r5.core.ElementDefinition.max_length:type_name -> google.fhir.r5.core.Integer
	37,   // 178: google.fhir.r5.core.ElementDefinition.condition:type_name -> google.fhir.r5.core.Id
	113,  // 179: google.fhir.r5.core.ElementDefinition.constraint:type_name -> google.fhir.r5.core.ElementDefinition.Constraint
	13,   // 180: google.fhir.r5.core.ElementDefinition.must_have_value:type_name -> google.fhir.r5.core.Boolean
	14,   // 181: google.fhir.r5.core.ElementDefinition.value_alternatives:type_name -> google.fhir.r5.core.Canonical
	13,   // 182: google.fhir.r5.core.ElementDefinition.must_support:type_name -> google.fhir.r5.core.Boolean
	13,   // 183: google.fhir.r5.core.ElementDefinition.is_modifier:type_name -> google.fhir.r5.core.Boolean
	65,   // 184: google.fhir.r5.core.ElementDefinition.is_modifier_reason:type_name -> google.fhir.r5.core.String
	13,   // 185: google.fhir.r5.core.ElementDefinition.is_summary:type_name -> google.fhir.r5.core.Boolean
	114,  // 186: google.fhir.r5.core.ElementDefinition.binding:type_name -> google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding
	115,  // 187: google.fhir.r5.core.ElementDefinition.mapping:type_name -> google.fhir.r5.core.ElementDefinition.Mapping
	65,   // 188: google.fhir.r5.core.Expression.id:type_name -> google.fhir.r5.core.String
	35,   // 189: google.fhir.r5.core.Expression.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 190: google.fhir.r5.core.Expression.description:type_name -> google.fhir.r5.core.String
	15,   // 191: google.fhir.r5.core.Expression.name:type_name -> google.fhir.r5.core.Code
	15,   // 192: google.fhir.r5.core.Expression.language:type_name -> google.fhir.r5.core.Code
	65,   // 193: google.fhir.r5.core.Expression.expression:type_name -> google.fhir.r5.core.String
	70,   // 194: google.fhir.r5.core.Expression.reference:type_name -> google.fhir.r5.core.Uri
	65,   // 195: google.fhir.r5.core.ExtendedContactDetail.id:type_name -> google.fhir.r5.core.String
	35,   // 196: google.fhir.r5.core.ExtendedContactDetail.extension:type_name -> google.fhir.r5.core.Extension
	16,   // 197: google.fhir.r5.core.ExtendedContactDetail.purpose:type_name -> google.fhir.r5.core.CodeableConcept
	36,   // 198: google.fhir.r5.core.ExtendedContactDetail.name:type_name -> google.fhir.r5.core.HumanName
	20,   // 199: google.fhir.r5.core.ExtendedContactDetail.telecom:type_name -> google.fhir.r5.core.ContactPoint
	4,    // 200: google.fhir.r5.core.ExtendedContactDetail.address:type_name -> google.fhir.r5.core.Address
	59,   // 201: google.fhir.r5.core.ExtendedContactDetail.organization:type_name -> google.fhir.r5.core.Reference
	51,   // 202: google.fhir.r5.core.ExtendedContactDetail.period:type_name -> google.fhir.r5.core.Period
	65,   // 203: google.fhir.r5.core.Extension.id:type_name -> google.fhir.r5.core.String
	35,   // 204: google.fhir.r5.core.Extension.extension:type_name -> google.fhir.r5.core.Extension
	70,   // 205: google.fhir.r5.core.Extension.url:type_name -> google.fhir.r5.core.Uri
	127,  // 206: google.fhir.r5.core.Extension.value:type_name -> google.fhir.r5.core.Extension.ValueX
	65,   // 207: google.fhir.r5.core.HumanName.id:type_name -> google.fhir.r5.core.String
	35,   // 208: google.fhir.r5.core.HumanName.extension:type_name -> google.fhir.r5.core.Extension
	128,  // 209: google.fhir.r5.core.HumanName.use:type_name -> google.fhir.r5.core.HumanName.UseCode
	65,   // 210: google.fhir.r5.core.HumanName.text:type_name -> google.fhir.r5.core.String
	65,   // 211: google.fhir.r5.core.HumanName.family:type_name -> google.fhir.r5.core.String
	65,   // 212: google.fhir.r5.core.HumanName.given:type_name -> google.fhir.r5.core.String
	65,   // 213: google.fhir.r5.core.HumanName.prefix:type_name -> google.fhir.r5.core.String
	65,   // 214: google.fhir.r5.core.HumanName.suffix:type_name -> google.fhir.r5.core.String
	51,   // 215: google.fhir.r5.core.HumanName.period:type_name -> google.fhir.r5.core.Period
	65,   // 216: google.fhir.r5.core.Id.id:type_name -> google.fhir.r5.core.String
	35,   // 217: google.fhir.r5.core.Id.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 218: google.fhir.r5.core.Identifier.id:type_name -> google.fhir.r5.core.String
	35,   // 219: google.fhir.r5.core.Identifier.extension:type_name -> google.fhir.r5.core.Extension
	129,  // 220: google.fhir.r5.core.Identifier.use:type_name -> google.fhir.r5.core.Identifier.UseCode
	16,   // 221: google.fhir.r5.core.Identifier.type:type_name -> google.fhir.r5.core.CodeableConcept
	70,   // 222: google.fhir.r5.core.Identifier.system:type_name -> google.fhir.r5.core.Uri
	65,   // 223: google.fhir.r5.core.Identifier.value:type_name -> google.fhir.r5.core.String
	51,   // 224: google.fhir.r5.core.Identifier.period:type_name -> google.fhir.r5.core.Period
	59,   // 225: google.fhir.r5.core.Identifier.assigner:type_name -> google.fhir.r5.core.Reference
	2,    // 226: google.fhir.r5.core.Instant.precision:type_name -> google.fhir.r5.core.Instant.Precision
	65,   // 227: google.fhir.r5.core.Instant.id:type_name -> google.fhir.r5.core.String
	35,   // 228: google.fhir.r5.core.Instant.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 229: google.fhir.r5.core.Integer.id:type_name -> google.fhir.r5.core.String
	35,   // 230: google.fhir.r5.core.Integer.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 231: google.fhir.r5.core.Integer64.id:type_name -> google.fhir.r5.core.String
	35,   // 232: google.fhir.r5.core.Integer64.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 233: google.fhir.r5.core.Markdown.id:type_name -> google.fhir.r5.core.String
	35,   // 234: google.fhir.r5.core.Markdown.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 235: google.fhir.r5.core.MarketingStatus.id:type_name -> google.fhir.r5.core.String
	35,   // 236: google.fhir.r5.core.MarketingStatus.extension:type_name -> google.fhir.r5.core.Extension
	35,   // 237: google.fhir.r5.core.MarketingStatus.modifier_extension:type_name -> google.fhir.r5.core.Extension
	16,   // 238: google.fhir.r5.core.MarketingStatus.country:type_name -> google.fhir.r5.core.CodeableConcept
	16,   // 239: google.fhir.r5.core.MarketingStatus.jurisdiction:type_name -> google.fhir.r5.core.CodeableConcept
	16,   // 240: google.fhir.r5.core.MarketingStatus.status:type_name -> google.fhir.r5.core.CodeableConcept
	51,   // 241: google.fhir.r5.core.MarketingStatus.date_range:type_name -> google.fhir.r5.core.Period
	26,   // 242: google.fhir.r5.core.MarketingStatus.restore_date:type_name -> google.fhir.r5.core.DateTime
	65,   // 243: google.fhir.r5.core.Meta.id:type_name -> google.fhir.r5.core.String
	35,   // 244: google.fhir.r5.core.Meta.extension:type_name -> google.fhir.r5.core.Extension
	37,   // 245: google.fhir.r5.core.Meta.version_id:type_name -> google.fhir.r5.core.Id
	39,   // 246: google.fhir.r5.core.Meta.last_updated:type_name -> google.fhir.r5.core.Instant
	70,   // 247: google.fhir.r5.core.Meta.source:type_name -> google.fhir.r5.core.Uri
	14,   // 248: google.fhir.r5.core.Meta.profile:type_name -> google.fhir.r5.core.Canonical
	18,   // 249: google.fhir.r5.core.Meta.security:type_name -> google.fhir.r5.core.Coding
	18,   // 250: google.fhir.r5.core.Meta.tag:type_name -> google.fhir.r5.core.Coding
	65,   // 251: google.fhir.r5.core.MonetaryComponent.id:type_name -> google.fhir.r5.core.String
	35,   // 252: google.fhir.r5.core.MonetaryComponent.extension:type_name -> google.fhir.r5.core.Extension
	130,  // 253: google.fhir.r5.core.MonetaryComponent.type:type_name -> google.fhir.r5.core.MonetaryComponent.TypeCode
	16,   // 254: google.fhir.r5.core.MonetaryComponent.code:type_name -> google.fhir.r5.core.CodeableConcept
	27,   // 255: google.fhir.r5.core.MonetaryComponent.factor:type_name -> google.fhir.r5.core.Decimal
	46,   // 256: google.fhir.r5.core.MonetaryComponent.amount:type_name -> google.fhir.r5.core.Money
	65,   // 257: google.fhir.r5.core.Money.id:type_name -> google.fhir.r5.core.String
	35,   // 258: google.fhir.r5.core.Money.extension:type_name -> google.fhir.r5.core.Extension
	27,   // 259: google.fhir.r5.core.Money.value:type_name -> google.fhir.r5.core.Decimal
	131,  // 260: google.fhir.r5.core.Money.currency:type_name -> google.fhir.r5.core.Money.CurrencyCode
	65,   // 261: google.fhir.r5.core.MoneyQuantity.id:type_name -> google.fhir.r5.core.String
	35,   // 262: google.fhir.r5.core.MoneyQuantity.extension:type_name -> google.fhir.r5.core.Extension
	27,   // 263: google.fhir.r5.core.MoneyQuantity.value:type_name -> google.fhir.r5.core.Decimal
	132,  // 264: google.fhir.r5.core.MoneyQuantity.comparator:type_name -> google.fhir.r5.core.MoneyQuantity.ComparatorCode
	65,   // 265: google.fhir.r5.core.MoneyQuantity.unit:type_name -> google.fhir.r5.core.String
	70,   // 266: google.fhir.r5.core.MoneyQuantity.system:type_name -> google.fhir.r5.core.Uri
	15,   // 267: google.fhir.r5.core.MoneyQuantity.code:type_name -> google.fhir.r5.core.Code
	65,   // 268: google.fhir.r5.core.Narrative.id:type_name -> google.fhir.r5.core.String
	35,   // 269: google.fhir.r5.core.Narrative.extension:type_name -> google.fhir.r5.core.Extension
	133,  // 270: google.fhir.r5.core.Narrative.status:type_name -> google.fhir.r5.core.Narrative.StatusCode
	75,   // 271: google.fhir.r5.core.Narrative.div:type_name -> google.fhir.r5.core.Xhtml
	65,   // 272: google.fhir.r5.core.Oid.id:type_name -> google.fhir.r5.core.String
	35,   // 273: google.fhir.r5.core.Oid.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 274: google.fhir.r5.core.ParameterDefinition.id:type_name -> google.fhir.r5.core.String
	35,   // 275: google.fhir.r5.core.ParameterDefinition.extension:type_name -> google.fhir.r5.core.Extension
	15,   // 276: google.fhir.r5.core.ParameterDefinition.name:type_name -> google.fhir.r5.core.Code
	134,  // 277: google.fhir.r5.core.ParameterDefinition.use:type_name -> google.fhir.r5.core.ParameterDefinition.UseCode
	40,   // 278: google.fhir.r5.core.ParameterDefinition.min:type_name -> google.fhir.r5.core.Integer
	65,   // 279: google.fhir.r5.core.ParameterDefinition.max:type_name -> google.fhir.r5.core.String
	65,   // 280: google.fhir.r5.core.ParameterDefinition.documentation:type_name -> google.fhir.r5.core.String
	135,  // 281: google.fhir.r5.core.ParameterDefinition.type:type_name -> google.fhir.r5.core.ParameterDefinition.TypeCode
	14,   // 282: google.fhir.r5.core.ParameterDefinition.profile:type_name -> google.fhir.r5.core.Canonical
	65,   // 283: google.fhir.r5.core.Period.id:type_name -> google.fhir.r5.core.String
	35,   // 284: google.fhir.r5.core.Period.extension:type_name -> google.fhir.r5.core.Extension
	26,   // 285: google.fhir.r5.core.Period.start:type_name -> google.fhir.r5.core.DateTime
	26,   // 286: google.fhir.r5.core.Period.end:type_name -> google.fhir.r5.core.DateTime
	65,   // 287: google.fhir.r5.core.PositiveInt.id:type_name -> google.fhir.r5.core.String
	35,   // 288: google.fhir.r5.core.PositiveInt.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 289: google.fhir.r5.core.PrimitiveType.id:type_name -> google.fhir.r5.core.String
	35,   // 290: google.fhir.r5.core.PrimitiveType.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 291: google.fhir.r5.core.ProductShelfLife.id:type_name -> google.fhir.r5.core.String
	35,   // 292: google.fhir.r5.core.ProductShelfLife.extension:type_name -> google.fhir.r5.core.Extension
	35,   // 293: google.fhir.r5.core.ProductShelfLife.modifier_extension:type_name -> google.fhir.r5.core.Extension
	16,   // 294: google.fhir.r5.core.ProductShelfLife.type:type_name -> google.fhir.r5.core.CodeableConcept
	136,  // 295: google.fhir.r5.core.ProductShelfLife.period:type_name -> google.fhir.r5.core.ProductShelfLife.PeriodX
	16,   // 296: google.fhir.r5.core.ProductShelfLife.special_precautions_for_storage:type_name -> google.fhir.r5.core.CodeableConcept
	65,   // 297: google.fhir.r5.core.Quantity.id:type_name -> google.fhir.r5.core.String
	35,   // 298: google.fhir.r5.core.Quantity.extension:type_name -> google.fhir.r5.core.Extension
	27,   // 299: google.fhir.r5.core.Quantity.value:type_name -> google.fhir.r5.core.Decimal
	137,  // 300: google.fhir.r5.core.Quantity.comparator:type_name -> google.fhir.r5.core.Quantity.ComparatorCode
	65,   // 301: google.fhir.r5.core.Quantity.unit:type_name -> google.fhir.r5.core.String
	70,   // 302: google.fhir.r5.core.Quantity.system:type_name -> google.fhir.r5.core.Uri
	15,   // 303: google.fhir.r5.core.Quantity.code:type_name -> google.fhir.r5.core.Code
	65,   // 304: google.fhir.r5.core.Range.id:type_name -> google.fhir.r5.core.String
	35,   // 305: google.fhir.r5.core.Range.extension:type_name -> google.fhir.r5.core.Extension
	64,   // 306: google.fhir.r5.core.Range.low:type_name -> google.fhir.r5.core.SimpleQuantity
	64,   // 307: google.fhir.r5.core.Range.high:type_name -> google.fhir.r5.core.SimpleQuantity
	65,   // 308: google.fhir.r5.core.Ratio.id:type_name -> google.fhir.r5.core.String
	35,   // 309: google.fhir.r5.core.Ratio.extension:type_name -> google.fhir.r5.core.Extension
	55,   // 310: google.fhir.r5.core.Ratio.numerator:type_name -> google.fhir.r5.core.Quantity
	64,   // 311: google.fhir.r5.core.Ratio.denominator:type_name -> google.fhir.r5.core.SimpleQuantity
	65,   // 312: google.fhir.r5.core.RatioRange.id:type_name -> google.fhir.r5.core.String
	35,   // 313: google.fhir.r5.core.RatioRange.extension:type_name -> google.fhir.r5.core.Extension
	64,   // 314: google.fhir.r5.core.RatioRange.low_numerator:type_name -> google.fhir.r5.core.SimpleQuantity
	64,   // 315: google.fhir.r5.core.RatioRange.high_numerator:type_name -> google.fhir.r5.core.SimpleQuantity
	64,   // 316: google.fhir.r5.core.RatioRange.denominator:type_name -> google.fhir.r5.core.SimpleQuantity
	65,   // 317: google.fhir.r5.core.Reference.id:type_name -> google.fhir.r5.core.String
	35,   // 318: google.fhir.r5.core.Reference.extension:type_name -> google.fhir.r5.core.Extension
	70,   // 319: google.fhir.r5.core.Reference.type:type_name -> google.fhir.r5.core.Uri
	38,   // 320: google.fhir.r5.core.Reference.identifier:type_name -> google.fhir.r5.core.Identifier
	65,   // 321: google.fhir.r5.core.Reference.display:type_name -> google.fhir.r5.core.String
	65,   // 322: google.fhir.r5.core.Reference.uri:type_name -> google.fhir.r5.core.String
	65,   // 323: google.fhir.r5.core.Reference.fragment:type_name -> google.fhir.r5.core.String
	60,   // 324: google.fhir.r5.core.Reference.resource_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 325: google.fhir.r5.core.Reference.account_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 326: google.fhir.r5.core.Reference.activity_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 327: google.fhir.r5.core.Reference.actor_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 328: google.fhir.r5.core.Reference.administrable_product_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 329: google.fhir.r5.core.Reference.adverse_event_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 330: google.fhir.r5.core.Reference.allergy_intolerance_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 331: google.fhir.r5.core.Reference.appointment_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 332: google.fhir.r5.core.Reference.appointment_response_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 333: google.fhir.r5.core.Reference.artifact_assessment_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 334: google.fhir.r5.core.Reference.audit_event_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 335: google.fhir.r5.core.Reference.basic_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 336: google.fhir.r5.core.Reference.binary_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 337: google.fhir.r5.core.Reference.biologically_derived_product_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 338: google.fhir.r5.core.Reference.biologically_derived_product_dispense_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 339: google.fhir.r5.core.Reference.body_structure_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 340: google.fhir.r5.core.Reference.bundle_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 341: google.fhir.r5.core.Reference.capability_statement_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 342: google.fhir.r5.core.Reference.care_plan_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 343: google.fhir.r5.core.Reference.care_team_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 344: google.fhir.r5.core.Reference.charge_item_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 345: google.fhir.r5.core.Reference.charge_item_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 346: google.fhir.r5.core.Reference.citation_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 347: google.fhir.r5.core.Reference.claim_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 348: google.fhir.r5.core.Reference.claim_response_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 349: google.fhir.r5.core.Reference.clinical_impression_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 350: google.fhir.r5.core.Reference.clinical_use_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 351: google.fhir.r5.core.Reference.code_system_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 352: google.fhir.r5.core.Reference.communication_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 353: google.fhir.r5.core.Reference.communication_request_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 354: google.fhir.r5.core.Reference.compartment_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 355: google.fhir.r5.core.Reference.composition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 356: google.fhir.r5.core.Reference.concept_map_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 357: google.fhir.r5.core.Reference.condition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 358: google.fhir.r5.core.Reference.condition_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 359: google.fhir.r5.core.Reference.consent_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 360: google.fhir.r5.core.Reference.contract_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 361: google.fhir.r5.core.Reference.coverage_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 362: google.fhir.r5.core.Reference.coverage_eligibility_request_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 363: google.fhir.r5.core.Reference.coverage_eligibility_response_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 364: google.fhir.r5.core.Reference.detected_issue_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 365: google.fhir.r5.core.Reference.device_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 366: google.fhir.r5.core.Reference.device_association_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 367: google.fhir.r5.core.Reference.device_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 368: google.fhir.r5.core.Reference.device_dispense_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 369: google.fhir.r5.core.Reference.device_metric_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 370: google.fhir.r5.core.Reference.device_request_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 371: google.fhir.r5.core.Reference.device_usage_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 372: google.fhir.r5.core.Reference.diagnostic_report_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 373: google.fhir.r5.core.Reference.document_reference_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 374: google.fhir.r5.core.Reference.encounter_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 375: google.fhir.r5.core.Reference.encounter_history_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 376: google.fhir.r5.core.Reference.endpoint_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 377: google.fhir.r5.core.Reference.enrollment_request_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 378: google.fhir.r5.core.Reference.enrollment_response_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 379: google.fhir.r5.core.Reference.episode_of_care_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 380: google.fhir.r5.core.Reference.event_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 381: google.fhir.r5.core.Reference.evidence_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 382: google.fhir.r5.core.Reference.evidence_report_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 383: google.fhir.r5.core.Reference.evidence_variable_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 384: google.fhir.r5.core.Reference.example_scenario_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 385: google.fhir.r5.core.Reference.explanation_of_benefit_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 386: google.fhir.r5.core.Reference.family_member_history_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 387: google.fhir.r5.core.Reference.flag_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 388: google.fhir.r5.core.Reference.formulary_item_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 389: google.fhir.r5.core.Reference.genomic_study_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 390: google.fhir.r5.core.Reference.goal_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 391: google.fhir.r5.core.Reference.graph_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 392: google.fhir.r5.core.Reference.group_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 393: google.fhir.r5.core.Reference.guidance_response_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 394: google.fhir.r5.core.Reference.healthcare_service_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 395: google.fhir.r5.core.Reference.imaging_selection_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 396: google.fhir.r5.core.Reference.imaging_study_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 397: google.fhir.r5.core.Reference.immunization_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 398: google.fhir.r5.core.Reference.immunization_evaluation_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 399: google.fhir.r5.core.Reference.immunization_recommendation_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 400: google.fhir.r5.core.Reference.implementation_guide_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 401: google.fhir.r5.core.Reference.ingredient_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 402: google.fhir.r5.core.Reference.insurance_plan_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 403: google.fhir.r5.core.Reference.inventory_item_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 404: google.fhir.r5.core.Reference.inventory_report_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 405: google.fhir.r5.core.Reference.invoice_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 406: google.fhir.r5.core.Reference.library_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 407: google.fhir.r5.core.Reference.linkage_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 408: google.fhir.r5.core.Reference.list_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 409: google.fhir.r5.core.Reference.location_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 410: google.fhir.r5.core.Reference.manufactured_item_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 411: google.fhir.r5.core.Reference.measure_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 412: google.fhir.r5.core.Reference.measure_report_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 413: google.fhir.r5.core.Reference.medication_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 414: google.fhir.r5.core.Reference.medication_administration_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 415: google.fhir.r5.core.Reference.medication_dispense_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 416: google.fhir.r5.core.Reference.medication_knowledge_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 417: google.fhir.r5.core.Reference.medication_request_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 418: google.fhir.r5.core.Reference.medication_statement_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 419: google.fhir.r5.core.Reference.medicinal_product_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 420: google.fhir.r5.core.Reference.message_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 421: google.fhir.r5.core.Reference.message_header_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 422: google.fhir.r5.core.Reference.molecular_sequence_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 423: google.fhir.r5.core.Reference.naming_system_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 424: google.fhir.r5.core.Reference.nutrition_intake_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 425: google.fhir.r5.core.Reference.nutrition_order_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 426: google.fhir.r5.core.Reference.nutrition_product_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 427: google.fhir.r5.core.Reference.observation_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 428: google.fhir.r5.core.Reference.observation_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 429: google.fhir.r5.core.Reference.operation_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 430: google.fhir.r5.core.Reference.operation_outcome_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 431: google.fhir.r5.core.Reference.organization_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 432: google.fhir.r5.core.Reference.organization_affiliation_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 433: google.fhir.r5.core.Reference.packaged_product_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 434: google.fhir.r5.core.Reference.parameters_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 435: google.fhir.r5.core.Reference.patient_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 436: google.fhir.r5.core.Reference.payment_notice_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 437: google.fhir.r5.core.Reference.payment_reconciliation_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 438: google.fhir.r5.core.Reference.permission_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 439: google.fhir.r5.core.Reference.person_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 440: google.fhir.r5.core.Reference.plan_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 441: google.fhir.r5.core.Reference.practitioner_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 442: google.fhir.r5.core.Reference.practitioner_role_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 443: google.fhir.r5.core.Reference.procedure_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 444: google.fhir.r5.core.Reference.provenance_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 445: google.fhir.r5.core.Reference.questionnaire_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 446: google.fhir.r5.core.Reference.questionnaire_response_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 447: google.fhir.r5.core.Reference.regulated_authorization_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 448: google.fhir.r5.core.Reference.related_person_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 449: google.fhir.r5.core.Reference.request_orchestration_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 450: google.fhir.r5.core.Reference.requirements_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 451: google.fhir.r5.core.Reference.research_study_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 452: google.fhir.r5.core.Reference.research_subject_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 453: google.fhir.r5.core.Reference.risk_assessment_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 454: google.fhir.r5.core.Reference.schedule_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 455: google.fhir.r5.core.Reference.search_parameter_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 456: google.fhir.r5.core.Reference.service_request_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 457: google.fhir.r5.core.Reference.slot_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 458: google.fhir.r5.core.Reference.specimen_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 459: google.fhir.r5.core.Reference.specimen_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 460: google.fhir.r5.core.Reference.structure_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 461: google.fhir.r5.core.Reference.structure_map_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 462: google.fhir.r5.core.Reference.subscription_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 463: google.fhir.r5.core.Reference.subscription_status_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 464: google.fhir.r5.core.Reference.subscription_topic_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 465: google.fhir.r5.core.Reference.substance_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 466: google.fhir.r5.core.Reference.substance_definition_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 467: google.fhir.r5.core.Reference.substance_nucleic_acid_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 468: google.fhir.r5.core.Reference.substance_polymer_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 469: google.fhir.r5.core.Reference.substance_protein_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 470: google.fhir.r5.core.Reference.substance_reference_information_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 471: google.fhir.r5.core.Reference.substance_source_material_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 472: google.fhir.r5.core.Reference.supply_delivery_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 473: google.fhir.r5.core.Reference.supply_request_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 474: google.fhir.r5.core.Reference.task_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 475: google.fhir.r5.core.Reference.terminology_capabilities_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 476: google.fhir.r5.core.Reference.test_plan_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 477: google.fhir.r5.core.Reference.test_report_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 478: google.fhir.r5.core.Reference.test_script_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 479: google.fhir.r5.core.Reference.transport_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 480: google.fhir.r5.core.Reference.value_set_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 481: google.fhir.r5.core.Reference.verification_result_id:type_name -> google.fhir.r5.core.ReferenceId
	60,   // 482: google.fhir.r5.core.Reference.vision_prescription_id:type_name -> google.fhir.r5.core.ReferenceId
	37,   // 483: google.fhir.r5.core.ReferenceId.history:type_name -> google.fhir.r5.core.Id
	65,   // 484: google.fhir.r5.core.ReferenceId.id:type_name -> google.fhir.r5.core.String
	35,   // 485: google.fhir.r5.core.ReferenceId.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 486: google.fhir.r5.core.RelatedArtifact.id:type_name -> google.fhir.r5.core.String
	35,   // 487: google.fhir.r5.core.RelatedArtifact.extension:type_name -> google.fhir.r5.core.Extension
	138,  // 488: google.fhir.r5.core.RelatedArtifact.type:type_name -> google.fhir.r5.core.RelatedArtifact.TypeCode
	16,   // 489: google.fhir.r5.core.RelatedArtifact.classifier:type_name -> google.fhir.r5.core.CodeableConcept
	65,   // 490: google.fhir.r5.core.RelatedArtifact.label:type_name -> google.fhir.r5.core.String
	65,   // 491: google.fhir.r5.core.RelatedArtifact.display:type_name -> google.fhir.r5.core.String
	42,   // 492: google.fhir.r5.core.RelatedArtifact.citation:type_name -> google.fhir.r5.core.Markdown
	7,    // 493: google.fhir.r5.core.RelatedArtifact.document:type_name -> google.fhir.r5.core.Attachment
	14,   // 494: google.fhir.r5.core.RelatedArtifact.resource:type_name -> google.fhir.r5.core.Canonical
	59,   // 495: google.fhir.r5.core.RelatedArtifact.resource_reference:type_name -> google.fhir.r5.core.Reference
	139,  // 496: google.fhir.r5.core.RelatedArtifact.publication_status:type_name -> google.fhir.r5.core.RelatedArtifact.PublicationStatusCode
	25,   // 497: google.fhir.r5.core.RelatedArtifact.publication_date:type_name -> google.fhir.r5.core.Date
	65,   // 498: google.fhir.r5.core.SampledData.id:type_name -> google.fhir.r5.core.String
	35,   // 499: google.fhir.r5.core.SampledData.extension:type_name -> google.fhir.r5.core.Extension
	64,   // 500: google.fhir.r5.core.SampledData.origin:type_name -> google.fhir.r5.core.SimpleQuantity
	27,   // 501: google.fhir.r5.core.SampledData.interval:type_name -> google.fhir.r5.core.Decimal
	140,  // 502: google.fhir.r5.core.SampledData.interval_unit:type_name -> google.fhir.r5.core.SampledData.IntervalUnitCode
	27,   // 503: google.fhir.r5.core.SampledData.factor:type_name -> google.fhir.r5.core.Decimal
	27,   // 504: google.fhir.r5.core.SampledData.lower_limit:type_name -> google.fhir.r5.core.Decimal
	27,   // 505: google.fhir.r5.core.SampledData.upper_limit:type_name -> google.fhir.r5.core.Decimal
	52,   // 506: google.fhir.r5.core.SampledData.dimensions:type_name -> google.fhir.r5.core.PositiveInt
	14,   // 507: google.fhir.r5.core.SampledData.code_map:type_name -> google.fhir.r5.core.Canonical
	65,   // 508: google.fhir.r5.core.SampledData.offsets:type_name -> google.fhir.r5.core.String
	65,   // 509: google.fhir.r5.core.SampledData.data:type_name -> google.fhir.r5.core.String
	65,   // 510: google.fhir.r5.core.Signature.id:type_name -> google.fhir.r5.core.String
	35,   // 511: google.fhir.r5.core.Signature.extension:type_name -> google.fhir.r5.core.Extension
	18,   // 512: google.fhir.r5.core.Signature.type:type_name -> google.fhir.r5.core.Coding
	39,   // 513: google.fhir.r5.core.Signature.when:type_name -> google.fhir.r5.core.Instant
	59,   // 514: google.fhir.r5.core.Signature.who:type_name -> google.fhir.r5.core.Reference
	59,   // 515: google.fhir.r5.core.Signature.on_behalf_of:type_name -> google.fhir.r5.core.Reference
	141,  // 516: google.fhir.r5.core.Signature.target_format:type_name -> google.fhir.r5.core.Signature.TargetFormatCode
	142,  // 517: google.fhir.r5.core.Signature.sig_format:type_name -> google.fhir.r5.core.Signature.SigFormatCode
	12,   // 518: google.fhir.r5.core.Signature.data:type_name -> google.fhir.r5.core.Base64Binary
	65,   // 519: google.fhir.r5.core.SimpleQuantity.id:type_name -> google.fhir.r5.core.String
	35,   // 520: google.fhir.r5.core.SimpleQuantity.extension:type_name -> google.fhir.r5.core.Extension
	27,   // 521: google.fhir.r5.core.SimpleQuantity.value:type_name -> google.fhir.r5.core.Decimal
	65,   // 522: google.fhir.r5.core.SimpleQuantity.unit:type_name -> google.fhir.r5.core.String
	70,   // 523: google.fhir.r5.core.SimpleQuantity.system:type_name -> google.fhir.r5.core.Uri
	15,   // 524: google.fhir.r5.core.SimpleQuantity.code:type_name -> google.fhir.r5.core.Code
	65,   // 525: google.fhir.r5.core.String.id:type_name -> google.fhir.r5.core.String
	35,   // 526: google.fhir.r5.core.String.extension:type_name -> google.fhir.r5.core.Extension
	3,    // 527: google.fhir.r5.core.Time.precision:type_name -> google.fhir.r5.core.Time.Precision
	65,   // 528: google.fhir.r5.core.Time.id:type_name -> google.fhir.r5.core.String
	35,   // 529: google.fhir.r5.core.Time.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 530: google.fhir.r5.core.Timing.id:type_name -> google.fhir.r5.core.String
	35,   // 531: google.fhir.r5.core.Timing.extension:type_name -> google.fhir.r5.core.Extension
	35,   // 532: google.fhir.r5.core.Timing.modifier_extension:type_name -> google.fhir.r5.core.Extension
	26,   // 533: google.fhir.r5.core.Timing.event:type_name -> google.fhir.r5.core.DateTime
	143,  // 534: google.fhir.r5.core.Timing.repeat:type_name -> google.fhir.r5.core.Timing.Repeat
	16,   // 535: google.fhir.r5.core.Timing.code:type_name -> google.fhir.r5.core.CodeableConcept
	65,   // 536: google.fhir.r5.core.TriggerDefinition.id:type_name -> google.fhir.r5.core.String
	35,   // 537: google.fhir.r5.core.TriggerDefinition.extension:type_name -> google.fhir.r5.core.Extension
	149,  // 538: google.fhir.r5.core.TriggerDefinition.type:type_name -> google.fhir.r5.core.TriggerDefinition.TypeCode
	65,   // 539: google.fhir.r5.core.TriggerDefinition.name:type_name -> google.fhir.r5.core.String
	16,   // 540: google.fhir.r5.core.TriggerDefinition.code:type_name -> google.fhir.r5.core.CodeableConcept
	14,   // 541: google.fhir.r5.core.TriggerDefinition.subscription_topic:type_name -> google.fhir.r5.core.Canonical
	150,  // 542: google.fhir.r5.core.TriggerDefinition.timing:type_name -> google.fhir.r5.core.TriggerDefinition.TimingX
	23,   // 543: google.fhir.r5.core.TriggerDefinition.data:type_name -> google.fhir.r5.core.DataRequirement
	33,   // 544: google.fhir.r5.core.TriggerDefinition.condition:type_name -> google.fhir.r5.core.Expression
	65,   // 545: google.fhir.r5.core.UnsignedInt.id:type_name -> google.fhir.r5.core.String
	35,   // 546: google.fhir.r5.core.UnsignedInt.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 547: google.fhir.r5.core.Uri.id:type_name -> google.fhir.r5.core.String
	35,   // 548: google.fhir.r5.core.Uri.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 549: google.fhir.r5.core.Url.id:type_name -> google.fhir.r5.core.String
	35,   // 550: google.fhir.r5.core.Url.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 551: google.fhir.r5.core.UsageContext.id:type_name -> google.fhir.r5.core.String
	35,   // 552: google.fhir.r5.core.UsageContext.extension:type_name -> google.fhir.r5.core.Extension
	18,   // 553: google.fhir.r5.core.UsageContext.code:type_name -> google.fhir.r5.core.Coding
	151,  // 554: google.fhir.r5.core.UsageContext.value:type_name -> google.fhir.r5.core.UsageContext.ValueX
	65,   // 555: google.fhir.r5.core.Uuid.id:type_name -> google.fhir.r5.core.String
	35,   // 556: google.fhir.r5.core.Uuid.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 557: google.fhir.r5.core.VirtualServiceDetail.id:type_name -> google.fhir.r5.core.String
	35,   // 558: google.fhir.r5.core.VirtualServiceDetail.extension:type_name -> google.fhir.r5.core.Extension
	18,   // 559: google.fhir.r5.core.VirtualServiceDetail.channel_type:type_name -> google.fhir.r5.core.Coding
	152,  // 560: google.fhir.r5.core.VirtualServiceDetail.address:type_name -> google.fhir.r5.core.VirtualServiceDetail.AddressX
	71,   // 561: google.fhir.r5.core.VirtualServiceDetail.additional_info:type_name -> google.fhir.r5.core.Url
	52,   // 562: google.fhir.r5.core.VirtualServiceDetail.max_participants:type_name -> google.fhir.r5.core.PositiveInt
	65,   // 563: google.fhir.r5.core.VirtualServiceDetail.session_key:type_name -> google.fhir.r5.core.String
	65,   // 564: google.fhir.r5.core.Xhtml.id:type_name -> google.fhir.r5.core.String
	153,  // 565: google.fhir.r5.core.Address.UseCode.value:type_name -> google.fhir.r5.core.AddressUseCode.Value
	65,   // 566: google.fhir.r5.core.Address.UseCode.id:type_name -> google.fhir.r5.core.String
	35,   // 567: google.fhir.r5.core.Address.UseCode.extension:type_name -> google.fhir.r5.core.Extension
	154,  // 568: google.fhir.r5.core.Address.TypeCode.value:type_name -> google.fhir.r5.core.AddressTypeCode.Value
	65,   // 569: google.fhir.r5.core.Address.TypeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 570: google.fhir.r5.core.Address.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	155,  // 571: google.fhir.r5.core.Age.ComparatorCode.value:type_name -> google.fhir.r5.core.QuantityComparatorCode.Value
	65,   // 572: google.fhir.r5.core.Age.ComparatorCode.id:type_name -> google.fhir.r5.core.String
	35,   // 573: google.fhir.r5.core.Age.ComparatorCode.extension:type_name -> google.fhir.r5.core.Extension
	59,   // 574: google.fhir.r5.core.Annotation.AuthorX.reference:type_name -> google.fhir.r5.core.Reference
	65,   // 575: google.fhir.r5.core.Annotation.AuthorX.string_value:type_name -> google.fhir.r5.core.String
	65,   // 576: google.fhir.r5.core.Attachment.ContentTypeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 577: google.fhir.r5.core.Attachment.ContentTypeCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 578: google.fhir.r5.core.Availability.AvailableTime.id:type_name -> google.fhir.r5.core.String
	35,   // 579: google.fhir.r5.core.Availability.AvailableTime.extension:type_name -> google.fhir.r5.core.Extension
	83,   // 580: google.fhir.r5.core.Availability.AvailableTime.days_of_week:type_name -> google.fhir.r5.core.Availability.AvailableTime.DaysOfWeekCode
	13,   // 581: google.fhir.r5.core.Availability.AvailableTime.all_day:type_name -> google.fhir.r5.core.Boolean
	66,   // 582: google.fhir.r5.core.Availability.AvailableTime.available_start_time:type_name -> google.fhir.r5.core.Time
	66,   // 583: google.fhir.r5.core.Availability.AvailableTime.available_end_time:type_name -> google.fhir.r5.core.Time
	65,   // 584: google.fhir.r5.core.Availability.NotAvailableTime.id:type_name -> google.fhir.r5.core.String
	35,   // 585: google.fhir.r5.core.Availability.NotAvailableTime.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 586: google.fhir.r5.core.Availability.NotAvailableTime.description:type_name -> google.fhir.r5.core.String
	51,   // 587: google.fhir.r5.core.Availability.NotAvailableTime.during:type_name -> google.fhir.r5.core.Period
	156,  // 588: google.fhir.r5.core.Availability.AvailableTime.DaysOfWeekCode.value:type_name -> google.fhir.r5.core.DaysOfWeekCode.Value
	65,   // 589: google.fhir.r5.core.Availability.AvailableTime.DaysOfWeekCode.id:type_name -> google.fhir.r5.core.String
	35,   // 590: google.fhir.r5.core.Availability.AvailableTime.DaysOfWeekCode.extension:type_name -> google.fhir.r5.core.Extension
	157,  // 591: google.fhir.r5.core.ContactPoint.SystemCode.value:type_name -> google.fhir.r5.core.ContactPointSystemCode.Value
	65,   // 592: google.fhir.r5.core.ContactPoint.SystemCode.id:type_name -> google.fhir.r5.core.String
	35,   // 593: google.fhir.r5.core.ContactPoint.SystemCode.extension:type_name -> google.fhir.r5.core.Extension
	158,  // 594: google.fhir.r5.core.ContactPoint.UseCode.value:type_name -> google.fhir.r5.core.ContactPointUseCode.Value
	65,   // 595: google.fhir.r5.core.ContactPoint.UseCode.id:type_name -> google.fhir.r5.core.String
	35,   // 596: google.fhir.r5.core.ContactPoint.UseCode.extension:type_name -> google.fhir.r5.core.Extension
	159,  // 597: google.fhir.r5.core.Contributor.TypeCode.value:type_name -> google.fhir.r5.core.ContributorTypeCode.Value
	65,   // 598: google.fhir.r5.core.Contributor.TypeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 599: google.fhir.r5.core.Contributor.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	155,  // 600: google.fhir.r5.core.Count.ComparatorCode.value:type_name -> google.fhir.r5.core.QuantityComparatorCode.Value
	65,   // 601: google.fhir.r5.core.Count.ComparatorCode.id:type_name -> google.fhir.r5.core.String
	35,   // 602: google.fhir.r5.core.Count.ComparatorCode.extension:type_name -> google.fhir.r5.core.Extension
	160,  // 603: google.fhir.r5.core.DataRequirement.TypeCode.value:type_name -> google.fhir.r5.core.FHIRTypesCode.Value
	65,   // 604: google.fhir.r5.core.DataRequirement.TypeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 605: google.fhir.r5.core.DataRequirement.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	16,   // 606: google.fhir.r5.core.DataRequirement.SubjectX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	59,   // 607: google.fhir.r5.core.DataRequirement.SubjectX.reference:type_name -> google.fhir.r5.core.Reference
	65,   // 608: google.fhir.r5.core.DataRequirement.CodeFilter.id:type_name -> google.fhir.r5.core.String
	35,   // 609: google.fhir.r5.core.DataRequirement.CodeFilter.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 610: google.fhir.r5.core.DataRequirement.CodeFilter.path:type_name -> google.fhir.r5.core.String
	65,   // 611: google.fhir.r5.core.DataRequirement.CodeFilter.search_param:type_name -> google.fhir.r5.core.String
	14,   // 612: google.fhir.r5.core.DataRequirement.CodeFilter.value_set:type_name -> google.fhir.r5.core.Canonical
	18,   // 613: google.fhir.r5.core.DataRequirement.CodeFilter.code:type_name -> google.fhir.r5.core.Coding
	65,   // 614: google.fhir.r5.core.DataRequirement.DateFilter.id:type_name -> google.fhir.r5.core.String
	35,   // 615: google.fhir.r5.core.DataRequirement.DateFilter.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 616: google.fhir.r5.core.DataRequirement.DateFilter.path:type_name -> google.fhir.r5.core.String
	65,   // 617: google.fhir.r5.core.DataRequirement.DateFilter.search_param:type_name -> google.fhir.r5.core.String
	94,   // 618: google.fhir.r5.core.DataRequirement.DateFilter.value:type_name -> google.fhir.r5.core.DataRequirement.DateFilter.ValueX
	65,   // 619: google.fhir.r5.core.DataRequirement.ValueFilter.id:type_name -> google.fhir.r5.core.String
	35,   // 620: google.fhir.r5.core.DataRequirement.ValueFilter.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 621: google.fhir.r5.core.DataRequirement.ValueFilter.path:type_name -> google.fhir.r5.core.String
	65,   // 622: google.fhir.r5.core.DataRequirement.ValueFilter.search_param:type_name -> google.fhir.r5.core.String
	95,   // 623: google.fhir.r5.core.DataRequirement.ValueFilter.comparator:type_name -> google.fhir.r5.core.DataRequirement.ValueFilter.ComparatorCode
	96,   // 624: google.fhir.r5.core.DataRequirement.ValueFilter.value:type_name -> google.fhir.r5.core.DataRequirement.ValueFilter.ValueX
	65,   // 625: google.fhir.r5.core.DataRequirement.Sort.id:type_name -> google.fhir.r5.core.String
	35,   // 626: google.fhir.r5.core.DataRequirement.Sort.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 627: google.fhir.r5.core.DataRequirement.Sort.path:type_name -> google.fhir.r5.core.String
	97,   // 628: google.fhir.r5.core.DataRequirement.Sort.direction:type_name -> google.fhir.r5.core.DataRequirement.Sort.DirectionCode
	26,   // 629: google.fhir.r5.core.DataRequirement.DateFilter.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	51,   // 630: google.fhir.r5.core.DataRequirement.DateFilter.ValueX.period:type_name -> google.fhir.r5.core.Period
	30,   // 631: google.fhir.r5.core.DataRequirement.DateFilter.ValueX.duration:type_name -> google.fhir.r5.core.Duration
	161,  // 632: google.fhir.r5.core.DataRequirement.ValueFilter.ComparatorCode.value:type_name -> google.fhir.r5.core.ValueFilterComparatorValueSet.Value
	65,   // 633: google.fhir.r5.core.DataRequirement.ValueFilter.ComparatorCode.id:type_name -> google.fhir.r5.core.String
	35,   // 634: google.fhir.r5.core.DataRequirement.ValueFilter.ComparatorCode.extension:type_name -> google.fhir.r5.core.Extension
	26,   // 635: google.fhir.r5.core.DataRequirement.ValueFilter.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	51,   // 636: google.fhir.r5.core.DataRequirement.ValueFilter.ValueX.period:type_name -> google.fhir.r5.core.Period
	30,   // 637: google.fhir.r5.core.DataRequirement.ValueFilter.ValueX.duration:type_name -> google.fhir.r5.core.Duration
	162,  // 638: google.fhir.r5.core.DataRequirement.Sort.DirectionCode.value:type_name -> google.fhir.r5.core.SortDirectionCode.Value
	65,   // 639: google.fhir.r5.core.DataRequirement.Sort.DirectionCode.id:type_name -> google.fhir.r5.core.String
	35,   // 640: google.fhir.r5.core.DataRequirement.Sort.DirectionCode.extension:type_name -> google.fhir.r5.core.Extension
	155,  // 641: google.fhir.r5.core.Distance.ComparatorCode.value:type_name -> google.fhir.r5.core.QuantityComparatorCode.Value
	65,   // 642: google.fhir.r5.core.Distance.ComparatorCode.id:type_name -> google.fhir.r5.core.String
	35,   // 643: google.fhir.r5.core.Distance.ComparatorCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 644: google.fhir.r5.core.Dosage.DoseAndRate.id:type_name -> google.fhir.r5.core.String
	35,   // 645: google.fhir.r5.core.Dosage.DoseAndRate.extension:type_name -> google.fhir.r5.core.Extension
	16,   // 646: google.fhir.r5.core.Dosage.DoseAndRate.type:type_name -> google.fhir.r5.core.CodeableConcept
	100,  // 647: google.fhir.r5.core.Dosage.DoseAndRate.dose:type_name -> google.fhir.r5.core.Dosage.DoseAndRate.DoseX
	101,  // 648: google.fhir.r5.core.Dosage.DoseAndRate.rate:type_name -> google.fhir.r5.core.Dosage.DoseAndRate.RateX
	56,   // 649: google.fhir.r5.core.Dosage.DoseAndRate.DoseX.range:type_name -> google.fhir.r5.core.Range
	64,   // 650: google.fhir.r5.core.Dosage.DoseAndRate.DoseX.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	57,   // 651: google.fhir.r5.core.Dosage.DoseAndRate.RateX.ratio:type_name -> google.fhir.r5.core.Ratio
	56,   // 652: google.fhir.r5.core.Dosage.DoseAndRate.RateX.range:type_name -> google.fhir.r5.core.Range
	64,   // 653: google.fhir.r5.core.Dosage.DoseAndRate.RateX.quantity:type_name -> google.fhir.r5.core.SimpleQuantity
	155,  // 654: google.fhir.r5.core.Duration.ComparatorCode.value:type_name -> google.fhir.r5.core.QuantityComparatorCode.Value
	65,   // 655: google.fhir.r5.core.Duration.ComparatorCode.id:type_name -> google.fhir.r5.core.String
	35,   // 656: google.fhir.r5.core.Duration.ComparatorCode.extension:type_name -> google.fhir.r5.core.Extension
	163,  // 657: google.fhir.r5.core.ElementDefinition.RepresentationCode.value:type_name -> google.fhir.r5.core.PropertyRepresentationCode.Value
	65,   // 658: google.fhir.r5.core.ElementDefinition.RepresentationCode.id:type_name -> google.fhir.r5.core.String
	35,   // 659: google.fhir.r5.core.ElementDefinition.RepresentationCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 660: google.fhir.r5.core.ElementDefinition.Slicing.id:type_name -> google.fhir.r5.core.String
	35,   // 661: google.fhir.r5.core.ElementDefinition.Slicing.extension:type_name -> google.fhir.r5.core.Extension
	116,  // 662: google.fhir.r5.core.ElementDefinition.Slicing.discriminator:type_name -> google.fhir.r5.core.ElementDefinition.Slicing.Discriminator
	65,   // 663: google.fhir.r5.core.ElementDefinition.Slicing.description:type_name -> google.fhir.r5.core.String
	13,   // 664: google.fhir.r5.core.ElementDefinition.Slicing.ordered:type_name -> google.fhir.r5.core.Boolean
	117,  // 665: google.fhir.r5.core.ElementDefinition.Slicing.rules:type_name -> google.fhir.r5.core.ElementDefinition.Slicing.RulesCode
	65,   // 666: google.fhir.r5.core.ElementDefinition.Base.id:type_name -> google.fhir.r5.core.String
	35,   // 667: google.fhir.r5.core.ElementDefinition.Base.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 668: google.fhir.r5.core.ElementDefinition.Base.path:type_name -> google.fhir.r5.core.String
	69,   // 669: google.fhir.r5.core.ElementDefinition.Base.min:type_name -> google.fhir.r5.core.UnsignedInt
	65,   // 670: google.fhir.r5.core.ElementDefinition.Base.max:type_name -> google.fhir.r5.core.String
	65,   // 671: google.fhir.r5.core.ElementDefinition.TypeRef.id:type_name -> google.fhir.r5.core.String
	35,   // 672: google.fhir.r5.core.ElementDefinition.TypeRef.extension:type_name -> google.fhir.r5.core.Extension
	70,   // 673: google.fhir.r5.core.ElementDefinition.TypeRef.code:type_name -> google.fhir.r5.core.Uri
	14,   // 674: google.fhir.r5.core.ElementDefinition.TypeRef.profile:type_name -> google.fhir.r5.core.Canonical
	14,   // 675: google.fhir.r5.core.ElementDefinition.TypeRef.target_profile:type_name -> google.fhir.r5.core.Canonical
	119,  // 676: google.fhir.r5.core.ElementDefinition.TypeRef.aggregation:type_name -> google.fhir.r5.core.ElementDefinition.TypeRef.AggregationCode
	120,  // 677: google.fhir.r5.core.ElementDefinition.TypeRef.versioning:type_name -> google.fhir.r5.core.ElementDefinition.TypeRef.VersioningCode
	12,   // 678: google.fhir.r5.core.ElementDefinition.DefaultValueX.base64_binary:type_name -> google.fhir.r5.core.Base64Binary
	13,   // 679: google.fhir.r5.core.ElementDefinition.DefaultValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	14,   // 680: google.fhir.r5.core.ElementDefinition.DefaultValueX.canonical:type_name -> google.fhir.r5.core.Canonical
	15,   // 681: google.fhir.r5.core.ElementDefinition.DefaultValueX.code:type_name -> google.fhir.r5.core.Code
	25,   // 682: google.fhir.r5.core.ElementDefinition.DefaultValueX.date:type_name -> google.fhir.r5.core.Date
	26,   // 683: google.fhir.r5.core.ElementDefinition.DefaultValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	27,   // 684: google.fhir.r5.core.ElementDefinition.DefaultValueX.decimal:type_name -> google.fhir.r5.core.Decimal
	37,   // 685: google.fhir.r5.core.ElementDefinition.DefaultValueX.id:type_name -> google.fhir.r5.core.Id
	39,   // 686: google.fhir.r5.core.ElementDefinition.DefaultValueX.instant:type_name -> google.fhir.r5.core.Instant
	40,   // 687: google.fhir.r5.core.ElementDefinition.DefaultValueX.integer:type_name -> google.fhir.r5.core.Integer
	41,   // 688: google.fhir.r5.core.ElementDefinition.DefaultValueX.integer64:type_name -> google.fhir.r5.core.Integer64
	42,   // 689: google.fhir.r5.core.ElementDefinition.DefaultValueX.markdown:type_name -> google.fhir.r5.core.Markdown
	49,   // 690: google.fhir.r5.core.ElementDefinition.DefaultValueX.oid:type_name -> google.fhir.r5.core.Oid
	52,   // 691: google.fhir.r5.core.ElementDefinition.DefaultValueX.positive_int:type_name -> google.fhir.r5.core.PositiveInt
	65,   // 692: google.fhir.r5.core.ElementDefinition.DefaultValueX.string_value:type_name -> google.fhir.r5.core.String
	66,   // 693: google.fhir.r5.core.ElementDefinition.DefaultValueX.time:type_name -> google.fhir.r5.core.Time
	69,   // 694: google.fhir.r5.core.ElementDefinition.DefaultValueX.unsigned_int:type_name -> google.fhir.r5.core.UnsignedInt
	70,   // 695: google.fhir.r5.core.ElementDefinition.DefaultValueX.uri:type_name -> google.fhir.r5.core.Uri
	71,   // 696: google.fhir.r5.core.ElementDefinition.DefaultValueX.url:type_name -> google.fhir.r5.core.Url
	73,   // 697: google.fhir.r5.core.ElementDefinition.DefaultValueX.uuid:type_name -> google.fhir.r5.core.Uuid
	4,    // 698: google.fhir.r5.core.ElementDefinition.DefaultValueX.address:type_name -> google.fhir.r5.core.Address
	5,    // 699: google.fhir.r5.core.ElementDefinition.DefaultValueX.age:type_name -> google.fhir.r5.core.Age
	6,    // 700: google.fhir.r5.core.ElementDefinition.DefaultValueX.annotation:type_name -> google.fhir.r5.core.Annotation
	7,    // 701: google.fhir.r5.core.ElementDefinition.DefaultValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	16,   // 702: google.fhir.r5.core.ElementDefinition.DefaultValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	17,   // 703: google.fhir.r5.core.ElementDefinition.DefaultValueX.codeable_reference:type_name -> google.fhir.r5.core.CodeableReference
	18,   // 704: google.fhir.r5.core.ElementDefinition.DefaultValueX.coding:type_name -> google.fhir.r5.core.Coding
	20,   // 705: google.fhir.r5.core.ElementDefinition.DefaultValueX.contact_point:type_name -> google.fhir.r5.core.ContactPoint
	22,   // 706: google.fhir.r5.core.ElementDefinition.DefaultValueX.count:type_name -> google.fhir.r5.core.Count
	28,   // 707: google.fhir.r5.core.ElementDefinition.DefaultValueX.distance:type_name -> google.fhir.r5.core.Distance
	30,   // 708: google.fhir.r5.core.ElementDefinition.DefaultValueX.duration:type_name -> google.fhir.r5.core.Duration
	36,   // 709: google.fhir.r5.core.ElementDefinition.DefaultValueX.human_name:type_name -> google.fhir.r5.core.HumanName
	38,   // 710: google.fhir.r5.core.ElementDefinition.DefaultValueX.identifier:type_name -> google.fhir.r5.core.Identifier
	46,   // 711: google.fhir.r5.core.ElementDefinition.DefaultValueX.money:type_name -> google.fhir.r5.core.Money
	51,   // 712: google.fhir.r5.core.ElementDefinition.DefaultValueX.period:type_name -> google.fhir.r5.core.Period
	55,   // 713: google.fhir.r5.core.ElementDefinition.DefaultValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	56,   // 714: google.fhir.r5.core.ElementDefinition.DefaultValueX.range:type_name -> google.fhir.r5.core.Range
	57,   // 715: google.fhir.r5.core.ElementDefinition.DefaultValueX.ratio:type_name -> google.fhir.r5.core.Ratio
	58,   // 716: google.fhir.r5.core.ElementDefinition.DefaultValueX.ratio_range:type_name -> google.fhir.r5.core.RatioRange
	59,   // 717: google.fhir.r5.core.ElementDefinition.DefaultValueX.reference:type_name -> google.fhir.r5.core.Reference
	62,   // 718: google.fhir.r5.core.ElementDefinition.DefaultValueX.sampled_data:type_name -> google.fhir.r5.core.SampledData
	63,   // 719: google.fhir.r5.core.ElementDefinition.DefaultValueX.signature:type_name -> google.fhir.r5.core.Signature
	67,   // 720: google.fhir.r5.core.ElementDefinition.DefaultValueX.timing:type_name -> google.fhir.r5.core.Timing
	19,   // 721: google.fhir.r5.core.ElementDefinition.DefaultValueX.contact_detail:type_name -> google.fhir.r5.core.ContactDetail
	23,   // 722: google.fhir.r5.core.ElementDefinition.DefaultValueX.data_requirement:type_name -> google.fhir.r5.core.DataRequirement
	33,   // 723: google.fhir.r5.core.ElementDefinition.DefaultValueX.expression:type_name -> google.fhir.r5.core.Expression
	50,   // 724: google.fhir.r5.core.ElementDefinition.DefaultValueX.parameter_definition:type_name -> google.fhir.r5.core.ParameterDefinition
	61,   // 725: google.fhir.r5.core.ElementDefinition.DefaultValueX.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	68,   // 726: google.fhir.r5.core.ElementDefinition.DefaultValueX.trigger_definition:type_name -> google.fhir.r5.core.TriggerDefinition
	72,   // 727: google.fhir.r5.core.ElementDefinition.DefaultValueX.usage_context:type_name -> google.fhir.r5.core.UsageContext
	8,    // 728: google.fhir.r5.core.ElementDefinition.DefaultValueX.availability:type_name -> google.fhir.r5.core.Availability
	34,   // 729: google.fhir.r5.core.ElementDefinition.DefaultValueX.extended_contact_detail:type_name -> google.fhir.r5.core.ExtendedContactDetail
	29,   // 730: google.fhir.r5.core.ElementDefinition.DefaultValueX.dosage:type_name -> google.fhir.r5.core.Dosage
	44,   // 731: google.fhir.r5.core.ElementDefinition.DefaultValueX.meta:type_name -> google.fhir.r5.core.Meta
	12,   // 732: google.fhir.r5.core.ElementDefinition.FixedX.base64_binary:type_name -> google.fhir.r5.core.Base64Binary
	13,   // 733: google.fhir.r5.core.ElementDefinition.FixedX.boolean:type_name -> google.fhir.r5.core.Boolean
	14,   // 734: google.fhir.r5.core.ElementDefinition.FixedX.canonical:type_name -> google.fhir.r5.core.Canonical
	15,   // 735: google.fhir.r5.core.ElementDefinition.FixedX.code:type_name -> google.fhir.r5.core.Code
	25,   // 736: google.fhir.r5.core.ElementDefinition.FixedX.date:type_name -> google.fhir.r5.core.Date
	26,   // 737: google.fhir.r5.core.ElementDefinition.FixedX.date_time:type_name -> google.fhir.r5.core.DateTime
	27,   // 738: google.fhir.r5.core.ElementDefinition.FixedX.decimal:type_name -> google.fhir.r5.core.Decimal
	37,   // 739: google.fhir.r5.core.ElementDefinition.FixedX.id:type_name -> google.fhir.r5.core.Id
	39,   // 740: google.fhir.r5.core.ElementDefinition.FixedX.instant:type_name -> google.fhir.r5.core.Instant
	40,   // 741: google.fhir.r5.core.ElementDefinition.FixedX.integer:type_name -> google.fhir.r5.core.Integer
	41,   // 742: google.fhir.r5.core.ElementDefinition.FixedX.integer64:type_name -> google.fhir.r5.core.Integer64
	42,   // 743: google.fhir.r5.core.ElementDefinition.FixedX.markdown:type_name -> google.fhir.r5.core.Markdown
	49,   // 744: google.fhir.r5.core.ElementDefinition.FixedX.oid:type_name -> google.fhir.r5.core.Oid
	52,   // 745: google.fhir.r5.core.ElementDefinition.FixedX.positive_int:type_name -> google.fhir.r5.core.PositiveInt
	65,   // 746: google.fhir.r5.core.ElementDefinition.FixedX.string_value:type_name -> google.fhir.r5.core.String
	66,   // 747: google.fhir.r5.core.ElementDefinition.FixedX.time:type_name -> google.fhir.r5.core.Time
	69,   // 748: google.fhir.r5.core.ElementDefinition.FixedX.unsigned_int:type_name -> google.fhir.r5.core.UnsignedInt
	70,   // 749: google.fhir.r5.core.ElementDefinition.FixedX.uri:type_name -> google.fhir.r5.core.Uri
	71,   // 750: google.fhir.r5.core.ElementDefinition.FixedX.url:type_name -> google.fhir.r5.core.Url
	73,   // 751: google.fhir.r5.core.ElementDefinition.FixedX.uuid:type_name -> google.fhir.r5.core.Uuid
	4,    // 752: google.fhir.r5.core.ElementDefinition.FixedX.address:type_name -> google.fhir.r5.core.Address
	5,    // 753: google.fhir.r5.core.ElementDefinition.FixedX.age:type_name -> google.fhir.r5.core.Age
	6,    // 754: google.fhir.r5.core.ElementDefinition.FixedX.annotation:type_name -> google.fhir.r5.core.Annotation
	7,    // 755: google.fhir.r5.core.ElementDefinition.FixedX.attachment:type_name -> google.fhir.r5.core.Attachment
	16,   // 756: google.fhir.r5.core.ElementDefinition.FixedX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	17,   // 757: google.fhir.r5.core.ElementDefinition.FixedX.codeable_reference:type_name -> google.fhir.r5.core.CodeableReference
	18,   // 758: google.fhir.r5.core.ElementDefinition.FixedX.coding:type_name -> google.fhir.r5.core.Coding
	20,   // 759: google.fhir.r5.core.ElementDefinition.FixedX.contact_point:type_name -> google.fhir.r5.core.ContactPoint
	22,   // 760: google.fhir.r5.core.ElementDefinition.FixedX.count:type_name -> google.fhir.r5.core.Count
	28,   // 761: google.fhir.r5.core.ElementDefinition.FixedX.distance:type_name -> google.fhir.r5.core.Distance
	30,   // 762: google.fhir.r5.core.ElementDefinition.FixedX.duration:type_name -> google.fhir.r5.core.Duration
	36,   // 763: google.fhir.r5.core.ElementDefinition.FixedX.human_name:type_name -> google.fhir.r5.core.HumanName
	38,   // 764: google.fhir.r5.core.ElementDefinition.FixedX.identifier:type_name -> google.fhir.r5.core.Identifier
	46,   // 765: google.fhir.r5.core.ElementDefinition.FixedX.money:type_name -> google.fhir.r5.core.Money
	51,   // 766: google.fhir.r5.core.ElementDefinition.FixedX.period:type_name -> google.fhir.r5.core.Period
	55,   // 767: google.fhir.r5.core.ElementDefinition.FixedX.quantity:type_name -> google.fhir.r5.core.Quantity
	56,   // 768: google.fhir.r5.core.ElementDefinition.FixedX.range:type_name -> google.fhir.r5.core.Range
	57,   // 769: google.fhir.r5.core.ElementDefinition.FixedX.ratio:type_name -> google.fhir.r5.core.Ratio
	58,   // 770: google.fhir.r5.core.ElementDefinition.FixedX.ratio_range:type_name -> google.fhir.r5.core.RatioRange
	59,   // 771: google.fhir.r5.core.ElementDefinition.FixedX.reference:type_name -> google.fhir.r5.core.Reference
	62,   // 772: google.fhir.r5.core.ElementDefinition.FixedX.sampled_data:type_name -> google.fhir.r5.core.SampledData
	63,   // 773: google.fhir.r5.core.ElementDefinition.FixedX.signature:type_name -> google.fhir.r5.core.Signature
	67,   // 774: google.fhir.r5.core.ElementDefinition.FixedX.timing:type_name -> google.fhir.r5.core.Timing
	19,   // 775: google.fhir.r5.core.ElementDefinition.FixedX.contact_detail:type_name -> google.fhir.r5.core.ContactDetail
	23,   // 776: google.fhir.r5.core.ElementDefinition.FixedX.data_requirement:type_name -> google.fhir.r5.core.DataRequirement
	33,   // 777: google.fhir.r5.core.ElementDefinition.FixedX.expression:type_name -> google.fhir.r5.core.Expression
	50,   // 778: google.fhir.r5.core.ElementDefinition.FixedX.parameter_definition:type_name -> google.fhir.r5.core.ParameterDefinition
	61,   // 779: google.fhir.r5.core.ElementDefinition.FixedX.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	68,   // 780: google.fhir.r5.core.ElementDefinition.FixedX.trigger_definition:type_name -> google.fhir.r5.core.TriggerDefinition
	72,   // 781: google.fhir.r5.core.ElementDefinition.FixedX.usage_context:type_name -> google.fhir.r5.core.UsageContext
	8,    // 782: google.fhir.r5.core.ElementDefinition.FixedX.availability:type_name -> google.fhir.r5.core.Availability
	34,   // 783: google.fhir.r5.core.ElementDefinition.FixedX.extended_contact_detail:type_name -> google.fhir.r5.core.ExtendedContactDetail
	29,   // 784: google.fhir.r5.core.ElementDefinition.FixedX.dosage:type_name -> google.fhir.r5.core.Dosage
	44,   // 785: google.fhir.r5.core.ElementDefinition.FixedX.meta:type_name -> google.fhir.r5.core.Meta
	12,   // 786: google.fhir.r5.core.ElementDefinition.PatternX.base64_binary:type_name -> google.fhir.r5.core.Base64Binary
	13,   // 787: google.fhir.r5.core.ElementDefinition.PatternX.boolean:type_name -> google.fhir.r5.core.Boolean
	14,   // 788: google.fhir.r5.core.ElementDefinition.PatternX.canonical:type_name -> google.fhir.r5.core.Canonical
	15,   // 789: google.fhir.r5.core.ElementDefinition.PatternX.code:type_name -> google.fhir.r5.core.Code
	25,   // 790: google.fhir.r5.core.ElementDefinition.PatternX.date:type_name -> google.fhir.r5.core.Date
	26,   // 791: google.fhir.r5.core.ElementDefinition.PatternX.date_time:type_name -> google.fhir.r5.core.DateTime
	27,   // 792: google.fhir.r5.core.ElementDefinition.PatternX.decimal:type_name -> google.fhir.r5.core.Decimal
	37,   // 793: google.fhir.r5.core.ElementDefinition.PatternX.id:type_name -> google.fhir.r5.core.Id
	39,   // 794: google.fhir.r5.core.ElementDefinition.PatternX.instant:type_name -> google.fhir.r5.core.Instant
	40,   // 795: google.fhir.r5.core.ElementDefinition.PatternX.integer:type_name -> google.fhir.r5.core.Integer
	41,   // 796: google.fhir.r5.core.ElementDefinition.PatternX.integer64:type_name -> google.fhir.r5.core.Integer64
	42,   // 797: google.fhir.r5.core.ElementDefinition.PatternX.markdown:type_name -> google.fhir.r5.core.Markdown
	49,   // 798: google.fhir.r5.core.ElementDefinition.PatternX.oid:type_name -> google.fhir.r5.core.Oid
	52,   // 799: google.fhir.r5.core.ElementDefinition.PatternX.positive_int:type_name -> google.fhir.r5.core.PositiveInt
	65,   // 800: google.fhir.r5.core.ElementDefinition.PatternX.string_value:type_name -> google.fhir.r5.core.String
	66,   // 801: google.fhir.r5.core.ElementDefinition.PatternX.time:type_name -> google.fhir.r5.core.Time
	69,   // 802: google.fhir.r5.core.ElementDefinition.PatternX.unsigned_int:type_name -> google.fhir.r5.core.UnsignedInt
	70,   // 803: google.fhir.r5.core.ElementDefinition.PatternX.uri:type_name -> google.fhir.r5.core.Uri
	71,   // 804: google.fhir.r5.core.ElementDefinition.PatternX.url:type_name -> google.fhir.r5.core.Url
	73,   // 805: google.fhir.r5.core.ElementDefinition.PatternX.uuid:type_name -> google.fhir.r5.core.Uuid
	4,    // 806: google.fhir.r5.core.ElementDefinition.PatternX.address:type_name -> google.fhir.r5.core.Address
	5,    // 807: google.fhir.r5.core.ElementDefinition.PatternX.age:type_name -> google.fhir.r5.core.Age
	6,    // 808: google.fhir.r5.core.ElementDefinition.PatternX.annotation:type_name -> google.fhir.r5.core.Annotation
	7,    // 809: google.fhir.r5.core.ElementDefinition.PatternX.attachment:type_name -> google.fhir.r5.core.Attachment
	16,   // 810: google.fhir.r5.core.ElementDefinition.PatternX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	17,   // 811: google.fhir.r5.core.ElementDefinition.PatternX.codeable_reference:type_name -> google.fhir.r5.core.CodeableReference
	18,   // 812: google.fhir.r5.core.ElementDefinition.PatternX.coding:type_name -> google.fhir.r5.core.Coding
	20,   // 813: google.fhir.r5.core.ElementDefinition.PatternX.contact_point:type_name -> google.fhir.r5.core.ContactPoint
	22,   // 814: google.fhir.r5.core.ElementDefinition.PatternX.count:type_name -> google.fhir.r5.core.Count
	28,   // 815: google.fhir.r5.core.ElementDefinition.PatternX.distance:type_name -> google.fhir.r5.core.Distance
	30,   // 816: google.fhir.r5.core.ElementDefinition.PatternX.duration:type_name -> google.fhir.r5.core.Duration
	36,   // 817: google.fhir.r5.core.ElementDefinition.PatternX.human_name:type_name -> google.fhir.r5.core.HumanName
	38,   // 818: google.fhir.r5.core.ElementDefinition.PatternX.identifier:type_name -> google.fhir.r5.core.Identifier
	46,   // 819: google.fhir.r5.core.ElementDefinition.PatternX.money:type_name -> google.fhir.r5.core.Money
	51,   // 820: google.fhir.r5.core.ElementDefinition.PatternX.period:type_name -> google.fhir.r5.core.Period
	55,   // 821: google.fhir.r5.core.ElementDefinition.PatternX.quantity:type_name -> google.fhir.r5.core.Quantity
	56,   // 822: google.fhir.r5.core.ElementDefinition.PatternX.range:type_name -> google.fhir.r5.core.Range
	57,   // 823: google.fhir.r5.core.ElementDefinition.PatternX.ratio:type_name -> google.fhir.r5.core.Ratio
	58,   // 824: google.fhir.r5.core.ElementDefinition.PatternX.ratio_range:type_name -> google.fhir.r5.core.RatioRange
	59,   // 825: google.fhir.r5.core.ElementDefinition.PatternX.reference:type_name -> google.fhir.r5.core.Reference
	62,   // 826: google.fhir.r5.core.ElementDefinition.PatternX.sampled_data:type_name -> google.fhir.r5.core.SampledData
	63,   // 827: google.fhir.r5.core.ElementDefinition.PatternX.signature:type_name -> google.fhir.r5.core.Signature
	67,   // 828: google.fhir.r5.core.ElementDefinition.PatternX.timing:type_name -> google.fhir.r5.core.Timing
	19,   // 829: google.fhir.r5.core.ElementDefinition.PatternX.contact_detail:type_name -> google.fhir.r5.core.ContactDetail
	23,   // 830: google.fhir.r5.core.ElementDefinition.PatternX.data_requirement:type_name -> google.fhir.r5.core.DataRequirement
	33,   // 831: google.fhir.r5.core.ElementDefinition.PatternX.expression:type_name -> google.fhir.r5.core.Expression
	50,   // 832: google.fhir.r5.core.ElementDefinition.PatternX.parameter_definition:type_name -> google.fhir.r5.core.ParameterDefinition
	61,   // 833: google.fhir.r5.core.ElementDefinition.PatternX.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	68,   // 834: google.fhir.r5.core.ElementDefinition.PatternX.trigger_definition:type_name -> google.fhir.r5.core.TriggerDefinition
	72,   // 835: google.fhir.r5.core.ElementDefinition.PatternX.usage_context:type_name -> google.fhir.r5.core.UsageContext
	8,    // 836: google.fhir.r5.core.ElementDefinition.PatternX.availability:type_name -> google.fhir.r5.core.Availability
	34,   // 837: google.fhir.r5.core.ElementDefinition.PatternX.extended_contact_detail:type_name -> google.fhir.r5.core.ExtendedContactDetail
	29,   // 838: google.fhir.r5.core.ElementDefinition.PatternX.dosage:type_name -> google.fhir.r5.core.Dosage
	44,   // 839: google.fhir.r5.core.ElementDefinition.PatternX.meta:type_name -> google.fhir.r5.core.Meta
	65,   // 840: google.fhir.r5.core.ElementDefinition.Example.id:type_name -> google.fhir.r5.core.String
	35,   // 841: google.fhir.r5.core.ElementDefinition.Example.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 842: google.fhir.r5.core.ElementDefinition.Example.label:type_name -> google.fhir.r5.core.String
	121,  // 843: google.fhir.r5.core.ElementDefinition.Example.value:type_name -> google.fhir.r5.core.ElementDefinition.Example.ValueX
	25,   // 844: google.fhir.r5.core.ElementDefinition.MinValueX.date:type_name -> google.fhir.r5.core.Date
	26,   // 845: google.fhir.r5.core.ElementDefinition.MinValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	39,   // 846: google.fhir.r5.core.ElementDefinition.MinValueX.instant:type_name -> google.fhir.r5.core.Instant
	66,   // 847: google.fhir.r5.core.ElementDefinition.MinValueX.time:type_name -> google.fhir.r5.core.Time
	27,   // 848: google.fhir.r5.core.ElementDefinition.MinValueX.decimal:type_name -> google.fhir.r5.core.Decimal
	40,   // 849: google.fhir.r5.core.ElementDefinition.MinValueX.integer:type_name -> google.fhir.r5.core.Integer
	41,   // 850: google.fhir.r5.core.ElementDefinition.MinValueX.integer64:type_name -> google.fhir.r5.core.Integer64
	52,   // 851: google.fhir.r5.core.ElementDefinition.MinValueX.positive_int:type_name -> google.fhir.r5.core.PositiveInt
	69,   // 852: google.fhir.r5.core.ElementDefinition.MinValueX.unsigned_int:type_name -> google.fhir.r5.core.UnsignedInt
	55,   // 853: google.fhir.r5.core.ElementDefinition.MinValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	25,   // 854: google.fhir.r5.core.ElementDefinition.MaxValueX.date:type_name -> google.fhir.r5.core.Date
	26,   // 855: google.fhir.r5.core.ElementDefinition.MaxValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	39,   // 856: google.fhir.r5.core.ElementDefinition.MaxValueX.instant:type_name -> google.fhir.r5.core.Instant
	66,   // 857: google.fhir.r5.core.ElementDefinition.MaxValueX.time:type_name -> google.fhir.r5.core.Time
	27,   // 858: google.fhir.r5.core.ElementDefinition.MaxValueX.decimal:type_name -> google.fhir.r5.core.Decimal
	40,   // 859: google.fhir.r5.core.ElementDefinition.MaxValueX.integer:type_name -> google.fhir.r5.core.Integer
	41,   // 860: google.fhir.r5.core.ElementDefinition.MaxValueX.integer64:type_name -> google.fhir.r5.core.Integer64
	52,   // 861: google.fhir.r5.core.ElementDefinition.MaxValueX.positive_int:type_name -> google.fhir.r5.core.PositiveInt
	69,   // 862: google.fhir.r5.core.ElementDefinition.MaxValueX.unsigned_int:type_name -> google.fhir.r5.core.UnsignedInt
	55,   // 863: google.fhir.r5.core.ElementDefinition.MaxValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	65,   // 864: google.fhir.r5.core.ElementDefinition.Constraint.id:type_name -> google.fhir.r5.core.String
	35,   // 865: google.fhir.r5.core.ElementDefinition.Constraint.extension:type_name -> google.fhir.r5.core.Extension
	37,   // 866: google.fhir.r5.core.ElementDefinition.Constraint.key:type_name -> google.fhir.r5.core.Id
	42,   // 867: google.fhir.r5.core.ElementDefinition.Constraint.requirements:type_name -> google.fhir.r5.core.Markdown
	122,  // 868: google.fhir.r5.core.ElementDefinition.Constraint.severity:type_name -> google.fhir.r5.core.ElementDefinition.Constraint.SeverityCode
	13,   // 869: google.fhir.r5.core.ElementDefinition.Constraint.suppress:type_name -> google.fhir.r5.core.Boolean
	65,   // 870: google.fhir.r5.core.ElementDefinition.Constraint.human:type_name -> google.fhir.r5.core.String
	65,   // 871: google.fhir.r5.core.ElementDefinition.Constraint.expression:type_name -> google.fhir.r5.core.String
	14,   // 872: google.fhir.r5.core.ElementDefinition.Constraint.source:type_name -> google.fhir.r5.core.Canonical
	65,   // 873: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.id:type_name -> google.fhir.r5.core.String
	35,   // 874: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.extension:type_name -> google.fhir.r5.core.Extension
	123,  // 875: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.strength:type_name -> google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.StrengthCode
	42,   // 876: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.description:type_name -> google.fhir.r5.core.Markdown
	14,   // 877: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.value_set:type_name -> google.fhir.r5.core.Canonical
	124,  // 878: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.additional:type_name -> google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional
	65,   // 879: google.fhir.r5.core.ElementDefinition.Mapping.id:type_name -> google.fhir.r5.core.String
	35,   // 880: google.fhir.r5.core.ElementDefinition.Mapping.extension:type_name -> google.fhir.r5.core.Extension
	37,   // 881: google.fhir.r5.core.ElementDefinition.Mapping.identity:type_name -> google.fhir.r5.core.Id
	126,  // 882: google.fhir.r5.core.ElementDefinition.Mapping.language:type_name -> google.fhir.r5.core.ElementDefinition.Mapping.LanguageCode
	65,   // 883: google.fhir.r5.core.ElementDefinition.Mapping.map:type_name -> google.fhir.r5.core.String
	42,   // 884: google.fhir.r5.core.ElementDefinition.Mapping.comment:type_name -> google.fhir.r5.core.Markdown
	65,   // 885: google.fhir.r5.core.ElementDefinition.Slicing.Discriminator.id:type_name -> google.fhir.r5.core.String
	35,   // 886: google.fhir.r5.core.ElementDefinition.Slicing.Discriminator.extension:type_name -> google.fhir.r5.core.Extension
	118,  // 887: google.fhir.r5.core.ElementDefinition.Slicing.Discriminator.type:type_name -> google.fhir.r5.core.ElementDefinition.Slicing.Discriminator.TypeCode
	65,   // 888: google.fhir.r5.core.ElementDefinition.Slicing.Discriminator.path:type_name -> google.fhir.r5.core.String
	164,  // 889: google.fhir.r5.core.ElementDefinition.Slicing.RulesCode.value:type_name -> google.fhir.r5.core.SlicingRulesCode.Value
	65,   // 890: google.fhir.r5.core.ElementDefinition.Slicing.RulesCode.id:type_name -> google.fhir.r5.core.String
	35,   // 891: google.fhir.r5.core.ElementDefinition.Slicing.RulesCode.extension:type_name -> google.fhir.r5.core.Extension
	165,  // 892: google.fhir.r5.core.ElementDefinition.Slicing.Discriminator.TypeCode.value:type_name -> google.fhir.r5.core.DiscriminatorTypeCode.Value
	65,   // 893: google.fhir.r5.core.ElementDefinition.Slicing.Discriminator.TypeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 894: google.fhir.r5.core.ElementDefinition.Slicing.Discriminator.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	166,  // 895: google.fhir.r5.core.ElementDefinition.TypeRef.AggregationCode.value:type_name -> google.fhir.r5.core.AggregationModeCode.Value
	65,   // 896: google.fhir.r5.core.ElementDefinition.TypeRef.AggregationCode.id:type_name -> google.fhir.r5.core.String
	35,   // 897: google.fhir.r5.core.ElementDefinition.TypeRef.AggregationCode.extension:type_name -> google.fhir.r5.core.Extension
	167,  // 898: google.fhir.r5.core.ElementDefinition.TypeRef.VersioningCode.value:type_name -> google.fhir.r5.core.ReferenceVersionRulesCode.Value
	65,   // 899: google.fhir.r5.core.ElementDefinition.TypeRef.VersioningCode.id:type_name -> google.fhir.r5.core.String
	35,   // 900: google.fhir.r5.core.ElementDefinition.TypeRef.VersioningCode.extension:type_name -> google.fhir.r5.core.Extension
	12,   // 901: google.fhir.r5.core.ElementDefinition.Example.ValueX.base64_binary:type_name -> google.fhir.r5.core.Base64Binary
	13,   // 902: google.fhir.r5.core.ElementDefinition.Example.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	14,   // 903: google.fhir.r5.core.ElementDefinition.Example.ValueX.canonical:type_name -> google.fhir.r5.core.Canonical
	15,   // 904: google.fhir.r5.core.ElementDefinition.Example.ValueX.code:type_name -> google.fhir.r5.core.Code
	25,   // 905: google.fhir.r5.core.ElementDefinition.Example.ValueX.date:type_name -> google.fhir.r5.core.Date
	26,   // 906: google.fhir.r5.core.ElementDefinition.Example.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	27,   // 907: google.fhir.r5.core.ElementDefinition.Example.ValueX.decimal:type_name -> google.fhir.r5.core.Decimal
	37,   // 908: google.fhir.r5.core.ElementDefinition.Example.ValueX.id:type_name -> google.fhir.r5.core.Id
	39,   // 909: google.fhir.r5.core.ElementDefinition.Example.ValueX.instant:type_name -> google.fhir.r5.core.Instant
	40,   // 910: google.fhir.r5.core.ElementDefinition.Example.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	41,   // 911: google.fhir.r5.core.ElementDefinition.Example.ValueX.integer64:type_name -> google.fhir.r5.core.Integer64
	42,   // 912: google.fhir.r5.core.ElementDefinition.Example.ValueX.markdown:type_name -> google.fhir.r5.core.Markdown
	49,   // 913: google.fhir.r5.core.ElementDefinition.Example.ValueX.oid:type_name -> google.fhir.r5.core.Oid
	52,   // 914: google.fhir.r5.core.ElementDefinition.Example.ValueX.positive_int:type_name -> google.fhir.r5.core.PositiveInt
	65,   // 915: google.fhir.r5.core.ElementDefinition.Example.ValueX.string_value:type_name -> google.fhir.r5.core.String
	66,   // 916: google.fhir.r5.core.ElementDefinition.Example.ValueX.time:type_name -> google.fhir.r5.core.Time
	69,   // 917: google.fhir.r5.core.ElementDefinition.Example.ValueX.unsigned_int:type_name -> google.fhir.r5.core.UnsignedInt
	70,   // 918: google.fhir.r5.core.ElementDefinition.Example.ValueX.uri:type_name -> google.fhir.r5.core.Uri
	71,   // 919: google.fhir.r5.core.ElementDefinition.Example.ValueX.url:type_name -> google.fhir.r5.core.Url
	73,   // 920: google.fhir.r5.core.ElementDefinition.Example.ValueX.uuid:type_name -> google.fhir.r5.core.Uuid
	4,    // 921: google.fhir.r5.core.ElementDefinition.Example.ValueX.address:type_name -> google.fhir.r5.core.Address
	5,    // 922: google.fhir.r5.core.ElementDefinition.Example.ValueX.age:type_name -> google.fhir.r5.core.Age
	6,    // 923: google.fhir.r5.core.ElementDefinition.Example.ValueX.annotation:type_name -> google.fhir.r5.core.Annotation
	7,    // 924: google.fhir.r5.core.ElementDefinition.Example.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	16,   // 925: google.fhir.r5.core.ElementDefinition.Example.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	17,   // 926: google.fhir.r5.core.ElementDefinition.Example.ValueX.codeable_reference:type_name -> google.fhir.r5.core.CodeableReference
	18,   // 927: google.fhir.r5.core.ElementDefinition.Example.ValueX.coding:type_name -> google.fhir.r5.core.Coding
	20,   // 928: google.fhir.r5.core.ElementDefinition.Example.ValueX.contact_point:type_name -> google.fhir.r5.core.ContactPoint
	22,   // 929: google.fhir.r5.core.ElementDefinition.Example.ValueX.count:type_name -> google.fhir.r5.core.Count
	28,   // 930: google.fhir.r5.core.ElementDefinition.Example.ValueX.distance:type_name -> google.fhir.r5.core.Distance
	30,   // 931: google.fhir.r5.core.ElementDefinition.Example.ValueX.duration:type_name -> google.fhir.r5.core.Duration
	36,   // 932: google.fhir.r5.core.ElementDefinition.Example.ValueX.human_name:type_name -> google.fhir.r5.core.HumanName
	38,   // 933: google.fhir.r5.core.ElementDefinition.Example.ValueX.identifier:type_name -> google.fhir.r5.core.Identifier
	46,   // 934: google.fhir.r5.core.ElementDefinition.Example.ValueX.money:type_name -> google.fhir.r5.core.Money
	51,   // 935: google.fhir.r5.core.ElementDefinition.Example.ValueX.period:type_name -> google.fhir.r5.core.Period
	55,   // 936: google.fhir.r5.core.ElementDefinition.Example.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	56,   // 937: google.fhir.r5.core.ElementDefinition.Example.ValueX.range:type_name -> google.fhir.r5.core.Range
	57,   // 938: google.fhir.r5.core.ElementDefinition.Example.ValueX.ratio:type_name -> google.fhir.r5.core.Ratio
	58,   // 939: google.fhir.r5.core.ElementDefinition.Example.ValueX.ratio_range:type_name -> google.fhir.r5.core.RatioRange
	59,   // 940: google.fhir.r5.core.ElementDefinition.Example.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	62,   // 941: google.fhir.r5.core.ElementDefinition.Example.ValueX.sampled_data:type_name -> google.fhir.r5.core.SampledData
	63,   // 942: google.fhir.r5.core.ElementDefinition.Example.ValueX.signature:type_name -> google.fhir.r5.core.Signature
	67,   // 943: google.fhir.r5.core.ElementDefinition.Example.ValueX.timing:type_name -> google.fhir.r5.core.Timing
	19,   // 944: google.fhir.r5.core.ElementDefinition.Example.ValueX.contact_detail:type_name -> google.fhir.r5.core.ContactDetail
	23,   // 945: google.fhir.r5.core.ElementDefinition.Example.ValueX.data_requirement:type_name -> google.fhir.r5.core.DataRequirement
	33,   // 946: google.fhir.r5.core.ElementDefinition.Example.ValueX.expression:type_name -> google.fhir.r5.core.Expression
	50,   // 947: google.fhir.r5.core.ElementDefinition.Example.ValueX.parameter_definition:type_name -> google.fhir.r5.core.ParameterDefinition
	61,   // 948: google.fhir.r5.core.ElementDefinition.Example.ValueX.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	68,   // 949: google.fhir.r5.core.ElementDefinition.Example.ValueX.trigger_definition:type_name -> google.fhir.r5.core.TriggerDefinition
	72,   // 950: google.fhir.r5.core.ElementDefinition.Example.ValueX.usage_context:type_name -> google.fhir.r5.core.UsageContext
	8,    // 951: google.fhir.r5.core.ElementDefinition.Example.ValueX.availability:type_name -> google.fhir.r5.core.Availability
	34,   // 952: google.fhir.r5.core.ElementDefinition.Example.ValueX.extended_contact_detail:type_name -> google.fhir.r5.core.ExtendedContactDetail
	29,   // 953: google.fhir.r5.core.ElementDefinition.Example.ValueX.dosage:type_name -> google.fhir.r5.core.Dosage
	44,   // 954: google.fhir.r5.core.ElementDefinition.Example.ValueX.meta:type_name -> google.fhir.r5.core.Meta
	168,  // 955: google.fhir.r5.core.ElementDefinition.Constraint.SeverityCode.value:type_name -> google.fhir.r5.core.ConstraintSeverityCode.Value
	65,   // 956: google.fhir.r5.core.ElementDefinition.Constraint.SeverityCode.id:type_name -> google.fhir.r5.core.String
	35,   // 957: google.fhir.r5.core.ElementDefinition.Constraint.SeverityCode.extension:type_name -> google.fhir.r5.core.Extension
	169,  // 958: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.StrengthCode.value:type_name -> google.fhir.r5.core.BindingStrengthCode.Value
	65,   // 959: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.StrengthCode.id:type_name -> google.fhir.r5.core.String
	35,   // 960: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.StrengthCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 961: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.id:type_name -> google.fhir.r5.core.String
	35,   // 962: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.extension:type_name -> google.fhir.r5.core.Extension
	125,  // 963: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.purpose:type_name -> google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.PurposeCode
	14,   // 964: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.value_set:type_name -> google.fhir.r5.core.Canonical
	42,   // 965: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.documentation:type_name -> google.fhir.r5.core.Markdown
	65,   // 966: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.short_doco:type_name -> google.fhir.r5.core.String
	72,   // 967: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.usage:type_name -> google.fhir.r5.core.UsageContext
	13,   // 968: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.any:type_name -> google.fhir.r5.core.Boolean
	170,  // 969: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.PurposeCode.value:type_name -> google.fhir.r5.core.AdditionalBindingPurposeCode.Value
	65,   // 970: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.PurposeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 971: google.fhir.r5.core.ElementDefinition.ElementDefinitionBinding.Additional.PurposeCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 972: google.fhir.r5.core.ElementDefinition.Mapping.LanguageCode.id:type_name -> google.fhir.r5.core.String
	35,   // 973: google.fhir.r5.core.ElementDefinition.Mapping.LanguageCode.extension:type_name -> google.fhir.r5.core.Extension
	12,   // 974: google.fhir.r5.core.Extension.ValueX.base64_binary:type_name -> google.fhir.r5.core.Base64Binary
	13,   // 975: google.fhir.r5.core.Extension.ValueX.boolean:type_name -> google.fhir.r5.core.Boolean
	14,   // 976: google.fhir.r5.core.Extension.ValueX.canonical:type_name -> google.fhir.r5.core.Canonical
	15,   // 977: google.fhir.r5.core.Extension.ValueX.code:type_name -> google.fhir.r5.core.Code
	25,   // 978: google.fhir.r5.core.Extension.ValueX.date:type_name -> google.fhir.r5.core.Date
	26,   // 979: google.fhir.r5.core.Extension.ValueX.date_time:type_name -> google.fhir.r5.core.DateTime
	27,   // 980: google.fhir.r5.core.Extension.ValueX.decimal:type_name -> google.fhir.r5.core.Decimal
	37,   // 981: google.fhir.r5.core.Extension.ValueX.id:type_name -> google.fhir.r5.core.Id
	39,   // 982: google.fhir.r5.core.Extension.ValueX.instant:type_name -> google.fhir.r5.core.Instant
	40,   // 983: google.fhir.r5.core.Extension.ValueX.integer:type_name -> google.fhir.r5.core.Integer
	41,   // 984: google.fhir.r5.core.Extension.ValueX.integer64:type_name -> google.fhir.r5.core.Integer64
	42,   // 985: google.fhir.r5.core.Extension.ValueX.markdown:type_name -> google.fhir.r5.core.Markdown
	49,   // 986: google.fhir.r5.core.Extension.ValueX.oid:type_name -> google.fhir.r5.core.Oid
	52,   // 987: google.fhir.r5.core.Extension.ValueX.positive_int:type_name -> google.fhir.r5.core.PositiveInt
	65,   // 988: google.fhir.r5.core.Extension.ValueX.string_value:type_name -> google.fhir.r5.core.String
	66,   // 989: google.fhir.r5.core.Extension.ValueX.time:type_name -> google.fhir.r5.core.Time
	69,   // 990: google.fhir.r5.core.Extension.ValueX.unsigned_int:type_name -> google.fhir.r5.core.UnsignedInt
	70,   // 991: google.fhir.r5.core.Extension.ValueX.uri:type_name -> google.fhir.r5.core.Uri
	71,   // 992: google.fhir.r5.core.Extension.ValueX.url:type_name -> google.fhir.r5.core.Url
	73,   // 993: google.fhir.r5.core.Extension.ValueX.uuid:type_name -> google.fhir.r5.core.Uuid
	4,    // 994: google.fhir.r5.core.Extension.ValueX.address:type_name -> google.fhir.r5.core.Address
	5,    // 995: google.fhir.r5.core.Extension.ValueX.age:type_name -> google.fhir.r5.core.Age
	6,    // 996: google.fhir.r5.core.Extension.ValueX.annotation:type_name -> google.fhir.r5.core.Annotation
	7,    // 997: google.fhir.r5.core.Extension.ValueX.attachment:type_name -> google.fhir.r5.core.Attachment
	16,   // 998: google.fhir.r5.core.Extension.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	17,   // 999: google.fhir.r5.core.Extension.ValueX.codeable_reference:type_name -> google.fhir.r5.core.CodeableReference
	18,   // 1000: google.fhir.r5.core.Extension.ValueX.coding:type_name -> google.fhir.r5.core.Coding
	20,   // 1001: google.fhir.r5.core.Extension.ValueX.contact_point:type_name -> google.fhir.r5.core.ContactPoint
	22,   // 1002: google.fhir.r5.core.Extension.ValueX.count:type_name -> google.fhir.r5.core.Count
	28,   // 1003: google.fhir.r5.core.Extension.ValueX.distance:type_name -> google.fhir.r5.core.Distance
	30,   // 1004: google.fhir.r5.core.Extension.ValueX.duration:type_name -> google.fhir.r5.core.Duration
	36,   // 1005: google.fhir.r5.core.Extension.ValueX.human_name:type_name -> google.fhir.r5.core.HumanName
	38,   // 1006: google.fhir.r5.core.Extension.ValueX.identifier:type_name -> google.fhir.r5.core.Identifier
	46,   // 1007: google.fhir.r5.core.Extension.ValueX.money:type_name -> google.fhir.r5.core.Money
	51,   // 1008: google.fhir.r5.core.Extension.ValueX.period:type_name -> google.fhir.r5.core.Period
	55,   // 1009: google.fhir.r5.core.Extension.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	56,   // 1010: google.fhir.r5.core.Extension.ValueX.range:type_name -> google.fhir.r5.core.Range
	57,   // 1011: google.fhir.r5.core.Extension.ValueX.ratio:type_name -> google.fhir.r5.core.Ratio
	58,   // 1012: google.fhir.r5.core.Extension.ValueX.ratio_range:type_name -> google.fhir.r5.core.RatioRange
	59,   // 1013: google.fhir.r5.core.Extension.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	62,   // 1014: google.fhir.r5.core.Extension.ValueX.sampled_data:type_name -> google.fhir.r5.core.SampledData
	63,   // 1015: google.fhir.r5.core.Extension.ValueX.signature:type_name -> google.fhir.r5.core.Signature
	67,   // 1016: google.fhir.r5.core.Extension.ValueX.timing:type_name -> google.fhir.r5.core.Timing
	19,   // 1017: google.fhir.r5.core.Extension.ValueX.contact_detail:type_name -> google.fhir.r5.core.ContactDetail
	23,   // 1018: google.fhir.r5.core.Extension.ValueX.data_requirement:type_name -> google.fhir.r5.core.DataRequirement
	33,   // 1019: google.fhir.r5.core.Extension.ValueX.expression:type_name -> google.fhir.r5.core.Expression
	50,   // 1020: google.fhir.r5.core.Extension.ValueX.parameter_definition:type_name -> google.fhir.r5.core.ParameterDefinition
	61,   // 1021: google.fhir.r5.core.Extension.ValueX.related_artifact:type_name -> google.fhir.r5.core.RelatedArtifact
	68,   // 1022: google.fhir.r5.core.Extension.ValueX.trigger_definition:type_name -> google.fhir.r5.core.TriggerDefinition
	72,   // 1023: google.fhir.r5.core.Extension.ValueX.usage_context:type_name -> google.fhir.r5.core.UsageContext
	8,    // 1024: google.fhir.r5.core.Extension.ValueX.availability:type_name -> google.fhir.r5.core.Availability
	34,   // 1025: google.fhir.r5.core.Extension.ValueX.extended_contact_detail:type_name -> google.fhir.r5.core.ExtendedContactDetail
	29,   // 1026: google.fhir.r5.core.Extension.ValueX.dosage:type_name -> google.fhir.r5.core.Dosage
	44,   // 1027: google.fhir.r5.core.Extension.ValueX.meta:type_name -> google.fhir.r5.core.Meta
	171,  // 1028: google.fhir.r5.core.HumanName.UseCode.value:type_name -> google.fhir.r5.core.NameUseCode.Value
	65,   // 1029: google.fhir.r5.core.HumanName.UseCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1030: google.fhir.r5.core.HumanName.UseCode.extension:type_name -> google.fhir.r5.core.Extension
	172,  // 1031: google.fhir.r5.core.Identifier.UseCode.value:type_name -> google.fhir.r5.core.IdentifierUseCode.Value
	65,   // 1032: google.fhir.r5.core.Identifier.UseCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1033: google.fhir.r5.core.Identifier.UseCode.extension:type_name -> google.fhir.r5.core.Extension
	173,  // 1034: google.fhir.r5.core.MonetaryComponent.TypeCode.value:type_name -> google.fhir.r5.core.PriceComponentTypeCode.Value
	65,   // 1035: google.fhir.r5.core.MonetaryComponent.TypeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1036: google.fhir.r5.core.MonetaryComponent.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 1037: google.fhir.r5.core.Money.CurrencyCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1038: google.fhir.r5.core.Money.CurrencyCode.extension:type_name -> google.fhir.r5.core.Extension
	155,  // 1039: google.fhir.r5.core.MoneyQuantity.ComparatorCode.value:type_name -> google.fhir.r5.core.QuantityComparatorCode.Value
	65,   // 1040: google.fhir.r5.core.MoneyQuantity.ComparatorCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1041: google.fhir.r5.core.MoneyQuantity.ComparatorCode.extension:type_name -> google.fhir.r5.core.Extension
	174,  // 1042: google.fhir.r5.core.Narrative.StatusCode.value:type_name -> google.fhir.r5.core.NarrativeStatusCode.Value
	65,   // 1043: google.fhir.r5.core.Narrative.StatusCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1044: google.fhir.r5.core.Narrative.StatusCode.extension:type_name -> google.fhir.r5.core.Extension
	175,  // 1045: google.fhir.r5.core.ParameterDefinition.UseCode.value:type_name -> google.fhir.r5.core.OperationParameterUseCode.Value
	65,   // 1046: google.fhir.r5.core.ParameterDefinition.UseCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1047: google.fhir.r5.core.ParameterDefinition.UseCode.extension:type_name -> google.fhir.r5.core.Extension
	160,  // 1048: google.fhir.r5.core.ParameterDefinition.TypeCode.value:type_name -> google.fhir.r5.core.FHIRTypesCode.Value
	65,   // 1049: google.fhir.r5.core.ParameterDefinition.TypeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1050: google.fhir.r5.core.ParameterDefinition.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	30,   // 1051: google.fhir.r5.core.ProductShelfLife.PeriodX.duration:type_name -> google.fhir.r5.core.Duration
	65,   // 1052: google.fhir.r5.core.ProductShelfLife.PeriodX.string_value:type_name -> google.fhir.r5.core.String
	155,  // 1053: google.fhir.r5.core.Quantity.ComparatorCode.value:type_name -> google.fhir.r5.core.QuantityComparatorCode.Value
	65,   // 1054: google.fhir.r5.core.Quantity.ComparatorCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1055: google.fhir.r5.core.Quantity.ComparatorCode.extension:type_name -> google.fhir.r5.core.Extension
	176,  // 1056: google.fhir.r5.core.RelatedArtifact.TypeCode.value:type_name -> google.fhir.r5.core.RelatedArtifactTypeCode.Value
	65,   // 1057: google.fhir.r5.core.RelatedArtifact.TypeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1058: google.fhir.r5.core.RelatedArtifact.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	177,  // 1059: google.fhir.r5.core.RelatedArtifact.PublicationStatusCode.value:type_name -> google.fhir.r5.core.PublicationStatusCode.Value
	65,   // 1060: google.fhir.r5.core.RelatedArtifact.PublicationStatusCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1061: google.fhir.r5.core.RelatedArtifact.PublicationStatusCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 1062: google.fhir.r5.core.SampledData.IntervalUnitCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1063: google.fhir.r5.core.SampledData.IntervalUnitCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 1064: google.fhir.r5.core.Signature.TargetFormatCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1065: google.fhir.r5.core.Signature.TargetFormatCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 1066: google.fhir.r5.core.Signature.SigFormatCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1067: google.fhir.r5.core.Signature.SigFormatCode.extension:type_name -> google.fhir.r5.core.Extension
	65,   // 1068: google.fhir.r5.core.Timing.Repeat.id:type_name -> google.fhir.r5.core.String
	35,   // 1069: google.fhir.r5.core.Timing.Repeat.extension:type_name -> google.fhir.r5.core.Extension
	144,  // 1070: google.fhir.r5.core.Timing.Repeat.bounds:type_name -> google.fhir.r5.core.Timing.Repeat.BoundsX
	52,   // 1071: google.fhir.r5.core.Timing.Repeat.count:type_name -> google.fhir.r5.core.PositiveInt
	52,   // 1072: google.fhir.r5.core.Timing.Repeat.count_max:type_name -> google.fhir.r5.core.PositiveInt
	27,   // 1073: google.fhir.r5.core.Timing.Repeat.duration:type_name -> google.fhir.r5.core.Decimal
	27,   // 1074: google.fhir.r5.core.Timing.Repeat.duration_max:type_name -> google.fhir.r5.core.Decimal
	145,  // 1075: google.fhir.r5.core.Timing.Repeat.duration_unit:type_name -> google.fhir.r5.core.Timing.Repeat.DurationUnitCode
	52,   // 1076: google.fhir.r5.core.Timing.Repeat.frequency:type_name -> google.fhir.r5.core.PositiveInt
	52,   // 1077: google.fhir.r5.core.Timing.Repeat.frequency_max:type_name -> google.fhir.r5.core.PositiveInt
	27,   // 1078: google.fhir.r5.core.Timing.Repeat.period:type_name -> google.fhir.r5.core.Decimal
	27,   // 1079: google.fhir.r5.core.Timing.Repeat.period_max:type_name -> google.fhir.r5.core.Decimal
	146,  // 1080: google.fhir.r5.core.Timing.Repeat.period_unit:type_name -> google.fhir.r5.core.Timing.Repeat.PeriodUnitCode
	147,  // 1081: google.fhir.r5.core.Timing.Repeat.day_of_week:type_name -> google.fhir.r5.core.Timing.Repeat.DayOfWeekCode
	66,   // 1082: google.fhir.r5.core.Timing.Repeat.time_of_day:type_name -> google.fhir.r5.core.Time
	148,  // 1083: google.fhir.r5.core.Timing.Repeat.when:type_name -> google.fhir.r5.core.Timing.Repeat.WhenCode
	69,   // 1084: google.fhir.r5.core.Timing.Repeat.offset:type_name -> google.fhir.r5.core.UnsignedInt
	30,   // 1085: google.fhir.r5.core.Timing.Repeat.BoundsX.duration:type_name -> google.fhir.r5.core.Duration
	56,   // 1086: google.fhir.r5.core.Timing.Repeat.BoundsX.range:type_name -> google.fhir.r5.core.Range
	51,   // 1087: google.fhir.r5.core.Timing.Repeat.BoundsX.period:type_name -> google.fhir.r5.core.Period
	178,  // 1088: google.fhir.r5.core.Timing.Repeat.DurationUnitCode.value:type_name -> google.fhir.r5.core.UnitsOfTimeValueSet.Value
	65,   // 1089: google.fhir.r5.core.Timing.Repeat.DurationUnitCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1090: google.fhir.r5.core.Timing.Repeat.DurationUnitCode.extension:type_name -> google.fhir.r5.core.Extension
	178,  // 1091: google.fhir.r5.core.Timing.Repeat.PeriodUnitCode.value:type_name -> google.fhir.r5.core.UnitsOfTimeValueSet.Value
	65,   // 1092: google.fhir.r5.core.Timing.Repeat.PeriodUnitCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1093: google.fhir.r5.core.Timing.Repeat.PeriodUnitCode.extension:type_name -> google.fhir.r5.core.Extension
	156,  // 1094: google.fhir.r5.core.Timing.Repeat.DayOfWeekCode.value:type_name -> google.fhir.r5.core.DaysOfWeekCode.Value
	65,   // 1095: google.fhir.r5.core.Timing.Repeat.DayOfWeekCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1096: google.fhir.r5.core.Timing.Repeat.DayOfWeekCode.extension:type_name -> google.fhir.r5.core.Extension
	179,  // 1097: google.fhir.r5.core.Timing.Repeat.WhenCode.value:type_name -> google.fhir.r5.core.EventTimingValueSet.Value
	65,   // 1098: google.fhir.r5.core.Timing.Repeat.WhenCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1099: google.fhir.r5.core.Timing.Repeat.WhenCode.extension:type_name -> google.fhir.r5.core.Extension
	180,  // 1100: google.fhir.r5.core.TriggerDefinition.TypeCode.value:type_name -> google.fhir.r5.core.TriggerTypeCode.Value
	65,   // 1101: google.fhir.r5.core.TriggerDefinition.TypeCode.id:type_name -> google.fhir.r5.core.String
	35,   // 1102: google.fhir.r5.core.TriggerDefinition.TypeCode.extension:type_name -> google.fhir.r5.core.Extension
	67,   // 1103: google.fhir.r5.core.TriggerDefinition.TimingX.timing:type_name -> google.fhir.r5.core.Timing
	59,   // 1104: google.fhir.r5.core.TriggerDefinition.TimingX.reference:type_name -> google.fhir.r5.core.Reference
	25,   // 1105: google.fhir.r5.core.TriggerDefinition.TimingX.date:type_name -> google.fhir.r5.core.Date
	26,   // 1106: google.fhir.r5.core.TriggerDefinition.TimingX.date_time:type_name -> google.fhir.r5.core.DateTime
	16,   // 1107: google.fhir.r5.core.UsageContext.ValueX.codeable_concept:type_name -> google.fhir.r5.core.CodeableConcept
	55,   // 1108: google.fhir.r5.core.UsageContext.ValueX.quantity:type_name -> google.fhir.r5.core.Quantity
	56,   // 1109: google.fhir.r5.core.UsageContext.ValueX.range:type_name -> google.fhir.r5.core.Range
	59,   // 1110: google.fhir.r5.core.UsageContext.ValueX.reference:type_name -> google.fhir.r5.core.Reference
	71,   // 1111: google.fhir.r5.core.VirtualServiceDetail.AddressX.url:type_name -> google.fhir.r5.core.Url
	65,   // 1112: google.fhir.r5.core.VirtualServiceDetail.AddressX.string_value:type_name -> google.fhir.r5.core.String
	20,   // 1113: google.fhir.r5.core.VirtualServiceDetail.AddressX.contact_point:type_name -> google.fhir.r5.core.ContactPoint
	34,   // 1114: google.fhir.r5.core.VirtualServiceDetail.AddressX.extended_contact_detail:type_name -> google.fhir.r5.core.ExtendedContactDetail
	1115, // [1115:1115] is the sub-list for method output_type
	1115, // [1115:1115] is the sub-list for method input_type
	1115, // [1115:1115] is the sub-list for extension type_name
	1115, // [1115:1115] is the sub-list for extension extendee
	0,    // [0:1115] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r5_core_datatypes_proto_init() }
func file_proto_google_fhir_proto_r5_core_datatypes_proto_init() {
	if File_proto_google_fhir_proto_r5_core_datatypes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Age); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Availability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackboneElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackboneType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Base64Binary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Boolean); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Canonical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Code); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeableConcept); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeableReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contributor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Count); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Date); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Decimal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dosage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Element); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtendedContactDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Integer64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Markdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketingStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Meta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonetaryComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Money); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Narrative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Oid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Period); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PositiveInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimitiveType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductShelfLife); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ratio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatioRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedArtifact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampledData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsignedInt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uri); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Url); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualServiceDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Xhtml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address_UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Age_ComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Annotation_AuthorX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attachment_ContentTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Availability_AvailableTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Availability_NotAvailableTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Availability_AvailableTime_DaysOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPoint_SystemCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPoint_UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contributor_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Count_ComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_SubjectX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_CodeFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_DateFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_ValueFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_Sort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_DateFilter_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_ValueFilter_ComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_ValueFilter_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataRequirement_Sort_DirectionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Distance_ComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dosage_DoseAndRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dosage_DoseAndRate_DoseX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dosage_DoseAndRate_RateX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duration_ComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_RepresentationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Slicing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Base); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_TypeRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_DefaultValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_FixedX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_PatternX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Example); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_MinValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_MaxValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Constraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_ElementDefinitionBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Mapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Slicing_Discriminator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Slicing_RulesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Slicing_Discriminator_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_TypeRef_AggregationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_TypeRef_VersioningCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Example_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Constraint_SeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_ElementDefinitionBinding_StrengthCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_ElementDefinitionBinding_Additional); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_ElementDefinitionBinding_Additional_PurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementDefinition_Mapping_LanguageCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Extension_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanName_UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier_UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonetaryComponent_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Money_CurrencyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyQuantity_ComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Narrative_StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterDefinition_UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterDefinition_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductShelfLife_PeriodX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity_ComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedArtifact_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedArtifact_PublicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampledData_IntervalUnitCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature_TargetFormatCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature_SigFormatCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing_Repeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing_Repeat_BoundsX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing_Repeat_DurationUnitCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing_Repeat_PeriodUnitCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing_Repeat_DayOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Timing_Repeat_WhenCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerDefinition_TypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerDefinition_TimingX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsageContext_ValueX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualServiceDetail_AddressX); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*Reference_Uri)(nil),
		(*Reference_Fragment)(nil),
		(*Reference_ResourceId)(nil),
		(*Reference_AccountId)(nil),
		(*Reference_ActivityDefinitionId)(nil),
		(*Reference_ActorDefinitionId)(nil),
		(*Reference_AdministrableProductDefinitionId)(nil),
		(*Reference_AdverseEventId)(nil),
		(*Reference_AllergyIntoleranceId)(nil),
		(*Reference_AppointmentId)(nil),
		(*Reference_AppointmentResponseId)(nil),
		(*Reference_ArtifactAssessmentId)(nil),
		(*Reference_AuditEventId)(nil),
		(*Reference_BasicId)(nil),
		(*Reference_BinaryId)(nil),
		(*Reference_BiologicallyDerivedProductId)(nil),
		(*Reference_BiologicallyDerivedProductDispenseId)(nil),
		(*Reference_BodyStructureId)(nil),
		(*Reference_BundleId)(nil),
		(*Reference_CapabilityStatementId)(nil),
		(*Reference_CarePlanId)(nil),
		(*Reference_CareTeamId)(nil),
		(*Reference_ChargeItemId)(nil),
		(*Reference_ChargeItemDefinitionId)(nil),
		(*Reference_CitationId)(nil),
		(*Reference_ClaimId)(nil),
		(*Reference_ClaimResponseId)(nil),
		(*Reference_ClinicalImpressionId)(nil),
		(*Reference_ClinicalUseDefinitionId)(nil),
		(*Reference_CodeSystemId)(nil),
		(*Reference_CommunicationId)(nil),
		(*Reference_CommunicationRequestId)(nil),
		(*Reference_CompartmentDefinitionId)(nil),
		(*Reference_CompositionId)(nil),
		(*Reference_ConceptMapId)(nil),
		(*Reference_ConditionId)(nil),
		(*Reference_ConditionDefinitionId)(nil),
		(*Reference_ConsentId)(nil),
		(*Reference_ContractId)(nil),
		(*Reference_CoverageId)(nil),
		(*Reference_CoverageEligibilityRequestId)(nil),
		(*Reference_CoverageEligibilityResponseId)(nil),
		(*Reference_DetectedIssueId)(nil),
		(*Reference_DeviceId)(nil),
		(*Reference_DeviceAssociationId)(nil),
		(*Reference_DeviceDefinitionId)(nil),
		(*Reference_DeviceDispenseId)(nil),
		(*Reference_DeviceMetricId)(nil),
		(*Reference_DeviceRequestId)(nil),
		(*Reference_DeviceUsageId)(nil),
		(*Reference_DiagnosticReportId)(nil),
		(*Reference_DocumentReferenceId)(nil),
		(*Reference_EncounterId)(nil),
		(*Reference_EncounterHistoryId)(nil),
		(*Reference_EndpointId)(nil),
		(*Reference_EnrollmentRequestId)(nil),
		(*Reference_EnrollmentResponseId)(nil),
		(*Reference_EpisodeOfCareId)(nil),
		(*Reference_EventDefinitionId)(nil),
		(*Reference_EvidenceId)(nil),
		(*Reference_EvidenceReportId)(nil),
		(*Reference_EvidenceVariableId)(nil),
		(*Reference_ExampleScenarioId)(nil),
		(*Reference_ExplanationOfBenefitId)(nil),
		(*Reference_FamilyMemberHistoryId)(nil),
		(*Reference_FlagId)(nil),
		(*Reference_FormularyItemId)(nil),
		(*Reference_GenomicStudyId)(nil),
		(*Reference_GoalId)(nil),
		(*Reference_GraphDefinitionId)(nil),
		(*Reference_GroupId)(nil),
		(*Reference_GuidanceResponseId)(nil),
		(*Reference_HealthcareServiceId)(nil),
		(*Reference_ImagingSelectionId)(nil),
		(*Reference_ImagingStudyId)(nil),
		(*Reference_ImmunizationId)(nil),
		(*Reference_ImmunizationEvaluationId)(nil),
		(*Reference_ImmunizationRecommendationId)(nil),
		(*Reference_ImplementationGuideId)(nil),
		(*Reference_IngredientId)(nil),
		(*Reference_InsurancePlanId)(nil),
		(*Reference_InventoryItemId)(nil),
		(*Reference_InventoryReportId)(nil),
		(*Reference_InvoiceId)(nil),
		(*Reference_LibraryId)(nil),
		(*Reference_LinkageId)(nil),
		(*Reference_ListId)(nil),
		(*Reference_LocationId)(nil),
		(*Reference_ManufacturedItemDefinitionId)(nil),
		(*Reference_MeasureId)(nil),
		(*Reference_MeasureReportId)(nil),
		(*Reference_MedicationId)(nil),
		(*Reference_MedicationAdministrationId)(nil),
		(*Reference_MedicationDispenseId)(nil),
		(*Reference_MedicationKnowledgeId)(nil),
		(*Reference_MedicationRequestId)(nil),
		(*Reference_MedicationStatementId)(nil),
		(*Reference_MedicinalProductDefinitionId)(nil),
		(*Reference_MessageDefinitionId)(nil),
		(*Reference_MessageHeaderId)(nil),
		(*Reference_MolecularSequenceId)(nil),
		(*Reference_NamingSystemId)(nil),
		(*Reference_NutritionIntakeId)(nil),
		(*Reference_NutritionOrderId)(nil),
		(*Reference_NutritionProductId)(nil),
		(*Reference_ObservationId)(nil),
		(*Reference_ObservationDefinitionId)(nil),
		(*Reference_OperationDefinitionId)(nil),
		(*Reference_OperationOutcomeId)(nil),
		(*Reference_OrganizationId)(nil),
		(*Reference_OrganizationAffiliationId)(nil),
		(*Reference_PackagedProductDefinitionId)(nil),
		(*Reference_ParametersId)(nil),
		(*Reference_PatientId)(nil),
		(*Reference_PaymentNoticeId)(nil),
		(*Reference_PaymentReconciliationId)(nil),
		(*Reference_PermissionId)(nil),
		(*Reference_PersonId)(nil),
		(*Reference_PlanDefinitionId)(nil),
		(*Reference_PractitionerId)(nil),
		(*Reference_PractitionerRoleId)(nil),
		(*Reference_ProcedureId)(nil),
		(*Reference_ProvenanceId)(nil),
		(*Reference_QuestionnaireId)(nil),
		(*Reference_QuestionnaireResponseId)(nil),
		(*Reference_RegulatedAuthorizationId)(nil),
		(*Reference_RelatedPersonId)(nil),
		(*Reference_RequestOrchestrationId)(nil),
		(*Reference_RequirementsId)(nil),
		(*Reference_ResearchStudyId)(nil),
		(*Reference_ResearchSubjectId)(nil),
		(*Reference_RiskAssessmentId)(nil),
		(*Reference_ScheduleId)(nil),
		(*Reference_SearchParameterId)(nil),
		(*Reference_ServiceRequestId)(nil),
		(*Reference_SlotId)(nil),
		(*Reference_SpecimenId)(nil),
		(*Reference_SpecimenDefinitionId)(nil),
		(*Reference_StructureDefinitionId)(nil),
		(*Reference_StructureMapId)(nil),
		(*Reference_SubscriptionId)(nil),
		(*Reference_SubscriptionStatusId)(nil),
		(*Reference_SubscriptionTopicId)(nil),
		(*Reference_SubstanceId)(nil),
		(*Reference_SubstanceDefinitionId)(nil),
		(*Reference_SubstanceNucleicAcidId)(nil),
		(*Reference_SubstancePolymerId)(nil),
		(*Reference_SubstanceProteinId)(nil),
		(*Reference_SubstanceReferenceInformationId)(nil),
		(*Reference_SubstanceSourceMaterialId)(nil),
		(*Reference_SupplyDeliveryId)(nil),
		(*Reference_SupplyRequestId)(nil),
		(*Reference_TaskId)(nil),
		(*Reference_TerminologyCapabilitiesId)(nil),
		(*Reference_TestPlanId)(nil),
		(*Reference_TestReportId)(nil),
		(*Reference_TestScriptId)(nil),
		(*Reference_TransportId)(nil),
		(*Reference_ValueSetId)(nil),
		(*Reference_VerificationResultId)(nil),
		(*Reference_VisionPrescriptionId)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[75].OneofWrappers = []interface{}{
		(*Annotation_AuthorX_Reference)(nil),
		(*Annotation_AuthorX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[85].OneofWrappers = []interface{}{
		(*DataRequirement_SubjectX_CodeableConcept)(nil),
		(*DataRequirement_SubjectX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[90].OneofWrappers = []interface{}{
		(*DataRequirement_DateFilter_ValueX_DateTime)(nil),
		(*DataRequirement_DateFilter_ValueX_Period)(nil),
		(*DataRequirement_DateFilter_ValueX_Duration)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[92].OneofWrappers = []interface{}{
		(*DataRequirement_ValueFilter_ValueX_DateTime)(nil),
		(*DataRequirement_ValueFilter_ValueX_Period)(nil),
		(*DataRequirement_ValueFilter_ValueX_Duration)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[96].OneofWrappers = []interface{}{
		(*Dosage_DoseAndRate_DoseX_Range)(nil),
		(*Dosage_DoseAndRate_DoseX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[97].OneofWrappers = []interface{}{
		(*Dosage_DoseAndRate_RateX_Ratio)(nil),
		(*Dosage_DoseAndRate_RateX_Range)(nil),
		(*Dosage_DoseAndRate_RateX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[103].OneofWrappers = []interface{}{
		(*ElementDefinition_DefaultValueX_Base64Binary)(nil),
		(*ElementDefinition_DefaultValueX_Boolean)(nil),
		(*ElementDefinition_DefaultValueX_Canonical)(nil),
		(*ElementDefinition_DefaultValueX_Code)(nil),
		(*ElementDefinition_DefaultValueX_Date)(nil),
		(*ElementDefinition_DefaultValueX_DateTime)(nil),
		(*ElementDefinition_DefaultValueX_Decimal)(nil),
		(*ElementDefinition_DefaultValueX_Id)(nil),
		(*ElementDefinition_DefaultValueX_Instant)(nil),
		(*ElementDefinition_DefaultValueX_Integer)(nil),
		(*ElementDefinition_DefaultValueX_Integer64)(nil),
		(*ElementDefinition_DefaultValueX_Markdown)(nil),
		(*ElementDefinition_DefaultValueX_Oid)(nil),
		(*ElementDefinition_DefaultValueX_PositiveInt)(nil),
		(*ElementDefinition_DefaultValueX_StringValue)(nil),
		(*ElementDefinition_DefaultValueX_Time)(nil),
		(*ElementDefinition_DefaultValueX_UnsignedInt)(nil),
		(*ElementDefinition_DefaultValueX_Uri)(nil),
		(*ElementDefinition_DefaultValueX_Url)(nil),
		(*ElementDefinition_DefaultValueX_Uuid)(nil),
		(*ElementDefinition_DefaultValueX_Address)(nil),
		(*ElementDefinition_DefaultValueX_Age)(nil),
		(*ElementDefinition_DefaultValueX_Annotation)(nil),
		(*ElementDefinition_DefaultValueX_Attachment)(nil),
		(*ElementDefinition_DefaultValueX_CodeableConcept)(nil),
		(*ElementDefinition_DefaultValueX_CodeableReference)(nil),
		(*ElementDefinition_DefaultValueX_Coding)(nil),
		(*ElementDefinition_DefaultValueX_ContactPoint)(nil),
		(*ElementDefinition_DefaultValueX_Count)(nil),
		(*ElementDefinition_DefaultValueX_Distance)(nil),
		(*ElementDefinition_DefaultValueX_Duration)(nil),
		(*ElementDefinition_DefaultValueX_HumanName)(nil),
		(*ElementDefinition_DefaultValueX_Identifier)(nil),
		(*ElementDefinition_DefaultValueX_Money)(nil),
		(*ElementDefinition_DefaultValueX_Period)(nil),
		(*ElementDefinition_DefaultValueX_Quantity)(nil),
		(*ElementDefinition_DefaultValueX_Range)(nil),
		(*ElementDefinition_DefaultValueX_Ratio)(nil),
		(*ElementDefinition_DefaultValueX_RatioRange)(nil),
		(*ElementDefinition_DefaultValueX_Reference)(nil),
		(*ElementDefinition_DefaultValueX_SampledData)(nil),
		(*ElementDefinition_DefaultValueX_Signature)(nil),
		(*ElementDefinition_DefaultValueX_Timing)(nil),
		(*ElementDefinition_DefaultValueX_ContactDetail)(nil),
		(*ElementDefinition_DefaultValueX_DataRequirement)(nil),
		(*ElementDefinition_DefaultValueX_Expression)(nil),
		(*ElementDefinition_DefaultValueX_ParameterDefinition)(nil),
		(*ElementDefinition_DefaultValueX_RelatedArtifact)(nil),
		(*ElementDefinition_DefaultValueX_TriggerDefinition)(nil),
		(*ElementDefinition_DefaultValueX_UsageContext)(nil),
		(*ElementDefinition_DefaultValueX_Availability)(nil),
		(*ElementDefinition_DefaultValueX_ExtendedContactDetail)(nil),
		(*ElementDefinition_DefaultValueX_Dosage)(nil),
		(*ElementDefinition_DefaultValueX_Meta)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[104].OneofWrappers = []interface{}{
		(*ElementDefinition_FixedX_Base64Binary)(nil),
		(*ElementDefinition_FixedX_Boolean)(nil),
		(*ElementDefinition_FixedX_Canonical)(nil),
		(*ElementDefinition_FixedX_Code)(nil),
		(*ElementDefinition_FixedX_Date)(nil),
		(*ElementDefinition_FixedX_DateTime)(nil),
		(*ElementDefinition_FixedX_Decimal)(nil),
		(*ElementDefinition_FixedX_Id)(nil),
		(*ElementDefinition_FixedX_Instant)(nil),
		(*ElementDefinition_FixedX_Integer)(nil),
		(*ElementDefinition_FixedX_Integer64)(nil),
		(*ElementDefinition_FixedX_Markdown)(nil),
		(*ElementDefinition_FixedX_Oid)(nil),
		(*ElementDefinition_FixedX_PositiveInt)(nil),
		(*ElementDefinition_FixedX_StringValue)(nil),
		(*ElementDefinition_FixedX_Time)(nil),
		(*ElementDefinition_FixedX_UnsignedInt)(nil),
		(*ElementDefinition_FixedX_Uri)(nil),
		(*ElementDefinition_FixedX_Url)(nil),
		(*ElementDefinition_FixedX_Uuid)(nil),
		(*ElementDefinition_FixedX_Address)(nil),
		(*ElementDefinition_FixedX_Age)(nil),
		(*ElementDefinition_FixedX_Annotation)(nil),
		(*ElementDefinition_FixedX_Attachment)(nil),
		(*ElementDefinition_FixedX_CodeableConcept)(nil),
		(*ElementDefinition_FixedX_CodeableReference)(nil),
		(*ElementDefinition_FixedX_Coding)(nil),
		(*ElementDefinition_FixedX_ContactPoint)(nil),
		(*ElementDefinition_FixedX_Count)(nil),
		(*ElementDefinition_FixedX_Distance)(nil),
		(*ElementDefinition_FixedX_Duration)(nil),
		(*ElementDefinition_FixedX_HumanName)(nil),
		(*ElementDefinition_FixedX_Identifier)(nil),
		(*ElementDefinition_FixedX_Money)(nil),
		(*ElementDefinition_FixedX_Period)(nil),
		(*ElementDefinition_FixedX_Quantity)(nil),
		(*ElementDefinition_FixedX_Range)(nil),
		(*ElementDefinition_FixedX_Ratio)(nil),
		(*ElementDefinition_FixedX_RatioRange)(nil),
		(*ElementDefinition_FixedX_Reference)(nil),
		(*ElementDefinition_FixedX_SampledData)(nil),
		(*ElementDefinition_FixedX_Signature)(nil),
		(*ElementDefinition_FixedX_Timing)(nil),
		(*ElementDefinition_FixedX_ContactDetail)(nil),
		(*ElementDefinition_FixedX_DataRequirement)(nil),
		(*ElementDefinition_FixedX_Expression)(nil),
		(*ElementDefinition_FixedX_ParameterDefinition)(nil),
		(*ElementDefinition_FixedX_RelatedArtifact)(nil),
		(*ElementDefinition_FixedX_TriggerDefinition)(nil),
		(*ElementDefinition_FixedX_UsageContext)(nil),
		(*ElementDefinition_FixedX_Availability)(nil),
		(*ElementDefinition_FixedX_ExtendedContactDetail)(nil),
		(*ElementDefinition_FixedX_Dosage)(nil),
		(*ElementDefinition_FixedX_Meta)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[105].OneofWrappers = []interface{}{
		(*ElementDefinition_PatternX_Base64Binary)(nil),
		(*ElementDefinition_PatternX_Boolean)(nil),
		(*ElementDefinition_PatternX_Canonical)(nil),
		(*ElementDefinition_PatternX_Code)(nil),
		(*ElementDefinition_PatternX_Date)(nil),
		(*ElementDefinition_PatternX_DateTime)(nil),
		(*ElementDefinition_PatternX_Decimal)(nil),
		(*ElementDefinition_PatternX_Id)(nil),
		(*ElementDefinition_PatternX_Instant)(nil),
		(*ElementDefinition_PatternX_Integer)(nil),
		(*ElementDefinition_PatternX_Integer64)(nil),
		(*ElementDefinition_PatternX_Markdown)(nil),
		(*ElementDefinition_PatternX_Oid)(nil),
		(*ElementDefinition_PatternX_PositiveInt)(nil),
		(*ElementDefinition_PatternX_StringValue)(nil),
		(*ElementDefinition_PatternX_Time)(nil),
		(*ElementDefinition_PatternX_UnsignedInt)(nil),
		(*ElementDefinition_PatternX_Uri)(nil),
		(*ElementDefinition_PatternX_Url)(nil),
		(*ElementDefinition_PatternX_Uuid)(nil),
		(*ElementDefinition_PatternX_Address)(nil),
		(*ElementDefinition_PatternX_Age)(nil),
		(*ElementDefinition_PatternX_Annotation)(nil),
		(*ElementDefinition_PatternX_Attachment)(nil),
		(*ElementDefinition_PatternX_CodeableConcept)(nil),
		(*ElementDefinition_PatternX_CodeableReference)(nil),
		(*ElementDefinition_PatternX_Coding)(nil),
		(*ElementDefinition_PatternX_ContactPoint)(nil),
		(*ElementDefinition_PatternX_Count)(nil),
		(*ElementDefinition_PatternX_Distance)(nil),
		(*ElementDefinition_PatternX_Duration)(nil),
		(*ElementDefinition_PatternX_HumanName)(nil),
		(*ElementDefinition_PatternX_Identifier)(nil),
		(*ElementDefinition_PatternX_Money)(nil),
		(*ElementDefinition_PatternX_Period)(nil),
		(*ElementDefinition_PatternX_Quantity)(nil),
		(*ElementDefinition_PatternX_Range)(nil),
		(*ElementDefinition_PatternX_Ratio)(nil),
		(*ElementDefinition_PatternX_RatioRange)(nil),
		(*ElementDefinition_PatternX_Reference)(nil),
		(*ElementDefinition_PatternX_SampledData)(nil),
		(*ElementDefinition_PatternX_Signature)(nil),
		(*ElementDefinition_PatternX_Timing)(nil),
		(*ElementDefinition_PatternX_ContactDetail)(nil),
		(*ElementDefinition_PatternX_DataRequirement)(nil),
		(*ElementDefinition_PatternX_Expression)(nil),
		(*ElementDefinition_PatternX_ParameterDefinition)(nil),
		(*ElementDefinition_PatternX_RelatedArtifact)(nil),
		(*ElementDefinition_PatternX_TriggerDefinition)(nil),
		(*ElementDefinition_PatternX_UsageContext)(nil),
		(*ElementDefinition_PatternX_Availability)(nil),
		(*ElementDefinition_PatternX_ExtendedContactDetail)(nil),
		(*ElementDefinition_PatternX_Dosage)(nil),
		(*ElementDefinition_PatternX_Meta)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[107].OneofWrappers = []interface{}{
		(*ElementDefinition_MinValueX_Date)(nil),
		(*ElementDefinition_MinValueX_DateTime)(nil),
		(*ElementDefinition_MinValueX_Instant)(nil),
		(*ElementDefinition_MinValueX_Time)(nil),
		(*ElementDefinition_MinValueX_Decimal)(nil),
		(*ElementDefinition_MinValueX_Integer)(nil),
		(*ElementDefinition_MinValueX_Integer64)(nil),
		(*ElementDefinition_MinValueX_PositiveInt)(nil),
		(*ElementDefinition_MinValueX_UnsignedInt)(nil),
		(*ElementDefinition_MinValueX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[108].OneofWrappers = []interface{}{
		(*ElementDefinition_MaxValueX_Date)(nil),
		(*ElementDefinition_MaxValueX_DateTime)(nil),
		(*ElementDefinition_MaxValueX_Instant)(nil),
		(*ElementDefinition_MaxValueX_Time)(nil),
		(*ElementDefinition_MaxValueX_Decimal)(nil),
		(*ElementDefinition_MaxValueX_Integer)(nil),
		(*ElementDefinition_MaxValueX_Integer64)(nil),
		(*ElementDefinition_MaxValueX_PositiveInt)(nil),
		(*ElementDefinition_MaxValueX_UnsignedInt)(nil),
		(*ElementDefinition_MaxValueX_Quantity)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[117].OneofWrappers = []interface{}{
		(*ElementDefinition_Example_ValueX_Base64Binary)(nil),
		(*ElementDefinition_Example_ValueX_Boolean)(nil),
		(*ElementDefinition_Example_ValueX_Canonical)(nil),
		(*ElementDefinition_Example_ValueX_Code)(nil),
		(*ElementDefinition_Example_ValueX_Date)(nil),
		(*ElementDefinition_Example_ValueX_DateTime)(nil),
		(*ElementDefinition_Example_ValueX_Decimal)(nil),
		(*ElementDefinition_Example_ValueX_Id)(nil),
		(*ElementDefinition_Example_ValueX_Instant)(nil),
		(*ElementDefinition_Example_ValueX_Integer)(nil),
		(*ElementDefinition_Example_ValueX_Integer64)(nil),
		(*ElementDefinition_Example_ValueX_Markdown)(nil),
		(*ElementDefinition_Example_ValueX_Oid)(nil),
		(*ElementDefinition_Example_ValueX_PositiveInt)(nil),
		(*ElementDefinition_Example_ValueX_StringValue)(nil),
		(*ElementDefinition_Example_ValueX_Time)(nil),
		(*ElementDefinition_Example_ValueX_UnsignedInt)(nil),
		(*ElementDefinition_Example_ValueX_Uri)(nil),
		(*ElementDefinition_Example_ValueX_Url)(nil),
		(*ElementDefinition_Example_ValueX_Uuid)(nil),
		(*ElementDefinition_Example_ValueX_Address)(nil),
		(*ElementDefinition_Example_ValueX_Age)(nil),
		(*ElementDefinition_Example_ValueX_Annotation)(nil),
		(*ElementDefinition_Example_ValueX_Attachment)(nil),
		(*ElementDefinition_Example_ValueX_CodeableConcept)(nil),
		(*ElementDefinition_Example_ValueX_CodeableReference)(nil),
		(*ElementDefinition_Example_ValueX_Coding)(nil),
		(*ElementDefinition_Example_ValueX_ContactPoint)(nil),
		(*ElementDefinition_Example_ValueX_Count)(nil),
		(*ElementDefinition_Example_ValueX_Distance)(nil),
		(*ElementDefinition_Example_ValueX_Duration)(nil),
		(*ElementDefinition_Example_ValueX_HumanName)(nil),
		(*ElementDefinition_Example_ValueX_Identifier)(nil),
		(*ElementDefinition_Example_ValueX_Money)(nil),
		(*ElementDefinition_Example_ValueX_Period)(nil),
		(*ElementDefinition_Example_ValueX_Quantity)(nil),
		(*ElementDefinition_Example_ValueX_Range)(nil),
		(*ElementDefinition_Example_ValueX_Ratio)(nil),
		(*ElementDefinition_Example_ValueX_RatioRange)(nil),
		(*ElementDefinition_Example_ValueX_Reference)(nil),
		(*ElementDefinition_Example_ValueX_SampledData)(nil),
		(*ElementDefinition_Example_ValueX_Signature)(nil),
		(*ElementDefinition_Example_ValueX_Timing)(nil),
		(*ElementDefinition_Example_ValueX_ContactDetail)(nil),
		(*ElementDefinition_Example_ValueX_DataRequirement)(nil),
		(*ElementDefinition_Example_ValueX_Expression)(nil),
		(*ElementDefinition_Example_ValueX_ParameterDefinition)(nil),
		(*ElementDefinition_Example_ValueX_RelatedArtifact)(nil),
		(*ElementDefinition_Example_ValueX_TriggerDefinition)(nil),
		(*ElementDefinition_Example_ValueX_UsageContext)(nil),
		(*ElementDefinition_Example_ValueX_Availability)(nil),
		(*ElementDefinition_Example_ValueX_ExtendedContactDetail)(nil),
		(*ElementDefinition_Example_ValueX_Dosage)(nil),
		(*ElementDefinition_Example_ValueX_Meta)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[123].OneofWrappers = []interface{}{
		(*Extension_ValueX_Base64Binary)(nil),
		(*Extension_ValueX_Boolean)(nil),
		(*Extension_ValueX_Canonical)(nil),
		(*Extension_ValueX_Code)(nil),
		(*Extension_ValueX_Date)(nil),
		(*Extension_ValueX_DateTime)(nil),
		(*Extension_ValueX_Decimal)(nil),
		(*Extension_ValueX_Id)(nil),
		(*Extension_ValueX_Instant)(nil),
		(*Extension_ValueX_Integer)(nil),
		(*Extension_ValueX_Integer64)(nil),
		(*Extension_ValueX_Markdown)(nil),
		(*Extension_ValueX_Oid)(nil),
		(*Extension_ValueX_PositiveInt)(nil),
		(*Extension_ValueX_StringValue)(nil),
		(*Extension_ValueX_Time)(nil),
		(*Extension_ValueX_UnsignedInt)(nil),
		(*Extension_ValueX_Uri)(nil),
		(*Extension_ValueX_Url)(nil),
		(*Extension_ValueX_Uuid)(nil),
		(*Extension_ValueX_Address)(nil),
		(*Extension_ValueX_Age)(nil),
		(*Extension_ValueX_Annotation)(nil),
		(*Extension_ValueX_Attachment)(nil),
		(*Extension_ValueX_CodeableConcept)(nil),
		(*Extension_ValueX_CodeableReference)(nil),
		(*Extension_ValueX_Coding)(nil),
		(*Extension_ValueX_ContactPoint)(nil),
		(*Extension_ValueX_Count)(nil),
		(*Extension_ValueX_Distance)(nil),
		(*Extension_ValueX_Duration)(nil),
		(*Extension_ValueX_HumanName)(nil),
		(*Extension_ValueX_Identifier)(nil),
		(*Extension_ValueX_Money)(nil),
		(*Extension_ValueX_Period)(nil),
		(*Extension_ValueX_Quantity)(nil),
		(*Extension_ValueX_Range)(nil),
		(*Extension_ValueX_Ratio)(nil),
		(*Extension_ValueX_RatioRange)(nil),
		(*Extension_ValueX_Reference)(nil),
		(*Extension_ValueX_SampledData)(nil),
		(*Extension_ValueX_Signature)(nil),
		(*Extension_ValueX_Timing)(nil),
		(*Extension_ValueX_ContactDetail)(nil),
		(*Extension_ValueX_DataRequirement)(nil),
		(*Extension_ValueX_Expression)(nil),
		(*Extension_ValueX_ParameterDefinition)(nil),
		(*Extension_ValueX_RelatedArtifact)(nil),
		(*Extension_ValueX_TriggerDefinition)(nil),
		(*Extension_ValueX_UsageContext)(nil),
		(*Extension_ValueX_Availability)(nil),
		(*Extension_ValueX_ExtendedContactDetail)(nil),
		(*Extension_ValueX_Dosage)(nil),
		(*Extension_ValueX_Meta)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[132].OneofWrappers = []interface{}{
		(*ProductShelfLife_PeriodX_Duration)(nil),
		(*ProductShelfLife_PeriodX_StringValue)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[140].OneofWrappers = []interface{}{
		(*Timing_Repeat_BoundsX_Duration)(nil),
		(*Timing_Repeat_BoundsX_Range)(nil),
		(*Timing_Repeat_BoundsX_Period)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[146].OneofWrappers = []interface{}{
		(*TriggerDefinition_TimingX_Timing)(nil),
		(*TriggerDefinition_TimingX_Reference)(nil),
		(*TriggerDefinition_TimingX_Date)(nil),
		(*TriggerDefinition_TimingX_DateTime)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[147].OneofWrappers = []interface{}{
		(*UsageContext_ValueX_CodeableConcept)(nil),
		(*UsageContext_ValueX_Quantity)(nil),
		(*UsageContext_ValueX_Range)(nil),
		(*UsageContext_ValueX_Reference)(nil),
	}
	file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes[148].OneofWrappers = []interface{}{
		(*VirtualServiceDetail_AddressX_Url)(nil),
		(*VirtualServiceDetail_AddressX_StringValue)(nil),
		(*VirtualServiceDetail_AddressX_ContactPoint)(nil),
		(*VirtualServiceDetail_AddressX_ExtendedContactDetail)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   149,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r5_core_datatypes_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r5_core_datatypes_proto_depIdxs,
		EnumInfos:         file_proto_google_fhir_proto_r5_core_datatypes_proto_enumTypes,
		MessageInfos:      file_proto_google_fhir_proto_r5_core_datatypes_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r5_core_datatypes_proto = out.File
	file_proto_google_fhir_proto_r5_core_datatypes_proto_rawDesc = nil
	file_proto_google_fhir_proto_r5_core_datatypes_proto_goTypes = nil
	file_proto_google_fhir_proto_r5_core_datatypes_proto_depIdxs = nil
}
