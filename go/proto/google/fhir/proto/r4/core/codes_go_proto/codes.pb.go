//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.0
// 	protoc        v3.21.12
// source: proto/google/fhir/proto/r4/core/codes.proto

package codes_go_proto

import (
	_ "github.com/google/fhir/go/proto/google/fhir/proto/annotations_go_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AbstractTypeCode_Value int32

const (
	AbstractTypeCode_INVALID_UNINITIALIZED AbstractTypeCode_Value = 0
	AbstractTypeCode_TYPE                  AbstractTypeCode_Value = 1
	AbstractTypeCode_ANY                   AbstractTypeCode_Value = 2
)

// Enum value maps for AbstractTypeCode_Value.
var (
	AbstractTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TYPE",
		2: "ANY",
	}
	AbstractTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TYPE":                  1,
		"ANY":                   2,
	}
)

func (x AbstractTypeCode_Value) Enum() *AbstractTypeCode_Value {
	p := new(AbstractTypeCode_Value)
	*p = x
	return p
}

func (x AbstractTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AbstractTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[0].Descriptor()
}

func (AbstractTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[0]
}

func (x AbstractTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AbstractTypeCode_Value.Descriptor instead.
func (AbstractTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{0, 0}
}

type AccountStatusCode_Value int32

const (
	AccountStatusCode_INVALID_UNINITIALIZED AccountStatusCode_Value = 0
	AccountStatusCode_ACTIVE                AccountStatusCode_Value = 1
	AccountStatusCode_INACTIVE              AccountStatusCode_Value = 2
	AccountStatusCode_ENTERED_IN_ERROR      AccountStatusCode_Value = 3
	AccountStatusCode_ON_HOLD               AccountStatusCode_Value = 4
	AccountStatusCode_UNKNOWN               AccountStatusCode_Value = 5
)

// Enum value maps for AccountStatusCode_Value.
var (
	AccountStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
		4: "ON_HOLD",
		5: "UNKNOWN",
	}
	AccountStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
		"ON_HOLD":               4,
		"UNKNOWN":               5,
	}
)

func (x AccountStatusCode_Value) Enum() *AccountStatusCode_Value {
	p := new(AccountStatusCode_Value)
	*p = x
	return p
}

func (x AccountStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[1].Descriptor()
}

func (AccountStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[1]
}

func (x AccountStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountStatusCode_Value.Descriptor instead.
func (AccountStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{1, 0}
}

type ActionCardinalityBehaviorCode_Value int32

const (
	ActionCardinalityBehaviorCode_INVALID_UNINITIALIZED ActionCardinalityBehaviorCode_Value = 0
	ActionCardinalityBehaviorCode_SINGLE                ActionCardinalityBehaviorCode_Value = 1
	ActionCardinalityBehaviorCode_MULTIPLE              ActionCardinalityBehaviorCode_Value = 2
)

// Enum value maps for ActionCardinalityBehaviorCode_Value.
var (
	ActionCardinalityBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SINGLE",
		2: "MULTIPLE",
	}
	ActionCardinalityBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SINGLE":                1,
		"MULTIPLE":              2,
	}
)

func (x ActionCardinalityBehaviorCode_Value) Enum() *ActionCardinalityBehaviorCode_Value {
	p := new(ActionCardinalityBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionCardinalityBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionCardinalityBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[2].Descriptor()
}

func (ActionCardinalityBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[2]
}

func (x ActionCardinalityBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionCardinalityBehaviorCode_Value.Descriptor instead.
func (ActionCardinalityBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{2, 0}
}

type ActionConditionKindCode_Value int32

const (
	ActionConditionKindCode_INVALID_UNINITIALIZED ActionConditionKindCode_Value = 0
	ActionConditionKindCode_APPLICABILITY         ActionConditionKindCode_Value = 1
	ActionConditionKindCode_START                 ActionConditionKindCode_Value = 2
	ActionConditionKindCode_STOP                  ActionConditionKindCode_Value = 3
)

// Enum value maps for ActionConditionKindCode_Value.
var (
	ActionConditionKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "APPLICABILITY",
		2: "START",
		3: "STOP",
	}
	ActionConditionKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"APPLICABILITY":         1,
		"START":                 2,
		"STOP":                  3,
	}
)

func (x ActionConditionKindCode_Value) Enum() *ActionConditionKindCode_Value {
	p := new(ActionConditionKindCode_Value)
	*p = x
	return p
}

func (x ActionConditionKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionConditionKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[3].Descriptor()
}

func (ActionConditionKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[3]
}

func (x ActionConditionKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionConditionKindCode_Value.Descriptor instead.
func (ActionConditionKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{3, 0}
}

type ActionGroupingBehaviorCode_Value int32

const (
	ActionGroupingBehaviorCode_INVALID_UNINITIALIZED ActionGroupingBehaviorCode_Value = 0
	ActionGroupingBehaviorCode_VISUAL_GROUP          ActionGroupingBehaviorCode_Value = 1
	ActionGroupingBehaviorCode_LOGICAL_GROUP         ActionGroupingBehaviorCode_Value = 2
	ActionGroupingBehaviorCode_SENTENCE_GROUP        ActionGroupingBehaviorCode_Value = 3
)

// Enum value maps for ActionGroupingBehaviorCode_Value.
var (
	ActionGroupingBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "VISUAL_GROUP",
		2: "LOGICAL_GROUP",
		3: "SENTENCE_GROUP",
	}
	ActionGroupingBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"VISUAL_GROUP":          1,
		"LOGICAL_GROUP":         2,
		"SENTENCE_GROUP":        3,
	}
)

func (x ActionGroupingBehaviorCode_Value) Enum() *ActionGroupingBehaviorCode_Value {
	p := new(ActionGroupingBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionGroupingBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionGroupingBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[4].Descriptor()
}

func (ActionGroupingBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[4]
}

func (x ActionGroupingBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionGroupingBehaviorCode_Value.Descriptor instead.
func (ActionGroupingBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{4, 0}
}

type ActionParticipantTypeCode_Value int32

const (
	ActionParticipantTypeCode_INVALID_UNINITIALIZED ActionParticipantTypeCode_Value = 0
	ActionParticipantTypeCode_PATIENT               ActionParticipantTypeCode_Value = 1
	ActionParticipantTypeCode_PRACTITIONER          ActionParticipantTypeCode_Value = 2
	ActionParticipantTypeCode_RELATED_PERSON        ActionParticipantTypeCode_Value = 3
	ActionParticipantTypeCode_DEVICE                ActionParticipantTypeCode_Value = 4
)

// Enum value maps for ActionParticipantTypeCode_Value.
var (
	ActionParticipantTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PATIENT",
		2: "PRACTITIONER",
		3: "RELATED_PERSON",
		4: "DEVICE",
	}
	ActionParticipantTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PATIENT":               1,
		"PRACTITIONER":          2,
		"RELATED_PERSON":        3,
		"DEVICE":                4,
	}
)

func (x ActionParticipantTypeCode_Value) Enum() *ActionParticipantTypeCode_Value {
	p := new(ActionParticipantTypeCode_Value)
	*p = x
	return p
}

func (x ActionParticipantTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionParticipantTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[5].Descriptor()
}

func (ActionParticipantTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[5]
}

func (x ActionParticipantTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionParticipantTypeCode_Value.Descriptor instead.
func (ActionParticipantTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{5, 0}
}

type ActionPrecheckBehaviorCode_Value int32

const (
	ActionPrecheckBehaviorCode_INVALID_UNINITIALIZED ActionPrecheckBehaviorCode_Value = 0
	ActionPrecheckBehaviorCode_YES                   ActionPrecheckBehaviorCode_Value = 1
	ActionPrecheckBehaviorCode_NO                    ActionPrecheckBehaviorCode_Value = 2
)

// Enum value maps for ActionPrecheckBehaviorCode_Value.
var (
	ActionPrecheckBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "YES",
		2: "NO",
	}
	ActionPrecheckBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"YES":                   1,
		"NO":                    2,
	}
)

func (x ActionPrecheckBehaviorCode_Value) Enum() *ActionPrecheckBehaviorCode_Value {
	p := new(ActionPrecheckBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionPrecheckBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionPrecheckBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[6].Descriptor()
}

func (ActionPrecheckBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[6]
}

func (x ActionPrecheckBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionPrecheckBehaviorCode_Value.Descriptor instead.
func (ActionPrecheckBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{6, 0}
}

type ActionRelationshipTypeCode_Value int32

const (
	ActionRelationshipTypeCode_INVALID_UNINITIALIZED ActionRelationshipTypeCode_Value = 0
	ActionRelationshipTypeCode_BEFORE_START          ActionRelationshipTypeCode_Value = 1
	ActionRelationshipTypeCode_BEFORE                ActionRelationshipTypeCode_Value = 2
	ActionRelationshipTypeCode_BEFORE_END            ActionRelationshipTypeCode_Value = 3
	ActionRelationshipTypeCode_CONCURRENT_WITH_START ActionRelationshipTypeCode_Value = 4
	ActionRelationshipTypeCode_CONCURRENT            ActionRelationshipTypeCode_Value = 5
	ActionRelationshipTypeCode_CONCURRENT_WITH_END   ActionRelationshipTypeCode_Value = 6
	ActionRelationshipTypeCode_AFTER_START           ActionRelationshipTypeCode_Value = 7
	ActionRelationshipTypeCode_AFTER                 ActionRelationshipTypeCode_Value = 8
	ActionRelationshipTypeCode_AFTER_END             ActionRelationshipTypeCode_Value = 9
)

// Enum value maps for ActionRelationshipTypeCode_Value.
var (
	ActionRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BEFORE_START",
		2: "BEFORE",
		3: "BEFORE_END",
		4: "CONCURRENT_WITH_START",
		5: "CONCURRENT",
		6: "CONCURRENT_WITH_END",
		7: "AFTER_START",
		8: "AFTER",
		9: "AFTER_END",
	}
	ActionRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BEFORE_START":          1,
		"BEFORE":                2,
		"BEFORE_END":            3,
		"CONCURRENT_WITH_START": 4,
		"CONCURRENT":            5,
		"CONCURRENT_WITH_END":   6,
		"AFTER_START":           7,
		"AFTER":                 8,
		"AFTER_END":             9,
	}
)

func (x ActionRelationshipTypeCode_Value) Enum() *ActionRelationshipTypeCode_Value {
	p := new(ActionRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x ActionRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[7].Descriptor()
}

func (ActionRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[7]
}

func (x ActionRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionRelationshipTypeCode_Value.Descriptor instead.
func (ActionRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{7, 0}
}

type ActionRequiredBehaviorCode_Value int32

const (
	ActionRequiredBehaviorCode_INVALID_UNINITIALIZED  ActionRequiredBehaviorCode_Value = 0
	ActionRequiredBehaviorCode_MUST                   ActionRequiredBehaviorCode_Value = 1
	ActionRequiredBehaviorCode_COULD                  ActionRequiredBehaviorCode_Value = 2
	ActionRequiredBehaviorCode_MUST_UNLESS_DOCUMENTED ActionRequiredBehaviorCode_Value = 3
)

// Enum value maps for ActionRequiredBehaviorCode_Value.
var (
	ActionRequiredBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MUST",
		2: "COULD",
		3: "MUST_UNLESS_DOCUMENTED",
	}
	ActionRequiredBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":  0,
		"MUST":                   1,
		"COULD":                  2,
		"MUST_UNLESS_DOCUMENTED": 3,
	}
)

func (x ActionRequiredBehaviorCode_Value) Enum() *ActionRequiredBehaviorCode_Value {
	p := new(ActionRequiredBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionRequiredBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionRequiredBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[8].Descriptor()
}

func (ActionRequiredBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[8]
}

func (x ActionRequiredBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionRequiredBehaviorCode_Value.Descriptor instead.
func (ActionRequiredBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{8, 0}
}

type ActionSelectionBehaviorCode_Value int32

const (
	ActionSelectionBehaviorCode_INVALID_UNINITIALIZED ActionSelectionBehaviorCode_Value = 0
	ActionSelectionBehaviorCode_ANY                   ActionSelectionBehaviorCode_Value = 1
	ActionSelectionBehaviorCode_ALL                   ActionSelectionBehaviorCode_Value = 2
	ActionSelectionBehaviorCode_ALL_OR_NONE           ActionSelectionBehaviorCode_Value = 3
	ActionSelectionBehaviorCode_EXACTLY_ONE           ActionSelectionBehaviorCode_Value = 4
	ActionSelectionBehaviorCode_AT_MOST_ONE           ActionSelectionBehaviorCode_Value = 5
	ActionSelectionBehaviorCode_ONE_OR_MORE           ActionSelectionBehaviorCode_Value = 6
)

// Enum value maps for ActionSelectionBehaviorCode_Value.
var (
	ActionSelectionBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ANY",
		2: "ALL",
		3: "ALL_OR_NONE",
		4: "EXACTLY_ONE",
		5: "AT_MOST_ONE",
		6: "ONE_OR_MORE",
	}
	ActionSelectionBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ANY":                   1,
		"ALL":                   2,
		"ALL_OR_NONE":           3,
		"EXACTLY_ONE":           4,
		"AT_MOST_ONE":           5,
		"ONE_OR_MORE":           6,
	}
)

func (x ActionSelectionBehaviorCode_Value) Enum() *ActionSelectionBehaviorCode_Value {
	p := new(ActionSelectionBehaviorCode_Value)
	*p = x
	return p
}

func (x ActionSelectionBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionSelectionBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[9].Descriptor()
}

func (ActionSelectionBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[9]
}

func (x ActionSelectionBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionSelectionBehaviorCode_Value.Descriptor instead.
func (ActionSelectionBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{9, 0}
}

type AddressTypeCode_Value int32

const (
	AddressTypeCode_INVALID_UNINITIALIZED AddressTypeCode_Value = 0
	AddressTypeCode_POSTAL                AddressTypeCode_Value = 1
	AddressTypeCode_PHYSICAL              AddressTypeCode_Value = 2
	AddressTypeCode_BOTH                  AddressTypeCode_Value = 3
)

// Enum value maps for AddressTypeCode_Value.
var (
	AddressTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "POSTAL",
		2: "PHYSICAL",
		3: "BOTH",
	}
	AddressTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"POSTAL":                1,
		"PHYSICAL":              2,
		"BOTH":                  3,
	}
)

func (x AddressTypeCode_Value) Enum() *AddressTypeCode_Value {
	p := new(AddressTypeCode_Value)
	*p = x
	return p
}

func (x AddressTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[10].Descriptor()
}

func (AddressTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[10]
}

func (x AddressTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressTypeCode_Value.Descriptor instead.
func (AddressTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{10, 0}
}

type AddressUseCode_Value int32

const (
	AddressUseCode_INVALID_UNINITIALIZED AddressUseCode_Value = 0
	AddressUseCode_HOME                  AddressUseCode_Value = 1
	AddressUseCode_WORK                  AddressUseCode_Value = 2
	AddressUseCode_TEMP                  AddressUseCode_Value = 3
	AddressUseCode_OLD                   AddressUseCode_Value = 4
	AddressUseCode_BILLING               AddressUseCode_Value = 5
)

// Enum value maps for AddressUseCode_Value.
var (
	AddressUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HOME",
		2: "WORK",
		3: "TEMP",
		4: "OLD",
		5: "BILLING",
	}
	AddressUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HOME":                  1,
		"WORK":                  2,
		"TEMP":                  3,
		"OLD":                   4,
		"BILLING":               5,
	}
)

func (x AddressUseCode_Value) Enum() *AddressUseCode_Value {
	p := new(AddressUseCode_Value)
	*p = x
	return p
}

func (x AddressUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[11].Descriptor()
}

func (AddressUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[11]
}

func (x AddressUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressUseCode_Value.Descriptor instead.
func (AddressUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{11, 0}
}

type AdministrativeGenderCode_Value int32

const (
	AdministrativeGenderCode_INVALID_UNINITIALIZED AdministrativeGenderCode_Value = 0
	AdministrativeGenderCode_MALE                  AdministrativeGenderCode_Value = 1
	AdministrativeGenderCode_FEMALE                AdministrativeGenderCode_Value = 2
	AdministrativeGenderCode_OTHER                 AdministrativeGenderCode_Value = 3
	AdministrativeGenderCode_UNKNOWN               AdministrativeGenderCode_Value = 4
)

// Enum value maps for AdministrativeGenderCode_Value.
var (
	AdministrativeGenderCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MALE",
		2: "FEMALE",
		3: "OTHER",
		4: "UNKNOWN",
	}
	AdministrativeGenderCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MALE":                  1,
		"FEMALE":                2,
		"OTHER":                 3,
		"UNKNOWN":               4,
	}
)

func (x AdministrativeGenderCode_Value) Enum() *AdministrativeGenderCode_Value {
	p := new(AdministrativeGenderCode_Value)
	*p = x
	return p
}

func (x AdministrativeGenderCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdministrativeGenderCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[12].Descriptor()
}

func (AdministrativeGenderCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[12]
}

func (x AdministrativeGenderCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdministrativeGenderCode_Value.Descriptor instead.
func (AdministrativeGenderCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{12, 0}
}

type AdverseEventActualityCode_Value int32

const (
	AdverseEventActualityCode_INVALID_UNINITIALIZED AdverseEventActualityCode_Value = 0
	AdverseEventActualityCode_ACTUAL                AdverseEventActualityCode_Value = 1
	AdverseEventActualityCode_POTENTIAL             AdverseEventActualityCode_Value = 2
)

// Enum value maps for AdverseEventActualityCode_Value.
var (
	AdverseEventActualityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTUAL",
		2: "POTENTIAL",
	}
	AdverseEventActualityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTUAL":                1,
		"POTENTIAL":             2,
	}
)

func (x AdverseEventActualityCode_Value) Enum() *AdverseEventActualityCode_Value {
	p := new(AdverseEventActualityCode_Value)
	*p = x
	return p
}

func (x AdverseEventActualityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventActualityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[13].Descriptor()
}

func (AdverseEventActualityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[13]
}

func (x AdverseEventActualityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventActualityCode_Value.Descriptor instead.
func (AdverseEventActualityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{13, 0}
}

type AdverseEventOutcomeCode_Value int32

const (
	AdverseEventOutcomeCode_INVALID_UNINITIALIZED  AdverseEventOutcomeCode_Value = 0
	AdverseEventOutcomeCode_RESOLVED               AdverseEventOutcomeCode_Value = 1
	AdverseEventOutcomeCode_RECOVERING             AdverseEventOutcomeCode_Value = 2
	AdverseEventOutcomeCode_ONGOING                AdverseEventOutcomeCode_Value = 3
	AdverseEventOutcomeCode_RESOLVED_WITH_SEQUELAE AdverseEventOutcomeCode_Value = 4
	AdverseEventOutcomeCode_FATAL                  AdverseEventOutcomeCode_Value = 5
	AdverseEventOutcomeCode_UNKNOWN                AdverseEventOutcomeCode_Value = 6
)

// Enum value maps for AdverseEventOutcomeCode_Value.
var (
	AdverseEventOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RESOLVED",
		2: "RECOVERING",
		3: "ONGOING",
		4: "RESOLVED_WITH_SEQUELAE",
		5: "FATAL",
		6: "UNKNOWN",
	}
	AdverseEventOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":  0,
		"RESOLVED":               1,
		"RECOVERING":             2,
		"ONGOING":                3,
		"RESOLVED_WITH_SEQUELAE": 4,
		"FATAL":                  5,
		"UNKNOWN":                6,
	}
)

func (x AdverseEventOutcomeCode_Value) Enum() *AdverseEventOutcomeCode_Value {
	p := new(AdverseEventOutcomeCode_Value)
	*p = x
	return p
}

func (x AdverseEventOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[14].Descriptor()
}

func (AdverseEventOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[14]
}

func (x AdverseEventOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventOutcomeCode_Value.Descriptor instead.
func (AdverseEventOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{14, 0}
}

type AdverseEventSeverityCode_Value int32

const (
	AdverseEventSeverityCode_INVALID_UNINITIALIZED AdverseEventSeverityCode_Value = 0
	AdverseEventSeverityCode_MILD                  AdverseEventSeverityCode_Value = 1
	AdverseEventSeverityCode_MODERATE              AdverseEventSeverityCode_Value = 2
	AdverseEventSeverityCode_SEVERE                AdverseEventSeverityCode_Value = 3
)

// Enum value maps for AdverseEventSeverityCode_Value.
var (
	AdverseEventSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MILD",
		2: "MODERATE",
		3: "SEVERE",
	}
	AdverseEventSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MILD":                  1,
		"MODERATE":              2,
		"SEVERE":                3,
	}
)

func (x AdverseEventSeverityCode_Value) Enum() *AdverseEventSeverityCode_Value {
	p := new(AdverseEventSeverityCode_Value)
	*p = x
	return p
}

func (x AdverseEventSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AdverseEventSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[15].Descriptor()
}

func (AdverseEventSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[15]
}

func (x AdverseEventSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AdverseEventSeverityCode_Value.Descriptor instead.
func (AdverseEventSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{15, 0}
}

type AggregationModeCode_Value int32

const (
	AggregationModeCode_INVALID_UNINITIALIZED AggregationModeCode_Value = 0
	AggregationModeCode_CONTAINED             AggregationModeCode_Value = 1
	AggregationModeCode_REFERENCED            AggregationModeCode_Value = 2
	AggregationModeCode_BUNDLED               AggregationModeCode_Value = 3
)

// Enum value maps for AggregationModeCode_Value.
var (
	AggregationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONTAINED",
		2: "REFERENCED",
		3: "BUNDLED",
	}
	AggregationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONTAINED":             1,
		"REFERENCED":            2,
		"BUNDLED":               3,
	}
)

func (x AggregationModeCode_Value) Enum() *AggregationModeCode_Value {
	p := new(AggregationModeCode_Value)
	*p = x
	return p
}

func (x AggregationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[16].Descriptor()
}

func (AggregationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[16]
}

func (x AggregationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationModeCode_Value.Descriptor instead.
func (AggregationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{16, 0}
}

type AllergyIntoleranceCategoryCode_Value int32

const (
	AllergyIntoleranceCategoryCode_INVALID_UNINITIALIZED AllergyIntoleranceCategoryCode_Value = 0
	AllergyIntoleranceCategoryCode_FOOD                  AllergyIntoleranceCategoryCode_Value = 1
	AllergyIntoleranceCategoryCode_MEDICATION            AllergyIntoleranceCategoryCode_Value = 2
	AllergyIntoleranceCategoryCode_ENVIRONMENT           AllergyIntoleranceCategoryCode_Value = 3
	AllergyIntoleranceCategoryCode_BIOLOGIC              AllergyIntoleranceCategoryCode_Value = 4
)

// Enum value maps for AllergyIntoleranceCategoryCode_Value.
var (
	AllergyIntoleranceCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FOOD",
		2: "MEDICATION",
		3: "ENVIRONMENT",
		4: "BIOLOGIC",
	}
	AllergyIntoleranceCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FOOD":                  1,
		"MEDICATION":            2,
		"ENVIRONMENT":           3,
		"BIOLOGIC":              4,
	}
)

func (x AllergyIntoleranceCategoryCode_Value) Enum() *AllergyIntoleranceCategoryCode_Value {
	p := new(AllergyIntoleranceCategoryCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[17].Descriptor()
}

func (AllergyIntoleranceCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[17]
}

func (x AllergyIntoleranceCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCategoryCode_Value.Descriptor instead.
func (AllergyIntoleranceCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{17, 0}
}

type AllergyIntoleranceClinicalStatusCode_Value int32

const (
	AllergyIntoleranceClinicalStatusCode_INVALID_UNINITIALIZED AllergyIntoleranceClinicalStatusCode_Value = 0
	AllergyIntoleranceClinicalStatusCode_ACTIVE                AllergyIntoleranceClinicalStatusCode_Value = 1
	AllergyIntoleranceClinicalStatusCode_INACTIVE              AllergyIntoleranceClinicalStatusCode_Value = 2
	AllergyIntoleranceClinicalStatusCode_RESOLVED              AllergyIntoleranceClinicalStatusCode_Value = 3
)

// Enum value maps for AllergyIntoleranceClinicalStatusCode_Value.
var (
	AllergyIntoleranceClinicalStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "RESOLVED",
	}
	AllergyIntoleranceClinicalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"RESOLVED":              3,
	}
)

func (x AllergyIntoleranceClinicalStatusCode_Value) Enum() *AllergyIntoleranceClinicalStatusCode_Value {
	p := new(AllergyIntoleranceClinicalStatusCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceClinicalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceClinicalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[18].Descriptor()
}

func (AllergyIntoleranceClinicalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[18]
}

func (x AllergyIntoleranceClinicalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceClinicalStatusCode_Value.Descriptor instead.
func (AllergyIntoleranceClinicalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{18, 0}
}

type AllergyIntoleranceCriticalityCode_Value int32

const (
	AllergyIntoleranceCriticalityCode_INVALID_UNINITIALIZED AllergyIntoleranceCriticalityCode_Value = 0
	AllergyIntoleranceCriticalityCode_LOW                   AllergyIntoleranceCriticalityCode_Value = 1
	AllergyIntoleranceCriticalityCode_HIGH                  AllergyIntoleranceCriticalityCode_Value = 2
	AllergyIntoleranceCriticalityCode_UNABLE_TO_ASSESS      AllergyIntoleranceCriticalityCode_Value = 3
)

// Enum value maps for AllergyIntoleranceCriticalityCode_Value.
var (
	AllergyIntoleranceCriticalityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LOW",
		2: "HIGH",
		3: "UNABLE_TO_ASSESS",
	}
	AllergyIntoleranceCriticalityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LOW":                   1,
		"HIGH":                  2,
		"UNABLE_TO_ASSESS":      3,
	}
)

func (x AllergyIntoleranceCriticalityCode_Value) Enum() *AllergyIntoleranceCriticalityCode_Value {
	p := new(AllergyIntoleranceCriticalityCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceCriticalityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceCriticalityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[19].Descriptor()
}

func (AllergyIntoleranceCriticalityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[19]
}

func (x AllergyIntoleranceCriticalityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceCriticalityCode_Value.Descriptor instead.
func (AllergyIntoleranceCriticalityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{19, 0}
}

type AllergyIntoleranceSeverityCode_Value int32

const (
	AllergyIntoleranceSeverityCode_INVALID_UNINITIALIZED AllergyIntoleranceSeverityCode_Value = 0
	AllergyIntoleranceSeverityCode_MILD                  AllergyIntoleranceSeverityCode_Value = 1
	AllergyIntoleranceSeverityCode_MODERATE              AllergyIntoleranceSeverityCode_Value = 2
	AllergyIntoleranceSeverityCode_SEVERE                AllergyIntoleranceSeverityCode_Value = 3
)

// Enum value maps for AllergyIntoleranceSeverityCode_Value.
var (
	AllergyIntoleranceSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MILD",
		2: "MODERATE",
		3: "SEVERE",
	}
	AllergyIntoleranceSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MILD":                  1,
		"MODERATE":              2,
		"SEVERE":                3,
	}
)

func (x AllergyIntoleranceSeverityCode_Value) Enum() *AllergyIntoleranceSeverityCode_Value {
	p := new(AllergyIntoleranceSeverityCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[20].Descriptor()
}

func (AllergyIntoleranceSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[20]
}

func (x AllergyIntoleranceSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceSeverityCode_Value.Descriptor instead.
func (AllergyIntoleranceSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{20, 0}
}

type AllergyIntoleranceSubstanceExposureRiskCode_Value int32

const (
	AllergyIntoleranceSubstanceExposureRiskCode_INVALID_UNINITIALIZED  AllergyIntoleranceSubstanceExposureRiskCode_Value = 0
	AllergyIntoleranceSubstanceExposureRiskCode_KNOWN_REACTION_RISK    AllergyIntoleranceSubstanceExposureRiskCode_Value = 1
	AllergyIntoleranceSubstanceExposureRiskCode_NO_KNOWN_REACTION_RISK AllergyIntoleranceSubstanceExposureRiskCode_Value = 2
)

// Enum value maps for AllergyIntoleranceSubstanceExposureRiskCode_Value.
var (
	AllergyIntoleranceSubstanceExposureRiskCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "KNOWN_REACTION_RISK",
		2: "NO_KNOWN_REACTION_RISK",
	}
	AllergyIntoleranceSubstanceExposureRiskCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":  0,
		"KNOWN_REACTION_RISK":    1,
		"NO_KNOWN_REACTION_RISK": 2,
	}
)

func (x AllergyIntoleranceSubstanceExposureRiskCode_Value) Enum() *AllergyIntoleranceSubstanceExposureRiskCode_Value {
	p := new(AllergyIntoleranceSubstanceExposureRiskCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceSubstanceExposureRiskCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceSubstanceExposureRiskCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[21].Descriptor()
}

func (AllergyIntoleranceSubstanceExposureRiskCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[21]
}

func (x AllergyIntoleranceSubstanceExposureRiskCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceSubstanceExposureRiskCode_Value.Descriptor instead.
func (AllergyIntoleranceSubstanceExposureRiskCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{21, 0}
}

type AllergyIntoleranceTypeCode_Value int32

const (
	AllergyIntoleranceTypeCode_INVALID_UNINITIALIZED AllergyIntoleranceTypeCode_Value = 0
	AllergyIntoleranceTypeCode_ALLERGY               AllergyIntoleranceTypeCode_Value = 1
	AllergyIntoleranceTypeCode_INTOLERANCE           AllergyIntoleranceTypeCode_Value = 2
)

// Enum value maps for AllergyIntoleranceTypeCode_Value.
var (
	AllergyIntoleranceTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALLERGY",
		2: "INTOLERANCE",
	}
	AllergyIntoleranceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALLERGY":               1,
		"INTOLERANCE":           2,
	}
)

func (x AllergyIntoleranceTypeCode_Value) Enum() *AllergyIntoleranceTypeCode_Value {
	p := new(AllergyIntoleranceTypeCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[22].Descriptor()
}

func (AllergyIntoleranceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[22]
}

func (x AllergyIntoleranceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceTypeCode_Value.Descriptor instead.
func (AllergyIntoleranceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{22, 0}
}

type AllergyIntoleranceVerificationStatusCode_Value int32

const (
	AllergyIntoleranceVerificationStatusCode_INVALID_UNINITIALIZED AllergyIntoleranceVerificationStatusCode_Value = 0
	AllergyIntoleranceVerificationStatusCode_UNCONFIRMED           AllergyIntoleranceVerificationStatusCode_Value = 1
	AllergyIntoleranceVerificationStatusCode_CONFIRMED             AllergyIntoleranceVerificationStatusCode_Value = 2
	AllergyIntoleranceVerificationStatusCode_REFUTED               AllergyIntoleranceVerificationStatusCode_Value = 3
	AllergyIntoleranceVerificationStatusCode_ENTERED_IN_ERROR      AllergyIntoleranceVerificationStatusCode_Value = 4
)

// Enum value maps for AllergyIntoleranceVerificationStatusCode_Value.
var (
	AllergyIntoleranceVerificationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNCONFIRMED",
		2: "CONFIRMED",
		3: "REFUTED",
		4: "ENTERED_IN_ERROR",
	}
	AllergyIntoleranceVerificationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNCONFIRMED":           1,
		"CONFIRMED":             2,
		"REFUTED":               3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x AllergyIntoleranceVerificationStatusCode_Value) Enum() *AllergyIntoleranceVerificationStatusCode_Value {
	p := new(AllergyIntoleranceVerificationStatusCode_Value)
	*p = x
	return p
}

func (x AllergyIntoleranceVerificationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllergyIntoleranceVerificationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[23].Descriptor()
}

func (AllergyIntoleranceVerificationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[23]
}

func (x AllergyIntoleranceVerificationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllergyIntoleranceVerificationStatusCode_Value.Descriptor instead.
func (AllergyIntoleranceVerificationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{23, 0}
}

type AppointmentStatusCode_Value int32

const (
	AppointmentStatusCode_INVALID_UNINITIALIZED AppointmentStatusCode_Value = 0
	AppointmentStatusCode_PROPOSED              AppointmentStatusCode_Value = 1
	AppointmentStatusCode_PENDING               AppointmentStatusCode_Value = 2
	AppointmentStatusCode_BOOKED                AppointmentStatusCode_Value = 3
	AppointmentStatusCode_ARRIVED               AppointmentStatusCode_Value = 4
	AppointmentStatusCode_FULFILLED             AppointmentStatusCode_Value = 5
	AppointmentStatusCode_CANCELLED             AppointmentStatusCode_Value = 6
	AppointmentStatusCode_NOSHOW                AppointmentStatusCode_Value = 7
	AppointmentStatusCode_ENTERED_IN_ERROR      AppointmentStatusCode_Value = 8
	AppointmentStatusCode_CHECKED_IN            AppointmentStatusCode_Value = 9
	AppointmentStatusCode_WAITLIST              AppointmentStatusCode_Value = 10
)

// Enum value maps for AppointmentStatusCode_Value.
var (
	AppointmentStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "PROPOSED",
		2:  "PENDING",
		3:  "BOOKED",
		4:  "ARRIVED",
		5:  "FULFILLED",
		6:  "CANCELLED",
		7:  "NOSHOW",
		8:  "ENTERED_IN_ERROR",
		9:  "CHECKED_IN",
		10: "WAITLIST",
	}
	AppointmentStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"PENDING":               2,
		"BOOKED":                3,
		"ARRIVED":               4,
		"FULFILLED":             5,
		"CANCELLED":             6,
		"NOSHOW":                7,
		"ENTERED_IN_ERROR":      8,
		"CHECKED_IN":            9,
		"WAITLIST":              10,
	}
)

func (x AppointmentStatusCode_Value) Enum() *AppointmentStatusCode_Value {
	p := new(AppointmentStatusCode_Value)
	*p = x
	return p
}

func (x AppointmentStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppointmentStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[24].Descriptor()
}

func (AppointmentStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[24]
}

func (x AppointmentStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppointmentStatusCode_Value.Descriptor instead.
func (AppointmentStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{24, 0}
}

type AssertionDirectionTypeCode_Value int32

const (
	AssertionDirectionTypeCode_INVALID_UNINITIALIZED AssertionDirectionTypeCode_Value = 0
	AssertionDirectionTypeCode_RESPONSE              AssertionDirectionTypeCode_Value = 1
	AssertionDirectionTypeCode_REQUEST               AssertionDirectionTypeCode_Value = 2
)

// Enum value maps for AssertionDirectionTypeCode_Value.
var (
	AssertionDirectionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RESPONSE",
		2: "REQUEST",
	}
	AssertionDirectionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RESPONSE":              1,
		"REQUEST":               2,
	}
)

func (x AssertionDirectionTypeCode_Value) Enum() *AssertionDirectionTypeCode_Value {
	p := new(AssertionDirectionTypeCode_Value)
	*p = x
	return p
}

func (x AssertionDirectionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionDirectionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[25].Descriptor()
}

func (AssertionDirectionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[25]
}

func (x AssertionDirectionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionDirectionTypeCode_Value.Descriptor instead.
func (AssertionDirectionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{25, 0}
}

type AssertionOperatorTypeCode_Value int32

const (
	AssertionOperatorTypeCode_INVALID_UNINITIALIZED AssertionOperatorTypeCode_Value = 0
	AssertionOperatorTypeCode_EQUALS                AssertionOperatorTypeCode_Value = 1
	AssertionOperatorTypeCode_NOT_EQUALS            AssertionOperatorTypeCode_Value = 2
	AssertionOperatorTypeCode_IN                    AssertionOperatorTypeCode_Value = 3
	AssertionOperatorTypeCode_NOT_IN                AssertionOperatorTypeCode_Value = 4
	AssertionOperatorTypeCode_GREATER_THAN          AssertionOperatorTypeCode_Value = 5
	AssertionOperatorTypeCode_LESS_THAN             AssertionOperatorTypeCode_Value = 6
	AssertionOperatorTypeCode_EMPTY                 AssertionOperatorTypeCode_Value = 7
	AssertionOperatorTypeCode_NOT_EMPTY             AssertionOperatorTypeCode_Value = 8
	AssertionOperatorTypeCode_CONTAINS              AssertionOperatorTypeCode_Value = 9
	AssertionOperatorTypeCode_NOT_CONTAINS          AssertionOperatorTypeCode_Value = 10
	AssertionOperatorTypeCode_EVAL                  AssertionOperatorTypeCode_Value = 11
)

// Enum value maps for AssertionOperatorTypeCode_Value.
var (
	AssertionOperatorTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "EQUALS",
		2:  "NOT_EQUALS",
		3:  "IN",
		4:  "NOT_IN",
		5:  "GREATER_THAN",
		6:  "LESS_THAN",
		7:  "EMPTY",
		8:  "NOT_EMPTY",
		9:  "CONTAINS",
		10: "NOT_CONTAINS",
		11: "EVAL",
	}
	AssertionOperatorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQUALS":                1,
		"NOT_EQUALS":            2,
		"IN":                    3,
		"NOT_IN":                4,
		"GREATER_THAN":          5,
		"LESS_THAN":             6,
		"EMPTY":                 7,
		"NOT_EMPTY":             8,
		"CONTAINS":              9,
		"NOT_CONTAINS":          10,
		"EVAL":                  11,
	}
)

func (x AssertionOperatorTypeCode_Value) Enum() *AssertionOperatorTypeCode_Value {
	p := new(AssertionOperatorTypeCode_Value)
	*p = x
	return p
}

func (x AssertionOperatorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionOperatorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[26].Descriptor()
}

func (AssertionOperatorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[26]
}

func (x AssertionOperatorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionOperatorTypeCode_Value.Descriptor instead.
func (AssertionOperatorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{26, 0}
}

type AssertionResponseTypesCode_Value int32

const (
	AssertionResponseTypesCode_INVALID_UNINITIALIZED AssertionResponseTypesCode_Value = 0
	AssertionResponseTypesCode_OKAY                  AssertionResponseTypesCode_Value = 1
	AssertionResponseTypesCode_CREATED               AssertionResponseTypesCode_Value = 2
	AssertionResponseTypesCode_NO_CONTENT            AssertionResponseTypesCode_Value = 3
	AssertionResponseTypesCode_NOT_MODIFIED          AssertionResponseTypesCode_Value = 4
	AssertionResponseTypesCode_BAD                   AssertionResponseTypesCode_Value = 5
	AssertionResponseTypesCode_FORBIDDEN             AssertionResponseTypesCode_Value = 6
	AssertionResponseTypesCode_NOT_FOUND             AssertionResponseTypesCode_Value = 7
	AssertionResponseTypesCode_METHOD_NOT_ALLOWED    AssertionResponseTypesCode_Value = 8
	AssertionResponseTypesCode_CONFLICT              AssertionResponseTypesCode_Value = 9
	AssertionResponseTypesCode_GONE                  AssertionResponseTypesCode_Value = 10
	AssertionResponseTypesCode_PRECONDITION_FAILED   AssertionResponseTypesCode_Value = 11
	AssertionResponseTypesCode_UNPROCESSABLE         AssertionResponseTypesCode_Value = 12
)

// Enum value maps for AssertionResponseTypesCode_Value.
var (
	AssertionResponseTypesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "OKAY",
		2:  "CREATED",
		3:  "NO_CONTENT",
		4:  "NOT_MODIFIED",
		5:  "BAD",
		6:  "FORBIDDEN",
		7:  "NOT_FOUND",
		8:  "METHOD_NOT_ALLOWED",
		9:  "CONFLICT",
		10: "GONE",
		11: "PRECONDITION_FAILED",
		12: "UNPROCESSABLE",
	}
	AssertionResponseTypesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OKAY":                  1,
		"CREATED":               2,
		"NO_CONTENT":            3,
		"NOT_MODIFIED":          4,
		"BAD":                   5,
		"FORBIDDEN":             6,
		"NOT_FOUND":             7,
		"METHOD_NOT_ALLOWED":    8,
		"CONFLICT":              9,
		"GONE":                  10,
		"PRECONDITION_FAILED":   11,
		"UNPROCESSABLE":         12,
	}
)

func (x AssertionResponseTypesCode_Value) Enum() *AssertionResponseTypesCode_Value {
	p := new(AssertionResponseTypesCode_Value)
	*p = x
	return p
}

func (x AssertionResponseTypesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AssertionResponseTypesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[27].Descriptor()
}

func (AssertionResponseTypesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[27]
}

func (x AssertionResponseTypesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AssertionResponseTypesCode_Value.Descriptor instead.
func (AssertionResponseTypesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{27, 0}
}

type AuditEventActionCode_Value int32

const (
	AuditEventActionCode_INVALID_UNINITIALIZED AuditEventActionCode_Value = 0
	AuditEventActionCode_C                     AuditEventActionCode_Value = 1
	AuditEventActionCode_R                     AuditEventActionCode_Value = 2
	AuditEventActionCode_U                     AuditEventActionCode_Value = 3
	AuditEventActionCode_D                     AuditEventActionCode_Value = 4
	AuditEventActionCode_E                     AuditEventActionCode_Value = 5
)

// Enum value maps for AuditEventActionCode_Value.
var (
	AuditEventActionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "C",
		2: "R",
		3: "U",
		4: "D",
		5: "E",
	}
	AuditEventActionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"C":                     1,
		"R":                     2,
		"U":                     3,
		"D":                     4,
		"E":                     5,
	}
)

func (x AuditEventActionCode_Value) Enum() *AuditEventActionCode_Value {
	p := new(AuditEventActionCode_Value)
	*p = x
	return p
}

func (x AuditEventActionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventActionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[28].Descriptor()
}

func (AuditEventActionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[28]
}

func (x AuditEventActionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventActionCode_Value.Descriptor instead.
func (AuditEventActionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{28, 0}
}

type AuditEventAgentNetworkTypeCode_Value int32

const (
	AuditEventAgentNetworkTypeCode_INVALID_UNINITIALIZED AuditEventAgentNetworkTypeCode_Value = 0
	AuditEventAgentNetworkTypeCode_MACHINE_NAME          AuditEventAgentNetworkTypeCode_Value = 1
	AuditEventAgentNetworkTypeCode_IP_ADDRESS            AuditEventAgentNetworkTypeCode_Value = 2
	AuditEventAgentNetworkTypeCode_TELEPHONE_NUMBER      AuditEventAgentNetworkTypeCode_Value = 3
	AuditEventAgentNetworkTypeCode_EMAIL_ADDRESS         AuditEventAgentNetworkTypeCode_Value = 4
	AuditEventAgentNetworkTypeCode_URI                   AuditEventAgentNetworkTypeCode_Value = 5
)

// Enum value maps for AuditEventAgentNetworkTypeCode_Value.
var (
	AuditEventAgentNetworkTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MACHINE_NAME",
		2: "IP_ADDRESS",
		3: "TELEPHONE_NUMBER",
		4: "EMAIL_ADDRESS",
		5: "URI",
	}
	AuditEventAgentNetworkTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MACHINE_NAME":          1,
		"IP_ADDRESS":            2,
		"TELEPHONE_NUMBER":      3,
		"EMAIL_ADDRESS":         4,
		"URI":                   5,
	}
)

func (x AuditEventAgentNetworkTypeCode_Value) Enum() *AuditEventAgentNetworkTypeCode_Value {
	p := new(AuditEventAgentNetworkTypeCode_Value)
	*p = x
	return p
}

func (x AuditEventAgentNetworkTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventAgentNetworkTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[29].Descriptor()
}

func (AuditEventAgentNetworkTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[29]
}

func (x AuditEventAgentNetworkTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventAgentNetworkTypeCode_Value.Descriptor instead.
func (AuditEventAgentNetworkTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{29, 0}
}

type AuditEventOutcomeCode_Value int32

const (
	AuditEventOutcomeCode_INVALID_UNINITIALIZED AuditEventOutcomeCode_Value = 0
	AuditEventOutcomeCode_SUCCESS               AuditEventOutcomeCode_Value = 1
	AuditEventOutcomeCode_MINOR_FAILURE         AuditEventOutcomeCode_Value = 2
	AuditEventOutcomeCode_SERIOUS_FAILURE       AuditEventOutcomeCode_Value = 3
	AuditEventOutcomeCode_MAJOR_FAILURE         AuditEventOutcomeCode_Value = 4
)

// Enum value maps for AuditEventOutcomeCode_Value.
var (
	AuditEventOutcomeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SUCCESS",
		2: "MINOR_FAILURE",
		3: "SERIOUS_FAILURE",
		4: "MAJOR_FAILURE",
	}
	AuditEventOutcomeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SUCCESS":               1,
		"MINOR_FAILURE":         2,
		"SERIOUS_FAILURE":       3,
		"MAJOR_FAILURE":         4,
	}
)

func (x AuditEventOutcomeCode_Value) Enum() *AuditEventOutcomeCode_Value {
	p := new(AuditEventOutcomeCode_Value)
	*p = x
	return p
}

func (x AuditEventOutcomeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuditEventOutcomeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[30].Descriptor()
}

func (AuditEventOutcomeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[30]
}

func (x AuditEventOutcomeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuditEventOutcomeCode_Value.Descriptor instead.
func (AuditEventOutcomeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{30, 0}
}

type BenefitCostApplicabilityCode_Value int32

const (
	BenefitCostApplicabilityCode_INVALID_UNINITIALIZED BenefitCostApplicabilityCode_Value = 0
	BenefitCostApplicabilityCode_IN_NETWORK            BenefitCostApplicabilityCode_Value = 1
	BenefitCostApplicabilityCode_OUT_OF_NETWORK        BenefitCostApplicabilityCode_Value = 2
	BenefitCostApplicabilityCode_OTHER                 BenefitCostApplicabilityCode_Value = 3
)

// Enum value maps for BenefitCostApplicabilityCode_Value.
var (
	BenefitCostApplicabilityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_NETWORK",
		2: "OUT_OF_NETWORK",
		3: "OTHER",
	}
	BenefitCostApplicabilityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_NETWORK":            1,
		"OUT_OF_NETWORK":        2,
		"OTHER":                 3,
	}
)

func (x BenefitCostApplicabilityCode_Value) Enum() *BenefitCostApplicabilityCode_Value {
	p := new(BenefitCostApplicabilityCode_Value)
	*p = x
	return p
}

func (x BenefitCostApplicabilityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BenefitCostApplicabilityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[31].Descriptor()
}

func (BenefitCostApplicabilityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[31]
}

func (x BenefitCostApplicabilityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BenefitCostApplicabilityCode_Value.Descriptor instead.
func (BenefitCostApplicabilityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{31, 0}
}

type BindingStrengthCode_Value int32

const (
	BindingStrengthCode_INVALID_UNINITIALIZED BindingStrengthCode_Value = 0
	BindingStrengthCode_REQUIRED              BindingStrengthCode_Value = 1
	BindingStrengthCode_EXTENSIBLE            BindingStrengthCode_Value = 2
	BindingStrengthCode_PREFERRED             BindingStrengthCode_Value = 3
	BindingStrengthCode_EXAMPLE               BindingStrengthCode_Value = 4
)

// Enum value maps for BindingStrengthCode_Value.
var (
	BindingStrengthCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUIRED",
		2: "EXTENSIBLE",
		3: "PREFERRED",
		4: "EXAMPLE",
	}
	BindingStrengthCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUIRED":              1,
		"EXTENSIBLE":            2,
		"PREFERRED":             3,
		"EXAMPLE":               4,
	}
)

func (x BindingStrengthCode_Value) Enum() *BindingStrengthCode_Value {
	p := new(BindingStrengthCode_Value)
	*p = x
	return p
}

func (x BindingStrengthCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BindingStrengthCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[32].Descriptor()
}

func (BindingStrengthCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[32]
}

func (x BindingStrengthCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BindingStrengthCode_Value.Descriptor instead.
func (BindingStrengthCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{32, 0}
}

type BiologicallyDerivedProductCategoryCode_Value int32

const (
	BiologicallyDerivedProductCategoryCode_INVALID_UNINITIALIZED BiologicallyDerivedProductCategoryCode_Value = 0
	BiologicallyDerivedProductCategoryCode_ORGAN                 BiologicallyDerivedProductCategoryCode_Value = 1
	BiologicallyDerivedProductCategoryCode_TISSUE                BiologicallyDerivedProductCategoryCode_Value = 2
	BiologicallyDerivedProductCategoryCode_FLUID                 BiologicallyDerivedProductCategoryCode_Value = 3
	BiologicallyDerivedProductCategoryCode_CELLS                 BiologicallyDerivedProductCategoryCode_Value = 4
	BiologicallyDerivedProductCategoryCode_BIOLOGICAL_AGENT      BiologicallyDerivedProductCategoryCode_Value = 5
)

// Enum value maps for BiologicallyDerivedProductCategoryCode_Value.
var (
	BiologicallyDerivedProductCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ORGAN",
		2: "TISSUE",
		3: "FLUID",
		4: "CELLS",
		5: "BIOLOGICAL_AGENT",
	}
	BiologicallyDerivedProductCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ORGAN":                 1,
		"TISSUE":                2,
		"FLUID":                 3,
		"CELLS":                 4,
		"BIOLOGICAL_AGENT":      5,
	}
)

func (x BiologicallyDerivedProductCategoryCode_Value) Enum() *BiologicallyDerivedProductCategoryCode_Value {
	p := new(BiologicallyDerivedProductCategoryCode_Value)
	*p = x
	return p
}

func (x BiologicallyDerivedProductCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BiologicallyDerivedProductCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[33].Descriptor()
}

func (BiologicallyDerivedProductCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[33]
}

func (x BiologicallyDerivedProductCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BiologicallyDerivedProductCategoryCode_Value.Descriptor instead.
func (BiologicallyDerivedProductCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{33, 0}
}

type BiologicallyDerivedProductStatusCode_Value int32

const (
	BiologicallyDerivedProductStatusCode_INVALID_UNINITIALIZED BiologicallyDerivedProductStatusCode_Value = 0
	BiologicallyDerivedProductStatusCode_AVAILABLE             BiologicallyDerivedProductStatusCode_Value = 1
	BiologicallyDerivedProductStatusCode_UNAVAILABLE           BiologicallyDerivedProductStatusCode_Value = 2
)

// Enum value maps for BiologicallyDerivedProductStatusCode_Value.
var (
	BiologicallyDerivedProductStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AVAILABLE",
		2: "UNAVAILABLE",
	}
	BiologicallyDerivedProductStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AVAILABLE":             1,
		"UNAVAILABLE":           2,
	}
)

func (x BiologicallyDerivedProductStatusCode_Value) Enum() *BiologicallyDerivedProductStatusCode_Value {
	p := new(BiologicallyDerivedProductStatusCode_Value)
	*p = x
	return p
}

func (x BiologicallyDerivedProductStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BiologicallyDerivedProductStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[34].Descriptor()
}

func (BiologicallyDerivedProductStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[34]
}

func (x BiologicallyDerivedProductStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BiologicallyDerivedProductStatusCode_Value.Descriptor instead.
func (BiologicallyDerivedProductStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{34, 0}
}

type BiologicallyDerivedProductStorageScaleCode_Value int32

const (
	BiologicallyDerivedProductStorageScaleCode_INVALID_UNINITIALIZED BiologicallyDerivedProductStorageScaleCode_Value = 0
	BiologicallyDerivedProductStorageScaleCode_FARENHEIT             BiologicallyDerivedProductStorageScaleCode_Value = 1
	BiologicallyDerivedProductStorageScaleCode_CELSIUS               BiologicallyDerivedProductStorageScaleCode_Value = 2
	BiologicallyDerivedProductStorageScaleCode_KELVIN                BiologicallyDerivedProductStorageScaleCode_Value = 3
)

// Enum value maps for BiologicallyDerivedProductStorageScaleCode_Value.
var (
	BiologicallyDerivedProductStorageScaleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FARENHEIT",
		2: "CELSIUS",
		3: "KELVIN",
	}
	BiologicallyDerivedProductStorageScaleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FARENHEIT":             1,
		"CELSIUS":               2,
		"KELVIN":                3,
	}
)

func (x BiologicallyDerivedProductStorageScaleCode_Value) Enum() *BiologicallyDerivedProductStorageScaleCode_Value {
	p := new(BiologicallyDerivedProductStorageScaleCode_Value)
	*p = x
	return p
}

func (x BiologicallyDerivedProductStorageScaleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BiologicallyDerivedProductStorageScaleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[35].Descriptor()
}

func (BiologicallyDerivedProductStorageScaleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[35]
}

func (x BiologicallyDerivedProductStorageScaleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BiologicallyDerivedProductStorageScaleCode_Value.Descriptor instead.
func (BiologicallyDerivedProductStorageScaleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{35, 0}
}

type BundleTypeCode_Value int32

const (
	BundleTypeCode_INVALID_UNINITIALIZED BundleTypeCode_Value = 0
	BundleTypeCode_DOCUMENT              BundleTypeCode_Value = 1
	BundleTypeCode_MESSAGE               BundleTypeCode_Value = 2
	BundleTypeCode_TRANSACTION           BundleTypeCode_Value = 3
	BundleTypeCode_TRANSACTION_RESPONSE  BundleTypeCode_Value = 4
	BundleTypeCode_BATCH                 BundleTypeCode_Value = 5
	BundleTypeCode_BATCH_RESPONSE        BundleTypeCode_Value = 6
	BundleTypeCode_HISTORY               BundleTypeCode_Value = 7
	BundleTypeCode_SEARCHSET             BundleTypeCode_Value = 8
	BundleTypeCode_COLLECTION            BundleTypeCode_Value = 9
)

// Enum value maps for BundleTypeCode_Value.
var (
	BundleTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DOCUMENT",
		2: "MESSAGE",
		3: "TRANSACTION",
		4: "TRANSACTION_RESPONSE",
		5: "BATCH",
		6: "BATCH_RESPONSE",
		7: "HISTORY",
		8: "SEARCHSET",
		9: "COLLECTION",
	}
	BundleTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DOCUMENT":              1,
		"MESSAGE":               2,
		"TRANSACTION":           3,
		"TRANSACTION_RESPONSE":  4,
		"BATCH":                 5,
		"BATCH_RESPONSE":        6,
		"HISTORY":               7,
		"SEARCHSET":             8,
		"COLLECTION":            9,
	}
)

func (x BundleTypeCode_Value) Enum() *BundleTypeCode_Value {
	p := new(BundleTypeCode_Value)
	*p = x
	return p
}

func (x BundleTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BundleTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[36].Descriptor()
}

func (BundleTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[36]
}

func (x BundleTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BundleTypeCode_Value.Descriptor instead.
func (BundleTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{36, 0}
}

type CanonicalStatusCodesForFHIRResourcesCode_Value int32

const (
	CanonicalStatusCodesForFHIRResourcesCode_INVALID_UNINITIALIZED CanonicalStatusCodesForFHIRResourcesCode_Value = 0
	CanonicalStatusCodesForFHIRResourcesCode_ERROR                 CanonicalStatusCodesForFHIRResourcesCode_Value = 1
	CanonicalStatusCodesForFHIRResourcesCode_PROPOSED              CanonicalStatusCodesForFHIRResourcesCode_Value = 2
	CanonicalStatusCodesForFHIRResourcesCode_PLANNED               CanonicalStatusCodesForFHIRResourcesCode_Value = 3
	CanonicalStatusCodesForFHIRResourcesCode_DRAFT                 CanonicalStatusCodesForFHIRResourcesCode_Value = 4
	CanonicalStatusCodesForFHIRResourcesCode_REQUESTED             CanonicalStatusCodesForFHIRResourcesCode_Value = 5
	CanonicalStatusCodesForFHIRResourcesCode_RECEIVED              CanonicalStatusCodesForFHIRResourcesCode_Value = 6
	CanonicalStatusCodesForFHIRResourcesCode_DECLINED              CanonicalStatusCodesForFHIRResourcesCode_Value = 7
	CanonicalStatusCodesForFHIRResourcesCode_ACCEPTED              CanonicalStatusCodesForFHIRResourcesCode_Value = 8
	CanonicalStatusCodesForFHIRResourcesCode_ARRIVED               CanonicalStatusCodesForFHIRResourcesCode_Value = 9
	CanonicalStatusCodesForFHIRResourcesCode_ACTIVE                CanonicalStatusCodesForFHIRResourcesCode_Value = 10
	CanonicalStatusCodesForFHIRResourcesCode_SUSPENDED             CanonicalStatusCodesForFHIRResourcesCode_Value = 11
	CanonicalStatusCodesForFHIRResourcesCode_FAILED                CanonicalStatusCodesForFHIRResourcesCode_Value = 12
	CanonicalStatusCodesForFHIRResourcesCode_REPLACED              CanonicalStatusCodesForFHIRResourcesCode_Value = 13
	CanonicalStatusCodesForFHIRResourcesCode_COMPLETE              CanonicalStatusCodesForFHIRResourcesCode_Value = 14
	CanonicalStatusCodesForFHIRResourcesCode_INACTIVE              CanonicalStatusCodesForFHIRResourcesCode_Value = 15
	CanonicalStatusCodesForFHIRResourcesCode_ABANDONED             CanonicalStatusCodesForFHIRResourcesCode_Value = 16
	CanonicalStatusCodesForFHIRResourcesCode_UNKNOWN               CanonicalStatusCodesForFHIRResourcesCode_Value = 17
	CanonicalStatusCodesForFHIRResourcesCode_UNCONFIRMED           CanonicalStatusCodesForFHIRResourcesCode_Value = 18
	CanonicalStatusCodesForFHIRResourcesCode_CONFIRMED             CanonicalStatusCodesForFHIRResourcesCode_Value = 19
	CanonicalStatusCodesForFHIRResourcesCode_RESOLVED              CanonicalStatusCodesForFHIRResourcesCode_Value = 20
	CanonicalStatusCodesForFHIRResourcesCode_REFUTED               CanonicalStatusCodesForFHIRResourcesCode_Value = 21
	CanonicalStatusCodesForFHIRResourcesCode_DIFFERENTIAL          CanonicalStatusCodesForFHIRResourcesCode_Value = 22
	CanonicalStatusCodesForFHIRResourcesCode_PARTIAL               CanonicalStatusCodesForFHIRResourcesCode_Value = 23
	CanonicalStatusCodesForFHIRResourcesCode_BUSY_UNAVAILABLE      CanonicalStatusCodesForFHIRResourcesCode_Value = 24
	CanonicalStatusCodesForFHIRResourcesCode_FREE                  CanonicalStatusCodesForFHIRResourcesCode_Value = 25
	CanonicalStatusCodesForFHIRResourcesCode_ON_TARGET             CanonicalStatusCodesForFHIRResourcesCode_Value = 26
	CanonicalStatusCodesForFHIRResourcesCode_AHEAD_OF_TARGET       CanonicalStatusCodesForFHIRResourcesCode_Value = 27
	CanonicalStatusCodesForFHIRResourcesCode_BEHIND_TARGET         CanonicalStatusCodesForFHIRResourcesCode_Value = 28
	CanonicalStatusCodesForFHIRResourcesCode_NOT_READY             CanonicalStatusCodesForFHIRResourcesCode_Value = 29
	CanonicalStatusCodesForFHIRResourcesCode_TRANSDUC_DISCON       CanonicalStatusCodesForFHIRResourcesCode_Value = 30
	CanonicalStatusCodesForFHIRResourcesCode_HW_DISCON             CanonicalStatusCodesForFHIRResourcesCode_Value = 31
)

// Enum value maps for CanonicalStatusCodesForFHIRResourcesCode_Value.
var (
	CanonicalStatusCodesForFHIRResourcesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "ERROR",
		2:  "PROPOSED",
		3:  "PLANNED",
		4:  "DRAFT",
		5:  "REQUESTED",
		6:  "RECEIVED",
		7:  "DECLINED",
		8:  "ACCEPTED",
		9:  "ARRIVED",
		10: "ACTIVE",
		11: "SUSPENDED",
		12: "FAILED",
		13: "REPLACED",
		14: "COMPLETE",
		15: "INACTIVE",
		16: "ABANDONED",
		17: "UNKNOWN",
		18: "UNCONFIRMED",
		19: "CONFIRMED",
		20: "RESOLVED",
		21: "REFUTED",
		22: "DIFFERENTIAL",
		23: "PARTIAL",
		24: "BUSY_UNAVAILABLE",
		25: "FREE",
		26: "ON_TARGET",
		27: "AHEAD_OF_TARGET",
		28: "BEHIND_TARGET",
		29: "NOT_READY",
		30: "TRANSDUC_DISCON",
		31: "HW_DISCON",
	}
	CanonicalStatusCodesForFHIRResourcesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ERROR":                 1,
		"PROPOSED":              2,
		"PLANNED":               3,
		"DRAFT":                 4,
		"REQUESTED":             5,
		"RECEIVED":              6,
		"DECLINED":              7,
		"ACCEPTED":              8,
		"ARRIVED":               9,
		"ACTIVE":                10,
		"SUSPENDED":             11,
		"FAILED":                12,
		"REPLACED":              13,
		"COMPLETE":              14,
		"INACTIVE":              15,
		"ABANDONED":             16,
		"UNKNOWN":               17,
		"UNCONFIRMED":           18,
		"CONFIRMED":             19,
		"RESOLVED":              20,
		"REFUTED":               21,
		"DIFFERENTIAL":          22,
		"PARTIAL":               23,
		"BUSY_UNAVAILABLE":      24,
		"FREE":                  25,
		"ON_TARGET":             26,
		"AHEAD_OF_TARGET":       27,
		"BEHIND_TARGET":         28,
		"NOT_READY":             29,
		"TRANSDUC_DISCON":       30,
		"HW_DISCON":             31,
	}
)

func (x CanonicalStatusCodesForFHIRResourcesCode_Value) Enum() *CanonicalStatusCodesForFHIRResourcesCode_Value {
	p := new(CanonicalStatusCodesForFHIRResourcesCode_Value)
	*p = x
	return p
}

func (x CanonicalStatusCodesForFHIRResourcesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CanonicalStatusCodesForFHIRResourcesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[37].Descriptor()
}

func (CanonicalStatusCodesForFHIRResourcesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[37]
}

func (x CanonicalStatusCodesForFHIRResourcesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CanonicalStatusCodesForFHIRResourcesCode_Value.Descriptor instead.
func (CanonicalStatusCodesForFHIRResourcesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{37, 0}
}

type CapabilityStatementKindCode_Value int32

const (
	CapabilityStatementKindCode_INVALID_UNINITIALIZED CapabilityStatementKindCode_Value = 0
	CapabilityStatementKindCode_INSTANCE              CapabilityStatementKindCode_Value = 1
	CapabilityStatementKindCode_CAPABILITY            CapabilityStatementKindCode_Value = 2
	CapabilityStatementKindCode_REQUIREMENTS          CapabilityStatementKindCode_Value = 3
)

// Enum value maps for CapabilityStatementKindCode_Value.
var (
	CapabilityStatementKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "CAPABILITY",
		3: "REQUIREMENTS",
	}
	CapabilityStatementKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"CAPABILITY":            2,
		"REQUIREMENTS":          3,
	}
)

func (x CapabilityStatementKindCode_Value) Enum() *CapabilityStatementKindCode_Value {
	p := new(CapabilityStatementKindCode_Value)
	*p = x
	return p
}

func (x CapabilityStatementKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CapabilityStatementKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[38].Descriptor()
}

func (CapabilityStatementKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[38]
}

func (x CapabilityStatementKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CapabilityStatementKindCode_Value.Descriptor instead.
func (CapabilityStatementKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{38, 0}
}

type CarePlanActivityStatusCode_Value int32

const (
	CarePlanActivityStatusCode_INVALID_UNINITIALIZED CarePlanActivityStatusCode_Value = 0
	CarePlanActivityStatusCode_NOT_STARTED           CarePlanActivityStatusCode_Value = 1
	CarePlanActivityStatusCode_SCHEDULED             CarePlanActivityStatusCode_Value = 2
	CarePlanActivityStatusCode_IN_PROGRESS           CarePlanActivityStatusCode_Value = 3
	CarePlanActivityStatusCode_ON_HOLD               CarePlanActivityStatusCode_Value = 4
	CarePlanActivityStatusCode_COMPLETED             CarePlanActivityStatusCode_Value = 5
	CarePlanActivityStatusCode_CANCELLED             CarePlanActivityStatusCode_Value = 6
	CarePlanActivityStatusCode_STOPPED               CarePlanActivityStatusCode_Value = 7
	CarePlanActivityStatusCode_UNKNOWN               CarePlanActivityStatusCode_Value = 8
	CarePlanActivityStatusCode_ENTERED_IN_ERROR      CarePlanActivityStatusCode_Value = 9
)

// Enum value maps for CarePlanActivityStatusCode_Value.
var (
	CarePlanActivityStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_STARTED",
		2: "SCHEDULED",
		3: "IN_PROGRESS",
		4: "ON_HOLD",
		5: "COMPLETED",
		6: "CANCELLED",
		7: "STOPPED",
		8: "UNKNOWN",
		9: "ENTERED_IN_ERROR",
	}
	CarePlanActivityStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_STARTED":           1,
		"SCHEDULED":             2,
		"IN_PROGRESS":           3,
		"ON_HOLD":               4,
		"COMPLETED":             5,
		"CANCELLED":             6,
		"STOPPED":               7,
		"UNKNOWN":               8,
		"ENTERED_IN_ERROR":      9,
	}
)

func (x CarePlanActivityStatusCode_Value) Enum() *CarePlanActivityStatusCode_Value {
	p := new(CarePlanActivityStatusCode_Value)
	*p = x
	return p
}

func (x CarePlanActivityStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarePlanActivityStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[39].Descriptor()
}

func (CarePlanActivityStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[39]
}

func (x CarePlanActivityStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarePlanActivityStatusCode_Value.Descriptor instead.
func (CarePlanActivityStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{39, 0}
}

type CareTeamStatusCode_Value int32

const (
	CareTeamStatusCode_INVALID_UNINITIALIZED CareTeamStatusCode_Value = 0
	CareTeamStatusCode_PROPOSED              CareTeamStatusCode_Value = 1
	CareTeamStatusCode_ACTIVE                CareTeamStatusCode_Value = 2
	CareTeamStatusCode_SUSPENDED             CareTeamStatusCode_Value = 3
	CareTeamStatusCode_INACTIVE              CareTeamStatusCode_Value = 4
	CareTeamStatusCode_ENTERED_IN_ERROR      CareTeamStatusCode_Value = 5
)

// Enum value maps for CareTeamStatusCode_Value.
var (
	CareTeamStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "ACTIVE",
		3: "SUSPENDED",
		4: "INACTIVE",
		5: "ENTERED_IN_ERROR",
	}
	CareTeamStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"ACTIVE":                2,
		"SUSPENDED":             3,
		"INACTIVE":              4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x CareTeamStatusCode_Value) Enum() *CareTeamStatusCode_Value {
	p := new(CareTeamStatusCode_Value)
	*p = x
	return p
}

func (x CareTeamStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CareTeamStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[40].Descriptor()
}

func (CareTeamStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[40]
}

func (x CareTeamStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CareTeamStatusCode_Value.Descriptor instead.
func (CareTeamStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{40, 0}
}

type CatalogEntryRelationTypeCode_Value int32

const (
	CatalogEntryRelationTypeCode_INVALID_UNINITIALIZED CatalogEntryRelationTypeCode_Value = 0
	CatalogEntryRelationTypeCode_TRIGGERS              CatalogEntryRelationTypeCode_Value = 1
	CatalogEntryRelationTypeCode_IS_REPLACED_BY        CatalogEntryRelationTypeCode_Value = 2
)

// Enum value maps for CatalogEntryRelationTypeCode_Value.
var (
	CatalogEntryRelationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TRIGGERS",
		2: "IS_REPLACED_BY",
	}
	CatalogEntryRelationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TRIGGERS":              1,
		"IS_REPLACED_BY":        2,
	}
)

func (x CatalogEntryRelationTypeCode_Value) Enum() *CatalogEntryRelationTypeCode_Value {
	p := new(CatalogEntryRelationTypeCode_Value)
	*p = x
	return p
}

func (x CatalogEntryRelationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CatalogEntryRelationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[41].Descriptor()
}

func (CatalogEntryRelationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[41]
}

func (x CatalogEntryRelationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CatalogEntryRelationTypeCode_Value.Descriptor instead.
func (CatalogEntryRelationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{41, 0}
}

type ChargeItemStatusCode_Value int32

const (
	ChargeItemStatusCode_INVALID_UNINITIALIZED ChargeItemStatusCode_Value = 0
	ChargeItemStatusCode_PLANNED               ChargeItemStatusCode_Value = 1
	ChargeItemStatusCode_BILLABLE              ChargeItemStatusCode_Value = 2
	ChargeItemStatusCode_NOT_BILLABLE          ChargeItemStatusCode_Value = 3
	ChargeItemStatusCode_ABORTED               ChargeItemStatusCode_Value = 4
	ChargeItemStatusCode_BILLED                ChargeItemStatusCode_Value = 5
	ChargeItemStatusCode_ENTERED_IN_ERROR      ChargeItemStatusCode_Value = 6
	ChargeItemStatusCode_UNKNOWN               ChargeItemStatusCode_Value = 7
)

// Enum value maps for ChargeItemStatusCode_Value.
var (
	ChargeItemStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "BILLABLE",
		3: "NOT_BILLABLE",
		4: "ABORTED",
		5: "BILLED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	ChargeItemStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"BILLABLE":              2,
		"NOT_BILLABLE":          3,
		"ABORTED":               4,
		"BILLED":                5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x ChargeItemStatusCode_Value) Enum() *ChargeItemStatusCode_Value {
	p := new(ChargeItemStatusCode_Value)
	*p = x
	return p
}

func (x ChargeItemStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargeItemStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[42].Descriptor()
}

func (ChargeItemStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[42]
}

func (x ChargeItemStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargeItemStatusCode_Value.Descriptor instead.
func (ChargeItemStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{42, 0}
}

type ChoiceListOrientationCode_Value int32

const (
	ChoiceListOrientationCode_INVALID_UNINITIALIZED ChoiceListOrientationCode_Value = 0
	ChoiceListOrientationCode_HORIZONTAL            ChoiceListOrientationCode_Value = 1
	ChoiceListOrientationCode_VERTICAL              ChoiceListOrientationCode_Value = 2
)

// Enum value maps for ChoiceListOrientationCode_Value.
var (
	ChoiceListOrientationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HORIZONTAL",
		2: "VERTICAL",
	}
	ChoiceListOrientationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HORIZONTAL":            1,
		"VERTICAL":              2,
	}
)

func (x ChoiceListOrientationCode_Value) Enum() *ChoiceListOrientationCode_Value {
	p := new(ChoiceListOrientationCode_Value)
	*p = x
	return p
}

func (x ChoiceListOrientationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChoiceListOrientationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[43].Descriptor()
}

func (ChoiceListOrientationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[43]
}

func (x ChoiceListOrientationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChoiceListOrientationCode_Value.Descriptor instead.
func (ChoiceListOrientationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{43, 0}
}

type ClaimProcessingCode_Value int32

const (
	ClaimProcessingCode_INVALID_UNINITIALIZED ClaimProcessingCode_Value = 0
	ClaimProcessingCode_QUEUED                ClaimProcessingCode_Value = 1
	ClaimProcessingCode_COMPLETE              ClaimProcessingCode_Value = 2
	ClaimProcessingCode_ERROR                 ClaimProcessingCode_Value = 3
	ClaimProcessingCode_PARTIAL               ClaimProcessingCode_Value = 4
)

// Enum value maps for ClaimProcessingCode_Value.
var (
	ClaimProcessingCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "QUEUED",
		2: "COMPLETE",
		3: "ERROR",
		4: "PARTIAL",
	}
	ClaimProcessingCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"QUEUED":                1,
		"COMPLETE":              2,
		"ERROR":                 3,
		"PARTIAL":               4,
	}
)

func (x ClaimProcessingCode_Value) Enum() *ClaimProcessingCode_Value {
	p := new(ClaimProcessingCode_Value)
	*p = x
	return p
}

func (x ClaimProcessingCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClaimProcessingCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[44].Descriptor()
}

func (ClaimProcessingCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[44]
}

func (x ClaimProcessingCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClaimProcessingCode_Value.Descriptor instead.
func (ClaimProcessingCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{44, 0}
}

type CodeSearchSupportCode_Value int32

const (
	CodeSearchSupportCode_INVALID_UNINITIALIZED CodeSearchSupportCode_Value = 0
	CodeSearchSupportCode_EXPLICIT              CodeSearchSupportCode_Value = 1
	CodeSearchSupportCode_ALL                   CodeSearchSupportCode_Value = 2
)

// Enum value maps for CodeSearchSupportCode_Value.
var (
	CodeSearchSupportCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EXPLICIT",
		2: "ALL",
	}
	CodeSearchSupportCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EXPLICIT":              1,
		"ALL":                   2,
	}
)

func (x CodeSearchSupportCode_Value) Enum() *CodeSearchSupportCode_Value {
	p := new(CodeSearchSupportCode_Value)
	*p = x
	return p
}

func (x CodeSearchSupportCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSearchSupportCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[45].Descriptor()
}

func (CodeSearchSupportCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[45]
}

func (x CodeSearchSupportCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSearchSupportCode_Value.Descriptor instead.
func (CodeSearchSupportCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{45, 0}
}

type CodeSystemContentModeCode_Value int32

const (
	CodeSystemContentModeCode_INVALID_UNINITIALIZED CodeSystemContentModeCode_Value = 0
	CodeSystemContentModeCode_NOT_PRESENT           CodeSystemContentModeCode_Value = 1
	CodeSystemContentModeCode_EXAMPLE               CodeSystemContentModeCode_Value = 2
	CodeSystemContentModeCode_FRAGMENT              CodeSystemContentModeCode_Value = 3
	CodeSystemContentModeCode_COMPLETE              CodeSystemContentModeCode_Value = 4
	CodeSystemContentModeCode_SUPPLEMENT            CodeSystemContentModeCode_Value = 5
)

// Enum value maps for CodeSystemContentModeCode_Value.
var (
	CodeSystemContentModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_PRESENT",
		2: "EXAMPLE",
		3: "FRAGMENT",
		4: "COMPLETE",
		5: "SUPPLEMENT",
	}
	CodeSystemContentModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_PRESENT":           1,
		"EXAMPLE":               2,
		"FRAGMENT":              3,
		"COMPLETE":              4,
		"SUPPLEMENT":            5,
	}
)

func (x CodeSystemContentModeCode_Value) Enum() *CodeSystemContentModeCode_Value {
	p := new(CodeSystemContentModeCode_Value)
	*p = x
	return p
}

func (x CodeSystemContentModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSystemContentModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[46].Descriptor()
}

func (CodeSystemContentModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[46]
}

func (x CodeSystemContentModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSystemContentModeCode_Value.Descriptor instead.
func (CodeSystemContentModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{46, 0}
}

type CodeSystemHierarchyMeaningCode_Value int32

const (
	CodeSystemHierarchyMeaningCode_INVALID_UNINITIALIZED CodeSystemHierarchyMeaningCode_Value = 0
	CodeSystemHierarchyMeaningCode_GROUPED_BY            CodeSystemHierarchyMeaningCode_Value = 1
	CodeSystemHierarchyMeaningCode_IS_A                  CodeSystemHierarchyMeaningCode_Value = 2
	CodeSystemHierarchyMeaningCode_PART_OF               CodeSystemHierarchyMeaningCode_Value = 3
	CodeSystemHierarchyMeaningCode_CLASSIFIED_WITH       CodeSystemHierarchyMeaningCode_Value = 4
)

// Enum value maps for CodeSystemHierarchyMeaningCode_Value.
var (
	CodeSystemHierarchyMeaningCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GROUPED_BY",
		2: "IS_A",
		3: "PART_OF",
		4: "CLASSIFIED_WITH",
	}
	CodeSystemHierarchyMeaningCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GROUPED_BY":            1,
		"IS_A":                  2,
		"PART_OF":               3,
		"CLASSIFIED_WITH":       4,
	}
)

func (x CodeSystemHierarchyMeaningCode_Value) Enum() *CodeSystemHierarchyMeaningCode_Value {
	p := new(CodeSystemHierarchyMeaningCode_Value)
	*p = x
	return p
}

func (x CodeSystemHierarchyMeaningCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CodeSystemHierarchyMeaningCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[47].Descriptor()
}

func (CodeSystemHierarchyMeaningCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[47]
}

func (x CodeSystemHierarchyMeaningCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CodeSystemHierarchyMeaningCode_Value.Descriptor instead.
func (CodeSystemHierarchyMeaningCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{47, 0}
}

type CompartmentTypeCode_Value int32

const (
	CompartmentTypeCode_INVALID_UNINITIALIZED CompartmentTypeCode_Value = 0
	CompartmentTypeCode_PATIENT               CompartmentTypeCode_Value = 1
	CompartmentTypeCode_ENCOUNTER             CompartmentTypeCode_Value = 2
	CompartmentTypeCode_RELATED_PERSON        CompartmentTypeCode_Value = 3
	CompartmentTypeCode_PRACTITIONER          CompartmentTypeCode_Value = 4
	CompartmentTypeCode_DEVICE                CompartmentTypeCode_Value = 5
)

// Enum value maps for CompartmentTypeCode_Value.
var (
	CompartmentTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PATIENT",
		2: "ENCOUNTER",
		3: "RELATED_PERSON",
		4: "PRACTITIONER",
		5: "DEVICE",
	}
	CompartmentTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PATIENT":               1,
		"ENCOUNTER":             2,
		"RELATED_PERSON":        3,
		"PRACTITIONER":          4,
		"DEVICE":                5,
	}
)

func (x CompartmentTypeCode_Value) Enum() *CompartmentTypeCode_Value {
	p := new(CompartmentTypeCode_Value)
	*p = x
	return p
}

func (x CompartmentTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompartmentTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[48].Descriptor()
}

func (CompartmentTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[48]
}

func (x CompartmentTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompartmentTypeCode_Value.Descriptor instead.
func (CompartmentTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{48, 0}
}

type CompositionAttestationModeCode_Value int32

const (
	CompositionAttestationModeCode_INVALID_UNINITIALIZED CompositionAttestationModeCode_Value = 0
	CompositionAttestationModeCode_PERSONAL              CompositionAttestationModeCode_Value = 1
	CompositionAttestationModeCode_PROFESSIONAL          CompositionAttestationModeCode_Value = 2
	CompositionAttestationModeCode_LEGAL                 CompositionAttestationModeCode_Value = 3
	CompositionAttestationModeCode_OFFICIAL              CompositionAttestationModeCode_Value = 4
)

// Enum value maps for CompositionAttestationModeCode_Value.
var (
	CompositionAttestationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PERSONAL",
		2: "PROFESSIONAL",
		3: "LEGAL",
		4: "OFFICIAL",
	}
	CompositionAttestationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERSONAL":              1,
		"PROFESSIONAL":          2,
		"LEGAL":                 3,
		"OFFICIAL":              4,
	}
)

func (x CompositionAttestationModeCode_Value) Enum() *CompositionAttestationModeCode_Value {
	p := new(CompositionAttestationModeCode_Value)
	*p = x
	return p
}

func (x CompositionAttestationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositionAttestationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[49].Descriptor()
}

func (CompositionAttestationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[49]
}

func (x CompositionAttestationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositionAttestationModeCode_Value.Descriptor instead.
func (CompositionAttestationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{49, 0}
}

type CompositionStatusCode_Value int32

const (
	CompositionStatusCode_INVALID_UNINITIALIZED CompositionStatusCode_Value = 0
	CompositionStatusCode_PRELIMINARY           CompositionStatusCode_Value = 1
	CompositionStatusCode_FINAL                 CompositionStatusCode_Value = 2
	CompositionStatusCode_AMENDED               CompositionStatusCode_Value = 3
	CompositionStatusCode_ENTERED_IN_ERROR      CompositionStatusCode_Value = 4
)

// Enum value maps for CompositionStatusCode_Value.
var (
	CompositionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRELIMINARY",
		2: "FINAL",
		3: "AMENDED",
		4: "ENTERED_IN_ERROR",
	}
	CompositionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRELIMINARY":           1,
		"FINAL":                 2,
		"AMENDED":               3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x CompositionStatusCode_Value) Enum() *CompositionStatusCode_Value {
	p := new(CompositionStatusCode_Value)
	*p = x
	return p
}

func (x CompositionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[50].Descriptor()
}

func (CompositionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[50]
}

func (x CompositionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositionStatusCode_Value.Descriptor instead.
func (CompositionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{50, 0}
}

type ConceptMapEquivalenceCode_Value int32

const (
	ConceptMapEquivalenceCode_INVALID_UNINITIALIZED ConceptMapEquivalenceCode_Value = 0
	ConceptMapEquivalenceCode_RELATEDTO             ConceptMapEquivalenceCode_Value = 1
	ConceptMapEquivalenceCode_EQUIVALENT            ConceptMapEquivalenceCode_Value = 2
	ConceptMapEquivalenceCode_EQUAL                 ConceptMapEquivalenceCode_Value = 3
	ConceptMapEquivalenceCode_WIDER                 ConceptMapEquivalenceCode_Value = 4
	ConceptMapEquivalenceCode_SUBSUMES              ConceptMapEquivalenceCode_Value = 5
	ConceptMapEquivalenceCode_NARROWER              ConceptMapEquivalenceCode_Value = 6
	ConceptMapEquivalenceCode_SPECIALIZES           ConceptMapEquivalenceCode_Value = 7
	ConceptMapEquivalenceCode_INEXACT               ConceptMapEquivalenceCode_Value = 8
	ConceptMapEquivalenceCode_UNMATCHED             ConceptMapEquivalenceCode_Value = 9
	ConceptMapEquivalenceCode_DISJOINT              ConceptMapEquivalenceCode_Value = 10
)

// Enum value maps for ConceptMapEquivalenceCode_Value.
var (
	ConceptMapEquivalenceCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "RELATEDTO",
		2:  "EQUIVALENT",
		3:  "EQUAL",
		4:  "WIDER",
		5:  "SUBSUMES",
		6:  "NARROWER",
		7:  "SPECIALIZES",
		8:  "INEXACT",
		9:  "UNMATCHED",
		10: "DISJOINT",
	}
	ConceptMapEquivalenceCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RELATEDTO":             1,
		"EQUIVALENT":            2,
		"EQUAL":                 3,
		"WIDER":                 4,
		"SUBSUMES":              5,
		"NARROWER":              6,
		"SPECIALIZES":           7,
		"INEXACT":               8,
		"UNMATCHED":             9,
		"DISJOINT":              10,
	}
)

func (x ConceptMapEquivalenceCode_Value) Enum() *ConceptMapEquivalenceCode_Value {
	p := new(ConceptMapEquivalenceCode_Value)
	*p = x
	return p
}

func (x ConceptMapEquivalenceCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConceptMapEquivalenceCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[51].Descriptor()
}

func (ConceptMapEquivalenceCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[51]
}

func (x ConceptMapEquivalenceCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConceptMapEquivalenceCode_Value.Descriptor instead.
func (ConceptMapEquivalenceCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{51, 0}
}

type ConceptMapGroupUnmappedModeCode_Value int32

const (
	ConceptMapGroupUnmappedModeCode_INVALID_UNINITIALIZED ConceptMapGroupUnmappedModeCode_Value = 0
	ConceptMapGroupUnmappedModeCode_PROVIDED              ConceptMapGroupUnmappedModeCode_Value = 1
	ConceptMapGroupUnmappedModeCode_FIXED                 ConceptMapGroupUnmappedModeCode_Value = 2
	ConceptMapGroupUnmappedModeCode_OTHER_MAP             ConceptMapGroupUnmappedModeCode_Value = 3
)

// Enum value maps for ConceptMapGroupUnmappedModeCode_Value.
var (
	ConceptMapGroupUnmappedModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROVIDED",
		2: "FIXED",
		3: "OTHER_MAP",
	}
	ConceptMapGroupUnmappedModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROVIDED":              1,
		"FIXED":                 2,
		"OTHER_MAP":             3,
	}
)

func (x ConceptMapGroupUnmappedModeCode_Value) Enum() *ConceptMapGroupUnmappedModeCode_Value {
	p := new(ConceptMapGroupUnmappedModeCode_Value)
	*p = x
	return p
}

func (x ConceptMapGroupUnmappedModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConceptMapGroupUnmappedModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[52].Descriptor()
}

func (ConceptMapGroupUnmappedModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[52]
}

func (x ConceptMapGroupUnmappedModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConceptMapGroupUnmappedModeCode_Value.Descriptor instead.
func (ConceptMapGroupUnmappedModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{52, 0}
}

type ConditionClinicalStatusCode_Value int32

const (
	ConditionClinicalStatusCode_INVALID_UNINITIALIZED ConditionClinicalStatusCode_Value = 0
	ConditionClinicalStatusCode_ACTIVE                ConditionClinicalStatusCode_Value = 1
	ConditionClinicalStatusCode_RECURRENCE            ConditionClinicalStatusCode_Value = 2
	ConditionClinicalStatusCode_RELAPSE               ConditionClinicalStatusCode_Value = 3
	ConditionClinicalStatusCode_INACTIVE              ConditionClinicalStatusCode_Value = 4
	ConditionClinicalStatusCode_REMISSION             ConditionClinicalStatusCode_Value = 5
	ConditionClinicalStatusCode_RESOLVED              ConditionClinicalStatusCode_Value = 6
)

// Enum value maps for ConditionClinicalStatusCode_Value.
var (
	ConditionClinicalStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "RECURRENCE",
		3: "RELAPSE",
		4: "INACTIVE",
		5: "REMISSION",
		6: "RESOLVED",
	}
	ConditionClinicalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"RECURRENCE":            2,
		"RELAPSE":               3,
		"INACTIVE":              4,
		"REMISSION":             5,
		"RESOLVED":              6,
	}
)

func (x ConditionClinicalStatusCode_Value) Enum() *ConditionClinicalStatusCode_Value {
	p := new(ConditionClinicalStatusCode_Value)
	*p = x
	return p
}

func (x ConditionClinicalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionClinicalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[53].Descriptor()
}

func (ConditionClinicalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[53]
}

func (x ConditionClinicalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionClinicalStatusCode_Value.Descriptor instead.
func (ConditionClinicalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{53, 0}
}

type ConditionVerificationStatusCode_Value int32

const (
	ConditionVerificationStatusCode_INVALID_UNINITIALIZED ConditionVerificationStatusCode_Value = 0
	ConditionVerificationStatusCode_UNCONFIRMED           ConditionVerificationStatusCode_Value = 1
	ConditionVerificationStatusCode_PROVISIONAL           ConditionVerificationStatusCode_Value = 2
	ConditionVerificationStatusCode_DIFFERENTIAL          ConditionVerificationStatusCode_Value = 3
	ConditionVerificationStatusCode_CONFIRMED             ConditionVerificationStatusCode_Value = 4
	ConditionVerificationStatusCode_REFUTED               ConditionVerificationStatusCode_Value = 5
	ConditionVerificationStatusCode_ENTERED_IN_ERROR      ConditionVerificationStatusCode_Value = 6
)

// Enum value maps for ConditionVerificationStatusCode_Value.
var (
	ConditionVerificationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNCONFIRMED",
		2: "PROVISIONAL",
		3: "DIFFERENTIAL",
		4: "CONFIRMED",
		5: "REFUTED",
		6: "ENTERED_IN_ERROR",
	}
	ConditionVerificationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNCONFIRMED":           1,
		"PROVISIONAL":           2,
		"DIFFERENTIAL":          3,
		"CONFIRMED":             4,
		"REFUTED":               5,
		"ENTERED_IN_ERROR":      6,
	}
)

func (x ConditionVerificationStatusCode_Value) Enum() *ConditionVerificationStatusCode_Value {
	p := new(ConditionVerificationStatusCode_Value)
	*p = x
	return p
}

func (x ConditionVerificationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionVerificationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[54].Descriptor()
}

func (ConditionVerificationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[54]
}

func (x ConditionVerificationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionVerificationStatusCode_Value.Descriptor instead.
func (ConditionVerificationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{54, 0}
}

type ConditionalDeleteStatusCode_Value int32

const (
	ConditionalDeleteStatusCode_INVALID_UNINITIALIZED ConditionalDeleteStatusCode_Value = 0
	ConditionalDeleteStatusCode_NOT_SUPPORTED         ConditionalDeleteStatusCode_Value = 1
	ConditionalDeleteStatusCode_SINGLE                ConditionalDeleteStatusCode_Value = 2
	ConditionalDeleteStatusCode_MULTIPLE              ConditionalDeleteStatusCode_Value = 3
)

// Enum value maps for ConditionalDeleteStatusCode_Value.
var (
	ConditionalDeleteStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_SUPPORTED",
		2: "SINGLE",
		3: "MULTIPLE",
	}
	ConditionalDeleteStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_SUPPORTED":         1,
		"SINGLE":                2,
		"MULTIPLE":              3,
	}
)

func (x ConditionalDeleteStatusCode_Value) Enum() *ConditionalDeleteStatusCode_Value {
	p := new(ConditionalDeleteStatusCode_Value)
	*p = x
	return p
}

func (x ConditionalDeleteStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionalDeleteStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[55].Descriptor()
}

func (ConditionalDeleteStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[55]
}

func (x ConditionalDeleteStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionalDeleteStatusCode_Value.Descriptor instead.
func (ConditionalDeleteStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{55, 0}
}

type ConditionalReadStatusCode_Value int32

const (
	ConditionalReadStatusCode_INVALID_UNINITIALIZED ConditionalReadStatusCode_Value = 0
	ConditionalReadStatusCode_NOT_SUPPORTED         ConditionalReadStatusCode_Value = 1
	ConditionalReadStatusCode_MODIFIED_SINCE        ConditionalReadStatusCode_Value = 2
	ConditionalReadStatusCode_NOT_MATCH             ConditionalReadStatusCode_Value = 3
	ConditionalReadStatusCode_FULL_SUPPORT          ConditionalReadStatusCode_Value = 4
)

// Enum value maps for ConditionalReadStatusCode_Value.
var (
	ConditionalReadStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_SUPPORTED",
		2: "MODIFIED_SINCE",
		3: "NOT_MATCH",
		4: "FULL_SUPPORT",
	}
	ConditionalReadStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_SUPPORTED":         1,
		"MODIFIED_SINCE":        2,
		"NOT_MATCH":             3,
		"FULL_SUPPORT":          4,
	}
)

func (x ConditionalReadStatusCode_Value) Enum() *ConditionalReadStatusCode_Value {
	p := new(ConditionalReadStatusCode_Value)
	*p = x
	return p
}

func (x ConditionalReadStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConditionalReadStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[56].Descriptor()
}

func (ConditionalReadStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[56]
}

func (x ConditionalReadStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConditionalReadStatusCode_Value.Descriptor instead.
func (ConditionalReadStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{56, 0}
}

type ConformanceExpectationCode_Value int32

const (
	ConformanceExpectationCode_INVALID_UNINITIALIZED ConformanceExpectationCode_Value = 0
	ConformanceExpectationCode_SHALL                 ConformanceExpectationCode_Value = 1
	ConformanceExpectationCode_SHOULD                ConformanceExpectationCode_Value = 2
	ConformanceExpectationCode_MAY                   ConformanceExpectationCode_Value = 3
	ConformanceExpectationCode_SHOULD_NOT            ConformanceExpectationCode_Value = 4
)

// Enum value maps for ConformanceExpectationCode_Value.
var (
	ConformanceExpectationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SHALL",
		2: "SHOULD",
		3: "MAY",
		4: "SHOULD_NOT",
	}
	ConformanceExpectationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SHALL":                 1,
		"SHOULD":                2,
		"MAY":                   3,
		"SHOULD_NOT":            4,
	}
)

func (x ConformanceExpectationCode_Value) Enum() *ConformanceExpectationCode_Value {
	p := new(ConformanceExpectationCode_Value)
	*p = x
	return p
}

func (x ConformanceExpectationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConformanceExpectationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[57].Descriptor()
}

func (ConformanceExpectationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[57]
}

func (x ConformanceExpectationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConformanceExpectationCode_Value.Descriptor instead.
func (ConformanceExpectationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{57, 0}
}

type ConsentDataMeaningCode_Value int32

const (
	ConsentDataMeaningCode_INVALID_UNINITIALIZED ConsentDataMeaningCode_Value = 0
	ConsentDataMeaningCode_INSTANCE              ConsentDataMeaningCode_Value = 1
	ConsentDataMeaningCode_RELATED               ConsentDataMeaningCode_Value = 2
	ConsentDataMeaningCode_DEPENDENTS            ConsentDataMeaningCode_Value = 3
	ConsentDataMeaningCode_AUTHOREDBY            ConsentDataMeaningCode_Value = 4
)

// Enum value maps for ConsentDataMeaningCode_Value.
var (
	ConsentDataMeaningCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "RELATED",
		3: "DEPENDENTS",
		4: "AUTHOREDBY",
	}
	ConsentDataMeaningCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"RELATED":               2,
		"DEPENDENTS":            3,
		"AUTHOREDBY":            4,
	}
)

func (x ConsentDataMeaningCode_Value) Enum() *ConsentDataMeaningCode_Value {
	p := new(ConsentDataMeaningCode_Value)
	*p = x
	return p
}

func (x ConsentDataMeaningCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentDataMeaningCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[58].Descriptor()
}

func (ConsentDataMeaningCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[58]
}

func (x ConsentDataMeaningCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentDataMeaningCode_Value.Descriptor instead.
func (ConsentDataMeaningCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{58, 0}
}

type ConsentProvisionTypeCode_Value int32

const (
	ConsentProvisionTypeCode_INVALID_UNINITIALIZED ConsentProvisionTypeCode_Value = 0
	ConsentProvisionTypeCode_DENY                  ConsentProvisionTypeCode_Value = 1
	ConsentProvisionTypeCode_PERMIT                ConsentProvisionTypeCode_Value = 2
)

// Enum value maps for ConsentProvisionTypeCode_Value.
var (
	ConsentProvisionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DENY",
		2: "PERMIT",
	}
	ConsentProvisionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DENY":                  1,
		"PERMIT":                2,
	}
)

func (x ConsentProvisionTypeCode_Value) Enum() *ConsentProvisionTypeCode_Value {
	p := new(ConsentProvisionTypeCode_Value)
	*p = x
	return p
}

func (x ConsentProvisionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentProvisionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[59].Descriptor()
}

func (ConsentProvisionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[59]
}

func (x ConsentProvisionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentProvisionTypeCode_Value.Descriptor instead.
func (ConsentProvisionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{59, 0}
}

type ConsentStateCode_Value int32

const (
	ConsentStateCode_INVALID_UNINITIALIZED ConsentStateCode_Value = 0
	ConsentStateCode_DRAFT                 ConsentStateCode_Value = 1
	ConsentStateCode_PROPOSED              ConsentStateCode_Value = 2
	ConsentStateCode_ACTIVE                ConsentStateCode_Value = 3
	ConsentStateCode_REJECTED              ConsentStateCode_Value = 4
	ConsentStateCode_INACTIVE              ConsentStateCode_Value = 5
	ConsentStateCode_ENTERED_IN_ERROR      ConsentStateCode_Value = 6
)

// Enum value maps for ConsentStateCode_Value.
var (
	ConsentStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "PROPOSED",
		3: "ACTIVE",
		4: "REJECTED",
		5: "INACTIVE",
		6: "ENTERED_IN_ERROR",
	}
	ConsentStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"PROPOSED":              2,
		"ACTIVE":                3,
		"REJECTED":              4,
		"INACTIVE":              5,
		"ENTERED_IN_ERROR":      6,
	}
)

func (x ConsentStateCode_Value) Enum() *ConsentStateCode_Value {
	p := new(ConsentStateCode_Value)
	*p = x
	return p
}

func (x ConsentStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsentStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[60].Descriptor()
}

func (ConsentStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[60]
}

func (x ConsentStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsentStateCode_Value.Descriptor instead.
func (ConsentStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{60, 0}
}

type ConstraintSeverityCode_Value int32

const (
	ConstraintSeverityCode_INVALID_UNINITIALIZED ConstraintSeverityCode_Value = 0
	ConstraintSeverityCode_ERROR                 ConstraintSeverityCode_Value = 1
	ConstraintSeverityCode_WARNING               ConstraintSeverityCode_Value = 2
)

// Enum value maps for ConstraintSeverityCode_Value.
var (
	ConstraintSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ERROR",
		2: "WARNING",
	}
	ConstraintSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ERROR":                 1,
		"WARNING":               2,
	}
)

func (x ConstraintSeverityCode_Value) Enum() *ConstraintSeverityCode_Value {
	p := new(ConstraintSeverityCode_Value)
	*p = x
	return p
}

func (x ConstraintSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstraintSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[61].Descriptor()
}

func (ConstraintSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[61]
}

func (x ConstraintSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstraintSeverityCode_Value.Descriptor instead.
func (ConstraintSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{61, 0}
}

type ContactPointSystemCode_Value int32

const (
	ContactPointSystemCode_INVALID_UNINITIALIZED ContactPointSystemCode_Value = 0
	ContactPointSystemCode_PHONE                 ContactPointSystemCode_Value = 1
	ContactPointSystemCode_FAX                   ContactPointSystemCode_Value = 2
	ContactPointSystemCode_EMAIL                 ContactPointSystemCode_Value = 3
	ContactPointSystemCode_PAGER                 ContactPointSystemCode_Value = 4
	ContactPointSystemCode_URL                   ContactPointSystemCode_Value = 5
	ContactPointSystemCode_SMS                   ContactPointSystemCode_Value = 6
	ContactPointSystemCode_OTHER                 ContactPointSystemCode_Value = 7
)

// Enum value maps for ContactPointSystemCode_Value.
var (
	ContactPointSystemCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PHONE",
		2: "FAX",
		3: "EMAIL",
		4: "PAGER",
		5: "URL",
		6: "SMS",
		7: "OTHER",
	}
	ContactPointSystemCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PHONE":                 1,
		"FAX":                   2,
		"EMAIL":                 3,
		"PAGER":                 4,
		"URL":                   5,
		"SMS":                   6,
		"OTHER":                 7,
	}
)

func (x ContactPointSystemCode_Value) Enum() *ContactPointSystemCode_Value {
	p := new(ContactPointSystemCode_Value)
	*p = x
	return p
}

func (x ContactPointSystemCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactPointSystemCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[62].Descriptor()
}

func (ContactPointSystemCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[62]
}

func (x ContactPointSystemCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactPointSystemCode_Value.Descriptor instead.
func (ContactPointSystemCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{62, 0}
}

type ContactPointUseCode_Value int32

const (
	ContactPointUseCode_INVALID_UNINITIALIZED ContactPointUseCode_Value = 0
	ContactPointUseCode_HOME                  ContactPointUseCode_Value = 1
	ContactPointUseCode_WORK                  ContactPointUseCode_Value = 2
	ContactPointUseCode_TEMP                  ContactPointUseCode_Value = 3
	ContactPointUseCode_OLD                   ContactPointUseCode_Value = 4
	ContactPointUseCode_MOBILE                ContactPointUseCode_Value = 5
)

// Enum value maps for ContactPointUseCode_Value.
var (
	ContactPointUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HOME",
		2: "WORK",
		3: "TEMP",
		4: "OLD",
		5: "MOBILE",
	}
	ContactPointUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HOME":                  1,
		"WORK":                  2,
		"TEMP":                  3,
		"OLD":                   4,
		"MOBILE":                5,
	}
)

func (x ContactPointUseCode_Value) Enum() *ContactPointUseCode_Value {
	p := new(ContactPointUseCode_Value)
	*p = x
	return p
}

func (x ContactPointUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactPointUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[63].Descriptor()
}

func (ContactPointUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[63]
}

func (x ContactPointUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactPointUseCode_Value.Descriptor instead.
func (ContactPointUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{63, 0}
}

type ContractResourcePublicationStatusCode_Value int32

const (
	ContractResourcePublicationStatusCode_INVALID_UNINITIALIZED ContractResourcePublicationStatusCode_Value = 0
	ContractResourcePublicationStatusCode_AMENDED               ContractResourcePublicationStatusCode_Value = 1
	ContractResourcePublicationStatusCode_APPENDED              ContractResourcePublicationStatusCode_Value = 2
	ContractResourcePublicationStatusCode_CANCELLED             ContractResourcePublicationStatusCode_Value = 3
	ContractResourcePublicationStatusCode_DISPUTED              ContractResourcePublicationStatusCode_Value = 4
	ContractResourcePublicationStatusCode_ENTERED_IN_ERROR      ContractResourcePublicationStatusCode_Value = 5
	ContractResourcePublicationStatusCode_EXECUTABLE            ContractResourcePublicationStatusCode_Value = 6
	ContractResourcePublicationStatusCode_EXECUTED              ContractResourcePublicationStatusCode_Value = 7
	ContractResourcePublicationStatusCode_NEGOTIABLE            ContractResourcePublicationStatusCode_Value = 8
	ContractResourcePublicationStatusCode_OFFERED               ContractResourcePublicationStatusCode_Value = 9
	ContractResourcePublicationStatusCode_POLICY                ContractResourcePublicationStatusCode_Value = 10
	ContractResourcePublicationStatusCode_REJECTED              ContractResourcePublicationStatusCode_Value = 11
	ContractResourcePublicationStatusCode_RENEWED               ContractResourcePublicationStatusCode_Value = 12
	ContractResourcePublicationStatusCode_REVOKED               ContractResourcePublicationStatusCode_Value = 13
	ContractResourcePublicationStatusCode_RESOLVED              ContractResourcePublicationStatusCode_Value = 14
	ContractResourcePublicationStatusCode_TERMINATED            ContractResourcePublicationStatusCode_Value = 15
)

// Enum value maps for ContractResourcePublicationStatusCode_Value.
var (
	ContractResourcePublicationStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "AMENDED",
		2:  "APPENDED",
		3:  "CANCELLED",
		4:  "DISPUTED",
		5:  "ENTERED_IN_ERROR",
		6:  "EXECUTABLE",
		7:  "EXECUTED",
		8:  "NEGOTIABLE",
		9:  "OFFERED",
		10: "POLICY",
		11: "REJECTED",
		12: "RENEWED",
		13: "REVOKED",
		14: "RESOLVED",
		15: "TERMINATED",
	}
	ContractResourcePublicationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AMENDED":               1,
		"APPENDED":              2,
		"CANCELLED":             3,
		"DISPUTED":              4,
		"ENTERED_IN_ERROR":      5,
		"EXECUTABLE":            6,
		"EXECUTED":              7,
		"NEGOTIABLE":            8,
		"OFFERED":               9,
		"POLICY":                10,
		"REJECTED":              11,
		"RENEWED":               12,
		"REVOKED":               13,
		"RESOLVED":              14,
		"TERMINATED":            15,
	}
)

func (x ContractResourcePublicationStatusCode_Value) Enum() *ContractResourcePublicationStatusCode_Value {
	p := new(ContractResourcePublicationStatusCode_Value)
	*p = x
	return p
}

func (x ContractResourcePublicationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractResourcePublicationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[64].Descriptor()
}

func (ContractResourcePublicationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[64]
}

func (x ContractResourcePublicationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractResourcePublicationStatusCode_Value.Descriptor instead.
func (ContractResourcePublicationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{64, 0}
}

type ContractResourceStatusCode_Value int32

const (
	ContractResourceStatusCode_INVALID_UNINITIALIZED ContractResourceStatusCode_Value = 0
	ContractResourceStatusCode_AMENDED               ContractResourceStatusCode_Value = 1
	ContractResourceStatusCode_APPENDED              ContractResourceStatusCode_Value = 2
	ContractResourceStatusCode_CANCELLED             ContractResourceStatusCode_Value = 3
	ContractResourceStatusCode_DISPUTED              ContractResourceStatusCode_Value = 4
	ContractResourceStatusCode_ENTERED_IN_ERROR      ContractResourceStatusCode_Value = 5
	ContractResourceStatusCode_EXECUTABLE            ContractResourceStatusCode_Value = 6
	ContractResourceStatusCode_EXECUTED              ContractResourceStatusCode_Value = 7
	ContractResourceStatusCode_NEGOTIABLE            ContractResourceStatusCode_Value = 8
	ContractResourceStatusCode_OFFERED               ContractResourceStatusCode_Value = 9
	ContractResourceStatusCode_POLICY                ContractResourceStatusCode_Value = 10
	ContractResourceStatusCode_REJECTED              ContractResourceStatusCode_Value = 11
	ContractResourceStatusCode_RENEWED               ContractResourceStatusCode_Value = 12
	ContractResourceStatusCode_REVOKED               ContractResourceStatusCode_Value = 13
	ContractResourceStatusCode_RESOLVED              ContractResourceStatusCode_Value = 14
	ContractResourceStatusCode_TERMINATED            ContractResourceStatusCode_Value = 15
)

// Enum value maps for ContractResourceStatusCode_Value.
var (
	ContractResourceStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "AMENDED",
		2:  "APPENDED",
		3:  "CANCELLED",
		4:  "DISPUTED",
		5:  "ENTERED_IN_ERROR",
		6:  "EXECUTABLE",
		7:  "EXECUTED",
		8:  "NEGOTIABLE",
		9:  "OFFERED",
		10: "POLICY",
		11: "REJECTED",
		12: "RENEWED",
		13: "REVOKED",
		14: "RESOLVED",
		15: "TERMINATED",
	}
	ContractResourceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AMENDED":               1,
		"APPENDED":              2,
		"CANCELLED":             3,
		"DISPUTED":              4,
		"ENTERED_IN_ERROR":      5,
		"EXECUTABLE":            6,
		"EXECUTED":              7,
		"NEGOTIABLE":            8,
		"OFFERED":               9,
		"POLICY":                10,
		"REJECTED":              11,
		"RENEWED":               12,
		"REVOKED":               13,
		"RESOLVED":              14,
		"TERMINATED":            15,
	}
)

func (x ContractResourceStatusCode_Value) Enum() *ContractResourceStatusCode_Value {
	p := new(ContractResourceStatusCode_Value)
	*p = x
	return p
}

func (x ContractResourceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractResourceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[65].Descriptor()
}

func (ContractResourceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[65]
}

func (x ContractResourceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractResourceStatusCode_Value.Descriptor instead.
func (ContractResourceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{65, 0}
}

type ContributorTypeCode_Value int32

const (
	ContributorTypeCode_INVALID_UNINITIALIZED ContributorTypeCode_Value = 0
	ContributorTypeCode_AUTHOR                ContributorTypeCode_Value = 1
	ContributorTypeCode_EDITOR                ContributorTypeCode_Value = 2
	ContributorTypeCode_REVIEWER              ContributorTypeCode_Value = 3
	ContributorTypeCode_ENDORSER              ContributorTypeCode_Value = 4
)

// Enum value maps for ContributorTypeCode_Value.
var (
	ContributorTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AUTHOR",
		2: "EDITOR",
		3: "REVIEWER",
		4: "ENDORSER",
	}
	ContributorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AUTHOR":                1,
		"EDITOR":                2,
		"REVIEWER":              3,
		"ENDORSER":              4,
	}
)

func (x ContributorTypeCode_Value) Enum() *ContributorTypeCode_Value {
	p := new(ContributorTypeCode_Value)
	*p = x
	return p
}

func (x ContributorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContributorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[66].Descriptor()
}

func (ContributorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[66]
}

func (x ContributorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContributorTypeCode_Value.Descriptor instead.
func (ContributorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{66, 0}
}

type DataAbsentReasonCode_Value int32

const (
	DataAbsentReasonCode_INVALID_UNINITIALIZED DataAbsentReasonCode_Value = 0
	DataAbsentReasonCode_UNKNOWN               DataAbsentReasonCode_Value = 1
	DataAbsentReasonCode_ASKED_UNKNOWN         DataAbsentReasonCode_Value = 2
	DataAbsentReasonCode_TEMP_UNKNOWN          DataAbsentReasonCode_Value = 3
	DataAbsentReasonCode_NOT_ASKED             DataAbsentReasonCode_Value = 4
	DataAbsentReasonCode_ASKED_DECLINED        DataAbsentReasonCode_Value = 5
	DataAbsentReasonCode_MASKED                DataAbsentReasonCode_Value = 6
	DataAbsentReasonCode_NOT_APPLICABLE        DataAbsentReasonCode_Value = 7
	DataAbsentReasonCode_UNSUPPORTED           DataAbsentReasonCode_Value = 8
	DataAbsentReasonCode_AS_TEXT               DataAbsentReasonCode_Value = 9
	DataAbsentReasonCode_ERROR                 DataAbsentReasonCode_Value = 10
	DataAbsentReasonCode_NOT_A_NUMBER          DataAbsentReasonCode_Value = 11
	DataAbsentReasonCode_NEGATIVE_INFINITY     DataAbsentReasonCode_Value = 12
	DataAbsentReasonCode_POSITIVE_INFINITY     DataAbsentReasonCode_Value = 13
	DataAbsentReasonCode_NOT_PERFORMED         DataAbsentReasonCode_Value = 14
	DataAbsentReasonCode_NOT_PERMITTED         DataAbsentReasonCode_Value = 15
)

// Enum value maps for DataAbsentReasonCode_Value.
var (
	DataAbsentReasonCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "UNKNOWN",
		2:  "ASKED_UNKNOWN",
		3:  "TEMP_UNKNOWN",
		4:  "NOT_ASKED",
		5:  "ASKED_DECLINED",
		6:  "MASKED",
		7:  "NOT_APPLICABLE",
		8:  "UNSUPPORTED",
		9:  "AS_TEXT",
		10: "ERROR",
		11: "NOT_A_NUMBER",
		12: "NEGATIVE_INFINITY",
		13: "POSITIVE_INFINITY",
		14: "NOT_PERFORMED",
		15: "NOT_PERMITTED",
	}
	DataAbsentReasonCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNKNOWN":               1,
		"ASKED_UNKNOWN":         2,
		"TEMP_UNKNOWN":          3,
		"NOT_ASKED":             4,
		"ASKED_DECLINED":        5,
		"MASKED":                6,
		"NOT_APPLICABLE":        7,
		"UNSUPPORTED":           8,
		"AS_TEXT":               9,
		"ERROR":                 10,
		"NOT_A_NUMBER":          11,
		"NEGATIVE_INFINITY":     12,
		"POSITIVE_INFINITY":     13,
		"NOT_PERFORMED":         14,
		"NOT_PERMITTED":         15,
	}
)

func (x DataAbsentReasonCode_Value) Enum() *DataAbsentReasonCode_Value {
	p := new(DataAbsentReasonCode_Value)
	*p = x
	return p
}

func (x DataAbsentReasonCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataAbsentReasonCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[67].Descriptor()
}

func (DataAbsentReasonCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[67]
}

func (x DataAbsentReasonCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataAbsentReasonCode_Value.Descriptor instead.
func (DataAbsentReasonCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{67, 0}
}

type DataTypeCode_Value int32

const (
	DataTypeCode_INVALID_UNINITIALIZED DataTypeCode_Value = 0
	DataTypeCode_ADDRESS               DataTypeCode_Value = 1
	DataTypeCode_AGE                   DataTypeCode_Value = 2
	DataTypeCode_ANNOTATION            DataTypeCode_Value = 3
	DataTypeCode_ATTACHMENT            DataTypeCode_Value = 4
	DataTypeCode_BACKBONE_ELEMENT      DataTypeCode_Value = 5
	DataTypeCode_CODEABLE_CONCEPT      DataTypeCode_Value = 6
	DataTypeCode_CODING                DataTypeCode_Value = 7
	DataTypeCode_CONTACT_DETAIL        DataTypeCode_Value = 8
	DataTypeCode_CONTACT_POINT         DataTypeCode_Value = 9
	DataTypeCode_CONTRIBUTOR           DataTypeCode_Value = 10
	DataTypeCode_COUNT                 DataTypeCode_Value = 11
	DataTypeCode_DATA_REQUIREMENT      DataTypeCode_Value = 12
	DataTypeCode_DISTANCE              DataTypeCode_Value = 13
	DataTypeCode_DOSAGE                DataTypeCode_Value = 14
	DataTypeCode_DURATION              DataTypeCode_Value = 15
	DataTypeCode_ELEMENT               DataTypeCode_Value = 16
	DataTypeCode_ELEMENT_DEFINITION    DataTypeCode_Value = 17
	DataTypeCode_EXPRESSION            DataTypeCode_Value = 18
	DataTypeCode_EXTENSION             DataTypeCode_Value = 19
	DataTypeCode_HUMAN_NAME            DataTypeCode_Value = 20
	DataTypeCode_IDENTIFIER            DataTypeCode_Value = 21
	DataTypeCode_MARKETING_STATUS      DataTypeCode_Value = 22
	DataTypeCode_META                  DataTypeCode_Value = 23
	DataTypeCode_MONEY                 DataTypeCode_Value = 24
	DataTypeCode_MONEY_QUANTITY        DataTypeCode_Value = 25
	DataTypeCode_NARRATIVE             DataTypeCode_Value = 26
	DataTypeCode_PARAMETER_DEFINITION  DataTypeCode_Value = 27
	DataTypeCode_PERIOD                DataTypeCode_Value = 28
	DataTypeCode_POPULATION            DataTypeCode_Value = 29
	DataTypeCode_PROD_CHARACTERISTIC   DataTypeCode_Value = 30
	DataTypeCode_PRODUCT_SHELF_LIFE    DataTypeCode_Value = 31
	DataTypeCode_QUANTITY              DataTypeCode_Value = 32
	DataTypeCode_RANGE                 DataTypeCode_Value = 33
	DataTypeCode_RATIO                 DataTypeCode_Value = 34
	DataTypeCode_REFERENCE             DataTypeCode_Value = 35
	DataTypeCode_RELATED_ARTIFACT      DataTypeCode_Value = 36
	DataTypeCode_SAMPLED_DATA          DataTypeCode_Value = 37
	DataTypeCode_SIGNATURE             DataTypeCode_Value = 38
	DataTypeCode_SIMPLE_QUANTITY       DataTypeCode_Value = 39
	DataTypeCode_SUBSTANCE_AMOUNT      DataTypeCode_Value = 40
	DataTypeCode_TIMING                DataTypeCode_Value = 41
	DataTypeCode_TRIGGER_DEFINITION    DataTypeCode_Value = 42
	DataTypeCode_USAGE_CONTEXT         DataTypeCode_Value = 43
	DataTypeCode_BASE64_BINARY         DataTypeCode_Value = 44
	DataTypeCode_BOOLEAN               DataTypeCode_Value = 45
	DataTypeCode_CANONICAL             DataTypeCode_Value = 46
	DataTypeCode_CODE                  DataTypeCode_Value = 47
	DataTypeCode_DATE                  DataTypeCode_Value = 48
	DataTypeCode_DATE_TIME             DataTypeCode_Value = 49
	DataTypeCode_DECIMAL               DataTypeCode_Value = 50
	DataTypeCode_ID                    DataTypeCode_Value = 51
	DataTypeCode_INSTANT               DataTypeCode_Value = 52
	DataTypeCode_INTEGER               DataTypeCode_Value = 53
	DataTypeCode_MARKDOWN              DataTypeCode_Value = 54
	DataTypeCode_OID                   DataTypeCode_Value = 55
	DataTypeCode_POSITIVE_INT          DataTypeCode_Value = 56
	DataTypeCode_STRING                DataTypeCode_Value = 57
	DataTypeCode_TIME                  DataTypeCode_Value = 58
	DataTypeCode_UNSIGNED_INT          DataTypeCode_Value = 59
	DataTypeCode_URI                   DataTypeCode_Value = 60
	DataTypeCode_URL                   DataTypeCode_Value = 61
	DataTypeCode_UUID                  DataTypeCode_Value = 62
	DataTypeCode_XHTML                 DataTypeCode_Value = 63
)

// Enum value maps for DataTypeCode_Value.
var (
	DataTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "ADDRESS",
		2:  "AGE",
		3:  "ANNOTATION",
		4:  "ATTACHMENT",
		5:  "BACKBONE_ELEMENT",
		6:  "CODEABLE_CONCEPT",
		7:  "CODING",
		8:  "CONTACT_DETAIL",
		9:  "CONTACT_POINT",
		10: "CONTRIBUTOR",
		11: "COUNT",
		12: "DATA_REQUIREMENT",
		13: "DISTANCE",
		14: "DOSAGE",
		15: "DURATION",
		16: "ELEMENT",
		17: "ELEMENT_DEFINITION",
		18: "EXPRESSION",
		19: "EXTENSION",
		20: "HUMAN_NAME",
		21: "IDENTIFIER",
		22: "MARKETING_STATUS",
		23: "META",
		24: "MONEY",
		25: "MONEY_QUANTITY",
		26: "NARRATIVE",
		27: "PARAMETER_DEFINITION",
		28: "PERIOD",
		29: "POPULATION",
		30: "PROD_CHARACTERISTIC",
		31: "PRODUCT_SHELF_LIFE",
		32: "QUANTITY",
		33: "RANGE",
		34: "RATIO",
		35: "REFERENCE",
		36: "RELATED_ARTIFACT",
		37: "SAMPLED_DATA",
		38: "SIGNATURE",
		39: "SIMPLE_QUANTITY",
		40: "SUBSTANCE_AMOUNT",
		41: "TIMING",
		42: "TRIGGER_DEFINITION",
		43: "USAGE_CONTEXT",
		44: "BASE64_BINARY",
		45: "BOOLEAN",
		46: "CANONICAL",
		47: "CODE",
		48: "DATE",
		49: "DATE_TIME",
		50: "DECIMAL",
		51: "ID",
		52: "INSTANT",
		53: "INTEGER",
		54: "MARKDOWN",
		55: "OID",
		56: "POSITIVE_INT",
		57: "STRING",
		58: "TIME",
		59: "UNSIGNED_INT",
		60: "URI",
		61: "URL",
		62: "UUID",
		63: "XHTML",
	}
	DataTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ADDRESS":               1,
		"AGE":                   2,
		"ANNOTATION":            3,
		"ATTACHMENT":            4,
		"BACKBONE_ELEMENT":      5,
		"CODEABLE_CONCEPT":      6,
		"CODING":                7,
		"CONTACT_DETAIL":        8,
		"CONTACT_POINT":         9,
		"CONTRIBUTOR":           10,
		"COUNT":                 11,
		"DATA_REQUIREMENT":      12,
		"DISTANCE":              13,
		"DOSAGE":                14,
		"DURATION":              15,
		"ELEMENT":               16,
		"ELEMENT_DEFINITION":    17,
		"EXPRESSION":            18,
		"EXTENSION":             19,
		"HUMAN_NAME":            20,
		"IDENTIFIER":            21,
		"MARKETING_STATUS":      22,
		"META":                  23,
		"MONEY":                 24,
		"MONEY_QUANTITY":        25,
		"NARRATIVE":             26,
		"PARAMETER_DEFINITION":  27,
		"PERIOD":                28,
		"POPULATION":            29,
		"PROD_CHARACTERISTIC":   30,
		"PRODUCT_SHELF_LIFE":    31,
		"QUANTITY":              32,
		"RANGE":                 33,
		"RATIO":                 34,
		"REFERENCE":             35,
		"RELATED_ARTIFACT":      36,
		"SAMPLED_DATA":          37,
		"SIGNATURE":             38,
		"SIMPLE_QUANTITY":       39,
		"SUBSTANCE_AMOUNT":      40,
		"TIMING":                41,
		"TRIGGER_DEFINITION":    42,
		"USAGE_CONTEXT":         43,
		"BASE64_BINARY":         44,
		"BOOLEAN":               45,
		"CANONICAL":             46,
		"CODE":                  47,
		"DATE":                  48,
		"DATE_TIME":             49,
		"DECIMAL":               50,
		"ID":                    51,
		"INSTANT":               52,
		"INTEGER":               53,
		"MARKDOWN":              54,
		"OID":                   55,
		"POSITIVE_INT":          56,
		"STRING":                57,
		"TIME":                  58,
		"UNSIGNED_INT":          59,
		"URI":                   60,
		"URL":                   61,
		"UUID":                  62,
		"XHTML":                 63,
	}
)

func (x DataTypeCode_Value) Enum() *DataTypeCode_Value {
	p := new(DataTypeCode_Value)
	*p = x
	return p
}

func (x DataTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[68].Descriptor()
}

func (DataTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[68]
}

func (x DataTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataTypeCode_Value.Descriptor instead.
func (DataTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{68, 0}
}

type DaysOfWeekCode_Value int32

const (
	DaysOfWeekCode_INVALID_UNINITIALIZED DaysOfWeekCode_Value = 0
	DaysOfWeekCode_MON                   DaysOfWeekCode_Value = 1
	DaysOfWeekCode_TUE                   DaysOfWeekCode_Value = 2
	DaysOfWeekCode_WED                   DaysOfWeekCode_Value = 3
	DaysOfWeekCode_THU                   DaysOfWeekCode_Value = 4
	DaysOfWeekCode_FRI                   DaysOfWeekCode_Value = 5
	DaysOfWeekCode_SAT                   DaysOfWeekCode_Value = 6
	DaysOfWeekCode_SUN                   DaysOfWeekCode_Value = 7
)

// Enum value maps for DaysOfWeekCode_Value.
var (
	DaysOfWeekCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MON",
		2: "TUE",
		3: "WED",
		4: "THU",
		5: "FRI",
		6: "SAT",
		7: "SUN",
	}
	DaysOfWeekCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MON":                   1,
		"TUE":                   2,
		"WED":                   3,
		"THU":                   4,
		"FRI":                   5,
		"SAT":                   6,
		"SUN":                   7,
	}
)

func (x DaysOfWeekCode_Value) Enum() *DaysOfWeekCode_Value {
	p := new(DaysOfWeekCode_Value)
	*p = x
	return p
}

func (x DaysOfWeekCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DaysOfWeekCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[69].Descriptor()
}

func (DaysOfWeekCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[69]
}

func (x DaysOfWeekCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DaysOfWeekCode_Value.Descriptor instead.
func (DaysOfWeekCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{69, 0}
}

type DetectedIssueSeverityCode_Value int32

const (
	DetectedIssueSeverityCode_INVALID_UNINITIALIZED DetectedIssueSeverityCode_Value = 0
	DetectedIssueSeverityCode_HIGH                  DetectedIssueSeverityCode_Value = 1
	DetectedIssueSeverityCode_MODERATE              DetectedIssueSeverityCode_Value = 2
	DetectedIssueSeverityCode_LOW                   DetectedIssueSeverityCode_Value = 3
)

// Enum value maps for DetectedIssueSeverityCode_Value.
var (
	DetectedIssueSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HIGH",
		2: "MODERATE",
		3: "LOW",
	}
	DetectedIssueSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HIGH":                  1,
		"MODERATE":              2,
		"LOW":                   3,
	}
)

func (x DetectedIssueSeverityCode_Value) Enum() *DetectedIssueSeverityCode_Value {
	p := new(DetectedIssueSeverityCode_Value)
	*p = x
	return p
}

func (x DetectedIssueSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DetectedIssueSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[70].Descriptor()
}

func (DetectedIssueSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[70]
}

func (x DetectedIssueSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DetectedIssueSeverityCode_Value.Descriptor instead.
func (DetectedIssueSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{70, 0}
}

type DeviceMetricCalibrationStateCode_Value int32

const (
	DeviceMetricCalibrationStateCode_INVALID_UNINITIALIZED DeviceMetricCalibrationStateCode_Value = 0
	DeviceMetricCalibrationStateCode_NOT_CALIBRATED        DeviceMetricCalibrationStateCode_Value = 1
	DeviceMetricCalibrationStateCode_CALIBRATION_REQUIRED  DeviceMetricCalibrationStateCode_Value = 2
	DeviceMetricCalibrationStateCode_CALIBRATED            DeviceMetricCalibrationStateCode_Value = 3
	DeviceMetricCalibrationStateCode_UNSPECIFIED           DeviceMetricCalibrationStateCode_Value = 4
)

// Enum value maps for DeviceMetricCalibrationStateCode_Value.
var (
	DeviceMetricCalibrationStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NOT_CALIBRATED",
		2: "CALIBRATION_REQUIRED",
		3: "CALIBRATED",
		4: "UNSPECIFIED",
	}
	DeviceMetricCalibrationStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NOT_CALIBRATED":        1,
		"CALIBRATION_REQUIRED":  2,
		"CALIBRATED":            3,
		"UNSPECIFIED":           4,
	}
)

func (x DeviceMetricCalibrationStateCode_Value) Enum() *DeviceMetricCalibrationStateCode_Value {
	p := new(DeviceMetricCalibrationStateCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCalibrationStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCalibrationStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[71].Descriptor()
}

func (DeviceMetricCalibrationStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[71]
}

func (x DeviceMetricCalibrationStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCalibrationStateCode_Value.Descriptor instead.
func (DeviceMetricCalibrationStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{71, 0}
}

type DeviceMetricCalibrationTypeCode_Value int32

const (
	DeviceMetricCalibrationTypeCode_INVALID_UNINITIALIZED DeviceMetricCalibrationTypeCode_Value = 0
	DeviceMetricCalibrationTypeCode_UNSPECIFIED           DeviceMetricCalibrationTypeCode_Value = 1
	DeviceMetricCalibrationTypeCode_OFFSET                DeviceMetricCalibrationTypeCode_Value = 2
	DeviceMetricCalibrationTypeCode_GAIN                  DeviceMetricCalibrationTypeCode_Value = 3
	DeviceMetricCalibrationTypeCode_TWO_POINT             DeviceMetricCalibrationTypeCode_Value = 4
)

// Enum value maps for DeviceMetricCalibrationTypeCode_Value.
var (
	DeviceMetricCalibrationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNSPECIFIED",
		2: "OFFSET",
		3: "GAIN",
		4: "TWO_POINT",
	}
	DeviceMetricCalibrationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNSPECIFIED":           1,
		"OFFSET":                2,
		"GAIN":                  3,
		"TWO_POINT":             4,
	}
)

func (x DeviceMetricCalibrationTypeCode_Value) Enum() *DeviceMetricCalibrationTypeCode_Value {
	p := new(DeviceMetricCalibrationTypeCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCalibrationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCalibrationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[72].Descriptor()
}

func (DeviceMetricCalibrationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[72]
}

func (x DeviceMetricCalibrationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCalibrationTypeCode_Value.Descriptor instead.
func (DeviceMetricCalibrationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{72, 0}
}

type DeviceMetricCategoryCode_Value int32

const (
	DeviceMetricCategoryCode_INVALID_UNINITIALIZED DeviceMetricCategoryCode_Value = 0
	DeviceMetricCategoryCode_MEASUREMENT           DeviceMetricCategoryCode_Value = 1
	DeviceMetricCategoryCode_SETTING               DeviceMetricCategoryCode_Value = 2
	DeviceMetricCategoryCode_CALCULATION           DeviceMetricCategoryCode_Value = 3
	DeviceMetricCategoryCode_UNSPECIFIED           DeviceMetricCategoryCode_Value = 4
)

// Enum value maps for DeviceMetricCategoryCode_Value.
var (
	DeviceMetricCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MEASUREMENT",
		2: "SETTING",
		3: "CALCULATION",
		4: "UNSPECIFIED",
	}
	DeviceMetricCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MEASUREMENT":           1,
		"SETTING":               2,
		"CALCULATION":           3,
		"UNSPECIFIED":           4,
	}
)

func (x DeviceMetricCategoryCode_Value) Enum() *DeviceMetricCategoryCode_Value {
	p := new(DeviceMetricCategoryCode_Value)
	*p = x
	return p
}

func (x DeviceMetricCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[73].Descriptor()
}

func (DeviceMetricCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[73]
}

func (x DeviceMetricCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricCategoryCode_Value.Descriptor instead.
func (DeviceMetricCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{73, 0}
}

type DeviceMetricColorCode_Value int32

const (
	DeviceMetricColorCode_INVALID_UNINITIALIZED DeviceMetricColorCode_Value = 0
	DeviceMetricColorCode_BLACK                 DeviceMetricColorCode_Value = 1
	DeviceMetricColorCode_RED                   DeviceMetricColorCode_Value = 2
	DeviceMetricColorCode_GREEN                 DeviceMetricColorCode_Value = 3
	DeviceMetricColorCode_YELLOW                DeviceMetricColorCode_Value = 4
	DeviceMetricColorCode_BLUE                  DeviceMetricColorCode_Value = 5
	DeviceMetricColorCode_MAGENTA               DeviceMetricColorCode_Value = 6
	DeviceMetricColorCode_CYAN                  DeviceMetricColorCode_Value = 7
	DeviceMetricColorCode_WHITE                 DeviceMetricColorCode_Value = 8
)

// Enum value maps for DeviceMetricColorCode_Value.
var (
	DeviceMetricColorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BLACK",
		2: "RED",
		3: "GREEN",
		4: "YELLOW",
		5: "BLUE",
		6: "MAGENTA",
		7: "CYAN",
		8: "WHITE",
	}
	DeviceMetricColorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BLACK":                 1,
		"RED":                   2,
		"GREEN":                 3,
		"YELLOW":                4,
		"BLUE":                  5,
		"MAGENTA":               6,
		"CYAN":                  7,
		"WHITE":                 8,
	}
)

func (x DeviceMetricColorCode_Value) Enum() *DeviceMetricColorCode_Value {
	p := new(DeviceMetricColorCode_Value)
	*p = x
	return p
}

func (x DeviceMetricColorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricColorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[74].Descriptor()
}

func (DeviceMetricColorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[74]
}

func (x DeviceMetricColorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricColorCode_Value.Descriptor instead.
func (DeviceMetricColorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{74, 0}
}

type DeviceMetricOperationalStatusCode_Value int32

const (
	DeviceMetricOperationalStatusCode_INVALID_UNINITIALIZED DeviceMetricOperationalStatusCode_Value = 0
	DeviceMetricOperationalStatusCode_ON                    DeviceMetricOperationalStatusCode_Value = 1
	DeviceMetricOperationalStatusCode_OFF                   DeviceMetricOperationalStatusCode_Value = 2
	DeviceMetricOperationalStatusCode_STANDBY               DeviceMetricOperationalStatusCode_Value = 3
	DeviceMetricOperationalStatusCode_ENTERED_IN_ERROR      DeviceMetricOperationalStatusCode_Value = 4
)

// Enum value maps for DeviceMetricOperationalStatusCode_Value.
var (
	DeviceMetricOperationalStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ON",
		2: "OFF",
		3: "STANDBY",
		4: "ENTERED_IN_ERROR",
	}
	DeviceMetricOperationalStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ON":                    1,
		"OFF":                   2,
		"STANDBY":               3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x DeviceMetricOperationalStatusCode_Value) Enum() *DeviceMetricOperationalStatusCode_Value {
	p := new(DeviceMetricOperationalStatusCode_Value)
	*p = x
	return p
}

func (x DeviceMetricOperationalStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMetricOperationalStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[75].Descriptor()
}

func (DeviceMetricOperationalStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[75]
}

func (x DeviceMetricOperationalStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMetricOperationalStatusCode_Value.Descriptor instead.
func (DeviceMetricOperationalStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{75, 0}
}

type DeviceNameTypeCode_Value int32

const (
	DeviceNameTypeCode_INVALID_UNINITIALIZED DeviceNameTypeCode_Value = 0
	DeviceNameTypeCode_UDI_LABEL_NAME        DeviceNameTypeCode_Value = 1
	DeviceNameTypeCode_USER_FRIENDLY_NAME    DeviceNameTypeCode_Value = 2
	DeviceNameTypeCode_PATIENT_REPORTED_NAME DeviceNameTypeCode_Value = 3
	DeviceNameTypeCode_MANUFACTURER_NAME     DeviceNameTypeCode_Value = 4
	DeviceNameTypeCode_MODEL_NAME            DeviceNameTypeCode_Value = 5
	DeviceNameTypeCode_OTHER                 DeviceNameTypeCode_Value = 6
)

// Enum value maps for DeviceNameTypeCode_Value.
var (
	DeviceNameTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UDI_LABEL_NAME",
		2: "USER_FRIENDLY_NAME",
		3: "PATIENT_REPORTED_NAME",
		4: "MANUFACTURER_NAME",
		5: "MODEL_NAME",
		6: "OTHER",
	}
	DeviceNameTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UDI_LABEL_NAME":        1,
		"USER_FRIENDLY_NAME":    2,
		"PATIENT_REPORTED_NAME": 3,
		"MANUFACTURER_NAME":     4,
		"MODEL_NAME":            5,
		"OTHER":                 6,
	}
)

func (x DeviceNameTypeCode_Value) Enum() *DeviceNameTypeCode_Value {
	p := new(DeviceNameTypeCode_Value)
	*p = x
	return p
}

func (x DeviceNameTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceNameTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[76].Descriptor()
}

func (DeviceNameTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[76]
}

func (x DeviceNameTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceNameTypeCode_Value.Descriptor instead.
func (DeviceNameTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{76, 0}
}

type DeviceUseStatementStatusCode_Value int32

const (
	DeviceUseStatementStatusCode_INVALID_UNINITIALIZED DeviceUseStatementStatusCode_Value = 0
	DeviceUseStatementStatusCode_ACTIVE                DeviceUseStatementStatusCode_Value = 1
	DeviceUseStatementStatusCode_COMPLETED             DeviceUseStatementStatusCode_Value = 2
	DeviceUseStatementStatusCode_ENTERED_IN_ERROR      DeviceUseStatementStatusCode_Value = 3
	DeviceUseStatementStatusCode_INTENDED              DeviceUseStatementStatusCode_Value = 4
	DeviceUseStatementStatusCode_STOPPED               DeviceUseStatementStatusCode_Value = 5
	DeviceUseStatementStatusCode_ON_HOLD               DeviceUseStatementStatusCode_Value = 6
)

// Enum value maps for DeviceUseStatementStatusCode_Value.
var (
	DeviceUseStatementStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
		4: "INTENDED",
		5: "STOPPED",
		6: "ON_HOLD",
	}
	DeviceUseStatementStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
		"INTENDED":              4,
		"STOPPED":               5,
		"ON_HOLD":               6,
	}
)

func (x DeviceUseStatementStatusCode_Value) Enum() *DeviceUseStatementStatusCode_Value {
	p := new(DeviceUseStatementStatusCode_Value)
	*p = x
	return p
}

func (x DeviceUseStatementStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceUseStatementStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[77].Descriptor()
}

func (DeviceUseStatementStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[77]
}

func (x DeviceUseStatementStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceUseStatementStatusCode_Value.Descriptor instead.
func (DeviceUseStatementStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{77, 0}
}

type DiagnosticReportStatusCode_Value int32

const (
	DiagnosticReportStatusCode_INVALID_UNINITIALIZED DiagnosticReportStatusCode_Value = 0
	DiagnosticReportStatusCode_REGISTERED            DiagnosticReportStatusCode_Value = 1
	DiagnosticReportStatusCode_PARTIAL               DiagnosticReportStatusCode_Value = 2
	DiagnosticReportStatusCode_PRELIMINARY           DiagnosticReportStatusCode_Value = 3
	DiagnosticReportStatusCode_FINAL                 DiagnosticReportStatusCode_Value = 4
	DiagnosticReportStatusCode_AMENDED               DiagnosticReportStatusCode_Value = 5
	DiagnosticReportStatusCode_CORRECTED             DiagnosticReportStatusCode_Value = 6
	DiagnosticReportStatusCode_APPENDED              DiagnosticReportStatusCode_Value = 7
	DiagnosticReportStatusCode_CANCELLED             DiagnosticReportStatusCode_Value = 8
	DiagnosticReportStatusCode_ENTERED_IN_ERROR      DiagnosticReportStatusCode_Value = 9
	DiagnosticReportStatusCode_UNKNOWN               DiagnosticReportStatusCode_Value = 10
)

// Enum value maps for DiagnosticReportStatusCode_Value.
var (
	DiagnosticReportStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "REGISTERED",
		2:  "PARTIAL",
		3:  "PRELIMINARY",
		4:  "FINAL",
		5:  "AMENDED",
		6:  "CORRECTED",
		7:  "APPENDED",
		8:  "CANCELLED",
		9:  "ENTERED_IN_ERROR",
		10: "UNKNOWN",
	}
	DiagnosticReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"PARTIAL":               2,
		"PRELIMINARY":           3,
		"FINAL":                 4,
		"AMENDED":               5,
		"CORRECTED":             6,
		"APPENDED":              7,
		"CANCELLED":             8,
		"ENTERED_IN_ERROR":      9,
		"UNKNOWN":               10,
	}
)

func (x DiagnosticReportStatusCode_Value) Enum() *DiagnosticReportStatusCode_Value {
	p := new(DiagnosticReportStatusCode_Value)
	*p = x
	return p
}

func (x DiagnosticReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[78].Descriptor()
}

func (DiagnosticReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[78]
}

func (x DiagnosticReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticReportStatusCode_Value.Descriptor instead.
func (DiagnosticReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{78, 0}
}

type DiscriminatorTypeCode_Value int32

const (
	DiscriminatorTypeCode_INVALID_UNINITIALIZED DiscriminatorTypeCode_Value = 0
	DiscriminatorTypeCode_VALUE                 DiscriminatorTypeCode_Value = 1
	DiscriminatorTypeCode_EXISTS                DiscriminatorTypeCode_Value = 2
	DiscriminatorTypeCode_PATTERN               DiscriminatorTypeCode_Value = 3
	DiscriminatorTypeCode_TYPE                  DiscriminatorTypeCode_Value = 4
	DiscriminatorTypeCode_PROFILE               DiscriminatorTypeCode_Value = 5
)

// Enum value maps for DiscriminatorTypeCode_Value.
var (
	DiscriminatorTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "VALUE",
		2: "EXISTS",
		3: "PATTERN",
		4: "TYPE",
		5: "PROFILE",
	}
	DiscriminatorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"VALUE":                 1,
		"EXISTS":                2,
		"PATTERN":               3,
		"TYPE":                  4,
		"PROFILE":               5,
	}
)

func (x DiscriminatorTypeCode_Value) Enum() *DiscriminatorTypeCode_Value {
	p := new(DiscriminatorTypeCode_Value)
	*p = x
	return p
}

func (x DiscriminatorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiscriminatorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[79].Descriptor()
}

func (DiscriminatorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[79]
}

func (x DiscriminatorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiscriminatorTypeCode_Value.Descriptor instead.
func (DiscriminatorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{79, 0}
}

type DocumentModeCode_Value int32

const (
	DocumentModeCode_INVALID_UNINITIALIZED DocumentModeCode_Value = 0
	DocumentModeCode_PRODUCER              DocumentModeCode_Value = 1
	DocumentModeCode_CONSUMER              DocumentModeCode_Value = 2
)

// Enum value maps for DocumentModeCode_Value.
var (
	DocumentModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRODUCER",
		2: "CONSUMER",
	}
	DocumentModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRODUCER":              1,
		"CONSUMER":              2,
	}
)

func (x DocumentModeCode_Value) Enum() *DocumentModeCode_Value {
	p := new(DocumentModeCode_Value)
	*p = x
	return p
}

func (x DocumentModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[80].Descriptor()
}

func (DocumentModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[80]
}

func (x DocumentModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentModeCode_Value.Descriptor instead.
func (DocumentModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{80, 0}
}

type DocumentReferenceStatusCode_Value int32

const (
	DocumentReferenceStatusCode_INVALID_UNINITIALIZED DocumentReferenceStatusCode_Value = 0
	DocumentReferenceStatusCode_CURRENT               DocumentReferenceStatusCode_Value = 1
	DocumentReferenceStatusCode_SUPERSEDED            DocumentReferenceStatusCode_Value = 2
	DocumentReferenceStatusCode_ENTERED_IN_ERROR      DocumentReferenceStatusCode_Value = 3
)

// Enum value maps for DocumentReferenceStatusCode_Value.
var (
	DocumentReferenceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CURRENT",
		2: "SUPERSEDED",
		3: "ENTERED_IN_ERROR",
	}
	DocumentReferenceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CURRENT":               1,
		"SUPERSEDED":            2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x DocumentReferenceStatusCode_Value) Enum() *DocumentReferenceStatusCode_Value {
	p := new(DocumentReferenceStatusCode_Value)
	*p = x
	return p
}

func (x DocumentReferenceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentReferenceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[81].Descriptor()
}

func (DocumentReferenceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[81]
}

func (x DocumentReferenceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentReferenceStatusCode_Value.Descriptor instead.
func (DocumentReferenceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{81, 0}
}

type DocumentRelationshipTypeCode_Value int32

const (
	DocumentRelationshipTypeCode_INVALID_UNINITIALIZED DocumentRelationshipTypeCode_Value = 0
	DocumentRelationshipTypeCode_REPLACES              DocumentRelationshipTypeCode_Value = 1
	DocumentRelationshipTypeCode_TRANSFORMS            DocumentRelationshipTypeCode_Value = 2
	DocumentRelationshipTypeCode_SIGNS                 DocumentRelationshipTypeCode_Value = 3
	DocumentRelationshipTypeCode_APPENDS               DocumentRelationshipTypeCode_Value = 4
)

// Enum value maps for DocumentRelationshipTypeCode_Value.
var (
	DocumentRelationshipTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REPLACES",
		2: "TRANSFORMS",
		3: "SIGNS",
		4: "APPENDS",
	}
	DocumentRelationshipTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REPLACES":              1,
		"TRANSFORMS":            2,
		"SIGNS":                 3,
		"APPENDS":               4,
	}
)

func (x DocumentRelationshipTypeCode_Value) Enum() *DocumentRelationshipTypeCode_Value {
	p := new(DocumentRelationshipTypeCode_Value)
	*p = x
	return p
}

func (x DocumentRelationshipTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentRelationshipTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[82].Descriptor()
}

func (DocumentRelationshipTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[82]
}

func (x DocumentRelationshipTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentRelationshipTypeCode_Value.Descriptor instead.
func (DocumentRelationshipTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{82, 0}
}

type EligibilityRequestPurposeCode_Value int32

const (
	EligibilityRequestPurposeCode_INVALID_UNINITIALIZED EligibilityRequestPurposeCode_Value = 0
	EligibilityRequestPurposeCode_AUTH_REQUIREMENTS     EligibilityRequestPurposeCode_Value = 1
	EligibilityRequestPurposeCode_BENEFITS              EligibilityRequestPurposeCode_Value = 2
	EligibilityRequestPurposeCode_DISCOVERY             EligibilityRequestPurposeCode_Value = 3
	EligibilityRequestPurposeCode_VALIDATION            EligibilityRequestPurposeCode_Value = 4
)

// Enum value maps for EligibilityRequestPurposeCode_Value.
var (
	EligibilityRequestPurposeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AUTH_REQUIREMENTS",
		2: "BENEFITS",
		3: "DISCOVERY",
		4: "VALIDATION",
	}
	EligibilityRequestPurposeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AUTH_REQUIREMENTS":     1,
		"BENEFITS":              2,
		"DISCOVERY":             3,
		"VALIDATION":            4,
	}
)

func (x EligibilityRequestPurposeCode_Value) Enum() *EligibilityRequestPurposeCode_Value {
	p := new(EligibilityRequestPurposeCode_Value)
	*p = x
	return p
}

func (x EligibilityRequestPurposeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EligibilityRequestPurposeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[83].Descriptor()
}

func (EligibilityRequestPurposeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[83]
}

func (x EligibilityRequestPurposeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EligibilityRequestPurposeCode_Value.Descriptor instead.
func (EligibilityRequestPurposeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{83, 0}
}

type EligibilityResponsePurposeCode_Value int32

const (
	EligibilityResponsePurposeCode_INVALID_UNINITIALIZED EligibilityResponsePurposeCode_Value = 0
	EligibilityResponsePurposeCode_AUTH_REQUIREMENTS     EligibilityResponsePurposeCode_Value = 1
	EligibilityResponsePurposeCode_BENEFITS              EligibilityResponsePurposeCode_Value = 2
	EligibilityResponsePurposeCode_DISCOVERY             EligibilityResponsePurposeCode_Value = 3
	EligibilityResponsePurposeCode_VALIDATION            EligibilityResponsePurposeCode_Value = 4
)

// Enum value maps for EligibilityResponsePurposeCode_Value.
var (
	EligibilityResponsePurposeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AUTH_REQUIREMENTS",
		2: "BENEFITS",
		3: "DISCOVERY",
		4: "VALIDATION",
	}
	EligibilityResponsePurposeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AUTH_REQUIREMENTS":     1,
		"BENEFITS":              2,
		"DISCOVERY":             3,
		"VALIDATION":            4,
	}
)

func (x EligibilityResponsePurposeCode_Value) Enum() *EligibilityResponsePurposeCode_Value {
	p := new(EligibilityResponsePurposeCode_Value)
	*p = x
	return p
}

func (x EligibilityResponsePurposeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EligibilityResponsePurposeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[84].Descriptor()
}

func (EligibilityResponsePurposeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[84]
}

func (x EligibilityResponsePurposeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EligibilityResponsePurposeCode_Value.Descriptor instead.
func (EligibilityResponsePurposeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{84, 0}
}

type EnableWhenBehaviorCode_Value int32

const (
	EnableWhenBehaviorCode_INVALID_UNINITIALIZED EnableWhenBehaviorCode_Value = 0
	EnableWhenBehaviorCode_ALL                   EnableWhenBehaviorCode_Value = 1
	EnableWhenBehaviorCode_ANY                   EnableWhenBehaviorCode_Value = 2
)

// Enum value maps for EnableWhenBehaviorCode_Value.
var (
	EnableWhenBehaviorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALL",
		2: "ANY",
	}
	EnableWhenBehaviorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALL":                   1,
		"ANY":                   2,
	}
)

func (x EnableWhenBehaviorCode_Value) Enum() *EnableWhenBehaviorCode_Value {
	p := new(EnableWhenBehaviorCode_Value)
	*p = x
	return p
}

func (x EnableWhenBehaviorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnableWhenBehaviorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[85].Descriptor()
}

func (EnableWhenBehaviorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[85]
}

func (x EnableWhenBehaviorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnableWhenBehaviorCode_Value.Descriptor instead.
func (EnableWhenBehaviorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{85, 0}
}

type EncounterLocationStatusCode_Value int32

const (
	EncounterLocationStatusCode_INVALID_UNINITIALIZED EncounterLocationStatusCode_Value = 0
	EncounterLocationStatusCode_PLANNED               EncounterLocationStatusCode_Value = 1
	EncounterLocationStatusCode_ACTIVE                EncounterLocationStatusCode_Value = 2
	EncounterLocationStatusCode_RESERVED              EncounterLocationStatusCode_Value = 3
	EncounterLocationStatusCode_COMPLETED             EncounterLocationStatusCode_Value = 4
)

// Enum value maps for EncounterLocationStatusCode_Value.
var (
	EncounterLocationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "ACTIVE",
		3: "RESERVED",
		4: "COMPLETED",
	}
	EncounterLocationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"ACTIVE":                2,
		"RESERVED":              3,
		"COMPLETED":             4,
	}
)

func (x EncounterLocationStatusCode_Value) Enum() *EncounterLocationStatusCode_Value {
	p := new(EncounterLocationStatusCode_Value)
	*p = x
	return p
}

func (x EncounterLocationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterLocationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[86].Descriptor()
}

func (EncounterLocationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[86]
}

func (x EncounterLocationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterLocationStatusCode_Value.Descriptor instead.
func (EncounterLocationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{86, 0}
}

type EncounterStatusCode_Value int32

const (
	EncounterStatusCode_INVALID_UNINITIALIZED EncounterStatusCode_Value = 0
	EncounterStatusCode_PLANNED               EncounterStatusCode_Value = 1
	EncounterStatusCode_ARRIVED               EncounterStatusCode_Value = 2
	EncounterStatusCode_TRIAGED               EncounterStatusCode_Value = 3
	EncounterStatusCode_IN_PROGRESS           EncounterStatusCode_Value = 4
	EncounterStatusCode_ONLEAVE               EncounterStatusCode_Value = 5
	EncounterStatusCode_FINISHED              EncounterStatusCode_Value = 6
	EncounterStatusCode_CANCELLED             EncounterStatusCode_Value = 7
	EncounterStatusCode_ENTERED_IN_ERROR      EncounterStatusCode_Value = 8
	EncounterStatusCode_UNKNOWN               EncounterStatusCode_Value = 9
)

// Enum value maps for EncounterStatusCode_Value.
var (
	EncounterStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "ARRIVED",
		3: "TRIAGED",
		4: "IN_PROGRESS",
		5: "ONLEAVE",
		6: "FINISHED",
		7: "CANCELLED",
		8: "ENTERED_IN_ERROR",
		9: "UNKNOWN",
	}
	EncounterStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"ARRIVED":               2,
		"TRIAGED":               3,
		"IN_PROGRESS":           4,
		"ONLEAVE":               5,
		"FINISHED":              6,
		"CANCELLED":             7,
		"ENTERED_IN_ERROR":      8,
		"UNKNOWN":               9,
	}
)

func (x EncounterStatusCode_Value) Enum() *EncounterStatusCode_Value {
	p := new(EncounterStatusCode_Value)
	*p = x
	return p
}

func (x EncounterStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncounterStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[87].Descriptor()
}

func (EncounterStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[87]
}

func (x EncounterStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncounterStatusCode_Value.Descriptor instead.
func (EncounterStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{87, 0}
}

type EndpointStatusCode_Value int32

const (
	EndpointStatusCode_INVALID_UNINITIALIZED EndpointStatusCode_Value = 0
	EndpointStatusCode_ACTIVE                EndpointStatusCode_Value = 1
	EndpointStatusCode_SUSPENDED             EndpointStatusCode_Value = 2
	EndpointStatusCode_ERROR                 EndpointStatusCode_Value = 3
	EndpointStatusCode_OFF                   EndpointStatusCode_Value = 4
	EndpointStatusCode_ENTERED_IN_ERROR      EndpointStatusCode_Value = 5
	EndpointStatusCode_TEST                  EndpointStatusCode_Value = 6
)

// Enum value maps for EndpointStatusCode_Value.
var (
	EndpointStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "SUSPENDED",
		3: "ERROR",
		4: "OFF",
		5: "ENTERED_IN_ERROR",
		6: "TEST",
	}
	EndpointStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"SUSPENDED":             2,
		"ERROR":                 3,
		"OFF":                   4,
		"ENTERED_IN_ERROR":      5,
		"TEST":                  6,
	}
)

func (x EndpointStatusCode_Value) Enum() *EndpointStatusCode_Value {
	p := new(EndpointStatusCode_Value)
	*p = x
	return p
}

func (x EndpointStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndpointStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[88].Descriptor()
}

func (EndpointStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[88]
}

func (x EndpointStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndpointStatusCode_Value.Descriptor instead.
func (EndpointStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{88, 0}
}

type EpisodeOfCareStatusCode_Value int32

const (
	EpisodeOfCareStatusCode_INVALID_UNINITIALIZED EpisodeOfCareStatusCode_Value = 0
	EpisodeOfCareStatusCode_PLANNED               EpisodeOfCareStatusCode_Value = 1
	EpisodeOfCareStatusCode_WAITLIST              EpisodeOfCareStatusCode_Value = 2
	EpisodeOfCareStatusCode_ACTIVE                EpisodeOfCareStatusCode_Value = 3
	EpisodeOfCareStatusCode_ONHOLD                EpisodeOfCareStatusCode_Value = 4
	EpisodeOfCareStatusCode_FINISHED              EpisodeOfCareStatusCode_Value = 5
	EpisodeOfCareStatusCode_CANCELLED             EpisodeOfCareStatusCode_Value = 6
	EpisodeOfCareStatusCode_ENTERED_IN_ERROR      EpisodeOfCareStatusCode_Value = 7
)

// Enum value maps for EpisodeOfCareStatusCode_Value.
var (
	EpisodeOfCareStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PLANNED",
		2: "WAITLIST",
		3: "ACTIVE",
		4: "ONHOLD",
		5: "FINISHED",
		6: "CANCELLED",
		7: "ENTERED_IN_ERROR",
	}
	EpisodeOfCareStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PLANNED":               1,
		"WAITLIST":              2,
		"ACTIVE":                3,
		"ONHOLD":                4,
		"FINISHED":              5,
		"CANCELLED":             6,
		"ENTERED_IN_ERROR":      7,
	}
)

func (x EpisodeOfCareStatusCode_Value) Enum() *EpisodeOfCareStatusCode_Value {
	p := new(EpisodeOfCareStatusCode_Value)
	*p = x
	return p
}

func (x EpisodeOfCareStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EpisodeOfCareStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[89].Descriptor()
}

func (EpisodeOfCareStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[89]
}

func (x EpisodeOfCareStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EpisodeOfCareStatusCode_Value.Descriptor instead.
func (EpisodeOfCareStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{89, 0}
}

type EventCapabilityModeCode_Value int32

const (
	EventCapabilityModeCode_INVALID_UNINITIALIZED EventCapabilityModeCode_Value = 0
	EventCapabilityModeCode_SENDER                EventCapabilityModeCode_Value = 1
	EventCapabilityModeCode_RECEIVER              EventCapabilityModeCode_Value = 2
)

// Enum value maps for EventCapabilityModeCode_Value.
var (
	EventCapabilityModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SENDER",
		2: "RECEIVER",
	}
	EventCapabilityModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SENDER":                1,
		"RECEIVER":              2,
	}
)

func (x EventCapabilityModeCode_Value) Enum() *EventCapabilityModeCode_Value {
	p := new(EventCapabilityModeCode_Value)
	*p = x
	return p
}

func (x EventCapabilityModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventCapabilityModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[90].Descriptor()
}

func (EventCapabilityModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[90]
}

func (x EventCapabilityModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventCapabilityModeCode_Value.Descriptor instead.
func (EventCapabilityModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{90, 0}
}

type EventStatusCode_Value int32

const (
	EventStatusCode_INVALID_UNINITIALIZED EventStatusCode_Value = 0
	EventStatusCode_PREPARATION           EventStatusCode_Value = 1
	EventStatusCode_IN_PROGRESS           EventStatusCode_Value = 2
	EventStatusCode_NOT_DONE              EventStatusCode_Value = 3
	EventStatusCode_ON_HOLD               EventStatusCode_Value = 4
	EventStatusCode_STOPPED               EventStatusCode_Value = 5
	EventStatusCode_COMPLETED             EventStatusCode_Value = 6
	EventStatusCode_ENTERED_IN_ERROR      EventStatusCode_Value = 7
	EventStatusCode_UNKNOWN               EventStatusCode_Value = 8
)

// Enum value maps for EventStatusCode_Value.
var (
	EventStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREPARATION",
		2: "IN_PROGRESS",
		3: "NOT_DONE",
		4: "ON_HOLD",
		5: "STOPPED",
		6: "COMPLETED",
		7: "ENTERED_IN_ERROR",
		8: "UNKNOWN",
	}
	EventStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREPARATION":           1,
		"IN_PROGRESS":           2,
		"NOT_DONE":              3,
		"ON_HOLD":               4,
		"STOPPED":               5,
		"COMPLETED":             6,
		"ENTERED_IN_ERROR":      7,
		"UNKNOWN":               8,
	}
)

func (x EventStatusCode_Value) Enum() *EventStatusCode_Value {
	p := new(EventStatusCode_Value)
	*p = x
	return p
}

func (x EventStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[91].Descriptor()
}

func (EventStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[91]
}

func (x EventStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatusCode_Value.Descriptor instead.
func (EventStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{91, 0}
}

type EventTimingCode_Value int32

const (
	EventTimingCode_INVALID_UNINITIALIZED EventTimingCode_Value = 0
	EventTimingCode_MORN                  EventTimingCode_Value = 1
	EventTimingCode_MORN_EARLY            EventTimingCode_Value = 2
	EventTimingCode_MORN_LATE             EventTimingCode_Value = 3
	EventTimingCode_NOON                  EventTimingCode_Value = 4
	EventTimingCode_AFT                   EventTimingCode_Value = 5
	EventTimingCode_AFT_EARLY             EventTimingCode_Value = 6
	EventTimingCode_AFT_LATE              EventTimingCode_Value = 7
	EventTimingCode_EVE                   EventTimingCode_Value = 8
	EventTimingCode_EVE_EARLY             EventTimingCode_Value = 9
	EventTimingCode_EVE_LATE              EventTimingCode_Value = 10
	EventTimingCode_NIGHT                 EventTimingCode_Value = 11
	EventTimingCode_PHS                   EventTimingCode_Value = 12
)

// Enum value maps for EventTimingCode_Value.
var (
	EventTimingCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MORN",
		2:  "MORN_EARLY",
		3:  "MORN_LATE",
		4:  "NOON",
		5:  "AFT",
		6:  "AFT_EARLY",
		7:  "AFT_LATE",
		8:  "EVE",
		9:  "EVE_EARLY",
		10: "EVE_LATE",
		11: "NIGHT",
		12: "PHS",
	}
	EventTimingCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MORN":                  1,
		"MORN_EARLY":            2,
		"MORN_LATE":             3,
		"NOON":                  4,
		"AFT":                   5,
		"AFT_EARLY":             6,
		"AFT_LATE":              7,
		"EVE":                   8,
		"EVE_EARLY":             9,
		"EVE_LATE":              10,
		"NIGHT":                 11,
		"PHS":                   12,
	}
)

func (x EventTimingCode_Value) Enum() *EventTimingCode_Value {
	p := new(EventTimingCode_Value)
	*p = x
	return p
}

func (x EventTimingCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventTimingCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[92].Descriptor()
}

func (EventTimingCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[92]
}

func (x EventTimingCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventTimingCode_Value.Descriptor instead.
func (EventTimingCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{92, 0}
}

type EvidenceVariableTypeCode_Value int32

const (
	EvidenceVariableTypeCode_INVALID_UNINITIALIZED EvidenceVariableTypeCode_Value = 0
	EvidenceVariableTypeCode_DICHOTOMOUS           EvidenceVariableTypeCode_Value = 1
	EvidenceVariableTypeCode_CONTINUOUS            EvidenceVariableTypeCode_Value = 2
	EvidenceVariableTypeCode_DESCRIPTIVE           EvidenceVariableTypeCode_Value = 3
)

// Enum value maps for EvidenceVariableTypeCode_Value.
var (
	EvidenceVariableTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DICHOTOMOUS",
		2: "CONTINUOUS",
		3: "DESCRIPTIVE",
	}
	EvidenceVariableTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DICHOTOMOUS":           1,
		"CONTINUOUS":            2,
		"DESCRIPTIVE":           3,
	}
)

func (x EvidenceVariableTypeCode_Value) Enum() *EvidenceVariableTypeCode_Value {
	p := new(EvidenceVariableTypeCode_Value)
	*p = x
	return p
}

func (x EvidenceVariableTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EvidenceVariableTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[93].Descriptor()
}

func (EvidenceVariableTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[93]
}

func (x EvidenceVariableTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EvidenceVariableTypeCode_Value.Descriptor instead.
func (EvidenceVariableTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{93, 0}
}

type ExampleScenarioActorTypeCode_Value int32

const (
	ExampleScenarioActorTypeCode_INVALID_UNINITIALIZED ExampleScenarioActorTypeCode_Value = 0
	ExampleScenarioActorTypeCode_PERSON                ExampleScenarioActorTypeCode_Value = 1
	ExampleScenarioActorTypeCode_ENTITY                ExampleScenarioActorTypeCode_Value = 2
)

// Enum value maps for ExampleScenarioActorTypeCode_Value.
var (
	ExampleScenarioActorTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PERSON",
		2: "ENTITY",
	}
	ExampleScenarioActorTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERSON":                1,
		"ENTITY":                2,
	}
)

func (x ExampleScenarioActorTypeCode_Value) Enum() *ExampleScenarioActorTypeCode_Value {
	p := new(ExampleScenarioActorTypeCode_Value)
	*p = x
	return p
}

func (x ExampleScenarioActorTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExampleScenarioActorTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[94].Descriptor()
}

func (ExampleScenarioActorTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[94]
}

func (x ExampleScenarioActorTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExampleScenarioActorTypeCode_Value.Descriptor instead.
func (ExampleScenarioActorTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{94, 0}
}

type ExpansionParameterSourceCode_Value int32

const (
	ExpansionParameterSourceCode_INVALID_UNINITIALIZED ExpansionParameterSourceCode_Value = 0
	ExpansionParameterSourceCode_INPUT                 ExpansionParameterSourceCode_Value = 1
	ExpansionParameterSourceCode_SERVER                ExpansionParameterSourceCode_Value = 2
	ExpansionParameterSourceCode_CODESYSTEM            ExpansionParameterSourceCode_Value = 3
)

// Enum value maps for ExpansionParameterSourceCode_Value.
var (
	ExpansionParameterSourceCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INPUT",
		2: "SERVER",
		3: "CODESYSTEM",
	}
	ExpansionParameterSourceCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INPUT":                 1,
		"SERVER":                2,
		"CODESYSTEM":            3,
	}
)

func (x ExpansionParameterSourceCode_Value) Enum() *ExpansionParameterSourceCode_Value {
	p := new(ExpansionParameterSourceCode_Value)
	*p = x
	return p
}

func (x ExpansionParameterSourceCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpansionParameterSourceCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[95].Descriptor()
}

func (ExpansionParameterSourceCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[95]
}

func (x ExpansionParameterSourceCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpansionParameterSourceCode_Value.Descriptor instead.
func (ExpansionParameterSourceCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{95, 0}
}

type ExpansionProcessingRuleCode_Value int32

const (
	ExpansionProcessingRuleCode_INVALID_UNINITIALIZED ExpansionProcessingRuleCode_Value = 0
	ExpansionProcessingRuleCode_ALL_CODES             ExpansionProcessingRuleCode_Value = 1
	ExpansionProcessingRuleCode_UNGROUPED             ExpansionProcessingRuleCode_Value = 2
	ExpansionProcessingRuleCode_GROUPS_ONLY           ExpansionProcessingRuleCode_Value = 3
)

// Enum value maps for ExpansionProcessingRuleCode_Value.
var (
	ExpansionProcessingRuleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALL_CODES",
		2: "UNGROUPED",
		3: "GROUPS_ONLY",
	}
	ExpansionProcessingRuleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALL_CODES":             1,
		"UNGROUPED":             2,
		"GROUPS_ONLY":           3,
	}
)

func (x ExpansionProcessingRuleCode_Value) Enum() *ExpansionProcessingRuleCode_Value {
	p := new(ExpansionProcessingRuleCode_Value)
	*p = x
	return p
}

func (x ExpansionProcessingRuleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExpansionProcessingRuleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[96].Descriptor()
}

func (ExpansionProcessingRuleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[96]
}

func (x ExpansionProcessingRuleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExpansionProcessingRuleCode_Value.Descriptor instead.
func (ExpansionProcessingRuleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{96, 0}
}

type ExplanationOfBenefitStatusCode_Value int32

const (
	ExplanationOfBenefitStatusCode_INVALID_UNINITIALIZED ExplanationOfBenefitStatusCode_Value = 0
	ExplanationOfBenefitStatusCode_ACTIVE                ExplanationOfBenefitStatusCode_Value = 1
	ExplanationOfBenefitStatusCode_CANCELLED             ExplanationOfBenefitStatusCode_Value = 2
	ExplanationOfBenefitStatusCode_DRAFT                 ExplanationOfBenefitStatusCode_Value = 3
	ExplanationOfBenefitStatusCode_ENTERED_IN_ERROR      ExplanationOfBenefitStatusCode_Value = 4
)

// Enum value maps for ExplanationOfBenefitStatusCode_Value.
var (
	ExplanationOfBenefitStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "CANCELLED",
		3: "DRAFT",
		4: "ENTERED_IN_ERROR",
	}
	ExplanationOfBenefitStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"CANCELLED":             2,
		"DRAFT":                 3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x ExplanationOfBenefitStatusCode_Value) Enum() *ExplanationOfBenefitStatusCode_Value {
	p := new(ExplanationOfBenefitStatusCode_Value)
	*p = x
	return p
}

func (x ExplanationOfBenefitStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExplanationOfBenefitStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[97].Descriptor()
}

func (ExplanationOfBenefitStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[97]
}

func (x ExplanationOfBenefitStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExplanationOfBenefitStatusCode_Value.Descriptor instead.
func (ExplanationOfBenefitStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{97, 0}
}

type ExposureStateCode_Value int32

const (
	ExposureStateCode_INVALID_UNINITIALIZED ExposureStateCode_Value = 0
	ExposureStateCode_EXPOSURE              ExposureStateCode_Value = 1
	ExposureStateCode_EXPOSURE_ALTERNATIVE  ExposureStateCode_Value = 2
)

// Enum value maps for ExposureStateCode_Value.
var (
	ExposureStateCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EXPOSURE",
		2: "EXPOSURE_ALTERNATIVE",
	}
	ExposureStateCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EXPOSURE":              1,
		"EXPOSURE_ALTERNATIVE":  2,
	}
)

func (x ExposureStateCode_Value) Enum() *ExposureStateCode_Value {
	p := new(ExposureStateCode_Value)
	*p = x
	return p
}

func (x ExposureStateCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExposureStateCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[98].Descriptor()
}

func (ExposureStateCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[98]
}

func (x ExposureStateCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExposureStateCode_Value.Descriptor instead.
func (ExposureStateCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{98, 0}
}

type ExtensionContextTypeCode_Value int32

const (
	ExtensionContextTypeCode_INVALID_UNINITIALIZED ExtensionContextTypeCode_Value = 0
	ExtensionContextTypeCode_FHIRPATH              ExtensionContextTypeCode_Value = 1
	ExtensionContextTypeCode_ELEMENT               ExtensionContextTypeCode_Value = 2
	ExtensionContextTypeCode_EXTENSION             ExtensionContextTypeCode_Value = 3
)

// Enum value maps for ExtensionContextTypeCode_Value.
var (
	ExtensionContextTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FHIRPATH",
		2: "ELEMENT",
		3: "EXTENSION",
	}
	ExtensionContextTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FHIRPATH":              1,
		"ELEMENT":               2,
		"EXTENSION":             3,
	}
)

func (x ExtensionContextTypeCode_Value) Enum() *ExtensionContextTypeCode_Value {
	p := new(ExtensionContextTypeCode_Value)
	*p = x
	return p
}

func (x ExtensionContextTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExtensionContextTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[99].Descriptor()
}

func (ExtensionContextTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[99]
}

func (x ExtensionContextTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExtensionContextTypeCode_Value.Descriptor instead.
func (ExtensionContextTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{99, 0}
}

type FHIRDeviceStatusCode_Value int32

const (
	FHIRDeviceStatusCode_INVALID_UNINITIALIZED FHIRDeviceStatusCode_Value = 0
	FHIRDeviceStatusCode_ACTIVE                FHIRDeviceStatusCode_Value = 1
	FHIRDeviceStatusCode_INACTIVE              FHIRDeviceStatusCode_Value = 2
	FHIRDeviceStatusCode_ENTERED_IN_ERROR      FHIRDeviceStatusCode_Value = 3
	FHIRDeviceStatusCode_UNKNOWN               FHIRDeviceStatusCode_Value = 4
)

// Enum value maps for FHIRDeviceStatusCode_Value.
var (
	FHIRDeviceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
		4: "UNKNOWN",
	}
	FHIRDeviceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
		"UNKNOWN":               4,
	}
)

func (x FHIRDeviceStatusCode_Value) Enum() *FHIRDeviceStatusCode_Value {
	p := new(FHIRDeviceStatusCode_Value)
	*p = x
	return p
}

func (x FHIRDeviceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRDeviceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[100].Descriptor()
}

func (FHIRDeviceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[100]
}

func (x FHIRDeviceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRDeviceStatusCode_Value.Descriptor instead.
func (FHIRDeviceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{100, 0}
}

type FHIRRestfulInteractionsCode_Value int32

const (
	FHIRRestfulInteractionsCode_INVALID_UNINITIALIZED FHIRRestfulInteractionsCode_Value = 0
	FHIRRestfulInteractionsCode_READ                  FHIRRestfulInteractionsCode_Value = 1
	FHIRRestfulInteractionsCode_VREAD                 FHIRRestfulInteractionsCode_Value = 2
	FHIRRestfulInteractionsCode_UPDATE                FHIRRestfulInteractionsCode_Value = 3
	FHIRRestfulInteractionsCode_PATCH                 FHIRRestfulInteractionsCode_Value = 4
	FHIRRestfulInteractionsCode_DELETE                FHIRRestfulInteractionsCode_Value = 5
	FHIRRestfulInteractionsCode_HISTORY               FHIRRestfulInteractionsCode_Value = 6
	FHIRRestfulInteractionsCode_HISTORY_INSTANCE      FHIRRestfulInteractionsCode_Value = 7
	FHIRRestfulInteractionsCode_HISTORY_TYPE          FHIRRestfulInteractionsCode_Value = 8
	FHIRRestfulInteractionsCode_HISTORY_SYSTEM        FHIRRestfulInteractionsCode_Value = 9
	FHIRRestfulInteractionsCode_CREATE                FHIRRestfulInteractionsCode_Value = 10
	FHIRRestfulInteractionsCode_SEARCH                FHIRRestfulInteractionsCode_Value = 11
	FHIRRestfulInteractionsCode_SEARCH_TYPE           FHIRRestfulInteractionsCode_Value = 12
	FHIRRestfulInteractionsCode_SEARCH_SYSTEM         FHIRRestfulInteractionsCode_Value = 13
	FHIRRestfulInteractionsCode_CAPABILITIES          FHIRRestfulInteractionsCode_Value = 14
	FHIRRestfulInteractionsCode_TRANSACTION           FHIRRestfulInteractionsCode_Value = 15
	FHIRRestfulInteractionsCode_BATCH                 FHIRRestfulInteractionsCode_Value = 16
	FHIRRestfulInteractionsCode_OPERATION             FHIRRestfulInteractionsCode_Value = 17
)

// Enum value maps for FHIRRestfulInteractionsCode_Value.
var (
	FHIRRestfulInteractionsCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "READ",
		2:  "VREAD",
		3:  "UPDATE",
		4:  "PATCH",
		5:  "DELETE",
		6:  "HISTORY",
		7:  "HISTORY_INSTANCE",
		8:  "HISTORY_TYPE",
		9:  "HISTORY_SYSTEM",
		10: "CREATE",
		11: "SEARCH",
		12: "SEARCH_TYPE",
		13: "SEARCH_SYSTEM",
		14: "CAPABILITIES",
		15: "TRANSACTION",
		16: "BATCH",
		17: "OPERATION",
	}
	FHIRRestfulInteractionsCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"READ":                  1,
		"VREAD":                 2,
		"UPDATE":                3,
		"PATCH":                 4,
		"DELETE":                5,
		"HISTORY":               6,
		"HISTORY_INSTANCE":      7,
		"HISTORY_TYPE":          8,
		"HISTORY_SYSTEM":        9,
		"CREATE":                10,
		"SEARCH":                11,
		"SEARCH_TYPE":           12,
		"SEARCH_SYSTEM":         13,
		"CAPABILITIES":          14,
		"TRANSACTION":           15,
		"BATCH":                 16,
		"OPERATION":             17,
	}
)

func (x FHIRRestfulInteractionsCode_Value) Enum() *FHIRRestfulInteractionsCode_Value {
	p := new(FHIRRestfulInteractionsCode_Value)
	*p = x
	return p
}

func (x FHIRRestfulInteractionsCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRRestfulInteractionsCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[101].Descriptor()
}

func (FHIRRestfulInteractionsCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[101]
}

func (x FHIRRestfulInteractionsCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRRestfulInteractionsCode_Value.Descriptor instead.
func (FHIRRestfulInteractionsCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{101, 0}
}

type FHIRSubstanceStatusCode_Value int32

const (
	FHIRSubstanceStatusCode_INVALID_UNINITIALIZED FHIRSubstanceStatusCode_Value = 0
	FHIRSubstanceStatusCode_ACTIVE                FHIRSubstanceStatusCode_Value = 1
	FHIRSubstanceStatusCode_INACTIVE              FHIRSubstanceStatusCode_Value = 2
	FHIRSubstanceStatusCode_ENTERED_IN_ERROR      FHIRSubstanceStatusCode_Value = 3
)

// Enum value maps for FHIRSubstanceStatusCode_Value.
var (
	FHIRSubstanceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	FHIRSubstanceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x FHIRSubstanceStatusCode_Value) Enum() *FHIRSubstanceStatusCode_Value {
	p := new(FHIRSubstanceStatusCode_Value)
	*p = x
	return p
}

func (x FHIRSubstanceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRSubstanceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[102].Descriptor()
}

func (FHIRSubstanceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[102]
}

func (x FHIRSubstanceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRSubstanceStatusCode_Value.Descriptor instead.
func (FHIRSubstanceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{102, 0}
}

type FHIRVersionCode_Value int32

const (
	FHIRVersionCode_INVALID_UNINITIALIZED FHIRVersionCode_Value = 0
	FHIRVersionCode_V_0_01                FHIRVersionCode_Value = 1
	FHIRVersionCode_V_0_05                FHIRVersionCode_Value = 2
	FHIRVersionCode_V_0_06                FHIRVersionCode_Value = 3
	FHIRVersionCode_V_0_11                FHIRVersionCode_Value = 4
	FHIRVersionCode_V_0_0_80              FHIRVersionCode_Value = 5
	FHIRVersionCode_V_0_0_81              FHIRVersionCode_Value = 6
	FHIRVersionCode_V_0_0_82              FHIRVersionCode_Value = 7
	FHIRVersionCode_V_0_4_0               FHIRVersionCode_Value = 8
	FHIRVersionCode_V_0_5_0               FHIRVersionCode_Value = 9
	FHIRVersionCode_V_1_0_0               FHIRVersionCode_Value = 10
	FHIRVersionCode_V_1_0_1               FHIRVersionCode_Value = 11
	FHIRVersionCode_V_1_0_2               FHIRVersionCode_Value = 12
	FHIRVersionCode_V_1_1_0               FHIRVersionCode_Value = 13
	FHIRVersionCode_V_1_4_0               FHIRVersionCode_Value = 14
	FHIRVersionCode_V_1_6_0               FHIRVersionCode_Value = 15
	FHIRVersionCode_V_1_8_0               FHIRVersionCode_Value = 16
	FHIRVersionCode_V_3_0_0               FHIRVersionCode_Value = 17
	FHIRVersionCode_V_3_0_1               FHIRVersionCode_Value = 18
	FHIRVersionCode_V_3_3_0               FHIRVersionCode_Value = 19
	FHIRVersionCode_V_3_5_0               FHIRVersionCode_Value = 20
	FHIRVersionCode_V_4_0_0               FHIRVersionCode_Value = 21
	FHIRVersionCode_V_4_0_1               FHIRVersionCode_Value = 22
)

// Enum value maps for FHIRVersionCode_Value.
var (
	FHIRVersionCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "V_0_01",
		2:  "V_0_05",
		3:  "V_0_06",
		4:  "V_0_11",
		5:  "V_0_0_80",
		6:  "V_0_0_81",
		7:  "V_0_0_82",
		8:  "V_0_4_0",
		9:  "V_0_5_0",
		10: "V_1_0_0",
		11: "V_1_0_1",
		12: "V_1_0_2",
		13: "V_1_1_0",
		14: "V_1_4_0",
		15: "V_1_6_0",
		16: "V_1_8_0",
		17: "V_3_0_0",
		18: "V_3_0_1",
		19: "V_3_3_0",
		20: "V_3_5_0",
		21: "V_4_0_0",
		22: "V_4_0_1",
	}
	FHIRVersionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"V_0_01":                1,
		"V_0_05":                2,
		"V_0_06":                3,
		"V_0_11":                4,
		"V_0_0_80":              5,
		"V_0_0_81":              6,
		"V_0_0_82":              7,
		"V_0_4_0":               8,
		"V_0_5_0":               9,
		"V_1_0_0":               10,
		"V_1_0_1":               11,
		"V_1_0_2":               12,
		"V_1_1_0":               13,
		"V_1_4_0":               14,
		"V_1_6_0":               15,
		"V_1_8_0":               16,
		"V_3_0_0":               17,
		"V_3_0_1":               18,
		"V_3_3_0":               19,
		"V_3_5_0":               20,
		"V_4_0_0":               21,
		"V_4_0_1":               22,
	}
)

func (x FHIRVersionCode_Value) Enum() *FHIRVersionCode_Value {
	p := new(FHIRVersionCode_Value)
	*p = x
	return p
}

func (x FHIRVersionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FHIRVersionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[103].Descriptor()
}

func (FHIRVersionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[103]
}

func (x FHIRVersionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FHIRVersionCode_Value.Descriptor instead.
func (FHIRVersionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{103, 0}
}

type FamilyHistoryStatusCode_Value int32

const (
	FamilyHistoryStatusCode_INVALID_UNINITIALIZED FamilyHistoryStatusCode_Value = 0
	FamilyHistoryStatusCode_PARTIAL               FamilyHistoryStatusCode_Value = 1
	FamilyHistoryStatusCode_COMPLETED             FamilyHistoryStatusCode_Value = 2
	FamilyHistoryStatusCode_ENTERED_IN_ERROR      FamilyHistoryStatusCode_Value = 3
	FamilyHistoryStatusCode_HEALTH_UNKNOWN        FamilyHistoryStatusCode_Value = 4
)

// Enum value maps for FamilyHistoryStatusCode_Value.
var (
	FamilyHistoryStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PARTIAL",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
		4: "HEALTH_UNKNOWN",
	}
	FamilyHistoryStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PARTIAL":               1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
		"HEALTH_UNKNOWN":        4,
	}
)

func (x FamilyHistoryStatusCode_Value) Enum() *FamilyHistoryStatusCode_Value {
	p := new(FamilyHistoryStatusCode_Value)
	*p = x
	return p
}

func (x FamilyHistoryStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FamilyHistoryStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[104].Descriptor()
}

func (FamilyHistoryStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[104]
}

func (x FamilyHistoryStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FamilyHistoryStatusCode_Value.Descriptor instead.
func (FamilyHistoryStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{104, 0}
}

type FilterOperatorCode_Value int32

const (
	FilterOperatorCode_INVALID_UNINITIALIZED FilterOperatorCode_Value = 0
	FilterOperatorCode_EQUALS                FilterOperatorCode_Value = 1
	FilterOperatorCode_IS_A                  FilterOperatorCode_Value = 2
	FilterOperatorCode_DESCENDENT_OF         FilterOperatorCode_Value = 3
	FilterOperatorCode_IS_NOT_A              FilterOperatorCode_Value = 4
	FilterOperatorCode_REGEX                 FilterOperatorCode_Value = 5
	FilterOperatorCode_IN                    FilterOperatorCode_Value = 6
	FilterOperatorCode_NOT_IN                FilterOperatorCode_Value = 7
	FilterOperatorCode_GENERALIZES           FilterOperatorCode_Value = 8
	FilterOperatorCode_EXISTS                FilterOperatorCode_Value = 9
)

// Enum value maps for FilterOperatorCode_Value.
var (
	FilterOperatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EQUALS",
		2: "IS_A",
		3: "DESCENDENT_OF",
		4: "IS_NOT_A",
		5: "REGEX",
		6: "IN",
		7: "NOT_IN",
		8: "GENERALIZES",
		9: "EXISTS",
	}
	FilterOperatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQUALS":                1,
		"IS_A":                  2,
		"DESCENDENT_OF":         3,
		"IS_NOT_A":              4,
		"REGEX":                 5,
		"IN":                    6,
		"NOT_IN":                7,
		"GENERALIZES":           8,
		"EXISTS":                9,
	}
)

func (x FilterOperatorCode_Value) Enum() *FilterOperatorCode_Value {
	p := new(FilterOperatorCode_Value)
	*p = x
	return p
}

func (x FilterOperatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterOperatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[105].Descriptor()
}

func (FilterOperatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[105]
}

func (x FilterOperatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterOperatorCode_Value.Descriptor instead.
func (FilterOperatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{105, 0}
}

type FinancialResourceStatusCode_Value int32

const (
	FinancialResourceStatusCode_INVALID_UNINITIALIZED FinancialResourceStatusCode_Value = 0
	FinancialResourceStatusCode_ACTIVE                FinancialResourceStatusCode_Value = 1
	FinancialResourceStatusCode_CANCELLED             FinancialResourceStatusCode_Value = 2
	FinancialResourceStatusCode_DRAFT                 FinancialResourceStatusCode_Value = 3
	FinancialResourceStatusCode_ENTERED_IN_ERROR      FinancialResourceStatusCode_Value = 4
)

// Enum value maps for FinancialResourceStatusCode_Value.
var (
	FinancialResourceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "CANCELLED",
		3: "DRAFT",
		4: "ENTERED_IN_ERROR",
	}
	FinancialResourceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"CANCELLED":             2,
		"DRAFT":                 3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x FinancialResourceStatusCode_Value) Enum() *FinancialResourceStatusCode_Value {
	p := new(FinancialResourceStatusCode_Value)
	*p = x
	return p
}

func (x FinancialResourceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FinancialResourceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[106].Descriptor()
}

func (FinancialResourceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[106]
}

func (x FinancialResourceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FinancialResourceStatusCode_Value.Descriptor instead.
func (FinancialResourceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{106, 0}
}

type FlagStatusCode_Value int32

const (
	FlagStatusCode_INVALID_UNINITIALIZED FlagStatusCode_Value = 0
	FlagStatusCode_ACTIVE                FlagStatusCode_Value = 1
	FlagStatusCode_INACTIVE              FlagStatusCode_Value = 2
	FlagStatusCode_ENTERED_IN_ERROR      FlagStatusCode_Value = 3
)

// Enum value maps for FlagStatusCode_Value.
var (
	FlagStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	FlagStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x FlagStatusCode_Value) Enum() *FlagStatusCode_Value {
	p := new(FlagStatusCode_Value)
	*p = x
	return p
}

func (x FlagStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[107].Descriptor()
}

func (FlagStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[107]
}

func (x FlagStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagStatusCode_Value.Descriptor instead.
func (FlagStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{107, 0}
}

type GoalAcceptanceStatusCode_Value int32

const (
	GoalAcceptanceStatusCode_INVALID_UNINITIALIZED GoalAcceptanceStatusCode_Value = 0
	GoalAcceptanceStatusCode_AGREE                 GoalAcceptanceStatusCode_Value = 1
	GoalAcceptanceStatusCode_DISAGREE              GoalAcceptanceStatusCode_Value = 2
	GoalAcceptanceStatusCode_PENDING               GoalAcceptanceStatusCode_Value = 3
)

// Enum value maps for GoalAcceptanceStatusCode_Value.
var (
	GoalAcceptanceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AGREE",
		2: "DISAGREE",
		3: "PENDING",
	}
	GoalAcceptanceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AGREE":                 1,
		"DISAGREE":              2,
		"PENDING":               3,
	}
)

func (x GoalAcceptanceStatusCode_Value) Enum() *GoalAcceptanceStatusCode_Value {
	p := new(GoalAcceptanceStatusCode_Value)
	*p = x
	return p
}

func (x GoalAcceptanceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalAcceptanceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[108].Descriptor()
}

func (GoalAcceptanceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[108]
}

func (x GoalAcceptanceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalAcceptanceStatusCode_Value.Descriptor instead.
func (GoalAcceptanceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{108, 0}
}

type GoalLifecycleStatusCode_Value int32

const (
	GoalLifecycleStatusCode_INVALID_UNINITIALIZED GoalLifecycleStatusCode_Value = 0
	GoalLifecycleStatusCode_PROPOSED              GoalLifecycleStatusCode_Value = 1
	GoalLifecycleStatusCode_PLANNED               GoalLifecycleStatusCode_Value = 2
	GoalLifecycleStatusCode_ACCEPTED              GoalLifecycleStatusCode_Value = 3
	GoalLifecycleStatusCode_ACTIVE                GoalLifecycleStatusCode_Value = 4
	GoalLifecycleStatusCode_ON_HOLD               GoalLifecycleStatusCode_Value = 5
	GoalLifecycleStatusCode_COMPLETED             GoalLifecycleStatusCode_Value = 6
	GoalLifecycleStatusCode_CANCELLED             GoalLifecycleStatusCode_Value = 7
	GoalLifecycleStatusCode_ENTERED_IN_ERROR      GoalLifecycleStatusCode_Value = 8
	GoalLifecycleStatusCode_REJECTED              GoalLifecycleStatusCode_Value = 9
)

// Enum value maps for GoalLifecycleStatusCode_Value.
var (
	GoalLifecycleStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSED",
		2: "PLANNED",
		3: "ACCEPTED",
		4: "ACTIVE",
		5: "ON_HOLD",
		6: "COMPLETED",
		7: "CANCELLED",
		8: "ENTERED_IN_ERROR",
		9: "REJECTED",
	}
	GoalLifecycleStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSED":              1,
		"PLANNED":               2,
		"ACCEPTED":              3,
		"ACTIVE":                4,
		"ON_HOLD":               5,
		"COMPLETED":             6,
		"CANCELLED":             7,
		"ENTERED_IN_ERROR":      8,
		"REJECTED":              9,
	}
)

func (x GoalLifecycleStatusCode_Value) Enum() *GoalLifecycleStatusCode_Value {
	p := new(GoalLifecycleStatusCode_Value)
	*p = x
	return p
}

func (x GoalLifecycleStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoalLifecycleStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[109].Descriptor()
}

func (GoalLifecycleStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[109]
}

func (x GoalLifecycleStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoalLifecycleStatusCode_Value.Descriptor instead.
func (GoalLifecycleStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{109, 0}
}

type GraphCompartmentRuleCode_Value int32

const (
	GraphCompartmentRuleCode_INVALID_UNINITIALIZED GraphCompartmentRuleCode_Value = 0
	GraphCompartmentRuleCode_IDENTICAL             GraphCompartmentRuleCode_Value = 1
	GraphCompartmentRuleCode_MATCHING              GraphCompartmentRuleCode_Value = 2
	GraphCompartmentRuleCode_DIFFERENT             GraphCompartmentRuleCode_Value = 3
	GraphCompartmentRuleCode_CUSTOM                GraphCompartmentRuleCode_Value = 4
)

// Enum value maps for GraphCompartmentRuleCode_Value.
var (
	GraphCompartmentRuleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IDENTICAL",
		2: "MATCHING",
		3: "DIFFERENT",
		4: "CUSTOM",
	}
	GraphCompartmentRuleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IDENTICAL":             1,
		"MATCHING":              2,
		"DIFFERENT":             3,
		"CUSTOM":                4,
	}
)

func (x GraphCompartmentRuleCode_Value) Enum() *GraphCompartmentRuleCode_Value {
	p := new(GraphCompartmentRuleCode_Value)
	*p = x
	return p
}

func (x GraphCompartmentRuleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphCompartmentRuleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[110].Descriptor()
}

func (GraphCompartmentRuleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[110]
}

func (x GraphCompartmentRuleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphCompartmentRuleCode_Value.Descriptor instead.
func (GraphCompartmentRuleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{110, 0}
}

type GraphCompartmentUseCode_Value int32

const (
	GraphCompartmentUseCode_INVALID_UNINITIALIZED GraphCompartmentUseCode_Value = 0
	GraphCompartmentUseCode_CONDITION             GraphCompartmentUseCode_Value = 1
	GraphCompartmentUseCode_REQUIREMENT           GraphCompartmentUseCode_Value = 2
)

// Enum value maps for GraphCompartmentUseCode_Value.
var (
	GraphCompartmentUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONDITION",
		2: "REQUIREMENT",
	}
	GraphCompartmentUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONDITION":             1,
		"REQUIREMENT":           2,
	}
)

func (x GraphCompartmentUseCode_Value) Enum() *GraphCompartmentUseCode_Value {
	p := new(GraphCompartmentUseCode_Value)
	*p = x
	return p
}

func (x GraphCompartmentUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraphCompartmentUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[111].Descriptor()
}

func (GraphCompartmentUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[111]
}

func (x GraphCompartmentUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraphCompartmentUseCode_Value.Descriptor instead.
func (GraphCompartmentUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{111, 0}
}

type GroupMeasureCode_Value int32

const (
	GroupMeasureCode_INVALID_UNINITIALIZED GroupMeasureCode_Value = 0
	GroupMeasureCode_MEAN                  GroupMeasureCode_Value = 1
	GroupMeasureCode_MEDIAN                GroupMeasureCode_Value = 2
	GroupMeasureCode_MEAN_OF_MEAN          GroupMeasureCode_Value = 3
	GroupMeasureCode_MEAN_OF_MEDIAN        GroupMeasureCode_Value = 4
	GroupMeasureCode_MEDIAN_OF_MEAN        GroupMeasureCode_Value = 5
	GroupMeasureCode_MEDIAN_OF_MEDIAN      GroupMeasureCode_Value = 6
)

// Enum value maps for GroupMeasureCode_Value.
var (
	GroupMeasureCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MEAN",
		2: "MEDIAN",
		3: "MEAN_OF_MEAN",
		4: "MEAN_OF_MEDIAN",
		5: "MEDIAN_OF_MEAN",
		6: "MEDIAN_OF_MEDIAN",
	}
	GroupMeasureCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MEAN":                  1,
		"MEDIAN":                2,
		"MEAN_OF_MEAN":          3,
		"MEAN_OF_MEDIAN":        4,
		"MEDIAN_OF_MEAN":        5,
		"MEDIAN_OF_MEDIAN":      6,
	}
)

func (x GroupMeasureCode_Value) Enum() *GroupMeasureCode_Value {
	p := new(GroupMeasureCode_Value)
	*p = x
	return p
}

func (x GroupMeasureCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupMeasureCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[112].Descriptor()
}

func (GroupMeasureCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[112]
}

func (x GroupMeasureCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupMeasureCode_Value.Descriptor instead.
func (GroupMeasureCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{112, 0}
}

type GroupTypeCode_Value int32

const (
	GroupTypeCode_INVALID_UNINITIALIZED GroupTypeCode_Value = 0
	GroupTypeCode_PERSON                GroupTypeCode_Value = 1
	GroupTypeCode_ANIMAL                GroupTypeCode_Value = 2
	GroupTypeCode_PRACTITIONER          GroupTypeCode_Value = 3
	GroupTypeCode_DEVICE                GroupTypeCode_Value = 4
	GroupTypeCode_MEDICATION            GroupTypeCode_Value = 5
	GroupTypeCode_SUBSTANCE             GroupTypeCode_Value = 6
)

// Enum value maps for GroupTypeCode_Value.
var (
	GroupTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PERSON",
		2: "ANIMAL",
		3: "PRACTITIONER",
		4: "DEVICE",
		5: "MEDICATION",
		6: "SUBSTANCE",
	}
	GroupTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PERSON":                1,
		"ANIMAL":                2,
		"PRACTITIONER":          3,
		"DEVICE":                4,
		"MEDICATION":            5,
		"SUBSTANCE":             6,
	}
)

func (x GroupTypeCode_Value) Enum() *GroupTypeCode_Value {
	p := new(GroupTypeCode_Value)
	*p = x
	return p
}

func (x GroupTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GroupTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[113].Descriptor()
}

func (GroupTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[113]
}

func (x GroupTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GroupTypeCode_Value.Descriptor instead.
func (GroupTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{113, 0}
}

type GuidanceResponseStatusCode_Value int32

const (
	GuidanceResponseStatusCode_INVALID_UNINITIALIZED GuidanceResponseStatusCode_Value = 0
	GuidanceResponseStatusCode_SUCCESS               GuidanceResponseStatusCode_Value = 1
	GuidanceResponseStatusCode_DATA_REQUESTED        GuidanceResponseStatusCode_Value = 2
	GuidanceResponseStatusCode_DATA_REQUIRED         GuidanceResponseStatusCode_Value = 3
	GuidanceResponseStatusCode_IN_PROGRESS           GuidanceResponseStatusCode_Value = 4
	GuidanceResponseStatusCode_FAILURE               GuidanceResponseStatusCode_Value = 5
	GuidanceResponseStatusCode_ENTERED_IN_ERROR      GuidanceResponseStatusCode_Value = 6
)

// Enum value maps for GuidanceResponseStatusCode_Value.
var (
	GuidanceResponseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SUCCESS",
		2: "DATA_REQUESTED",
		3: "DATA_REQUIRED",
		4: "IN_PROGRESS",
		5: "FAILURE",
		6: "ENTERED_IN_ERROR",
	}
	GuidanceResponseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SUCCESS":               1,
		"DATA_REQUESTED":        2,
		"DATA_REQUIRED":         3,
		"IN_PROGRESS":           4,
		"FAILURE":               5,
		"ENTERED_IN_ERROR":      6,
	}
)

func (x GuidanceResponseStatusCode_Value) Enum() *GuidanceResponseStatusCode_Value {
	p := new(GuidanceResponseStatusCode_Value)
	*p = x
	return p
}

func (x GuidanceResponseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidanceResponseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[114].Descriptor()
}

func (GuidanceResponseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[114]
}

func (x GuidanceResponseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidanceResponseStatusCode_Value.Descriptor instead.
func (GuidanceResponseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{114, 0}
}

type GuidePageGenerationCode_Value int32

const (
	GuidePageGenerationCode_INVALID_UNINITIALIZED GuidePageGenerationCode_Value = 0
	GuidePageGenerationCode_HTML                  GuidePageGenerationCode_Value = 1
	GuidePageGenerationCode_MARKDOWN              GuidePageGenerationCode_Value = 2
	GuidePageGenerationCode_XML                   GuidePageGenerationCode_Value = 3
	GuidePageGenerationCode_GENERATED             GuidePageGenerationCode_Value = 4
)

// Enum value maps for GuidePageGenerationCode_Value.
var (
	GuidePageGenerationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "HTML",
		2: "MARKDOWN",
		3: "XML",
		4: "GENERATED",
	}
	GuidePageGenerationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"HTML":                  1,
		"MARKDOWN":              2,
		"XML":                   3,
		"GENERATED":             4,
	}
)

func (x GuidePageGenerationCode_Value) Enum() *GuidePageGenerationCode_Value {
	p := new(GuidePageGenerationCode_Value)
	*p = x
	return p
}

func (x GuidePageGenerationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuidePageGenerationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[115].Descriptor()
}

func (GuidePageGenerationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[115]
}

func (x GuidePageGenerationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuidePageGenerationCode_Value.Descriptor instead.
func (GuidePageGenerationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{115, 0}
}

type GuideParameterCode_Value int32

const (
	GuideParameterCode_INVALID_UNINITIALIZED GuideParameterCode_Value = 0
	GuideParameterCode_APPLY                 GuideParameterCode_Value = 1
	GuideParameterCode_PATH_RESOURCE         GuideParameterCode_Value = 2
	GuideParameterCode_PATH_PAGES            GuideParameterCode_Value = 3
	GuideParameterCode_PATH_TX_CACHE         GuideParameterCode_Value = 4
	GuideParameterCode_EXPANSION_PARAMETER   GuideParameterCode_Value = 5
	GuideParameterCode_RULE_BROKEN_LINKS     GuideParameterCode_Value = 6
	GuideParameterCode_GENERATE_XML          GuideParameterCode_Value = 7
	GuideParameterCode_GENERATE_JSON         GuideParameterCode_Value = 8
	GuideParameterCode_GENERATE_TURTLE       GuideParameterCode_Value = 9
	GuideParameterCode_HTML_TEMPLATE         GuideParameterCode_Value = 10
)

// Enum value maps for GuideParameterCode_Value.
var (
	GuideParameterCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "APPLY",
		2:  "PATH_RESOURCE",
		3:  "PATH_PAGES",
		4:  "PATH_TX_CACHE",
		5:  "EXPANSION_PARAMETER",
		6:  "RULE_BROKEN_LINKS",
		7:  "GENERATE_XML",
		8:  "GENERATE_JSON",
		9:  "GENERATE_TURTLE",
		10: "HTML_TEMPLATE",
	}
	GuideParameterCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"APPLY":                 1,
		"PATH_RESOURCE":         2,
		"PATH_PAGES":            3,
		"PATH_TX_CACHE":         4,
		"EXPANSION_PARAMETER":   5,
		"RULE_BROKEN_LINKS":     6,
		"GENERATE_XML":          7,
		"GENERATE_JSON":         8,
		"GENERATE_TURTLE":       9,
		"HTML_TEMPLATE":         10,
	}
)

func (x GuideParameterCode_Value) Enum() *GuideParameterCode_Value {
	p := new(GuideParameterCode_Value)
	*p = x
	return p
}

func (x GuideParameterCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuideParameterCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[116].Descriptor()
}

func (GuideParameterCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[116]
}

func (x GuideParameterCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuideParameterCode_Value.Descriptor instead.
func (GuideParameterCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{116, 0}
}

type HL7WorkgroupCode_Value int32

const (
	HL7WorkgroupCode_INVALID_UNINITIALIZED HL7WorkgroupCode_Value = 0
	HL7WorkgroupCode_CBCC                  HL7WorkgroupCode_Value = 1
	HL7WorkgroupCode_CDS                   HL7WorkgroupCode_Value = 2
	HL7WorkgroupCode_CQI                   HL7WorkgroupCode_Value = 3
	HL7WorkgroupCode_CG                    HL7WorkgroupCode_Value = 4
	HL7WorkgroupCode_DEV                   HL7WorkgroupCode_Value = 5
	HL7WorkgroupCode_EHR                   HL7WorkgroupCode_Value = 6
	HL7WorkgroupCode_FHIR                  HL7WorkgroupCode_Value = 7
	HL7WorkgroupCode_FM                    HL7WorkgroupCode_Value = 8
	HL7WorkgroupCode_HSI                   HL7WorkgroupCode_Value = 9
	HL7WorkgroupCode_II                    HL7WorkgroupCode_Value = 10
	HL7WorkgroupCode_INM                   HL7WorkgroupCode_Value = 11
	HL7WorkgroupCode_ITS                   HL7WorkgroupCode_Value = 12
	HL7WorkgroupCode_MNM                   HL7WorkgroupCode_Value = 13
	HL7WorkgroupCode_OO                    HL7WorkgroupCode_Value = 14
	HL7WorkgroupCode_PA                    HL7WorkgroupCode_Value = 15
	HL7WorkgroupCode_PC                    HL7WorkgroupCode_Value = 16
	HL7WorkgroupCode_PHER                  HL7WorkgroupCode_Value = 17
	HL7WorkgroupCode_PHX                   HL7WorkgroupCode_Value = 18
	HL7WorkgroupCode_BRR                   HL7WorkgroupCode_Value = 19
	HL7WorkgroupCode_SD                    HL7WorkgroupCode_Value = 20
	HL7WorkgroupCode_SEC                   HL7WorkgroupCode_Value = 21
	HL7WorkgroupCode_US                    HL7WorkgroupCode_Value = 22
	HL7WorkgroupCode_VOCAB                 HL7WorkgroupCode_Value = 23
	HL7WorkgroupCode_AID                   HL7WorkgroupCode_Value = 24
)

// Enum value maps for HL7WorkgroupCode_Value.
var (
	HL7WorkgroupCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "CBCC",
		2:  "CDS",
		3:  "CQI",
		4:  "CG",
		5:  "DEV",
		6:  "EHR",
		7:  "FHIR",
		8:  "FM",
		9:  "HSI",
		10: "II",
		11: "INM",
		12: "ITS",
		13: "MNM",
		14: "OO",
		15: "PA",
		16: "PC",
		17: "PHER",
		18: "PHX",
		19: "BRR",
		20: "SD",
		21: "SEC",
		22: "US",
		23: "VOCAB",
		24: "AID",
	}
	HL7WorkgroupCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CBCC":                  1,
		"CDS":                   2,
		"CQI":                   3,
		"CG":                    4,
		"DEV":                   5,
		"EHR":                   6,
		"FHIR":                  7,
		"FM":                    8,
		"HSI":                   9,
		"II":                    10,
		"INM":                   11,
		"ITS":                   12,
		"MNM":                   13,
		"OO":                    14,
		"PA":                    15,
		"PC":                    16,
		"PHER":                  17,
		"PHX":                   18,
		"BRR":                   19,
		"SD":                    20,
		"SEC":                   21,
		"US":                    22,
		"VOCAB":                 23,
		"AID":                   24,
	}
)

func (x HL7WorkgroupCode_Value) Enum() *HL7WorkgroupCode_Value {
	p := new(HL7WorkgroupCode_Value)
	*p = x
	return p
}

func (x HL7WorkgroupCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HL7WorkgroupCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[117].Descriptor()
}

func (HL7WorkgroupCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[117]
}

func (x HL7WorkgroupCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HL7WorkgroupCode_Value.Descriptor instead.
func (HL7WorkgroupCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{117, 0}
}

type HTTPVerbCode_Value int32

const (
	HTTPVerbCode_INVALID_UNINITIALIZED HTTPVerbCode_Value = 0
	HTTPVerbCode_GET                   HTTPVerbCode_Value = 1
	HTTPVerbCode_HEAD                  HTTPVerbCode_Value = 2
	HTTPVerbCode_POST                  HTTPVerbCode_Value = 3
	HTTPVerbCode_PUT                   HTTPVerbCode_Value = 4
	HTTPVerbCode_DELETE                HTTPVerbCode_Value = 5
	HTTPVerbCode_PATCH                 HTTPVerbCode_Value = 6
)

// Enum value maps for HTTPVerbCode_Value.
var (
	HTTPVerbCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GET",
		2: "HEAD",
		3: "POST",
		4: "PUT",
		5: "DELETE",
		6: "PATCH",
	}
	HTTPVerbCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GET":                   1,
		"HEAD":                  2,
		"POST":                  3,
		"PUT":                   4,
		"DELETE":                5,
		"PATCH":                 6,
	}
)

func (x HTTPVerbCode_Value) Enum() *HTTPVerbCode_Value {
	p := new(HTTPVerbCode_Value)
	*p = x
	return p
}

func (x HTTPVerbCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HTTPVerbCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[118].Descriptor()
}

func (HTTPVerbCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[118]
}

func (x HTTPVerbCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HTTPVerbCode_Value.Descriptor instead.
func (HTTPVerbCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{118, 0}
}

type HumanNameAssemblyOrderCode_Value int32

const (
	HumanNameAssemblyOrderCode_INVALID_UNINITIALIZED HumanNameAssemblyOrderCode_Value = 0
	HumanNameAssemblyOrderCode_NL1                   HumanNameAssemblyOrderCode_Value = 1
	HumanNameAssemblyOrderCode_NL2                   HumanNameAssemblyOrderCode_Value = 2
	HumanNameAssemblyOrderCode_NL3                   HumanNameAssemblyOrderCode_Value = 3
	HumanNameAssemblyOrderCode_NL4                   HumanNameAssemblyOrderCode_Value = 4
)

// Enum value maps for HumanNameAssemblyOrderCode_Value.
var (
	HumanNameAssemblyOrderCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NL1",
		2: "NL2",
		3: "NL3",
		4: "NL4",
	}
	HumanNameAssemblyOrderCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NL1":                   1,
		"NL2":                   2,
		"NL3":                   3,
		"NL4":                   4,
	}
)

func (x HumanNameAssemblyOrderCode_Value) Enum() *HumanNameAssemblyOrderCode_Value {
	p := new(HumanNameAssemblyOrderCode_Value)
	*p = x
	return p
}

func (x HumanNameAssemblyOrderCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HumanNameAssemblyOrderCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[119].Descriptor()
}

func (HumanNameAssemblyOrderCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[119]
}

func (x HumanNameAssemblyOrderCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HumanNameAssemblyOrderCode_Value.Descriptor instead.
func (HumanNameAssemblyOrderCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{119, 0}
}

type IdentifierUseCode_Value int32

const (
	IdentifierUseCode_INVALID_UNINITIALIZED IdentifierUseCode_Value = 0
	IdentifierUseCode_USUAL                 IdentifierUseCode_Value = 1
	IdentifierUseCode_OFFICIAL              IdentifierUseCode_Value = 2
	IdentifierUseCode_TEMP                  IdentifierUseCode_Value = 3
	IdentifierUseCode_SECONDARY             IdentifierUseCode_Value = 4
	IdentifierUseCode_OLD                   IdentifierUseCode_Value = 5
)

// Enum value maps for IdentifierUseCode_Value.
var (
	IdentifierUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "USUAL",
		2: "OFFICIAL",
		3: "TEMP",
		4: "SECONDARY",
		5: "OLD",
	}
	IdentifierUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"USUAL":                 1,
		"OFFICIAL":              2,
		"TEMP":                  3,
		"SECONDARY":             4,
		"OLD":                   5,
	}
)

func (x IdentifierUseCode_Value) Enum() *IdentifierUseCode_Value {
	p := new(IdentifierUseCode_Value)
	*p = x
	return p
}

func (x IdentifierUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentifierUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[120].Descriptor()
}

func (IdentifierUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[120]
}

func (x IdentifierUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentifierUseCode_Value.Descriptor instead.
func (IdentifierUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{120, 0}
}

type IdentityAssuranceLevelCode_Value int32

const (
	IdentityAssuranceLevelCode_INVALID_UNINITIALIZED IdentityAssuranceLevelCode_Value = 0
	IdentityAssuranceLevelCode_LEVEL1                IdentityAssuranceLevelCode_Value = 1
	IdentityAssuranceLevelCode_LEVEL2                IdentityAssuranceLevelCode_Value = 2
	IdentityAssuranceLevelCode_LEVEL3                IdentityAssuranceLevelCode_Value = 3
	IdentityAssuranceLevelCode_LEVEL4                IdentityAssuranceLevelCode_Value = 4
)

// Enum value maps for IdentityAssuranceLevelCode_Value.
var (
	IdentityAssuranceLevelCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LEVEL1",
		2: "LEVEL2",
		3: "LEVEL3",
		4: "LEVEL4",
	}
	IdentityAssuranceLevelCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LEVEL1":                1,
		"LEVEL2":                2,
		"LEVEL3":                3,
		"LEVEL4":                4,
	}
)

func (x IdentityAssuranceLevelCode_Value) Enum() *IdentityAssuranceLevelCode_Value {
	p := new(IdentityAssuranceLevelCode_Value)
	*p = x
	return p
}

func (x IdentityAssuranceLevelCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityAssuranceLevelCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[121].Descriptor()
}

func (IdentityAssuranceLevelCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[121]
}

func (x IdentityAssuranceLevelCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityAssuranceLevelCode_Value.Descriptor instead.
func (IdentityAssuranceLevelCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{121, 0}
}

type ImagingStudyStatusCode_Value int32

const (
	ImagingStudyStatusCode_INVALID_UNINITIALIZED ImagingStudyStatusCode_Value = 0
	ImagingStudyStatusCode_REGISTERED            ImagingStudyStatusCode_Value = 1
	ImagingStudyStatusCode_AVAILABLE             ImagingStudyStatusCode_Value = 2
	ImagingStudyStatusCode_CANCELLED             ImagingStudyStatusCode_Value = 3
	ImagingStudyStatusCode_ENTERED_IN_ERROR      ImagingStudyStatusCode_Value = 4
	ImagingStudyStatusCode_UNKNOWN               ImagingStudyStatusCode_Value = 5
)

// Enum value maps for ImagingStudyStatusCode_Value.
var (
	ImagingStudyStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REGISTERED",
		2: "AVAILABLE",
		3: "CANCELLED",
		4: "ENTERED_IN_ERROR",
		5: "UNKNOWN",
	}
	ImagingStudyStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"AVAILABLE":             2,
		"CANCELLED":             3,
		"ENTERED_IN_ERROR":      4,
		"UNKNOWN":               5,
	}
)

func (x ImagingStudyStatusCode_Value) Enum() *ImagingStudyStatusCode_Value {
	p := new(ImagingStudyStatusCode_Value)
	*p = x
	return p
}

func (x ImagingStudyStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImagingStudyStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[122].Descriptor()
}

func (ImagingStudyStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[122]
}

func (x ImagingStudyStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImagingStudyStatusCode_Value.Descriptor instead.
func (ImagingStudyStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{122, 0}
}

type ImplantStatusCode_Value int32

const (
	ImplantStatusCode_INVALID_UNINITIALIZED ImplantStatusCode_Value = 0
	ImplantStatusCode_FUNCTIONAL            ImplantStatusCode_Value = 1
	ImplantStatusCode_NON_FUNCTIONAL        ImplantStatusCode_Value = 2
	ImplantStatusCode_DISABLED              ImplantStatusCode_Value = 3
	ImplantStatusCode_UNKNOWN               ImplantStatusCode_Value = 4
)

// Enum value maps for ImplantStatusCode_Value.
var (
	ImplantStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FUNCTIONAL",
		2: "NON_FUNCTIONAL",
		3: "DISABLED",
		4: "UNKNOWN",
	}
	ImplantStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FUNCTIONAL":            1,
		"NON_FUNCTIONAL":        2,
		"DISABLED":              3,
		"UNKNOWN":               4,
	}
)

func (x ImplantStatusCode_Value) Enum() *ImplantStatusCode_Value {
	p := new(ImplantStatusCode_Value)
	*p = x
	return p
}

func (x ImplantStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImplantStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[123].Descriptor()
}

func (ImplantStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[123]
}

func (x ImplantStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImplantStatusCode_Value.Descriptor instead.
func (ImplantStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{123, 0}
}

type InvoicePriceComponentTypeCode_Value int32

const (
	InvoicePriceComponentTypeCode_INVALID_UNINITIALIZED InvoicePriceComponentTypeCode_Value = 0
	InvoicePriceComponentTypeCode_BASE                  InvoicePriceComponentTypeCode_Value = 1
	InvoicePriceComponentTypeCode_SURCHARGE             InvoicePriceComponentTypeCode_Value = 2
	InvoicePriceComponentTypeCode_DEDUCTION             InvoicePriceComponentTypeCode_Value = 3
	InvoicePriceComponentTypeCode_DISCOUNT              InvoicePriceComponentTypeCode_Value = 4
	InvoicePriceComponentTypeCode_TAX                   InvoicePriceComponentTypeCode_Value = 5
	InvoicePriceComponentTypeCode_INFORMATIONAL         InvoicePriceComponentTypeCode_Value = 6
)

// Enum value maps for InvoicePriceComponentTypeCode_Value.
var (
	InvoicePriceComponentTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BASE",
		2: "SURCHARGE",
		3: "DEDUCTION",
		4: "DISCOUNT",
		5: "TAX",
		6: "INFORMATIONAL",
	}
	InvoicePriceComponentTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BASE":                  1,
		"SURCHARGE":             2,
		"DEDUCTION":             3,
		"DISCOUNT":              4,
		"TAX":                   5,
		"INFORMATIONAL":         6,
	}
)

func (x InvoicePriceComponentTypeCode_Value) Enum() *InvoicePriceComponentTypeCode_Value {
	p := new(InvoicePriceComponentTypeCode_Value)
	*p = x
	return p
}

func (x InvoicePriceComponentTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvoicePriceComponentTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[124].Descriptor()
}

func (InvoicePriceComponentTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[124]
}

func (x InvoicePriceComponentTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvoicePriceComponentTypeCode_Value.Descriptor instead.
func (InvoicePriceComponentTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{124, 0}
}

type InvoiceStatusCode_Value int32

const (
	InvoiceStatusCode_INVALID_UNINITIALIZED InvoiceStatusCode_Value = 0
	InvoiceStatusCode_DRAFT                 InvoiceStatusCode_Value = 1
	InvoiceStatusCode_ISSUED                InvoiceStatusCode_Value = 2
	InvoiceStatusCode_BALANCED              InvoiceStatusCode_Value = 3
	InvoiceStatusCode_CANCELLED             InvoiceStatusCode_Value = 4
	InvoiceStatusCode_ENTERED_IN_ERROR      InvoiceStatusCode_Value = 5
)

// Enum value maps for InvoiceStatusCode_Value.
var (
	InvoiceStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ISSUED",
		3: "BALANCED",
		4: "CANCELLED",
		5: "ENTERED_IN_ERROR",
	}
	InvoiceStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ISSUED":                2,
		"BALANCED":              3,
		"CANCELLED":             4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x InvoiceStatusCode_Value) Enum() *InvoiceStatusCode_Value {
	p := new(InvoiceStatusCode_Value)
	*p = x
	return p
}

func (x InvoiceStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InvoiceStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[125].Descriptor()
}

func (InvoiceStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[125]
}

func (x InvoiceStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InvoiceStatusCode_Value.Descriptor instead.
func (InvoiceStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{125, 0}
}

type IssueSeverityCode_Value int32

const (
	IssueSeverityCode_INVALID_UNINITIALIZED IssueSeverityCode_Value = 0
	IssueSeverityCode_FATAL                 IssueSeverityCode_Value = 1
	IssueSeverityCode_ERROR                 IssueSeverityCode_Value = 2
	IssueSeverityCode_WARNING               IssueSeverityCode_Value = 3
	IssueSeverityCode_INFORMATION           IssueSeverityCode_Value = 4
)

// Enum value maps for IssueSeverityCode_Value.
var (
	IssueSeverityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FATAL",
		2: "ERROR",
		3: "WARNING",
		4: "INFORMATION",
	}
	IssueSeverityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FATAL":                 1,
		"ERROR":                 2,
		"WARNING":               3,
		"INFORMATION":           4,
	}
)

func (x IssueSeverityCode_Value) Enum() *IssueSeverityCode_Value {
	p := new(IssueSeverityCode_Value)
	*p = x
	return p
}

func (x IssueSeverityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueSeverityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[126].Descriptor()
}

func (IssueSeverityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[126]
}

func (x IssueSeverityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueSeverityCode_Value.Descriptor instead.
func (IssueSeverityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{126, 0}
}

type IssueTypeCode_Value int32

const (
	IssueTypeCode_INVALID_UNINITIALIZED IssueTypeCode_Value = 0
	IssueTypeCode_INVALID               IssueTypeCode_Value = 1
	IssueTypeCode_STRUCTURE             IssueTypeCode_Value = 2
	IssueTypeCode_REQUIRED              IssueTypeCode_Value = 3
	IssueTypeCode_VALUE                 IssueTypeCode_Value = 4
	IssueTypeCode_INVARIANT             IssueTypeCode_Value = 5
	IssueTypeCode_SECURITY              IssueTypeCode_Value = 6
	IssueTypeCode_LOGIN                 IssueTypeCode_Value = 7
	IssueTypeCode_UNKNOWN               IssueTypeCode_Value = 8
	IssueTypeCode_EXPIRED               IssueTypeCode_Value = 9
	IssueTypeCode_FORBIDDEN             IssueTypeCode_Value = 10
	IssueTypeCode_SUPPRESSED            IssueTypeCode_Value = 11
	IssueTypeCode_PROCESSING            IssueTypeCode_Value = 12
	IssueTypeCode_NOT_SUPPORTED         IssueTypeCode_Value = 13
	IssueTypeCode_DUPLICATE             IssueTypeCode_Value = 14
	IssueTypeCode_MULTIPLE_MATCHES      IssueTypeCode_Value = 15
	IssueTypeCode_NOT_FOUND             IssueTypeCode_Value = 16
	IssueTypeCode_DELETED               IssueTypeCode_Value = 17
	IssueTypeCode_TOO_LONG              IssueTypeCode_Value = 18
	IssueTypeCode_CODE_INVALID          IssueTypeCode_Value = 19
	IssueTypeCode_EXTENSION             IssueTypeCode_Value = 20
	IssueTypeCode_TOO_COSTLY            IssueTypeCode_Value = 21
	IssueTypeCode_BUSINESS_RULE         IssueTypeCode_Value = 22
	IssueTypeCode_CONFLICT              IssueTypeCode_Value = 23
	IssueTypeCode_TRANSIENT             IssueTypeCode_Value = 24
	IssueTypeCode_LOCK_ERROR            IssueTypeCode_Value = 25
	IssueTypeCode_NO_STORE              IssueTypeCode_Value = 26
	IssueTypeCode_EXCEPTION             IssueTypeCode_Value = 27
	IssueTypeCode_TIMEOUT               IssueTypeCode_Value = 28
	IssueTypeCode_INCOMPLETE            IssueTypeCode_Value = 29
	IssueTypeCode_THROTTLED             IssueTypeCode_Value = 30
	IssueTypeCode_INFORMATIONAL         IssueTypeCode_Value = 31
)

// Enum value maps for IssueTypeCode_Value.
var (
	IssueTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "INVALID",
		2:  "STRUCTURE",
		3:  "REQUIRED",
		4:  "VALUE",
		5:  "INVARIANT",
		6:  "SECURITY",
		7:  "LOGIN",
		8:  "UNKNOWN",
		9:  "EXPIRED",
		10: "FORBIDDEN",
		11: "SUPPRESSED",
		12: "PROCESSING",
		13: "NOT_SUPPORTED",
		14: "DUPLICATE",
		15: "MULTIPLE_MATCHES",
		16: "NOT_FOUND",
		17: "DELETED",
		18: "TOO_LONG",
		19: "CODE_INVALID",
		20: "EXTENSION",
		21: "TOO_COSTLY",
		22: "BUSINESS_RULE",
		23: "CONFLICT",
		24: "TRANSIENT",
		25: "LOCK_ERROR",
		26: "NO_STORE",
		27: "EXCEPTION",
		28: "TIMEOUT",
		29: "INCOMPLETE",
		30: "THROTTLED",
		31: "INFORMATIONAL",
	}
	IssueTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INVALID":               1,
		"STRUCTURE":             2,
		"REQUIRED":              3,
		"VALUE":                 4,
		"INVARIANT":             5,
		"SECURITY":              6,
		"LOGIN":                 7,
		"UNKNOWN":               8,
		"EXPIRED":               9,
		"FORBIDDEN":             10,
		"SUPPRESSED":            11,
		"PROCESSING":            12,
		"NOT_SUPPORTED":         13,
		"DUPLICATE":             14,
		"MULTIPLE_MATCHES":      15,
		"NOT_FOUND":             16,
		"DELETED":               17,
		"TOO_LONG":              18,
		"CODE_INVALID":          19,
		"EXTENSION":             20,
		"TOO_COSTLY":            21,
		"BUSINESS_RULE":         22,
		"CONFLICT":              23,
		"TRANSIENT":             24,
		"LOCK_ERROR":            25,
		"NO_STORE":              26,
		"EXCEPTION":             27,
		"TIMEOUT":               28,
		"INCOMPLETE":            29,
		"THROTTLED":             30,
		"INFORMATIONAL":         31,
	}
)

func (x IssueTypeCode_Value) Enum() *IssueTypeCode_Value {
	p := new(IssueTypeCode_Value)
	*p = x
	return p
}

func (x IssueTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[127].Descriptor()
}

func (IssueTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[127]
}

func (x IssueTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueTypeCode_Value.Descriptor instead.
func (IssueTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{127, 0}
}

type LinkTypeCode_Value int32

const (
	LinkTypeCode_INVALID_UNINITIALIZED LinkTypeCode_Value = 0
	LinkTypeCode_REPLACED_BY           LinkTypeCode_Value = 1
	LinkTypeCode_REPLACES              LinkTypeCode_Value = 2
	LinkTypeCode_REFER                 LinkTypeCode_Value = 3
	LinkTypeCode_SEEALSO               LinkTypeCode_Value = 4
)

// Enum value maps for LinkTypeCode_Value.
var (
	LinkTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REPLACED_BY",
		2: "REPLACES",
		3: "REFER",
		4: "SEEALSO",
	}
	LinkTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REPLACED_BY":           1,
		"REPLACES":              2,
		"REFER":                 3,
		"SEEALSO":               4,
	}
)

func (x LinkTypeCode_Value) Enum() *LinkTypeCode_Value {
	p := new(LinkTypeCode_Value)
	*p = x
	return p
}

func (x LinkTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[128].Descriptor()
}

func (LinkTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[128]
}

func (x LinkTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkTypeCode_Value.Descriptor instead.
func (LinkTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{128, 0}
}

type LinkageTypeCode_Value int32

const (
	LinkageTypeCode_INVALID_UNINITIALIZED LinkageTypeCode_Value = 0
	LinkageTypeCode_SOURCE                LinkageTypeCode_Value = 1
	LinkageTypeCode_ALTERNATE             LinkageTypeCode_Value = 2
	LinkageTypeCode_HISTORICAL            LinkageTypeCode_Value = 3
)

// Enum value maps for LinkageTypeCode_Value.
var (
	LinkageTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOURCE",
		2: "ALTERNATE",
		3: "HISTORICAL",
	}
	LinkageTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOURCE":                1,
		"ALTERNATE":             2,
		"HISTORICAL":            3,
	}
)

func (x LinkageTypeCode_Value) Enum() *LinkageTypeCode_Value {
	p := new(LinkageTypeCode_Value)
	*p = x
	return p
}

func (x LinkageTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LinkageTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[129].Descriptor()
}

func (LinkageTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[129]
}

func (x LinkageTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LinkageTypeCode_Value.Descriptor instead.
func (LinkageTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{129, 0}
}

type ListModeCode_Value int32

const (
	ListModeCode_INVALID_UNINITIALIZED ListModeCode_Value = 0
	ListModeCode_WORKING               ListModeCode_Value = 1
	ListModeCode_SNAPSHOT              ListModeCode_Value = 2
	ListModeCode_CHANGES               ListModeCode_Value = 3
)

// Enum value maps for ListModeCode_Value.
var (
	ListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "WORKING",
		2: "SNAPSHOT",
		3: "CHANGES",
	}
	ListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"WORKING":               1,
		"SNAPSHOT":              2,
		"CHANGES":               3,
	}
)

func (x ListModeCode_Value) Enum() *ListModeCode_Value {
	p := new(ListModeCode_Value)
	*p = x
	return p
}

func (x ListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[130].Descriptor()
}

func (ListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[130]
}

func (x ListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListModeCode_Value.Descriptor instead.
func (ListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{130, 0}
}

type ListStatusCode_Value int32

const (
	ListStatusCode_INVALID_UNINITIALIZED ListStatusCode_Value = 0
	ListStatusCode_CURRENT               ListStatusCode_Value = 1
	ListStatusCode_RETIRED               ListStatusCode_Value = 2
	ListStatusCode_ENTERED_IN_ERROR      ListStatusCode_Value = 3
)

// Enum value maps for ListStatusCode_Value.
var (
	ListStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CURRENT",
		2: "RETIRED",
		3: "ENTERED_IN_ERROR",
	}
	ListStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CURRENT":               1,
		"RETIRED":               2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x ListStatusCode_Value) Enum() *ListStatusCode_Value {
	p := new(ListStatusCode_Value)
	*p = x
	return p
}

func (x ListStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[131].Descriptor()
}

func (ListStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[131]
}

func (x ListStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListStatusCode_Value.Descriptor instead.
func (ListStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{131, 0}
}

type LocationModeCode_Value int32

const (
	LocationModeCode_INVALID_UNINITIALIZED LocationModeCode_Value = 0
	LocationModeCode_INSTANCE              LocationModeCode_Value = 1
	LocationModeCode_KIND                  LocationModeCode_Value = 2
)

// Enum value maps for LocationModeCode_Value.
var (
	LocationModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INSTANCE",
		2: "KIND",
	}
	LocationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INSTANCE":              1,
		"KIND":                  2,
	}
)

func (x LocationModeCode_Value) Enum() *LocationModeCode_Value {
	p := new(LocationModeCode_Value)
	*p = x
	return p
}

func (x LocationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[132].Descriptor()
}

func (LocationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[132]
}

func (x LocationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationModeCode_Value.Descriptor instead.
func (LocationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{132, 0}
}

type LocationStatusCode_Value int32

const (
	LocationStatusCode_INVALID_UNINITIALIZED LocationStatusCode_Value = 0
	LocationStatusCode_ACTIVE                LocationStatusCode_Value = 1
	LocationStatusCode_SUSPENDED             LocationStatusCode_Value = 2
	LocationStatusCode_INACTIVE              LocationStatusCode_Value = 3
)

// Enum value maps for LocationStatusCode_Value.
var (
	LocationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "SUSPENDED",
		3: "INACTIVE",
	}
	LocationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"SUSPENDED":             2,
		"INACTIVE":              3,
	}
)

func (x LocationStatusCode_Value) Enum() *LocationStatusCode_Value {
	p := new(LocationStatusCode_Value)
	*p = x
	return p
}

func (x LocationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[133].Descriptor()
}

func (LocationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[133]
}

func (x LocationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocationStatusCode_Value.Descriptor instead.
func (LocationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{133, 0}
}

type MatchGradeCode_Value int32

const (
	MatchGradeCode_INVALID_UNINITIALIZED MatchGradeCode_Value = 0
	MatchGradeCode_CERTAIN               MatchGradeCode_Value = 1
	MatchGradeCode_PROBABLE              MatchGradeCode_Value = 2
	MatchGradeCode_POSSIBLE              MatchGradeCode_Value = 3
	MatchGradeCode_CERTAINLY_NOT         MatchGradeCode_Value = 4
)

// Enum value maps for MatchGradeCode_Value.
var (
	MatchGradeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CERTAIN",
		2: "PROBABLE",
		3: "POSSIBLE",
		4: "CERTAINLY_NOT",
	}
	MatchGradeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CERTAIN":               1,
		"PROBABLE":              2,
		"POSSIBLE":              3,
		"CERTAINLY_NOT":         4,
	}
)

func (x MatchGradeCode_Value) Enum() *MatchGradeCode_Value {
	p := new(MatchGradeCode_Value)
	*p = x
	return p
}

func (x MatchGradeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchGradeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[134].Descriptor()
}

func (MatchGradeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[134]
}

func (x MatchGradeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchGradeCode_Value.Descriptor instead.
func (MatchGradeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{134, 0}
}

type MeasureImprovementNotationCode_Value int32

const (
	MeasureImprovementNotationCode_INVALID_UNINITIALIZED MeasureImprovementNotationCode_Value = 0
	MeasureImprovementNotationCode_INCREASE              MeasureImprovementNotationCode_Value = 1
	MeasureImprovementNotationCode_DECREASE              MeasureImprovementNotationCode_Value = 2
)

// Enum value maps for MeasureImprovementNotationCode_Value.
var (
	MeasureImprovementNotationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INCREASE",
		2: "DECREASE",
	}
	MeasureImprovementNotationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INCREASE":              1,
		"DECREASE":              2,
	}
)

func (x MeasureImprovementNotationCode_Value) Enum() *MeasureImprovementNotationCode_Value {
	p := new(MeasureImprovementNotationCode_Value)
	*p = x
	return p
}

func (x MeasureImprovementNotationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureImprovementNotationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[135].Descriptor()
}

func (MeasureImprovementNotationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[135]
}

func (x MeasureImprovementNotationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureImprovementNotationCode_Value.Descriptor instead.
func (MeasureImprovementNotationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{135, 0}
}

type MeasureReportStatusCode_Value int32

const (
	MeasureReportStatusCode_INVALID_UNINITIALIZED MeasureReportStatusCode_Value = 0
	MeasureReportStatusCode_COMPLETE              MeasureReportStatusCode_Value = 1
	MeasureReportStatusCode_PENDING               MeasureReportStatusCode_Value = 2
	MeasureReportStatusCode_ERROR                 MeasureReportStatusCode_Value = 3
)

// Enum value maps for MeasureReportStatusCode_Value.
var (
	MeasureReportStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETE",
		2: "PENDING",
		3: "ERROR",
	}
	MeasureReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETE":              1,
		"PENDING":               2,
		"ERROR":                 3,
	}
)

func (x MeasureReportStatusCode_Value) Enum() *MeasureReportStatusCode_Value {
	p := new(MeasureReportStatusCode_Value)
	*p = x
	return p
}

func (x MeasureReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[136].Descriptor()
}

func (MeasureReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[136]
}

func (x MeasureReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureReportStatusCode_Value.Descriptor instead.
func (MeasureReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{136, 0}
}

type MeasureReportTypeCode_Value int32

const (
	MeasureReportTypeCode_INVALID_UNINITIALIZED MeasureReportTypeCode_Value = 0
	MeasureReportTypeCode_INDIVIDUAL            MeasureReportTypeCode_Value = 1
	MeasureReportTypeCode_SUBJECT_LIST          MeasureReportTypeCode_Value = 2
	MeasureReportTypeCode_SUMMARY               MeasureReportTypeCode_Value = 3
	MeasureReportTypeCode_DATA_COLLECTION       MeasureReportTypeCode_Value = 4
)

// Enum value maps for MeasureReportTypeCode_Value.
var (
	MeasureReportTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INDIVIDUAL",
		2: "SUBJECT_LIST",
		3: "SUMMARY",
		4: "DATA_COLLECTION",
	}
	MeasureReportTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INDIVIDUAL":            1,
		"SUBJECT_LIST":          2,
		"SUMMARY":               3,
		"DATA_COLLECTION":       4,
	}
)

func (x MeasureReportTypeCode_Value) Enum() *MeasureReportTypeCode_Value {
	p := new(MeasureReportTypeCode_Value)
	*p = x
	return p
}

func (x MeasureReportTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeasureReportTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[137].Descriptor()
}

func (MeasureReportTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[137]
}

func (x MeasureReportTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeasureReportTypeCode_Value.Descriptor instead.
func (MeasureReportTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{137, 0}
}

type MedicationAdministrationStatusCode_Value int32

const (
	MedicationAdministrationStatusCode_INVALID_UNINITIALIZED MedicationAdministrationStatusCode_Value = 0
	MedicationAdministrationStatusCode_IN_PROGRESS           MedicationAdministrationStatusCode_Value = 1
	MedicationAdministrationStatusCode_NOT_DONE              MedicationAdministrationStatusCode_Value = 2
	MedicationAdministrationStatusCode_ON_HOLD               MedicationAdministrationStatusCode_Value = 3
	MedicationAdministrationStatusCode_COMPLETED             MedicationAdministrationStatusCode_Value = 4
	MedicationAdministrationStatusCode_ENTERED_IN_ERROR      MedicationAdministrationStatusCode_Value = 5
	MedicationAdministrationStatusCode_STOPPED               MedicationAdministrationStatusCode_Value = 6
	MedicationAdministrationStatusCode_UNKNOWN               MedicationAdministrationStatusCode_Value = 7
)

// Enum value maps for MedicationAdministrationStatusCode_Value.
var (
	MedicationAdministrationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "NOT_DONE",
		3: "ON_HOLD",
		4: "COMPLETED",
		5: "ENTERED_IN_ERROR",
		6: "STOPPED",
		7: "UNKNOWN",
	}
	MedicationAdministrationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"NOT_DONE":              2,
		"ON_HOLD":               3,
		"COMPLETED":             4,
		"ENTERED_IN_ERROR":      5,
		"STOPPED":               6,
		"UNKNOWN":               7,
	}
)

func (x MedicationAdministrationStatusCode_Value) Enum() *MedicationAdministrationStatusCode_Value {
	p := new(MedicationAdministrationStatusCode_Value)
	*p = x
	return p
}

func (x MedicationAdministrationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationAdministrationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[138].Descriptor()
}

func (MedicationAdministrationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[138]
}

func (x MedicationAdministrationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationAdministrationStatusCode_Value.Descriptor instead.
func (MedicationAdministrationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{138, 0}
}

type MedicationDispenseStatusCode_Value int32

const (
	MedicationDispenseStatusCode_INVALID_UNINITIALIZED MedicationDispenseStatusCode_Value = 0
	MedicationDispenseStatusCode_PREPARATION           MedicationDispenseStatusCode_Value = 1
	MedicationDispenseStatusCode_IN_PROGRESS           MedicationDispenseStatusCode_Value = 2
	MedicationDispenseStatusCode_CANCELLED             MedicationDispenseStatusCode_Value = 3
	MedicationDispenseStatusCode_ON_HOLD               MedicationDispenseStatusCode_Value = 4
	MedicationDispenseStatusCode_COMPLETED             MedicationDispenseStatusCode_Value = 5
	MedicationDispenseStatusCode_ENTERED_IN_ERROR      MedicationDispenseStatusCode_Value = 6
	MedicationDispenseStatusCode_STOPPED               MedicationDispenseStatusCode_Value = 7
	MedicationDispenseStatusCode_DECLINED              MedicationDispenseStatusCode_Value = 8
	MedicationDispenseStatusCode_UNKNOWN               MedicationDispenseStatusCode_Value = 9
)

// Enum value maps for MedicationDispenseStatusCode_Value.
var (
	MedicationDispenseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREPARATION",
		2: "IN_PROGRESS",
		3: "CANCELLED",
		4: "ON_HOLD",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "STOPPED",
		8: "DECLINED",
		9: "UNKNOWN",
	}
	MedicationDispenseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREPARATION":           1,
		"IN_PROGRESS":           2,
		"CANCELLED":             3,
		"ON_HOLD":               4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"STOPPED":               7,
		"DECLINED":              8,
		"UNKNOWN":               9,
	}
)

func (x MedicationDispenseStatusCode_Value) Enum() *MedicationDispenseStatusCode_Value {
	p := new(MedicationDispenseStatusCode_Value)
	*p = x
	return p
}

func (x MedicationDispenseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationDispenseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[139].Descriptor()
}

func (MedicationDispenseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[139]
}

func (x MedicationDispenseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationDispenseStatusCode_Value.Descriptor instead.
func (MedicationDispenseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{139, 0}
}

type MedicationKnowledgeStatusCode_Value int32

const (
	MedicationKnowledgeStatusCode_INVALID_UNINITIALIZED MedicationKnowledgeStatusCode_Value = 0
	MedicationKnowledgeStatusCode_ACTIVE                MedicationKnowledgeStatusCode_Value = 1
	MedicationKnowledgeStatusCode_INACTIVE              MedicationKnowledgeStatusCode_Value = 2
	MedicationKnowledgeStatusCode_ENTERED_IN_ERROR      MedicationKnowledgeStatusCode_Value = 3
)

// Enum value maps for MedicationKnowledgeStatusCode_Value.
var (
	MedicationKnowledgeStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	MedicationKnowledgeStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x MedicationKnowledgeStatusCode_Value) Enum() *MedicationKnowledgeStatusCode_Value {
	p := new(MedicationKnowledgeStatusCode_Value)
	*p = x
	return p
}

func (x MedicationKnowledgeStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationKnowledgeStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[140].Descriptor()
}

func (MedicationKnowledgeStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[140]
}

func (x MedicationKnowledgeStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationKnowledgeStatusCode_Value.Descriptor instead.
func (MedicationKnowledgeStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{140, 0}
}

type MedicationRequestIntentCode_Value int32

const (
	MedicationRequestIntentCode_INVALID_UNINITIALIZED MedicationRequestIntentCode_Value = 0
	MedicationRequestIntentCode_PROPOSAL              MedicationRequestIntentCode_Value = 1
	MedicationRequestIntentCode_PLAN                  MedicationRequestIntentCode_Value = 2
	MedicationRequestIntentCode_ORDER                 MedicationRequestIntentCode_Value = 3
	MedicationRequestIntentCode_ORIGINAL_ORDER        MedicationRequestIntentCode_Value = 4
	MedicationRequestIntentCode_REFLEX_ORDER          MedicationRequestIntentCode_Value = 5
	MedicationRequestIntentCode_FILLER_ORDER          MedicationRequestIntentCode_Value = 6
	MedicationRequestIntentCode_INSTANCE_ORDER        MedicationRequestIntentCode_Value = 7
	MedicationRequestIntentCode_OPTION                MedicationRequestIntentCode_Value = 8
)

// Enum value maps for MedicationRequestIntentCode_Value.
var (
	MedicationRequestIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSAL",
		2: "PLAN",
		3: "ORDER",
		4: "ORIGINAL_ORDER",
		5: "REFLEX_ORDER",
		6: "FILLER_ORDER",
		7: "INSTANCE_ORDER",
		8: "OPTION",
	}
	MedicationRequestIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSAL":              1,
		"PLAN":                  2,
		"ORDER":                 3,
		"ORIGINAL_ORDER":        4,
		"REFLEX_ORDER":          5,
		"FILLER_ORDER":          6,
		"INSTANCE_ORDER":        7,
		"OPTION":                8,
	}
)

func (x MedicationRequestIntentCode_Value) Enum() *MedicationRequestIntentCode_Value {
	p := new(MedicationRequestIntentCode_Value)
	*p = x
	return p
}

func (x MedicationRequestIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationRequestIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[141].Descriptor()
}

func (MedicationRequestIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[141]
}

func (x MedicationRequestIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationRequestIntentCode_Value.Descriptor instead.
func (MedicationRequestIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{141, 0}
}

type MedicationStatementStatusCodes_Value int32

const (
	MedicationStatementStatusCodes_INVALID_UNINITIALIZED MedicationStatementStatusCodes_Value = 0
	MedicationStatementStatusCodes_ACTIVE                MedicationStatementStatusCodes_Value = 1
	MedicationStatementStatusCodes_COMPLETED             MedicationStatementStatusCodes_Value = 2
	MedicationStatementStatusCodes_ENTERED_IN_ERROR      MedicationStatementStatusCodes_Value = 3
	MedicationStatementStatusCodes_INTENDED              MedicationStatementStatusCodes_Value = 4
	MedicationStatementStatusCodes_STOPPED               MedicationStatementStatusCodes_Value = 5
	MedicationStatementStatusCodes_ON_HOLD               MedicationStatementStatusCodes_Value = 6
	MedicationStatementStatusCodes_UNKNOWN               MedicationStatementStatusCodes_Value = 7
	MedicationStatementStatusCodes_NOT_TAKEN             MedicationStatementStatusCodes_Value = 8
)

// Enum value maps for MedicationStatementStatusCodes_Value.
var (
	MedicationStatementStatusCodes_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "COMPLETED",
		3: "ENTERED_IN_ERROR",
		4: "INTENDED",
		5: "STOPPED",
		6: "ON_HOLD",
		7: "UNKNOWN",
		8: "NOT_TAKEN",
	}
	MedicationStatementStatusCodes_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"COMPLETED":             2,
		"ENTERED_IN_ERROR":      3,
		"INTENDED":              4,
		"STOPPED":               5,
		"ON_HOLD":               6,
		"UNKNOWN":               7,
		"NOT_TAKEN":             8,
	}
)

func (x MedicationStatementStatusCodes_Value) Enum() *MedicationStatementStatusCodes_Value {
	p := new(MedicationStatementStatusCodes_Value)
	*p = x
	return p
}

func (x MedicationStatementStatusCodes_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationStatementStatusCodes_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[142].Descriptor()
}

func (MedicationStatementStatusCodes_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[142]
}

func (x MedicationStatementStatusCodes_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationStatementStatusCodes_Value.Descriptor instead.
func (MedicationStatementStatusCodes_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{142, 0}
}

type MedicationStatusCode_Value int32

const (
	MedicationStatusCode_INVALID_UNINITIALIZED MedicationStatusCode_Value = 0
	MedicationStatusCode_ACTIVE                MedicationStatusCode_Value = 1
	MedicationStatusCode_INACTIVE              MedicationStatusCode_Value = 2
	MedicationStatusCode_ENTERED_IN_ERROR      MedicationStatusCode_Value = 3
)

// Enum value maps for MedicationStatusCode_Value.
var (
	MedicationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "INACTIVE",
		3: "ENTERED_IN_ERROR",
	}
	MedicationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"INACTIVE":              2,
		"ENTERED_IN_ERROR":      3,
	}
)

func (x MedicationStatusCode_Value) Enum() *MedicationStatusCode_Value {
	p := new(MedicationStatusCode_Value)
	*p = x
	return p
}

func (x MedicationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[143].Descriptor()
}

func (MedicationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[143]
}

func (x MedicationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationStatusCode_Value.Descriptor instead.
func (MedicationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{143, 0}
}

type MedicationrequestStatusCode_Value int32

const (
	MedicationrequestStatusCode_INVALID_UNINITIALIZED MedicationrequestStatusCode_Value = 0
	MedicationrequestStatusCode_ACTIVE                MedicationrequestStatusCode_Value = 1
	MedicationrequestStatusCode_ON_HOLD               MedicationrequestStatusCode_Value = 2
	MedicationrequestStatusCode_CANCELLED             MedicationrequestStatusCode_Value = 3
	MedicationrequestStatusCode_COMPLETED             MedicationrequestStatusCode_Value = 4
	MedicationrequestStatusCode_ENTERED_IN_ERROR      MedicationrequestStatusCode_Value = 5
	MedicationrequestStatusCode_STOPPED               MedicationrequestStatusCode_Value = 6
	MedicationrequestStatusCode_DRAFT                 MedicationrequestStatusCode_Value = 7
	MedicationrequestStatusCode_UNKNOWN               MedicationrequestStatusCode_Value = 8
)

// Enum value maps for MedicationrequestStatusCode_Value.
var (
	MedicationrequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACTIVE",
		2: "ON_HOLD",
		3: "CANCELLED",
		4: "COMPLETED",
		5: "ENTERED_IN_ERROR",
		6: "STOPPED",
		7: "DRAFT",
		8: "UNKNOWN",
	}
	MedicationrequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACTIVE":                1,
		"ON_HOLD":               2,
		"CANCELLED":             3,
		"COMPLETED":             4,
		"ENTERED_IN_ERROR":      5,
		"STOPPED":               6,
		"DRAFT":                 7,
		"UNKNOWN":               8,
	}
)

func (x MedicationrequestStatusCode_Value) Enum() *MedicationrequestStatusCode_Value {
	p := new(MedicationrequestStatusCode_Value)
	*p = x
	return p
}

func (x MedicationrequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MedicationrequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[144].Descriptor()
}

func (MedicationrequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[144]
}

func (x MedicationrequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MedicationrequestStatusCode_Value.Descriptor instead.
func (MedicationrequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{144, 0}
}

type MessageSignificanceCategoryCode_Value int32

const (
	MessageSignificanceCategoryCode_INVALID_UNINITIALIZED MessageSignificanceCategoryCode_Value = 0
	MessageSignificanceCategoryCode_CONSEQUENCE           MessageSignificanceCategoryCode_Value = 1
	MessageSignificanceCategoryCode_CURRENCY              MessageSignificanceCategoryCode_Value = 2
	MessageSignificanceCategoryCode_NOTIFICATION          MessageSignificanceCategoryCode_Value = 3
)

// Enum value maps for MessageSignificanceCategoryCode_Value.
var (
	MessageSignificanceCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CONSEQUENCE",
		2: "CURRENCY",
		3: "NOTIFICATION",
	}
	MessageSignificanceCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CONSEQUENCE":           1,
		"CURRENCY":              2,
		"NOTIFICATION":          3,
	}
)

func (x MessageSignificanceCategoryCode_Value) Enum() *MessageSignificanceCategoryCode_Value {
	p := new(MessageSignificanceCategoryCode_Value)
	*p = x
	return p
}

func (x MessageSignificanceCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageSignificanceCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[145].Descriptor()
}

func (MessageSignificanceCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[145]
}

func (x MessageSignificanceCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageSignificanceCategoryCode_Value.Descriptor instead.
func (MessageSignificanceCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{145, 0}
}

type MessageheaderResponseRequestCode_Value int32

const (
	MessageheaderResponseRequestCode_INVALID_UNINITIALIZED MessageheaderResponseRequestCode_Value = 0
	MessageheaderResponseRequestCode_ALWAYS                MessageheaderResponseRequestCode_Value = 1
	MessageheaderResponseRequestCode_ON_ERROR              MessageheaderResponseRequestCode_Value = 2
	MessageheaderResponseRequestCode_NEVER                 MessageheaderResponseRequestCode_Value = 3
	MessageheaderResponseRequestCode_ON_SUCCESS            MessageheaderResponseRequestCode_Value = 4
)

// Enum value maps for MessageheaderResponseRequestCode_Value.
var (
	MessageheaderResponseRequestCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ALWAYS",
		2: "ON_ERROR",
		3: "NEVER",
		4: "ON_SUCCESS",
	}
	MessageheaderResponseRequestCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ALWAYS":                1,
		"ON_ERROR":              2,
		"NEVER":                 3,
		"ON_SUCCESS":            4,
	}
)

func (x MessageheaderResponseRequestCode_Value) Enum() *MessageheaderResponseRequestCode_Value {
	p := new(MessageheaderResponseRequestCode_Value)
	*p = x
	return p
}

func (x MessageheaderResponseRequestCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageheaderResponseRequestCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[146].Descriptor()
}

func (MessageheaderResponseRequestCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[146]
}

func (x MessageheaderResponseRequestCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageheaderResponseRequestCode_Value.Descriptor instead.
func (MessageheaderResponseRequestCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{146, 0}
}

type NameUseCode_Value int32

const (
	NameUseCode_INVALID_UNINITIALIZED NameUseCode_Value = 0
	NameUseCode_USUAL                 NameUseCode_Value = 1
	NameUseCode_OFFICIAL              NameUseCode_Value = 2
	NameUseCode_TEMP                  NameUseCode_Value = 3
	NameUseCode_NICKNAME              NameUseCode_Value = 4
	NameUseCode_ANONYMOUS             NameUseCode_Value = 5
	NameUseCode_OLD                   NameUseCode_Value = 6
	NameUseCode_MAIDEN                NameUseCode_Value = 7
)

// Enum value maps for NameUseCode_Value.
var (
	NameUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "USUAL",
		2: "OFFICIAL",
		3: "TEMP",
		4: "NICKNAME",
		5: "ANONYMOUS",
		6: "OLD",
		7: "MAIDEN",
	}
	NameUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"USUAL":                 1,
		"OFFICIAL":              2,
		"TEMP":                  3,
		"NICKNAME":              4,
		"ANONYMOUS":             5,
		"OLD":                   6,
		"MAIDEN":                7,
	}
)

func (x NameUseCode_Value) Enum() *NameUseCode_Value {
	p := new(NameUseCode_Value)
	*p = x
	return p
}

func (x NameUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NameUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[147].Descriptor()
}

func (NameUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[147]
}

func (x NameUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NameUseCode_Value.Descriptor instead.
func (NameUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{147, 0}
}

type NamingSystemIdentifierTypeCode_Value int32

const (
	NamingSystemIdentifierTypeCode_INVALID_UNINITIALIZED NamingSystemIdentifierTypeCode_Value = 0
	NamingSystemIdentifierTypeCode_OID                   NamingSystemIdentifierTypeCode_Value = 1
	NamingSystemIdentifierTypeCode_UUID                  NamingSystemIdentifierTypeCode_Value = 2
	NamingSystemIdentifierTypeCode_URI                   NamingSystemIdentifierTypeCode_Value = 3
	NamingSystemIdentifierTypeCode_OTHER                 NamingSystemIdentifierTypeCode_Value = 4
)

// Enum value maps for NamingSystemIdentifierTypeCode_Value.
var (
	NamingSystemIdentifierTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OID",
		2: "UUID",
		3: "URI",
		4: "OTHER",
	}
	NamingSystemIdentifierTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OID":                   1,
		"UUID":                  2,
		"URI":                   3,
		"OTHER":                 4,
	}
)

func (x NamingSystemIdentifierTypeCode_Value) Enum() *NamingSystemIdentifierTypeCode_Value {
	p := new(NamingSystemIdentifierTypeCode_Value)
	*p = x
	return p
}

func (x NamingSystemIdentifierTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamingSystemIdentifierTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[148].Descriptor()
}

func (NamingSystemIdentifierTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[148]
}

func (x NamingSystemIdentifierTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamingSystemIdentifierTypeCode_Value.Descriptor instead.
func (NamingSystemIdentifierTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{148, 0}
}

type NamingSystemTypeCode_Value int32

const (
	NamingSystemTypeCode_INVALID_UNINITIALIZED NamingSystemTypeCode_Value = 0
	NamingSystemTypeCode_CODESYSTEM            NamingSystemTypeCode_Value = 1
	NamingSystemTypeCode_IDENTIFIER            NamingSystemTypeCode_Value = 2
	NamingSystemTypeCode_ROOT                  NamingSystemTypeCode_Value = 3
)

// Enum value maps for NamingSystemTypeCode_Value.
var (
	NamingSystemTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CODESYSTEM",
		2: "IDENTIFIER",
		3: "ROOT",
	}
	NamingSystemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CODESYSTEM":            1,
		"IDENTIFIER":            2,
		"ROOT":                  3,
	}
)

func (x NamingSystemTypeCode_Value) Enum() *NamingSystemTypeCode_Value {
	p := new(NamingSystemTypeCode_Value)
	*p = x
	return p
}

func (x NamingSystemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamingSystemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[149].Descriptor()
}

func (NamingSystemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[149]
}

func (x NamingSystemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamingSystemTypeCode_Value.Descriptor instead.
func (NamingSystemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{149, 0}
}

type NarrativeStatusCode_Value int32

const (
	NarrativeStatusCode_INVALID_UNINITIALIZED NarrativeStatusCode_Value = 0
	NarrativeStatusCode_GENERATED             NarrativeStatusCode_Value = 1
	NarrativeStatusCode_EXTENSIONS            NarrativeStatusCode_Value = 2
	NarrativeStatusCode_ADDITIONAL            NarrativeStatusCode_Value = 3
	NarrativeStatusCode_EMPTY                 NarrativeStatusCode_Value = 4
)

// Enum value maps for NarrativeStatusCode_Value.
var (
	NarrativeStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "GENERATED",
		2: "EXTENSIONS",
		3: "ADDITIONAL",
		4: "EMPTY",
	}
	NarrativeStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GENERATED":             1,
		"EXTENSIONS":            2,
		"ADDITIONAL":            3,
		"EMPTY":                 4,
	}
)

func (x NarrativeStatusCode_Value) Enum() *NarrativeStatusCode_Value {
	p := new(NarrativeStatusCode_Value)
	*p = x
	return p
}

func (x NarrativeStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NarrativeStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[150].Descriptor()
}

func (NarrativeStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[150]
}

func (x NarrativeStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NarrativeStatusCode_Value.Descriptor instead.
func (NarrativeStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{150, 0}
}

type NoteTypeCode_Value int32

const (
	NoteTypeCode_INVALID_UNINITIALIZED NoteTypeCode_Value = 0
	NoteTypeCode_DISPLAY               NoteTypeCode_Value = 1
	NoteTypeCode_PRINT                 NoteTypeCode_Value = 2
	NoteTypeCode_PRINTOPER             NoteTypeCode_Value = 3
)

// Enum value maps for NoteTypeCode_Value.
var (
	NoteTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DISPLAY",
		2: "PRINT",
		3: "PRINTOPER",
	}
	NoteTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DISPLAY":               1,
		"PRINT":                 2,
		"PRINTOPER":             3,
	}
)

func (x NoteTypeCode_Value) Enum() *NoteTypeCode_Value {
	p := new(NoteTypeCode_Value)
	*p = x
	return p
}

func (x NoteTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NoteTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[151].Descriptor()
}

func (NoteTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[151]
}

func (x NoteTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NoteTypeCode_Value.Descriptor instead.
func (NoteTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{151, 0}
}

type ObservationDataTypeCode_Value int32

const (
	ObservationDataTypeCode_INVALID_UNINITIALIZED ObservationDataTypeCode_Value = 0
	ObservationDataTypeCode_QUANTITY              ObservationDataTypeCode_Value = 1
	ObservationDataTypeCode_CODEABLE_CONCEPT      ObservationDataTypeCode_Value = 2
	ObservationDataTypeCode_STRING                ObservationDataTypeCode_Value = 3
	ObservationDataTypeCode_BOOLEAN               ObservationDataTypeCode_Value = 4
	ObservationDataTypeCode_INTEGER               ObservationDataTypeCode_Value = 5
	ObservationDataTypeCode_RANGE                 ObservationDataTypeCode_Value = 6
	ObservationDataTypeCode_RATIO                 ObservationDataTypeCode_Value = 7
	ObservationDataTypeCode_SAMPLED_DATA          ObservationDataTypeCode_Value = 8
	ObservationDataTypeCode_TIME                  ObservationDataTypeCode_Value = 9
	ObservationDataTypeCode_DATE_TIME             ObservationDataTypeCode_Value = 10
	ObservationDataTypeCode_PERIOD                ObservationDataTypeCode_Value = 11
)

// Enum value maps for ObservationDataTypeCode_Value.
var (
	ObservationDataTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "QUANTITY",
		2:  "CODEABLE_CONCEPT",
		3:  "STRING",
		4:  "BOOLEAN",
		5:  "INTEGER",
		6:  "RANGE",
		7:  "RATIO",
		8:  "SAMPLED_DATA",
		9:  "TIME",
		10: "DATE_TIME",
		11: "PERIOD",
	}
	ObservationDataTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"QUANTITY":              1,
		"CODEABLE_CONCEPT":      2,
		"STRING":                3,
		"BOOLEAN":               4,
		"INTEGER":               5,
		"RANGE":                 6,
		"RATIO":                 7,
		"SAMPLED_DATA":          8,
		"TIME":                  9,
		"DATE_TIME":             10,
		"PERIOD":                11,
	}
)

func (x ObservationDataTypeCode_Value) Enum() *ObservationDataTypeCode_Value {
	p := new(ObservationDataTypeCode_Value)
	*p = x
	return p
}

func (x ObservationDataTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationDataTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[152].Descriptor()
}

func (ObservationDataTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[152]
}

func (x ObservationDataTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationDataTypeCode_Value.Descriptor instead.
func (ObservationDataTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{152, 0}
}

type ObservationRangeCategoryCode_Value int32

const (
	ObservationRangeCategoryCode_INVALID_UNINITIALIZED ObservationRangeCategoryCode_Value = 0
	ObservationRangeCategoryCode_REFERENCE             ObservationRangeCategoryCode_Value = 1
	ObservationRangeCategoryCode_CRITICAL              ObservationRangeCategoryCode_Value = 2
	ObservationRangeCategoryCode_ABSOLUTE              ObservationRangeCategoryCode_Value = 3
)

// Enum value maps for ObservationRangeCategoryCode_Value.
var (
	ObservationRangeCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REFERENCE",
		2: "CRITICAL",
		3: "ABSOLUTE",
	}
	ObservationRangeCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REFERENCE":             1,
		"CRITICAL":              2,
		"ABSOLUTE":              3,
	}
)

func (x ObservationRangeCategoryCode_Value) Enum() *ObservationRangeCategoryCode_Value {
	p := new(ObservationRangeCategoryCode_Value)
	*p = x
	return p
}

func (x ObservationRangeCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationRangeCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[153].Descriptor()
}

func (ObservationRangeCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[153]
}

func (x ObservationRangeCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationRangeCategoryCode_Value.Descriptor instead.
func (ObservationRangeCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{153, 0}
}

type ObservationStatusCode_Value int32

const (
	ObservationStatusCode_INVALID_UNINITIALIZED ObservationStatusCode_Value = 0
	ObservationStatusCode_REGISTERED            ObservationStatusCode_Value = 1
	ObservationStatusCode_PRELIMINARY           ObservationStatusCode_Value = 2
	ObservationStatusCode_FINAL                 ObservationStatusCode_Value = 3
	ObservationStatusCode_AMENDED               ObservationStatusCode_Value = 4
	ObservationStatusCode_CORRECTED             ObservationStatusCode_Value = 5
	ObservationStatusCode_CANCELLED             ObservationStatusCode_Value = 6
	ObservationStatusCode_ENTERED_IN_ERROR      ObservationStatusCode_Value = 7
	ObservationStatusCode_UNKNOWN               ObservationStatusCode_Value = 8
)

// Enum value maps for ObservationStatusCode_Value.
var (
	ObservationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REGISTERED",
		2: "PRELIMINARY",
		3: "FINAL",
		4: "AMENDED",
		5: "CORRECTED",
		6: "CANCELLED",
		7: "ENTERED_IN_ERROR",
		8: "UNKNOWN",
	}
	ObservationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REGISTERED":            1,
		"PRELIMINARY":           2,
		"FINAL":                 3,
		"AMENDED":               4,
		"CORRECTED":             5,
		"CANCELLED":             6,
		"ENTERED_IN_ERROR":      7,
		"UNKNOWN":               8,
	}
)

func (x ObservationStatusCode_Value) Enum() *ObservationStatusCode_Value {
	p := new(ObservationStatusCode_Value)
	*p = x
	return p
}

func (x ObservationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObservationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[154].Descriptor()
}

func (ObservationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[154]
}

func (x ObservationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObservationStatusCode_Value.Descriptor instead.
func (ObservationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{154, 0}
}

type OperationKindCode_Value int32

const (
	OperationKindCode_INVALID_UNINITIALIZED OperationKindCode_Value = 0
	OperationKindCode_OPERATION             OperationKindCode_Value = 1
	OperationKindCode_QUERY                 OperationKindCode_Value = 2
)

// Enum value maps for OperationKindCode_Value.
var (
	OperationKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OPERATION",
		2: "QUERY",
	}
	OperationKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OPERATION":             1,
		"QUERY":                 2,
	}
)

func (x OperationKindCode_Value) Enum() *OperationKindCode_Value {
	p := new(OperationKindCode_Value)
	*p = x
	return p
}

func (x OperationKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[155].Descriptor()
}

func (OperationKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[155]
}

func (x OperationKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationKindCode_Value.Descriptor instead.
func (OperationKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{155, 0}
}

type OperationParameterUseCode_Value int32

const (
	OperationParameterUseCode_INVALID_UNINITIALIZED OperationParameterUseCode_Value = 0
	OperationParameterUseCode_IN                    OperationParameterUseCode_Value = 1
	OperationParameterUseCode_OUT                   OperationParameterUseCode_Value = 2
)

// Enum value maps for OperationParameterUseCode_Value.
var (
	OperationParameterUseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN",
		2: "OUT",
	}
	OperationParameterUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN":                    1,
		"OUT":                   2,
	}
)

func (x OperationParameterUseCode_Value) Enum() *OperationParameterUseCode_Value {
	p := new(OperationParameterUseCode_Value)
	*p = x
	return p
}

func (x OperationParameterUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationParameterUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[156].Descriptor()
}

func (OperationParameterUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[156]
}

func (x OperationParameterUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationParameterUseCode_Value.Descriptor instead.
func (OperationParameterUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{156, 0}
}

type OrientationTypeCode_Value int32

const (
	OrientationTypeCode_INVALID_UNINITIALIZED OrientationTypeCode_Value = 0
	OrientationTypeCode_SENSE                 OrientationTypeCode_Value = 1
	OrientationTypeCode_ANTISENSE             OrientationTypeCode_Value = 2
)

// Enum value maps for OrientationTypeCode_Value.
var (
	OrientationTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SENSE",
		2: "ANTISENSE",
	}
	OrientationTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SENSE":                 1,
		"ANTISENSE":             2,
	}
)

func (x OrientationTypeCode_Value) Enum() *OrientationTypeCode_Value {
	p := new(OrientationTypeCode_Value)
	*p = x
	return p
}

func (x OrientationTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrientationTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[157].Descriptor()
}

func (OrientationTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[157]
}

func (x OrientationTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrientationTypeCode_Value.Descriptor instead.
func (OrientationTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{157, 0}
}

type ParticipantRequiredCode_Value int32

const (
	ParticipantRequiredCode_INVALID_UNINITIALIZED ParticipantRequiredCode_Value = 0
	ParticipantRequiredCode_REQUIRED              ParticipantRequiredCode_Value = 1
	ParticipantRequiredCode_OPTIONAL              ParticipantRequiredCode_Value = 2
	ParticipantRequiredCode_INFORMATION_ONLY      ParticipantRequiredCode_Value = 3
)

// Enum value maps for ParticipantRequiredCode_Value.
var (
	ParticipantRequiredCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUIRED",
		2: "OPTIONAL",
		3: "INFORMATION_ONLY",
	}
	ParticipantRequiredCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUIRED":              1,
		"OPTIONAL":              2,
		"INFORMATION_ONLY":      3,
	}
)

func (x ParticipantRequiredCode_Value) Enum() *ParticipantRequiredCode_Value {
	p := new(ParticipantRequiredCode_Value)
	*p = x
	return p
}

func (x ParticipantRequiredCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipantRequiredCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[158].Descriptor()
}

func (ParticipantRequiredCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[158]
}

func (x ParticipantRequiredCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipantRequiredCode_Value.Descriptor instead.
func (ParticipantRequiredCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{158, 0}
}

type ParticipationStatusCode_Value int32

const (
	ParticipationStatusCode_INVALID_UNINITIALIZED ParticipationStatusCode_Value = 0
	ParticipationStatusCode_ACCEPTED              ParticipationStatusCode_Value = 1
	ParticipationStatusCode_DECLINED              ParticipationStatusCode_Value = 2
	ParticipationStatusCode_TENTATIVE             ParticipationStatusCode_Value = 3
	ParticipationStatusCode_NEEDS_ACTION          ParticipationStatusCode_Value = 4
)

// Enum value maps for ParticipationStatusCode_Value.
var (
	ParticipationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ACCEPTED",
		2: "DECLINED",
		3: "TENTATIVE",
		4: "NEEDS_ACTION",
	}
	ParticipationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ACCEPTED":              1,
		"DECLINED":              2,
		"TENTATIVE":             3,
		"NEEDS_ACTION":          4,
	}
)

func (x ParticipationStatusCode_Value) Enum() *ParticipationStatusCode_Value {
	p := new(ParticipationStatusCode_Value)
	*p = x
	return p
}

func (x ParticipationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParticipationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[159].Descriptor()
}

func (ParticipationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[159]
}

func (x ParticipationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParticipationStatusCode_Value.Descriptor instead.
func (ParticipationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{159, 0}
}

type PropertyRepresentationCode_Value int32

const (
	PropertyRepresentationCode_INVALID_UNINITIALIZED PropertyRepresentationCode_Value = 0
	PropertyRepresentationCode_XML_ATTR              PropertyRepresentationCode_Value = 1
	PropertyRepresentationCode_XML_TEXT              PropertyRepresentationCode_Value = 2
	PropertyRepresentationCode_TYPE_ATTR             PropertyRepresentationCode_Value = 3
	PropertyRepresentationCode_CDA_TEXT              PropertyRepresentationCode_Value = 4
	PropertyRepresentationCode_XHTML                 PropertyRepresentationCode_Value = 5
)

// Enum value maps for PropertyRepresentationCode_Value.
var (
	PropertyRepresentationCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "XML_ATTR",
		2: "XML_TEXT",
		3: "TYPE_ATTR",
		4: "CDA_TEXT",
		5: "XHTML",
	}
	PropertyRepresentationCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"XML_ATTR":              1,
		"XML_TEXT":              2,
		"TYPE_ATTR":             3,
		"CDA_TEXT":              4,
		"XHTML":                 5,
	}
)

func (x PropertyRepresentationCode_Value) Enum() *PropertyRepresentationCode_Value {
	p := new(PropertyRepresentationCode_Value)
	*p = x
	return p
}

func (x PropertyRepresentationCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyRepresentationCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[160].Descriptor()
}

func (PropertyRepresentationCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[160]
}

func (x PropertyRepresentationCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyRepresentationCode_Value.Descriptor instead.
func (PropertyRepresentationCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{160, 0}
}

type PropertyTypeCode_Value int32

const (
	PropertyTypeCode_INVALID_UNINITIALIZED PropertyTypeCode_Value = 0
	PropertyTypeCode_CODE                  PropertyTypeCode_Value = 1
	PropertyTypeCode_CODING                PropertyTypeCode_Value = 2
	PropertyTypeCode_STRING                PropertyTypeCode_Value = 3
	PropertyTypeCode_INTEGER               PropertyTypeCode_Value = 4
	PropertyTypeCode_BOOLEAN               PropertyTypeCode_Value = 5
	PropertyTypeCode_DATE_TIME             PropertyTypeCode_Value = 6
	PropertyTypeCode_DECIMAL               PropertyTypeCode_Value = 7
)

// Enum value maps for PropertyTypeCode_Value.
var (
	PropertyTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CODE",
		2: "CODING",
		3: "STRING",
		4: "INTEGER",
		5: "BOOLEAN",
		6: "DATE_TIME",
		7: "DECIMAL",
	}
	PropertyTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CODE":                  1,
		"CODING":                2,
		"STRING":                3,
		"INTEGER":               4,
		"BOOLEAN":               5,
		"DATE_TIME":             6,
		"DECIMAL":               7,
	}
)

func (x PropertyTypeCode_Value) Enum() *PropertyTypeCode_Value {
	p := new(PropertyTypeCode_Value)
	*p = x
	return p
}

func (x PropertyTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PropertyTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[161].Descriptor()
}

func (PropertyTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[161]
}

func (x PropertyTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PropertyTypeCode_Value.Descriptor instead.
func (PropertyTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{161, 0}
}

type ProvenanceEntityRoleCode_Value int32

const (
	ProvenanceEntityRoleCode_INVALID_UNINITIALIZED ProvenanceEntityRoleCode_Value = 0
	ProvenanceEntityRoleCode_DERIVATION            ProvenanceEntityRoleCode_Value = 1
	ProvenanceEntityRoleCode_REVISION              ProvenanceEntityRoleCode_Value = 2
	ProvenanceEntityRoleCode_QUOTATION             ProvenanceEntityRoleCode_Value = 3
	ProvenanceEntityRoleCode_SOURCE                ProvenanceEntityRoleCode_Value = 4
	ProvenanceEntityRoleCode_REMOVAL               ProvenanceEntityRoleCode_Value = 5
)

// Enum value maps for ProvenanceEntityRoleCode_Value.
var (
	ProvenanceEntityRoleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DERIVATION",
		2: "REVISION",
		3: "QUOTATION",
		4: "SOURCE",
		5: "REMOVAL",
	}
	ProvenanceEntityRoleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DERIVATION":            1,
		"REVISION":              2,
		"QUOTATION":             3,
		"SOURCE":                4,
		"REMOVAL":               5,
	}
)

func (x ProvenanceEntityRoleCode_Value) Enum() *ProvenanceEntityRoleCode_Value {
	p := new(ProvenanceEntityRoleCode_Value)
	*p = x
	return p
}

func (x ProvenanceEntityRoleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvenanceEntityRoleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[162].Descriptor()
}

func (ProvenanceEntityRoleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[162]
}

func (x ProvenanceEntityRoleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvenanceEntityRoleCode_Value.Descriptor instead.
func (ProvenanceEntityRoleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{162, 0}
}

type PublicationStatusCode_Value int32

const (
	PublicationStatusCode_INVALID_UNINITIALIZED PublicationStatusCode_Value = 0
	PublicationStatusCode_DRAFT                 PublicationStatusCode_Value = 1
	PublicationStatusCode_ACTIVE                PublicationStatusCode_Value = 2
	PublicationStatusCode_RETIRED               PublicationStatusCode_Value = 3
	PublicationStatusCode_UNKNOWN               PublicationStatusCode_Value = 4
)

// Enum value maps for PublicationStatusCode_Value.
var (
	PublicationStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "RETIRED",
		4: "UNKNOWN",
	}
	PublicationStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"RETIRED":               3,
		"UNKNOWN":               4,
	}
)

func (x PublicationStatusCode_Value) Enum() *PublicationStatusCode_Value {
	p := new(PublicationStatusCode_Value)
	*p = x
	return p
}

func (x PublicationStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PublicationStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[163].Descriptor()
}

func (PublicationStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[163]
}

func (x PublicationStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PublicationStatusCode_Value.Descriptor instead.
func (PublicationStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{163, 0}
}

type QualityTypeCode_Value int32

const (
	QualityTypeCode_INVALID_UNINITIALIZED QualityTypeCode_Value = 0
	QualityTypeCode_INDEL                 QualityTypeCode_Value = 1
	QualityTypeCode_SNP                   QualityTypeCode_Value = 2
	QualityTypeCode_UNKNOWN               QualityTypeCode_Value = 3
)

// Enum value maps for QualityTypeCode_Value.
var (
	QualityTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "INDEL",
		2: "SNP",
		3: "UNKNOWN",
	}
	QualityTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"INDEL":                 1,
		"SNP":                   2,
		"UNKNOWN":               3,
	}
)

func (x QualityTypeCode_Value) Enum() *QualityTypeCode_Value {
	p := new(QualityTypeCode_Value)
	*p = x
	return p
}

func (x QualityTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QualityTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[164].Descriptor()
}

func (QualityTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[164]
}

func (x QualityTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QualityTypeCode_Value.Descriptor instead.
func (QualityTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{164, 0}
}

type QuantityComparatorCode_Value int32

const (
	QuantityComparatorCode_INVALID_UNINITIALIZED    QuantityComparatorCode_Value = 0
	QuantityComparatorCode_LESS_THAN                QuantityComparatorCode_Value = 1
	QuantityComparatorCode_LESS_THAN_OR_EQUAL_TO    QuantityComparatorCode_Value = 2
	QuantityComparatorCode_GREATER_THAN_OR_EQUAL_TO QuantityComparatorCode_Value = 3
	QuantityComparatorCode_GREATER_THAN             QuantityComparatorCode_Value = 4
)

// Enum value maps for QuantityComparatorCode_Value.
var (
	QuantityComparatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LESS_THAN",
		2: "LESS_THAN_OR_EQUAL_TO",
		3: "GREATER_THAN_OR_EQUAL_TO",
		4: "GREATER_THAN",
	}
	QuantityComparatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":    0,
		"LESS_THAN":                1,
		"LESS_THAN_OR_EQUAL_TO":    2,
		"GREATER_THAN_OR_EQUAL_TO": 3,
		"GREATER_THAN":             4,
	}
)

func (x QuantityComparatorCode_Value) Enum() *QuantityComparatorCode_Value {
	p := new(QuantityComparatorCode_Value)
	*p = x
	return p
}

func (x QuantityComparatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantityComparatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[165].Descriptor()
}

func (QuantityComparatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[165]
}

func (x QuantityComparatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantityComparatorCode_Value.Descriptor instead.
func (QuantityComparatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{165, 0}
}

type QuestionnaireItemOperatorCode_Value int32

const (
	QuestionnaireItemOperatorCode_INVALID_UNINITIALIZED    QuestionnaireItemOperatorCode_Value = 0
	QuestionnaireItemOperatorCode_EXISTS                   QuestionnaireItemOperatorCode_Value = 1
	QuestionnaireItemOperatorCode_EQUALS                   QuestionnaireItemOperatorCode_Value = 2
	QuestionnaireItemOperatorCode_NOT_EQUAL_TO             QuestionnaireItemOperatorCode_Value = 3
	QuestionnaireItemOperatorCode_GREATER_THAN             QuestionnaireItemOperatorCode_Value = 4
	QuestionnaireItemOperatorCode_LESS_THAN                QuestionnaireItemOperatorCode_Value = 5
	QuestionnaireItemOperatorCode_GREATER_THAN_OR_EQUAL_TO QuestionnaireItemOperatorCode_Value = 6
	QuestionnaireItemOperatorCode_LESS_THAN_OR_EQUAL_TO    QuestionnaireItemOperatorCode_Value = 7
)

// Enum value maps for QuestionnaireItemOperatorCode_Value.
var (
	QuestionnaireItemOperatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EXISTS",
		2: "EQUALS",
		3: "NOT_EQUAL_TO",
		4: "GREATER_THAN",
		5: "LESS_THAN",
		6: "GREATER_THAN_OR_EQUAL_TO",
		7: "LESS_THAN_OR_EQUAL_TO",
	}
	QuestionnaireItemOperatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":    0,
		"EXISTS":                   1,
		"EQUALS":                   2,
		"NOT_EQUAL_TO":             3,
		"GREATER_THAN":             4,
		"LESS_THAN":                5,
		"GREATER_THAN_OR_EQUAL_TO": 6,
		"LESS_THAN_OR_EQUAL_TO":    7,
	}
)

func (x QuestionnaireItemOperatorCode_Value) Enum() *QuestionnaireItemOperatorCode_Value {
	p := new(QuestionnaireItemOperatorCode_Value)
	*p = x
	return p
}

func (x QuestionnaireItemOperatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireItemOperatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[166].Descriptor()
}

func (QuestionnaireItemOperatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[166]
}

func (x QuestionnaireItemOperatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireItemOperatorCode_Value.Descriptor instead.
func (QuestionnaireItemOperatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{166, 0}
}

type QuestionnaireItemTypeCode_Value int32

const (
	QuestionnaireItemTypeCode_INVALID_UNINITIALIZED QuestionnaireItemTypeCode_Value = 0
	QuestionnaireItemTypeCode_GROUP                 QuestionnaireItemTypeCode_Value = 1
	QuestionnaireItemTypeCode_DISPLAY               QuestionnaireItemTypeCode_Value = 2
	QuestionnaireItemTypeCode_QUESTION              QuestionnaireItemTypeCode_Value = 3
	QuestionnaireItemTypeCode_BOOLEAN               QuestionnaireItemTypeCode_Value = 4
	QuestionnaireItemTypeCode_DECIMAL               QuestionnaireItemTypeCode_Value = 5
	QuestionnaireItemTypeCode_INTEGER               QuestionnaireItemTypeCode_Value = 6
	QuestionnaireItemTypeCode_DATE                  QuestionnaireItemTypeCode_Value = 7
	QuestionnaireItemTypeCode_DATE_TIME             QuestionnaireItemTypeCode_Value = 8
	QuestionnaireItemTypeCode_TIME                  QuestionnaireItemTypeCode_Value = 9
	QuestionnaireItemTypeCode_STRING                QuestionnaireItemTypeCode_Value = 10
	QuestionnaireItemTypeCode_TEXT                  QuestionnaireItemTypeCode_Value = 11
	QuestionnaireItemTypeCode_URL                   QuestionnaireItemTypeCode_Value = 12
	QuestionnaireItemTypeCode_CHOICE                QuestionnaireItemTypeCode_Value = 13
	QuestionnaireItemTypeCode_OPEN_CHOICE           QuestionnaireItemTypeCode_Value = 14
	QuestionnaireItemTypeCode_ATTACHMENT            QuestionnaireItemTypeCode_Value = 15
	QuestionnaireItemTypeCode_REFERENCE             QuestionnaireItemTypeCode_Value = 16
	QuestionnaireItemTypeCode_QUANTITY              QuestionnaireItemTypeCode_Value = 17
)

// Enum value maps for QuestionnaireItemTypeCode_Value.
var (
	QuestionnaireItemTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "GROUP",
		2:  "DISPLAY",
		3:  "QUESTION",
		4:  "BOOLEAN",
		5:  "DECIMAL",
		6:  "INTEGER",
		7:  "DATE",
		8:  "DATE_TIME",
		9:  "TIME",
		10: "STRING",
		11: "TEXT",
		12: "URL",
		13: "CHOICE",
		14: "OPEN_CHOICE",
		15: "ATTACHMENT",
		16: "REFERENCE",
		17: "QUANTITY",
	}
	QuestionnaireItemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"GROUP":                 1,
		"DISPLAY":               2,
		"QUESTION":              3,
		"BOOLEAN":               4,
		"DECIMAL":               5,
		"INTEGER":               6,
		"DATE":                  7,
		"DATE_TIME":             8,
		"TIME":                  9,
		"STRING":                10,
		"TEXT":                  11,
		"URL":                   12,
		"CHOICE":                13,
		"OPEN_CHOICE":           14,
		"ATTACHMENT":            15,
		"REFERENCE":             16,
		"QUANTITY":              17,
	}
)

func (x QuestionnaireItemTypeCode_Value) Enum() *QuestionnaireItemTypeCode_Value {
	p := new(QuestionnaireItemTypeCode_Value)
	*p = x
	return p
}

func (x QuestionnaireItemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireItemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[167].Descriptor()
}

func (QuestionnaireItemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[167]
}

func (x QuestionnaireItemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireItemTypeCode_Value.Descriptor instead.
func (QuestionnaireItemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{167, 0}
}

type QuestionnaireItemUsageModeCode_Value int32

const (
	QuestionnaireItemUsageModeCode_INVALID_UNINITIALIZED     QuestionnaireItemUsageModeCode_Value = 0
	QuestionnaireItemUsageModeCode_CAPTURE_DISPLAY           QuestionnaireItemUsageModeCode_Value = 1
	QuestionnaireItemUsageModeCode_CAPTURE                   QuestionnaireItemUsageModeCode_Value = 2
	QuestionnaireItemUsageModeCode_DISPLAY                   QuestionnaireItemUsageModeCode_Value = 3
	QuestionnaireItemUsageModeCode_DISPLAY_NON_EMPTY         QuestionnaireItemUsageModeCode_Value = 4
	QuestionnaireItemUsageModeCode_CAPTURE_DISPLAY_NON_EMPTY QuestionnaireItemUsageModeCode_Value = 5
)

// Enum value maps for QuestionnaireItemUsageModeCode_Value.
var (
	QuestionnaireItemUsageModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CAPTURE_DISPLAY",
		2: "CAPTURE",
		3: "DISPLAY",
		4: "DISPLAY_NON_EMPTY",
		5: "CAPTURE_DISPLAY_NON_EMPTY",
	}
	QuestionnaireItemUsageModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":     0,
		"CAPTURE_DISPLAY":           1,
		"CAPTURE":                   2,
		"DISPLAY":                   3,
		"DISPLAY_NON_EMPTY":         4,
		"CAPTURE_DISPLAY_NON_EMPTY": 5,
	}
)

func (x QuestionnaireItemUsageModeCode_Value) Enum() *QuestionnaireItemUsageModeCode_Value {
	p := new(QuestionnaireItemUsageModeCode_Value)
	*p = x
	return p
}

func (x QuestionnaireItemUsageModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireItemUsageModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[168].Descriptor()
}

func (QuestionnaireItemUsageModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[168]
}

func (x QuestionnaireItemUsageModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireItemUsageModeCode_Value.Descriptor instead.
func (QuestionnaireItemUsageModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{168, 0}
}

type QuestionnaireResponseStatusCode_Value int32

const (
	QuestionnaireResponseStatusCode_INVALID_UNINITIALIZED QuestionnaireResponseStatusCode_Value = 0
	QuestionnaireResponseStatusCode_IN_PROGRESS           QuestionnaireResponseStatusCode_Value = 1
	QuestionnaireResponseStatusCode_COMPLETED             QuestionnaireResponseStatusCode_Value = 2
	QuestionnaireResponseStatusCode_AMENDED               QuestionnaireResponseStatusCode_Value = 3
	QuestionnaireResponseStatusCode_ENTERED_IN_ERROR      QuestionnaireResponseStatusCode_Value = 4
	QuestionnaireResponseStatusCode_STOPPED               QuestionnaireResponseStatusCode_Value = 5
)

// Enum value maps for QuestionnaireResponseStatusCode_Value.
var (
	QuestionnaireResponseStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "AMENDED",
		4: "ENTERED_IN_ERROR",
		5: "STOPPED",
	}
	QuestionnaireResponseStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"AMENDED":               3,
		"ENTERED_IN_ERROR":      4,
		"STOPPED":               5,
	}
)

func (x QuestionnaireResponseStatusCode_Value) Enum() *QuestionnaireResponseStatusCode_Value {
	p := new(QuestionnaireResponseStatusCode_Value)
	*p = x
	return p
}

func (x QuestionnaireResponseStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuestionnaireResponseStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[169].Descriptor()
}

func (QuestionnaireResponseStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[169]
}

func (x QuestionnaireResponseStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuestionnaireResponseStatusCode_Value.Descriptor instead.
func (QuestionnaireResponseStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{169, 0}
}

type ReferenceHandlingPolicyCode_Value int32

const (
	ReferenceHandlingPolicyCode_INVALID_UNINITIALIZED ReferenceHandlingPolicyCode_Value = 0
	ReferenceHandlingPolicyCode_LITERAL               ReferenceHandlingPolicyCode_Value = 1
	ReferenceHandlingPolicyCode_LOGICAL               ReferenceHandlingPolicyCode_Value = 2
	ReferenceHandlingPolicyCode_RESOLVES              ReferenceHandlingPolicyCode_Value = 3
	ReferenceHandlingPolicyCode_ENFORCED              ReferenceHandlingPolicyCode_Value = 4
	ReferenceHandlingPolicyCode_LOCAL                 ReferenceHandlingPolicyCode_Value = 5
)

// Enum value maps for ReferenceHandlingPolicyCode_Value.
var (
	ReferenceHandlingPolicyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "LITERAL",
		2: "LOGICAL",
		3: "RESOLVES",
		4: "ENFORCED",
		5: "LOCAL",
	}
	ReferenceHandlingPolicyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"LITERAL":               1,
		"LOGICAL":               2,
		"RESOLVES":              3,
		"ENFORCED":              4,
		"LOCAL":                 5,
	}
)

func (x ReferenceHandlingPolicyCode_Value) Enum() *ReferenceHandlingPolicyCode_Value {
	p := new(ReferenceHandlingPolicyCode_Value)
	*p = x
	return p
}

func (x ReferenceHandlingPolicyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceHandlingPolicyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[170].Descriptor()
}

func (ReferenceHandlingPolicyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[170]
}

func (x ReferenceHandlingPolicyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceHandlingPolicyCode_Value.Descriptor instead.
func (ReferenceHandlingPolicyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{170, 0}
}

type ReferenceVersionRulesCode_Value int32

const (
	ReferenceVersionRulesCode_INVALID_UNINITIALIZED ReferenceVersionRulesCode_Value = 0
	ReferenceVersionRulesCode_EITHER                ReferenceVersionRulesCode_Value = 1
	ReferenceVersionRulesCode_INDEPENDENT           ReferenceVersionRulesCode_Value = 2
	ReferenceVersionRulesCode_SPECIFIC              ReferenceVersionRulesCode_Value = 3
)

// Enum value maps for ReferenceVersionRulesCode_Value.
var (
	ReferenceVersionRulesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EITHER",
		2: "INDEPENDENT",
		3: "SPECIFIC",
	}
	ReferenceVersionRulesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EITHER":                1,
		"INDEPENDENT":           2,
		"SPECIFIC":              3,
	}
)

func (x ReferenceVersionRulesCode_Value) Enum() *ReferenceVersionRulesCode_Value {
	p := new(ReferenceVersionRulesCode_Value)
	*p = x
	return p
}

func (x ReferenceVersionRulesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReferenceVersionRulesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[171].Descriptor()
}

func (ReferenceVersionRulesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[171]
}

func (x ReferenceVersionRulesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReferenceVersionRulesCode_Value.Descriptor instead.
func (ReferenceVersionRulesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{171, 0}
}

type RelatedArtifactTypeCode_Value int32

const (
	RelatedArtifactTypeCode_INVALID_UNINITIALIZED RelatedArtifactTypeCode_Value = 0
	RelatedArtifactTypeCode_DOCUMENTATION         RelatedArtifactTypeCode_Value = 1
	RelatedArtifactTypeCode_JUSTIFICATION         RelatedArtifactTypeCode_Value = 2
	RelatedArtifactTypeCode_CITATION              RelatedArtifactTypeCode_Value = 3
	RelatedArtifactTypeCode_PREDECESSOR           RelatedArtifactTypeCode_Value = 4
	RelatedArtifactTypeCode_SUCCESSOR             RelatedArtifactTypeCode_Value = 5
	RelatedArtifactTypeCode_DERIVED_FROM          RelatedArtifactTypeCode_Value = 6
	RelatedArtifactTypeCode_DEPENDS_ON            RelatedArtifactTypeCode_Value = 7
	RelatedArtifactTypeCode_COMPOSED_OF           RelatedArtifactTypeCode_Value = 8
)

// Enum value maps for RelatedArtifactTypeCode_Value.
var (
	RelatedArtifactTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DOCUMENTATION",
		2: "JUSTIFICATION",
		3: "CITATION",
		4: "PREDECESSOR",
		5: "SUCCESSOR",
		6: "DERIVED_FROM",
		7: "DEPENDS_ON",
		8: "COMPOSED_OF",
	}
	RelatedArtifactTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DOCUMENTATION":         1,
		"JUSTIFICATION":         2,
		"CITATION":              3,
		"PREDECESSOR":           4,
		"SUCCESSOR":             5,
		"DERIVED_FROM":          6,
		"DEPENDS_ON":            7,
		"COMPOSED_OF":           8,
	}
)

func (x RelatedArtifactTypeCode_Value) Enum() *RelatedArtifactTypeCode_Value {
	p := new(RelatedArtifactTypeCode_Value)
	*p = x
	return p
}

func (x RelatedArtifactTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelatedArtifactTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[172].Descriptor()
}

func (RelatedArtifactTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[172]
}

func (x RelatedArtifactTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelatedArtifactTypeCode_Value.Descriptor instead.
func (RelatedArtifactTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{172, 0}
}

type RepositoryTypeCode_Value int32

const (
	RepositoryTypeCode_INVALID_UNINITIALIZED RepositoryTypeCode_Value = 0
	RepositoryTypeCode_DIRECTLINK            RepositoryTypeCode_Value = 1
	RepositoryTypeCode_OPENAPI               RepositoryTypeCode_Value = 2
	RepositoryTypeCode_LOGIN                 RepositoryTypeCode_Value = 3
	RepositoryTypeCode_OAUTH                 RepositoryTypeCode_Value = 4
	RepositoryTypeCode_OTHER                 RepositoryTypeCode_Value = 5
)

// Enum value maps for RepositoryTypeCode_Value.
var (
	RepositoryTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DIRECTLINK",
		2: "OPENAPI",
		3: "LOGIN",
		4: "OAUTH",
		5: "OTHER",
	}
	RepositoryTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DIRECTLINK":            1,
		"OPENAPI":               2,
		"LOGIN":                 3,
		"OAUTH":                 4,
		"OTHER":                 5,
	}
)

func (x RepositoryTypeCode_Value) Enum() *RepositoryTypeCode_Value {
	p := new(RepositoryTypeCode_Value)
	*p = x
	return p
}

func (x RepositoryTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RepositoryTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[173].Descriptor()
}

func (RepositoryTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[173]
}

func (x RepositoryTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RepositoryTypeCode_Value.Descriptor instead.
func (RepositoryTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{173, 0}
}

type RequestIntentCode_Value int32

const (
	RequestIntentCode_INVALID_UNINITIALIZED RequestIntentCode_Value = 0
	RequestIntentCode_PROPOSAL              RequestIntentCode_Value = 1
	RequestIntentCode_PLAN                  RequestIntentCode_Value = 2
	RequestIntentCode_DIRECTIVE             RequestIntentCode_Value = 3
	RequestIntentCode_ORDER                 RequestIntentCode_Value = 4
	RequestIntentCode_ORIGINAL_ORDER        RequestIntentCode_Value = 5
	RequestIntentCode_REFLEX_ORDER          RequestIntentCode_Value = 6
	RequestIntentCode_FILLER_ORDER          RequestIntentCode_Value = 7
	RequestIntentCode_INSTANCE_ORDER        RequestIntentCode_Value = 8
	RequestIntentCode_OPTION                RequestIntentCode_Value = 9
)

// Enum value maps for RequestIntentCode_Value.
var (
	RequestIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PROPOSAL",
		2: "PLAN",
		3: "DIRECTIVE",
		4: "ORDER",
		5: "ORIGINAL_ORDER",
		6: "REFLEX_ORDER",
		7: "FILLER_ORDER",
		8: "INSTANCE_ORDER",
		9: "OPTION",
	}
	RequestIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PROPOSAL":              1,
		"PLAN":                  2,
		"DIRECTIVE":             3,
		"ORDER":                 4,
		"ORIGINAL_ORDER":        5,
		"REFLEX_ORDER":          6,
		"FILLER_ORDER":          7,
		"INSTANCE_ORDER":        8,
		"OPTION":                9,
	}
)

func (x RequestIntentCode_Value) Enum() *RequestIntentCode_Value {
	p := new(RequestIntentCode_Value)
	*p = x
	return p
}

func (x RequestIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[174].Descriptor()
}

func (RequestIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[174]
}

func (x RequestIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestIntentCode_Value.Descriptor instead.
func (RequestIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{174, 0}
}

type RequestPriorityCode_Value int32

const (
	RequestPriorityCode_INVALID_UNINITIALIZED RequestPriorityCode_Value = 0
	RequestPriorityCode_ROUTINE               RequestPriorityCode_Value = 1
	RequestPriorityCode_URGENT                RequestPriorityCode_Value = 2
	RequestPriorityCode_ASAP                  RequestPriorityCode_Value = 3
	RequestPriorityCode_STAT                  RequestPriorityCode_Value = 4
)

// Enum value maps for RequestPriorityCode_Value.
var (
	RequestPriorityCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ROUTINE",
		2: "URGENT",
		3: "ASAP",
		4: "STAT",
	}
	RequestPriorityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ROUTINE":               1,
		"URGENT":                2,
		"ASAP":                  3,
		"STAT":                  4,
	}
)

func (x RequestPriorityCode_Value) Enum() *RequestPriorityCode_Value {
	p := new(RequestPriorityCode_Value)
	*p = x
	return p
}

func (x RequestPriorityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestPriorityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[175].Descriptor()
}

func (RequestPriorityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[175]
}

func (x RequestPriorityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestPriorityCode_Value.Descriptor instead.
func (RequestPriorityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{175, 0}
}

type RequestResourceTypeCode_Value int32

const (
	RequestResourceTypeCode_INVALID_UNINITIALIZED       RequestResourceTypeCode_Value = 0
	RequestResourceTypeCode_APPOINTMENT                 RequestResourceTypeCode_Value = 1
	RequestResourceTypeCode_APPOINTMENT_RESPONSE        RequestResourceTypeCode_Value = 2
	RequestResourceTypeCode_CARE_PLAN                   RequestResourceTypeCode_Value = 3
	RequestResourceTypeCode_CLAIM                       RequestResourceTypeCode_Value = 4
	RequestResourceTypeCode_COMMUNICATION_REQUEST       RequestResourceTypeCode_Value = 5
	RequestResourceTypeCode_CONTRACT                    RequestResourceTypeCode_Value = 6
	RequestResourceTypeCode_DEVICE_REQUEST              RequestResourceTypeCode_Value = 7
	RequestResourceTypeCode_ENROLLMENT_REQUEST          RequestResourceTypeCode_Value = 8
	RequestResourceTypeCode_IMMUNIZATION_RECOMMENDATION RequestResourceTypeCode_Value = 9
	RequestResourceTypeCode_MEDICATION_REQUEST          RequestResourceTypeCode_Value = 10
	RequestResourceTypeCode_NUTRITION_ORDER             RequestResourceTypeCode_Value = 11
	RequestResourceTypeCode_SERVICE_REQUEST             RequestResourceTypeCode_Value = 12
	RequestResourceTypeCode_SUPPLY_REQUEST              RequestResourceTypeCode_Value = 13
	RequestResourceTypeCode_TASK                        RequestResourceTypeCode_Value = 14
	RequestResourceTypeCode_VISION_PRESCRIPTION         RequestResourceTypeCode_Value = 15
)

// Enum value maps for RequestResourceTypeCode_Value.
var (
	RequestResourceTypeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "APPOINTMENT",
		2:  "APPOINTMENT_RESPONSE",
		3:  "CARE_PLAN",
		4:  "CLAIM",
		5:  "COMMUNICATION_REQUEST",
		6:  "CONTRACT",
		7:  "DEVICE_REQUEST",
		8:  "ENROLLMENT_REQUEST",
		9:  "IMMUNIZATION_RECOMMENDATION",
		10: "MEDICATION_REQUEST",
		11: "NUTRITION_ORDER",
		12: "SERVICE_REQUEST",
		13: "SUPPLY_REQUEST",
		14: "TASK",
		15: "VISION_PRESCRIPTION",
	}
	RequestResourceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":       0,
		"APPOINTMENT":                 1,
		"APPOINTMENT_RESPONSE":        2,
		"CARE_PLAN":                   3,
		"CLAIM":                       4,
		"COMMUNICATION_REQUEST":       5,
		"CONTRACT":                    6,
		"DEVICE_REQUEST":              7,
		"ENROLLMENT_REQUEST":          8,
		"IMMUNIZATION_RECOMMENDATION": 9,
		"MEDICATION_REQUEST":          10,
		"NUTRITION_ORDER":             11,
		"SERVICE_REQUEST":             12,
		"SUPPLY_REQUEST":              13,
		"TASK":                        14,
		"VISION_PRESCRIPTION":         15,
	}
)

func (x RequestResourceTypeCode_Value) Enum() *RequestResourceTypeCode_Value {
	p := new(RequestResourceTypeCode_Value)
	*p = x
	return p
}

func (x RequestResourceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestResourceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[176].Descriptor()
}

func (RequestResourceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[176]
}

func (x RequestResourceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestResourceTypeCode_Value.Descriptor instead.
func (RequestResourceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{176, 0}
}

type RequestStatusCode_Value int32

const (
	RequestStatusCode_INVALID_UNINITIALIZED RequestStatusCode_Value = 0
	RequestStatusCode_DRAFT                 RequestStatusCode_Value = 1
	RequestStatusCode_ACTIVE                RequestStatusCode_Value = 2
	RequestStatusCode_ON_HOLD               RequestStatusCode_Value = 3
	RequestStatusCode_REVOKED               RequestStatusCode_Value = 4
	RequestStatusCode_COMPLETED             RequestStatusCode_Value = 5
	RequestStatusCode_ENTERED_IN_ERROR      RequestStatusCode_Value = 6
	RequestStatusCode_UNKNOWN               RequestStatusCode_Value = 7
)

// Enum value maps for RequestStatusCode_Value.
var (
	RequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "ON_HOLD",
		4: "REVOKED",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	RequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"ON_HOLD":               3,
		"REVOKED":               4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x RequestStatusCode_Value) Enum() *RequestStatusCode_Value {
	p := new(RequestStatusCode_Value)
	*p = x
	return p
}

func (x RequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[177].Descriptor()
}

func (RequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[177]
}

func (x RequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestStatusCode_Value.Descriptor instead.
func (RequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{177, 0}
}

type ResearchElementTypeCode_Value int32

const (
	ResearchElementTypeCode_INVALID_UNINITIALIZED ResearchElementTypeCode_Value = 0
	ResearchElementTypeCode_POPULATION            ResearchElementTypeCode_Value = 1
	ResearchElementTypeCode_EXPOSURE              ResearchElementTypeCode_Value = 2
	ResearchElementTypeCode_OUTCOME               ResearchElementTypeCode_Value = 3
)

// Enum value maps for ResearchElementTypeCode_Value.
var (
	ResearchElementTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "POPULATION",
		2: "EXPOSURE",
		3: "OUTCOME",
	}
	ResearchElementTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"POPULATION":            1,
		"EXPOSURE":              2,
		"OUTCOME":               3,
	}
)

func (x ResearchElementTypeCode_Value) Enum() *ResearchElementTypeCode_Value {
	p := new(ResearchElementTypeCode_Value)
	*p = x
	return p
}

func (x ResearchElementTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResearchElementTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[178].Descriptor()
}

func (ResearchElementTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[178]
}

func (x ResearchElementTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResearchElementTypeCode_Value.Descriptor instead.
func (ResearchElementTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{178, 0}
}

type ResearchStudyStatusCode_Value int32

const (
	ResearchStudyStatusCode_INVALID_UNINITIALIZED                          ResearchStudyStatusCode_Value = 0
	ResearchStudyStatusCode_ACTIVE                                         ResearchStudyStatusCode_Value = 1
	ResearchStudyStatusCode_ADMINISTRATIVELY_COMPLETED                     ResearchStudyStatusCode_Value = 2
	ResearchStudyStatusCode_APPROVED                                       ResearchStudyStatusCode_Value = 3
	ResearchStudyStatusCode_CLOSED_TO_ACCRUAL                              ResearchStudyStatusCode_Value = 4
	ResearchStudyStatusCode_CLOSED_TO_ACCRUAL_AND_INTERVENTION             ResearchStudyStatusCode_Value = 5
	ResearchStudyStatusCode_COMPLETED                                      ResearchStudyStatusCode_Value = 6
	ResearchStudyStatusCode_DISAPPROVED                                    ResearchStudyStatusCode_Value = 7
	ResearchStudyStatusCode_IN_REVIEW                                      ResearchStudyStatusCode_Value = 8
	ResearchStudyStatusCode_TEMPORARILY_CLOSED_TO_ACCRUAL                  ResearchStudyStatusCode_Value = 9
	ResearchStudyStatusCode_TEMPORARILY_CLOSED_TO_ACCRUAL_AND_INTERVENTION ResearchStudyStatusCode_Value = 10
	ResearchStudyStatusCode_WITHDRAWN                                      ResearchStudyStatusCode_Value = 11
)

// Enum value maps for ResearchStudyStatusCode_Value.
var (
	ResearchStudyStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "ACTIVE",
		2:  "ADMINISTRATIVELY_COMPLETED",
		3:  "APPROVED",
		4:  "CLOSED_TO_ACCRUAL",
		5:  "CLOSED_TO_ACCRUAL_AND_INTERVENTION",
		6:  "COMPLETED",
		7:  "DISAPPROVED",
		8:  "IN_REVIEW",
		9:  "TEMPORARILY_CLOSED_TO_ACCRUAL",
		10: "TEMPORARILY_CLOSED_TO_ACCRUAL_AND_INTERVENTION",
		11: "WITHDRAWN",
	}
	ResearchStudyStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":              0,
		"ACTIVE":                             1,
		"ADMINISTRATIVELY_COMPLETED":         2,
		"APPROVED":                           3,
		"CLOSED_TO_ACCRUAL":                  4,
		"CLOSED_TO_ACCRUAL_AND_INTERVENTION": 5,
		"COMPLETED":                          6,
		"DISAPPROVED":                        7,
		"IN_REVIEW":                          8,
		"TEMPORARILY_CLOSED_TO_ACCRUAL":      9,
		"TEMPORARILY_CLOSED_TO_ACCRUAL_AND_INTERVENTION": 10,
		"WITHDRAWN": 11,
	}
)

func (x ResearchStudyStatusCode_Value) Enum() *ResearchStudyStatusCode_Value {
	p := new(ResearchStudyStatusCode_Value)
	*p = x
	return p
}

func (x ResearchStudyStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResearchStudyStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[179].Descriptor()
}

func (ResearchStudyStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[179]
}

func (x ResearchStudyStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResearchStudyStatusCode_Value.Descriptor instead.
func (ResearchStudyStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{179, 0}
}

type ResearchSubjectStatusCode_Value int32

const (
	ResearchSubjectStatusCode_INVALID_UNINITIALIZED ResearchSubjectStatusCode_Value = 0
	ResearchSubjectStatusCode_CANDIDATE             ResearchSubjectStatusCode_Value = 1
	ResearchSubjectStatusCode_ELIGIBLE              ResearchSubjectStatusCode_Value = 2
	ResearchSubjectStatusCode_FOLLOW_UP             ResearchSubjectStatusCode_Value = 3
	ResearchSubjectStatusCode_INELIGIBLE            ResearchSubjectStatusCode_Value = 4
	ResearchSubjectStatusCode_NOT_REGISTERED        ResearchSubjectStatusCode_Value = 5
	ResearchSubjectStatusCode_OFF_STUDY             ResearchSubjectStatusCode_Value = 6
	ResearchSubjectStatusCode_ON_STUDY              ResearchSubjectStatusCode_Value = 7
	ResearchSubjectStatusCode_ON_STUDY_INTERVENTION ResearchSubjectStatusCode_Value = 8
	ResearchSubjectStatusCode_ON_STUDY_OBSERVATION  ResearchSubjectStatusCode_Value = 9
	ResearchSubjectStatusCode_PENDING_ON_STUDY      ResearchSubjectStatusCode_Value = 10
	ResearchSubjectStatusCode_POTENTIAL_CANDIDATE   ResearchSubjectStatusCode_Value = 11
	ResearchSubjectStatusCode_SCREENING             ResearchSubjectStatusCode_Value = 12
	ResearchSubjectStatusCode_WITHDRAWN             ResearchSubjectStatusCode_Value = 13
)

// Enum value maps for ResearchSubjectStatusCode_Value.
var (
	ResearchSubjectStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "CANDIDATE",
		2:  "ELIGIBLE",
		3:  "FOLLOW_UP",
		4:  "INELIGIBLE",
		5:  "NOT_REGISTERED",
		6:  "OFF_STUDY",
		7:  "ON_STUDY",
		8:  "ON_STUDY_INTERVENTION",
		9:  "ON_STUDY_OBSERVATION",
		10: "PENDING_ON_STUDY",
		11: "POTENTIAL_CANDIDATE",
		12: "SCREENING",
		13: "WITHDRAWN",
	}
	ResearchSubjectStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CANDIDATE":             1,
		"ELIGIBLE":              2,
		"FOLLOW_UP":             3,
		"INELIGIBLE":            4,
		"NOT_REGISTERED":        5,
		"OFF_STUDY":             6,
		"ON_STUDY":              7,
		"ON_STUDY_INTERVENTION": 8,
		"ON_STUDY_OBSERVATION":  9,
		"PENDING_ON_STUDY":      10,
		"POTENTIAL_CANDIDATE":   11,
		"SCREENING":             12,
		"WITHDRAWN":             13,
	}
)

func (x ResearchSubjectStatusCode_Value) Enum() *ResearchSubjectStatusCode_Value {
	p := new(ResearchSubjectStatusCode_Value)
	*p = x
	return p
}

func (x ResearchSubjectStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResearchSubjectStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[180].Descriptor()
}

func (ResearchSubjectStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[180]
}

func (x ResearchSubjectStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResearchSubjectStatusCode_Value.Descriptor instead.
func (ResearchSubjectStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{180, 0}
}

type ResourceSecurityCategoryCode_Value int32

const (
	ResourceSecurityCategoryCode_INVALID_UNINITIALIZED ResourceSecurityCategoryCode_Value = 0
	ResourceSecurityCategoryCode_ANONYMOUS             ResourceSecurityCategoryCode_Value = 1
	ResourceSecurityCategoryCode_BUSINESS              ResourceSecurityCategoryCode_Value = 2
	ResourceSecurityCategoryCode_INDIVIDUAL            ResourceSecurityCategoryCode_Value = 3
	ResourceSecurityCategoryCode_PATIENT               ResourceSecurityCategoryCode_Value = 4
	ResourceSecurityCategoryCode_NOT_CLASSIFIED        ResourceSecurityCategoryCode_Value = 5
)

// Enum value maps for ResourceSecurityCategoryCode_Value.
var (
	ResourceSecurityCategoryCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ANONYMOUS",
		2: "BUSINESS",
		3: "INDIVIDUAL",
		4: "PATIENT",
		5: "NOT_CLASSIFIED",
	}
	ResourceSecurityCategoryCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ANONYMOUS":             1,
		"BUSINESS":              2,
		"INDIVIDUAL":            3,
		"PATIENT":               4,
		"NOT_CLASSIFIED":        5,
	}
)

func (x ResourceSecurityCategoryCode_Value) Enum() *ResourceSecurityCategoryCode_Value {
	p := new(ResourceSecurityCategoryCode_Value)
	*p = x
	return p
}

func (x ResourceSecurityCategoryCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceSecurityCategoryCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[181].Descriptor()
}

func (ResourceSecurityCategoryCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[181]
}

func (x ResourceSecurityCategoryCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceSecurityCategoryCode_Value.Descriptor instead.
func (ResourceSecurityCategoryCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{181, 0}
}

type ResourceTypeCode_Value int32

const (
	ResourceTypeCode_INVALID_UNINITIALIZED                ResourceTypeCode_Value = 0
	ResourceTypeCode_ACCOUNT                              ResourceTypeCode_Value = 1
	ResourceTypeCode_ACTIVITY_DEFINITION                  ResourceTypeCode_Value = 2
	ResourceTypeCode_ADVERSE_EVENT                        ResourceTypeCode_Value = 3
	ResourceTypeCode_ALLERGY_INTOLERANCE                  ResourceTypeCode_Value = 4
	ResourceTypeCode_APPOINTMENT                          ResourceTypeCode_Value = 5
	ResourceTypeCode_APPOINTMENT_RESPONSE                 ResourceTypeCode_Value = 6
	ResourceTypeCode_AUDIT_EVENT                          ResourceTypeCode_Value = 7
	ResourceTypeCode_BASIC                                ResourceTypeCode_Value = 8
	ResourceTypeCode_BINARY                               ResourceTypeCode_Value = 9
	ResourceTypeCode_BIOLOGICALLY_DERIVED_PRODUCT         ResourceTypeCode_Value = 10
	ResourceTypeCode_BODY_STRUCTURE                       ResourceTypeCode_Value = 11
	ResourceTypeCode_BUNDLE                               ResourceTypeCode_Value = 12
	ResourceTypeCode_CAPABILITY_STATEMENT                 ResourceTypeCode_Value = 13
	ResourceTypeCode_CARE_PLAN                            ResourceTypeCode_Value = 14
	ResourceTypeCode_CARE_TEAM                            ResourceTypeCode_Value = 15
	ResourceTypeCode_CATALOG_ENTRY                        ResourceTypeCode_Value = 16
	ResourceTypeCode_CHARGE_ITEM                          ResourceTypeCode_Value = 17
	ResourceTypeCode_CHARGE_ITEM_DEFINITION               ResourceTypeCode_Value = 18
	ResourceTypeCode_CLAIM                                ResourceTypeCode_Value = 19
	ResourceTypeCode_CLAIM_RESPONSE                       ResourceTypeCode_Value = 20
	ResourceTypeCode_CLINICAL_IMPRESSION                  ResourceTypeCode_Value = 21
	ResourceTypeCode_CODE_SYSTEM                          ResourceTypeCode_Value = 22
	ResourceTypeCode_COMMUNICATION                        ResourceTypeCode_Value = 23
	ResourceTypeCode_COMMUNICATION_REQUEST                ResourceTypeCode_Value = 24
	ResourceTypeCode_COMPARTMENT_DEFINITION               ResourceTypeCode_Value = 25
	ResourceTypeCode_COMPOSITION                          ResourceTypeCode_Value = 26
	ResourceTypeCode_CONCEPT_MAP                          ResourceTypeCode_Value = 27
	ResourceTypeCode_CONDITION                            ResourceTypeCode_Value = 28
	ResourceTypeCode_CONSENT                              ResourceTypeCode_Value = 29
	ResourceTypeCode_CONTRACT                             ResourceTypeCode_Value = 30
	ResourceTypeCode_COVERAGE                             ResourceTypeCode_Value = 31
	ResourceTypeCode_COVERAGE_ELIGIBILITY_REQUEST         ResourceTypeCode_Value = 32
	ResourceTypeCode_COVERAGE_ELIGIBILITY_RESPONSE        ResourceTypeCode_Value = 33
	ResourceTypeCode_DETECTED_ISSUE                       ResourceTypeCode_Value = 34
	ResourceTypeCode_DEVICE                               ResourceTypeCode_Value = 35
	ResourceTypeCode_DEVICE_DEFINITION                    ResourceTypeCode_Value = 36
	ResourceTypeCode_DEVICE_METRIC                        ResourceTypeCode_Value = 37
	ResourceTypeCode_DEVICE_REQUEST                       ResourceTypeCode_Value = 38
	ResourceTypeCode_DEVICE_USE_STATEMENT                 ResourceTypeCode_Value = 39
	ResourceTypeCode_DIAGNOSTIC_REPORT                    ResourceTypeCode_Value = 40
	ResourceTypeCode_DOCUMENT_MANIFEST                    ResourceTypeCode_Value = 41
	ResourceTypeCode_DOCUMENT_REFERENCE                   ResourceTypeCode_Value = 42
	ResourceTypeCode_DOMAIN_RESOURCE                      ResourceTypeCode_Value = 43
	ResourceTypeCode_EFFECT_EVIDENCE_SYNTHESIS            ResourceTypeCode_Value = 44
	ResourceTypeCode_ENCOUNTER                            ResourceTypeCode_Value = 45
	ResourceTypeCode_ENDPOINT                             ResourceTypeCode_Value = 46
	ResourceTypeCode_ENROLLMENT_REQUEST                   ResourceTypeCode_Value = 47
	ResourceTypeCode_ENROLLMENT_RESPONSE                  ResourceTypeCode_Value = 48
	ResourceTypeCode_EPISODE_OF_CARE                      ResourceTypeCode_Value = 49
	ResourceTypeCode_EVENT_DEFINITION                     ResourceTypeCode_Value = 50
	ResourceTypeCode_EVIDENCE                             ResourceTypeCode_Value = 51
	ResourceTypeCode_EVIDENCE_VARIABLE                    ResourceTypeCode_Value = 52
	ResourceTypeCode_EXAMPLE_SCENARIO                     ResourceTypeCode_Value = 53
	ResourceTypeCode_EXPLANATION_OF_BENEFIT               ResourceTypeCode_Value = 54
	ResourceTypeCode_FAMILY_MEMBER_HISTORY                ResourceTypeCode_Value = 55
	ResourceTypeCode_FLAG                                 ResourceTypeCode_Value = 56
	ResourceTypeCode_GOAL                                 ResourceTypeCode_Value = 57
	ResourceTypeCode_GRAPH_DEFINITION                     ResourceTypeCode_Value = 58
	ResourceTypeCode_GROUP                                ResourceTypeCode_Value = 59
	ResourceTypeCode_GUIDANCE_RESPONSE                    ResourceTypeCode_Value = 60
	ResourceTypeCode_HEALTHCARE_SERVICE                   ResourceTypeCode_Value = 61
	ResourceTypeCode_IMAGING_STUDY                        ResourceTypeCode_Value = 62
	ResourceTypeCode_IMMUNIZATION                         ResourceTypeCode_Value = 63
	ResourceTypeCode_IMMUNIZATION_EVALUATION              ResourceTypeCode_Value = 64
	ResourceTypeCode_IMMUNIZATION_RECOMMENDATION          ResourceTypeCode_Value = 65
	ResourceTypeCode_IMPLEMENTATION_GUIDE                 ResourceTypeCode_Value = 66
	ResourceTypeCode_INSURANCE_PLAN                       ResourceTypeCode_Value = 67
	ResourceTypeCode_INVOICE                              ResourceTypeCode_Value = 68
	ResourceTypeCode_LIBRARY                              ResourceTypeCode_Value = 69
	ResourceTypeCode_LINKAGE                              ResourceTypeCode_Value = 70
	ResourceTypeCode_LIST                                 ResourceTypeCode_Value = 71
	ResourceTypeCode_LOCATION                             ResourceTypeCode_Value = 72
	ResourceTypeCode_MEASURE                              ResourceTypeCode_Value = 73
	ResourceTypeCode_MEASURE_REPORT                       ResourceTypeCode_Value = 74
	ResourceTypeCode_MEDIA                                ResourceTypeCode_Value = 75
	ResourceTypeCode_MEDICATION                           ResourceTypeCode_Value = 76
	ResourceTypeCode_MEDICATION_ADMINISTRATION            ResourceTypeCode_Value = 77
	ResourceTypeCode_MEDICATION_DISPENSE                  ResourceTypeCode_Value = 78
	ResourceTypeCode_MEDICATION_KNOWLEDGE                 ResourceTypeCode_Value = 79
	ResourceTypeCode_MEDICATION_REQUEST                   ResourceTypeCode_Value = 80
	ResourceTypeCode_MEDICATION_STATEMENT                 ResourceTypeCode_Value = 81
	ResourceTypeCode_MEDICINAL_PRODUCT                    ResourceTypeCode_Value = 82
	ResourceTypeCode_MEDICINAL_PRODUCT_AUTHORIZATION      ResourceTypeCode_Value = 83
	ResourceTypeCode_MEDICINAL_PRODUCT_CONTRAINDICATION   ResourceTypeCode_Value = 84
	ResourceTypeCode_MEDICINAL_PRODUCT_INDICATION         ResourceTypeCode_Value = 85
	ResourceTypeCode_MEDICINAL_PRODUCT_INGREDIENT         ResourceTypeCode_Value = 86
	ResourceTypeCode_MEDICINAL_PRODUCT_INTERACTION        ResourceTypeCode_Value = 87
	ResourceTypeCode_MEDICINAL_PRODUCT_MANUFACTURED       ResourceTypeCode_Value = 88
	ResourceTypeCode_MEDICINAL_PRODUCT_PACKAGED           ResourceTypeCode_Value = 89
	ResourceTypeCode_MEDICINAL_PRODUCT_PHARMACEUTICAL     ResourceTypeCode_Value = 90
	ResourceTypeCode_MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT ResourceTypeCode_Value = 91
	ResourceTypeCode_MESSAGE_DEFINITION                   ResourceTypeCode_Value = 92
	ResourceTypeCode_MESSAGE_HEADER                       ResourceTypeCode_Value = 93
	ResourceTypeCode_MOLECULAR_SEQUENCE                   ResourceTypeCode_Value = 94
	ResourceTypeCode_NAMING_SYSTEM                        ResourceTypeCode_Value = 95
	ResourceTypeCode_NUTRITION_ORDER                      ResourceTypeCode_Value = 96
	ResourceTypeCode_OBSERVATION                          ResourceTypeCode_Value = 97
	ResourceTypeCode_OBSERVATION_DEFINITION               ResourceTypeCode_Value = 98
	ResourceTypeCode_OPERATION_DEFINITION                 ResourceTypeCode_Value = 99
	ResourceTypeCode_OPERATION_OUTCOME                    ResourceTypeCode_Value = 100
	ResourceTypeCode_ORGANIZATION                         ResourceTypeCode_Value = 101
	ResourceTypeCode_ORGANIZATION_AFFILIATION             ResourceTypeCode_Value = 102
	ResourceTypeCode_PARAMETERS                           ResourceTypeCode_Value = 103
	ResourceTypeCode_PATIENT                              ResourceTypeCode_Value = 104
	ResourceTypeCode_PAYMENT_NOTICE                       ResourceTypeCode_Value = 105
	ResourceTypeCode_PAYMENT_RECONCILIATION               ResourceTypeCode_Value = 106
	ResourceTypeCode_PERSON                               ResourceTypeCode_Value = 107
	ResourceTypeCode_PLAN_DEFINITION                      ResourceTypeCode_Value = 108
	ResourceTypeCode_PRACTITIONER                         ResourceTypeCode_Value = 109
	ResourceTypeCode_PRACTITIONER_ROLE                    ResourceTypeCode_Value = 110
	ResourceTypeCode_PROCEDURE                            ResourceTypeCode_Value = 111
	ResourceTypeCode_PROVENANCE                           ResourceTypeCode_Value = 112
	ResourceTypeCode_QUESTIONNAIRE                        ResourceTypeCode_Value = 113
	ResourceTypeCode_QUESTIONNAIRE_RESPONSE               ResourceTypeCode_Value = 114
	ResourceTypeCode_RELATED_PERSON                       ResourceTypeCode_Value = 115
	ResourceTypeCode_REQUEST_GROUP                        ResourceTypeCode_Value = 116
	ResourceTypeCode_RESEARCH_DEFINITION                  ResourceTypeCode_Value = 117
	ResourceTypeCode_RESEARCH_ELEMENT_DEFINITION          ResourceTypeCode_Value = 118
	ResourceTypeCode_RESEARCH_STUDY                       ResourceTypeCode_Value = 119
	ResourceTypeCode_RESEARCH_SUBJECT                     ResourceTypeCode_Value = 120
	ResourceTypeCode_RESOURCE                             ResourceTypeCode_Value = 121
	ResourceTypeCode_RISK_ASSESSMENT                      ResourceTypeCode_Value = 122
	ResourceTypeCode_RISK_EVIDENCE_SYNTHESIS              ResourceTypeCode_Value = 123
	ResourceTypeCode_SCHEDULE                             ResourceTypeCode_Value = 124
	ResourceTypeCode_SEARCH_PARAMETER                     ResourceTypeCode_Value = 125
	ResourceTypeCode_SERVICE_REQUEST                      ResourceTypeCode_Value = 126
	ResourceTypeCode_SLOT                                 ResourceTypeCode_Value = 127
	ResourceTypeCode_SPECIMEN                             ResourceTypeCode_Value = 128
	ResourceTypeCode_SPECIMEN_DEFINITION                  ResourceTypeCode_Value = 129
	ResourceTypeCode_STRUCTURE_DEFINITION                 ResourceTypeCode_Value = 130
	ResourceTypeCode_STRUCTURE_MAP                        ResourceTypeCode_Value = 131
	ResourceTypeCode_SUBSCRIPTION                         ResourceTypeCode_Value = 132
	ResourceTypeCode_SUBSTANCE                            ResourceTypeCode_Value = 133
	ResourceTypeCode_SUBSTANCE_NUCLEIC_ACID               ResourceTypeCode_Value = 134
	ResourceTypeCode_SUBSTANCE_POLYMER                    ResourceTypeCode_Value = 135
	ResourceTypeCode_SUBSTANCE_PROTEIN                    ResourceTypeCode_Value = 136
	ResourceTypeCode_SUBSTANCE_REFERENCE_INFORMATION      ResourceTypeCode_Value = 137
	ResourceTypeCode_SUBSTANCE_SOURCE_MATERIAL            ResourceTypeCode_Value = 138
	ResourceTypeCode_SUBSTANCE_SPECIFICATION              ResourceTypeCode_Value = 139
	ResourceTypeCode_SUPPLY_DELIVERY                      ResourceTypeCode_Value = 140
	ResourceTypeCode_SUPPLY_REQUEST                       ResourceTypeCode_Value = 141
	ResourceTypeCode_TASK                                 ResourceTypeCode_Value = 142
	ResourceTypeCode_TERMINOLOGY_CAPABILITIES             ResourceTypeCode_Value = 143
	ResourceTypeCode_TEST_REPORT                          ResourceTypeCode_Value = 144
	ResourceTypeCode_TEST_SCRIPT                          ResourceTypeCode_Value = 145
	ResourceTypeCode_VALUE_SET                            ResourceTypeCode_Value = 146
	ResourceTypeCode_VERIFICATION_RESULT                  ResourceTypeCode_Value = 147
	ResourceTypeCode_VISION_PRESCRIPTION                  ResourceTypeCode_Value = 148
)

// Enum value maps for ResourceTypeCode_Value.
var (
	ResourceTypeCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "ACCOUNT",
		2:   "ACTIVITY_DEFINITION",
		3:   "ADVERSE_EVENT",
		4:   "ALLERGY_INTOLERANCE",
		5:   "APPOINTMENT",
		6:   "APPOINTMENT_RESPONSE",
		7:   "AUDIT_EVENT",
		8:   "BASIC",
		9:   "BINARY",
		10:  "BIOLOGICALLY_DERIVED_PRODUCT",
		11:  "BODY_STRUCTURE",
		12:  "BUNDLE",
		13:  "CAPABILITY_STATEMENT",
		14:  "CARE_PLAN",
		15:  "CARE_TEAM",
		16:  "CATALOG_ENTRY",
		17:  "CHARGE_ITEM",
		18:  "CHARGE_ITEM_DEFINITION",
		19:  "CLAIM",
		20:  "CLAIM_RESPONSE",
		21:  "CLINICAL_IMPRESSION",
		22:  "CODE_SYSTEM",
		23:  "COMMUNICATION",
		24:  "COMMUNICATION_REQUEST",
		25:  "COMPARTMENT_DEFINITION",
		26:  "COMPOSITION",
		27:  "CONCEPT_MAP",
		28:  "CONDITION",
		29:  "CONSENT",
		30:  "CONTRACT",
		31:  "COVERAGE",
		32:  "COVERAGE_ELIGIBILITY_REQUEST",
		33:  "COVERAGE_ELIGIBILITY_RESPONSE",
		34:  "DETECTED_ISSUE",
		35:  "DEVICE",
		36:  "DEVICE_DEFINITION",
		37:  "DEVICE_METRIC",
		38:  "DEVICE_REQUEST",
		39:  "DEVICE_USE_STATEMENT",
		40:  "DIAGNOSTIC_REPORT",
		41:  "DOCUMENT_MANIFEST",
		42:  "DOCUMENT_REFERENCE",
		43:  "DOMAIN_RESOURCE",
		44:  "EFFECT_EVIDENCE_SYNTHESIS",
		45:  "ENCOUNTER",
		46:  "ENDPOINT",
		47:  "ENROLLMENT_REQUEST",
		48:  "ENROLLMENT_RESPONSE",
		49:  "EPISODE_OF_CARE",
		50:  "EVENT_DEFINITION",
		51:  "EVIDENCE",
		52:  "EVIDENCE_VARIABLE",
		53:  "EXAMPLE_SCENARIO",
		54:  "EXPLANATION_OF_BENEFIT",
		55:  "FAMILY_MEMBER_HISTORY",
		56:  "FLAG",
		57:  "GOAL",
		58:  "GRAPH_DEFINITION",
		59:  "GROUP",
		60:  "GUIDANCE_RESPONSE",
		61:  "HEALTHCARE_SERVICE",
		62:  "IMAGING_STUDY",
		63:  "IMMUNIZATION",
		64:  "IMMUNIZATION_EVALUATION",
		65:  "IMMUNIZATION_RECOMMENDATION",
		66:  "IMPLEMENTATION_GUIDE",
		67:  "INSURANCE_PLAN",
		68:  "INVOICE",
		69:  "LIBRARY",
		70:  "LINKAGE",
		71:  "LIST",
		72:  "LOCATION",
		73:  "MEASURE",
		74:  "MEASURE_REPORT",
		75:  "MEDIA",
		76:  "MEDICATION",
		77:  "MEDICATION_ADMINISTRATION",
		78:  "MEDICATION_DISPENSE",
		79:  "MEDICATION_KNOWLEDGE",
		80:  "MEDICATION_REQUEST",
		81:  "MEDICATION_STATEMENT",
		82:  "MEDICINAL_PRODUCT",
		83:  "MEDICINAL_PRODUCT_AUTHORIZATION",
		84:  "MEDICINAL_PRODUCT_CONTRAINDICATION",
		85:  "MEDICINAL_PRODUCT_INDICATION",
		86:  "MEDICINAL_PRODUCT_INGREDIENT",
		87:  "MEDICINAL_PRODUCT_INTERACTION",
		88:  "MEDICINAL_PRODUCT_MANUFACTURED",
		89:  "MEDICINAL_PRODUCT_PACKAGED",
		90:  "MEDICINAL_PRODUCT_PHARMACEUTICAL",
		91:  "MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT",
		92:  "MESSAGE_DEFINITION",
		93:  "MESSAGE_HEADER",
		94:  "MOLECULAR_SEQUENCE",
		95:  "NAMING_SYSTEM",
		96:  "NUTRITION_ORDER",
		97:  "OBSERVATION",
		98:  "OBSERVATION_DEFINITION",
		99:  "OPERATION_DEFINITION",
		100: "OPERATION_OUTCOME",
		101: "ORGANIZATION",
		102: "ORGANIZATION_AFFILIATION",
		103: "PARAMETERS",
		104: "PATIENT",
		105: "PAYMENT_NOTICE",
		106: "PAYMENT_RECONCILIATION",
		107: "PERSON",
		108: "PLAN_DEFINITION",
		109: "PRACTITIONER",
		110: "PRACTITIONER_ROLE",
		111: "PROCEDURE",
		112: "PROVENANCE",
		113: "QUESTIONNAIRE",
		114: "QUESTIONNAIRE_RESPONSE",
		115: "RELATED_PERSON",
		116: "REQUEST_GROUP",
		117: "RESEARCH_DEFINITION",
		118: "RESEARCH_ELEMENT_DEFINITION",
		119: "RESEARCH_STUDY",
		120: "RESEARCH_SUBJECT",
		121: "RESOURCE",
		122: "RISK_ASSESSMENT",
		123: "RISK_EVIDENCE_SYNTHESIS",
		124: "SCHEDULE",
		125: "SEARCH_PARAMETER",
		126: "SERVICE_REQUEST",
		127: "SLOT",
		128: "SPECIMEN",
		129: "SPECIMEN_DEFINITION",
		130: "STRUCTURE_DEFINITION",
		131: "STRUCTURE_MAP",
		132: "SUBSCRIPTION",
		133: "SUBSTANCE",
		134: "SUBSTANCE_NUCLEIC_ACID",
		135: "SUBSTANCE_POLYMER",
		136: "SUBSTANCE_PROTEIN",
		137: "SUBSTANCE_REFERENCE_INFORMATION",
		138: "SUBSTANCE_SOURCE_MATERIAL",
		139: "SUBSTANCE_SPECIFICATION",
		140: "SUPPLY_DELIVERY",
		141: "SUPPLY_REQUEST",
		142: "TASK",
		143: "TERMINOLOGY_CAPABILITIES",
		144: "TEST_REPORT",
		145: "TEST_SCRIPT",
		146: "VALUE_SET",
		147: "VERIFICATION_RESULT",
		148: "VISION_PRESCRIPTION",
	}
	ResourceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":                0,
		"ACCOUNT":                              1,
		"ACTIVITY_DEFINITION":                  2,
		"ADVERSE_EVENT":                        3,
		"ALLERGY_INTOLERANCE":                  4,
		"APPOINTMENT":                          5,
		"APPOINTMENT_RESPONSE":                 6,
		"AUDIT_EVENT":                          7,
		"BASIC":                                8,
		"BINARY":                               9,
		"BIOLOGICALLY_DERIVED_PRODUCT":         10,
		"BODY_STRUCTURE":                       11,
		"BUNDLE":                               12,
		"CAPABILITY_STATEMENT":                 13,
		"CARE_PLAN":                            14,
		"CARE_TEAM":                            15,
		"CATALOG_ENTRY":                        16,
		"CHARGE_ITEM":                          17,
		"CHARGE_ITEM_DEFINITION":               18,
		"CLAIM":                                19,
		"CLAIM_RESPONSE":                       20,
		"CLINICAL_IMPRESSION":                  21,
		"CODE_SYSTEM":                          22,
		"COMMUNICATION":                        23,
		"COMMUNICATION_REQUEST":                24,
		"COMPARTMENT_DEFINITION":               25,
		"COMPOSITION":                          26,
		"CONCEPT_MAP":                          27,
		"CONDITION":                            28,
		"CONSENT":                              29,
		"CONTRACT":                             30,
		"COVERAGE":                             31,
		"COVERAGE_ELIGIBILITY_REQUEST":         32,
		"COVERAGE_ELIGIBILITY_RESPONSE":        33,
		"DETECTED_ISSUE":                       34,
		"DEVICE":                               35,
		"DEVICE_DEFINITION":                    36,
		"DEVICE_METRIC":                        37,
		"DEVICE_REQUEST":                       38,
		"DEVICE_USE_STATEMENT":                 39,
		"DIAGNOSTIC_REPORT":                    40,
		"DOCUMENT_MANIFEST":                    41,
		"DOCUMENT_REFERENCE":                   42,
		"DOMAIN_RESOURCE":                      43,
		"EFFECT_EVIDENCE_SYNTHESIS":            44,
		"ENCOUNTER":                            45,
		"ENDPOINT":                             46,
		"ENROLLMENT_REQUEST":                   47,
		"ENROLLMENT_RESPONSE":                  48,
		"EPISODE_OF_CARE":                      49,
		"EVENT_DEFINITION":                     50,
		"EVIDENCE":                             51,
		"EVIDENCE_VARIABLE":                    52,
		"EXAMPLE_SCENARIO":                     53,
		"EXPLANATION_OF_BENEFIT":               54,
		"FAMILY_MEMBER_HISTORY":                55,
		"FLAG":                                 56,
		"GOAL":                                 57,
		"GRAPH_DEFINITION":                     58,
		"GROUP":                                59,
		"GUIDANCE_RESPONSE":                    60,
		"HEALTHCARE_SERVICE":                   61,
		"IMAGING_STUDY":                        62,
		"IMMUNIZATION":                         63,
		"IMMUNIZATION_EVALUATION":              64,
		"IMMUNIZATION_RECOMMENDATION":          65,
		"IMPLEMENTATION_GUIDE":                 66,
		"INSURANCE_PLAN":                       67,
		"INVOICE":                              68,
		"LIBRARY":                              69,
		"LINKAGE":                              70,
		"LIST":                                 71,
		"LOCATION":                             72,
		"MEASURE":                              73,
		"MEASURE_REPORT":                       74,
		"MEDIA":                                75,
		"MEDICATION":                           76,
		"MEDICATION_ADMINISTRATION":            77,
		"MEDICATION_DISPENSE":                  78,
		"MEDICATION_KNOWLEDGE":                 79,
		"MEDICATION_REQUEST":                   80,
		"MEDICATION_STATEMENT":                 81,
		"MEDICINAL_PRODUCT":                    82,
		"MEDICINAL_PRODUCT_AUTHORIZATION":      83,
		"MEDICINAL_PRODUCT_CONTRAINDICATION":   84,
		"MEDICINAL_PRODUCT_INDICATION":         85,
		"MEDICINAL_PRODUCT_INGREDIENT":         86,
		"MEDICINAL_PRODUCT_INTERACTION":        87,
		"MEDICINAL_PRODUCT_MANUFACTURED":       88,
		"MEDICINAL_PRODUCT_PACKAGED":           89,
		"MEDICINAL_PRODUCT_PHARMACEUTICAL":     90,
		"MEDICINAL_PRODUCT_UNDESIRABLE_EFFECT": 91,
		"MESSAGE_DEFINITION":                   92,
		"MESSAGE_HEADER":                       93,
		"MOLECULAR_SEQUENCE":                   94,
		"NAMING_SYSTEM":                        95,
		"NUTRITION_ORDER":                      96,
		"OBSERVATION":                          97,
		"OBSERVATION_DEFINITION":               98,
		"OPERATION_DEFINITION":                 99,
		"OPERATION_OUTCOME":                    100,
		"ORGANIZATION":                         101,
		"ORGANIZATION_AFFILIATION":             102,
		"PARAMETERS":                           103,
		"PATIENT":                              104,
		"PAYMENT_NOTICE":                       105,
		"PAYMENT_RECONCILIATION":               106,
		"PERSON":                               107,
		"PLAN_DEFINITION":                      108,
		"PRACTITIONER":                         109,
		"PRACTITIONER_ROLE":                    110,
		"PROCEDURE":                            111,
		"PROVENANCE":                           112,
		"QUESTIONNAIRE":                        113,
		"QUESTIONNAIRE_RESPONSE":               114,
		"RELATED_PERSON":                       115,
		"REQUEST_GROUP":                        116,
		"RESEARCH_DEFINITION":                  117,
		"RESEARCH_ELEMENT_DEFINITION":          118,
		"RESEARCH_STUDY":                       119,
		"RESEARCH_SUBJECT":                     120,
		"RESOURCE":                             121,
		"RISK_ASSESSMENT":                      122,
		"RISK_EVIDENCE_SYNTHESIS":              123,
		"SCHEDULE":                             124,
		"SEARCH_PARAMETER":                     125,
		"SERVICE_REQUEST":                      126,
		"SLOT":                                 127,
		"SPECIMEN":                             128,
		"SPECIMEN_DEFINITION":                  129,
		"STRUCTURE_DEFINITION":                 130,
		"STRUCTURE_MAP":                        131,
		"SUBSCRIPTION":                         132,
		"SUBSTANCE":                            133,
		"SUBSTANCE_NUCLEIC_ACID":               134,
		"SUBSTANCE_POLYMER":                    135,
		"SUBSTANCE_PROTEIN":                    136,
		"SUBSTANCE_REFERENCE_INFORMATION":      137,
		"SUBSTANCE_SOURCE_MATERIAL":            138,
		"SUBSTANCE_SPECIFICATION":              139,
		"SUPPLY_DELIVERY":                      140,
		"SUPPLY_REQUEST":                       141,
		"TASK":                                 142,
		"TERMINOLOGY_CAPABILITIES":             143,
		"TEST_REPORT":                          144,
		"TEST_SCRIPT":                          145,
		"VALUE_SET":                            146,
		"VERIFICATION_RESULT":                  147,
		"VISION_PRESCRIPTION":                  148,
	}
)

func (x ResourceTypeCode_Value) Enum() *ResourceTypeCode_Value {
	p := new(ResourceTypeCode_Value)
	*p = x
	return p
}

func (x ResourceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[182].Descriptor()
}

func (ResourceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[182]
}

func (x ResourceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceTypeCode_Value.Descriptor instead.
func (ResourceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{182, 0}
}

type ResourceVersionPolicyCode_Value int32

const (
	ResourceVersionPolicyCode_INVALID_UNINITIALIZED ResourceVersionPolicyCode_Value = 0
	ResourceVersionPolicyCode_NO_VERSION            ResourceVersionPolicyCode_Value = 1
	ResourceVersionPolicyCode_VERSIONED             ResourceVersionPolicyCode_Value = 2
	ResourceVersionPolicyCode_VERSIONED_UPDATE      ResourceVersionPolicyCode_Value = 3
)

// Enum value maps for ResourceVersionPolicyCode_Value.
var (
	ResourceVersionPolicyCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NO_VERSION",
		2: "VERSIONED",
		3: "VERSIONED_UPDATE",
	}
	ResourceVersionPolicyCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NO_VERSION":            1,
		"VERSIONED":             2,
		"VERSIONED_UPDATE":      3,
	}
)

func (x ResourceVersionPolicyCode_Value) Enum() *ResourceVersionPolicyCode_Value {
	p := new(ResourceVersionPolicyCode_Value)
	*p = x
	return p
}

func (x ResourceVersionPolicyCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceVersionPolicyCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[183].Descriptor()
}

func (ResourceVersionPolicyCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[183]
}

func (x ResourceVersionPolicyCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceVersionPolicyCode_Value.Descriptor instead.
func (ResourceVersionPolicyCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{183, 0}
}

type ResponseTypeCode_Value int32

const (
	ResponseTypeCode_INVALID_UNINITIALIZED ResponseTypeCode_Value = 0
	ResponseTypeCode_OK                    ResponseTypeCode_Value = 1
	ResponseTypeCode_TRANSIENT_ERROR       ResponseTypeCode_Value = 2
	ResponseTypeCode_FATAL_ERROR           ResponseTypeCode_Value = 3
)

// Enum value maps for ResponseTypeCode_Value.
var (
	ResponseTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "OK",
		2: "TRANSIENT_ERROR",
		3: "FATAL_ERROR",
	}
	ResponseTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"OK":                    1,
		"TRANSIENT_ERROR":       2,
		"FATAL_ERROR":           3,
	}
)

func (x ResponseTypeCode_Value) Enum() *ResponseTypeCode_Value {
	p := new(ResponseTypeCode_Value)
	*p = x
	return p
}

func (x ResponseTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResponseTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[184].Descriptor()
}

func (ResponseTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[184]
}

func (x ResponseTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResponseTypeCode_Value.Descriptor instead.
func (ResponseTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{184, 0}
}

type RestfulCapabilityModeCode_Value int32

const (
	RestfulCapabilityModeCode_INVALID_UNINITIALIZED RestfulCapabilityModeCode_Value = 0
	RestfulCapabilityModeCode_CLIENT                RestfulCapabilityModeCode_Value = 1
	RestfulCapabilityModeCode_SERVER                RestfulCapabilityModeCode_Value = 2
)

// Enum value maps for RestfulCapabilityModeCode_Value.
var (
	RestfulCapabilityModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLIENT",
		2: "SERVER",
	}
	RestfulCapabilityModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLIENT":                1,
		"SERVER":                2,
	}
)

func (x RestfulCapabilityModeCode_Value) Enum() *RestfulCapabilityModeCode_Value {
	p := new(RestfulCapabilityModeCode_Value)
	*p = x
	return p
}

func (x RestfulCapabilityModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestfulCapabilityModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[185].Descriptor()
}

func (RestfulCapabilityModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[185]
}

func (x RestfulCapabilityModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestfulCapabilityModeCode_Value.Descriptor instead.
func (RestfulCapabilityModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{185, 0}
}

type SPDXLicenseCode_Value int32

const (
	SPDXLicenseCode_INVALID_UNINITIALIZED                SPDXLicenseCode_Value = 0
	SPDXLicenseCode_NOT_OPEN_SOURCE                      SPDXLicenseCode_Value = 1
	SPDXLicenseCode_BSD_ZERO_CLAUSE_LICENSE              SPDXLicenseCode_Value = 2
	SPDXLicenseCode_AAL                                  SPDXLicenseCode_Value = 3
	SPDXLicenseCode_ABSTYLES                             SPDXLicenseCode_Value = 4
	SPDXLicenseCode_ADOBE_2006                           SPDXLicenseCode_Value = 5
	SPDXLicenseCode_ADOBE_GLYPH                          SPDXLicenseCode_Value = 6
	SPDXLicenseCode_ADSL                                 SPDXLicenseCode_Value = 7
	SPDXLicenseCode_AFL_1_1                              SPDXLicenseCode_Value = 8
	SPDXLicenseCode_AFL_1_2                              SPDXLicenseCode_Value = 9
	SPDXLicenseCode_AFL_2_0                              SPDXLicenseCode_Value = 10
	SPDXLicenseCode_AFL_2_1                              SPDXLicenseCode_Value = 11
	SPDXLicenseCode_AFL_3_0                              SPDXLicenseCode_Value = 12
	SPDXLicenseCode_AFMPARSE                             SPDXLicenseCode_Value = 13
	SPDXLicenseCode_AGPL_1_0_ONLY                        SPDXLicenseCode_Value = 14
	SPDXLicenseCode_AGPL_1_0_OR_LATER                    SPDXLicenseCode_Value = 15
	SPDXLicenseCode_AGPL_3_0_ONLY                        SPDXLicenseCode_Value = 16
	SPDXLicenseCode_AGPL_3_0_OR_LATER                    SPDXLicenseCode_Value = 17
	SPDXLicenseCode_ALADDIN                              SPDXLicenseCode_Value = 18
	SPDXLicenseCode_AMDPLPA                              SPDXLicenseCode_Value = 19
	SPDXLicenseCode_AML                                  SPDXLicenseCode_Value = 20
	SPDXLicenseCode_AMPAS                                SPDXLicenseCode_Value = 21
	SPDXLicenseCode_ANTLR_PD                             SPDXLicenseCode_Value = 22
	SPDXLicenseCode_APACHE_1_0                           SPDXLicenseCode_Value = 23
	SPDXLicenseCode_APACHE_1_1                           SPDXLicenseCode_Value = 24
	SPDXLicenseCode_APACHE_2_0                           SPDXLicenseCode_Value = 25
	SPDXLicenseCode_APAFML                               SPDXLicenseCode_Value = 26
	SPDXLicenseCode_APL_1_0                              SPDXLicenseCode_Value = 27
	SPDXLicenseCode_APSL_1_0                             SPDXLicenseCode_Value = 28
	SPDXLicenseCode_APSL_1_1                             SPDXLicenseCode_Value = 29
	SPDXLicenseCode_APSL_1_2                             SPDXLicenseCode_Value = 30
	SPDXLicenseCode_APSL_2_0                             SPDXLicenseCode_Value = 31
	SPDXLicenseCode_ARTISTIC_1_0_CL8                     SPDXLicenseCode_Value = 32
	SPDXLicenseCode_ARTISTIC_1_0_PERL                    SPDXLicenseCode_Value = 33
	SPDXLicenseCode_ARTISTIC_1_0                         SPDXLicenseCode_Value = 34
	SPDXLicenseCode_ARTISTIC_2_0                         SPDXLicenseCode_Value = 35
	SPDXLicenseCode_BAHYPH                               SPDXLicenseCode_Value = 36
	SPDXLicenseCode_BARR                                 SPDXLicenseCode_Value = 37
	SPDXLicenseCode_BEERWARE                             SPDXLicenseCode_Value = 38
	SPDXLicenseCode_BIT_TORRENT_1_0                      SPDXLicenseCode_Value = 39
	SPDXLicenseCode_BIT_TORRENT_1_1                      SPDXLicenseCode_Value = 40
	SPDXLicenseCode_BORCEUX                              SPDXLicenseCode_Value = 41
	SPDXLicenseCode_BSD_1_CLAUSE                         SPDXLicenseCode_Value = 42
	SPDXLicenseCode_BSD_2_CLAUSE_FREE_BSD                SPDXLicenseCode_Value = 43
	SPDXLicenseCode_BSD_2_CLAUSE_NET_BSD                 SPDXLicenseCode_Value = 44
	SPDXLicenseCode_BSD_2_CLAUSE_PATENT                  SPDXLicenseCode_Value = 45
	SPDXLicenseCode_BSD_2_CLAUSE                         SPDXLicenseCode_Value = 46
	SPDXLicenseCode_BSD_3_CLAUSE_ATTRIBUTION             SPDXLicenseCode_Value = 47
	SPDXLicenseCode_BSD_3_CLAUSE_CLEAR                   SPDXLicenseCode_Value = 48
	SPDXLicenseCode_BSD_3_CLAUSE_LBNL                    SPDXLicenseCode_Value = 49
	SPDXLicenseCode_BSD_3_CLAUSE_NO_NUCLEAR_LICENSE_2014 SPDXLicenseCode_Value = 50
	SPDXLicenseCode_BSD_3_CLAUSE_NO_NUCLEAR_LICENSE      SPDXLicenseCode_Value = 51
	SPDXLicenseCode_BSD_3_CLAUSE_NO_NUCLEAR_WARRANTY     SPDXLicenseCode_Value = 52
	SPDXLicenseCode_BSD_3_CLAUSE                         SPDXLicenseCode_Value = 53
	SPDXLicenseCode_BSD_4_CLAUSE_UC                      SPDXLicenseCode_Value = 54
	SPDXLicenseCode_BSD_4_CLAUSE                         SPDXLicenseCode_Value = 55
	SPDXLicenseCode_BSD_PROTECTION                       SPDXLicenseCode_Value = 56
	SPDXLicenseCode_BSD_SOURCE_CODE                      SPDXLicenseCode_Value = 57
	SPDXLicenseCode_BSL_1_0                              SPDXLicenseCode_Value = 58
	SPDXLicenseCode_BZIP2_1_0_5                          SPDXLicenseCode_Value = 59
	SPDXLicenseCode_BZIP2_1_0_6                          SPDXLicenseCode_Value = 60
	SPDXLicenseCode_CALDERA                              SPDXLicenseCode_Value = 61
	SPDXLicenseCode_CATOSL_1_1                           SPDXLicenseCode_Value = 62
	SPDXLicenseCode_CC_BY_1_0                            SPDXLicenseCode_Value = 63
	SPDXLicenseCode_CC_BY_2_0                            SPDXLicenseCode_Value = 64
	SPDXLicenseCode_CC_BY_2_5                            SPDXLicenseCode_Value = 65
	SPDXLicenseCode_CC_BY_3_0                            SPDXLicenseCode_Value = 66
	SPDXLicenseCode_CC_BY_4_0                            SPDXLicenseCode_Value = 67
	SPDXLicenseCode_CC_BY_NC_1_0                         SPDXLicenseCode_Value = 68
	SPDXLicenseCode_CC_BY_NC_2_0                         SPDXLicenseCode_Value = 69
	SPDXLicenseCode_CC_BY_NC_2_5                         SPDXLicenseCode_Value = 70
	SPDXLicenseCode_CC_BY_NC_3_0                         SPDXLicenseCode_Value = 71
	SPDXLicenseCode_CC_BY_NC_4_0                         SPDXLicenseCode_Value = 72
	SPDXLicenseCode_CC_BY_NC_ND_1_0                      SPDXLicenseCode_Value = 73
	SPDXLicenseCode_CC_BY_NC_ND_2_0                      SPDXLicenseCode_Value = 74
	SPDXLicenseCode_CC_BY_NC_ND_2_5                      SPDXLicenseCode_Value = 75
	SPDXLicenseCode_CC_BY_NC_ND_3_0                      SPDXLicenseCode_Value = 76
	SPDXLicenseCode_CC_BY_NC_ND_4_0                      SPDXLicenseCode_Value = 77
	SPDXLicenseCode_CC_BY_NC_SA_1_0                      SPDXLicenseCode_Value = 78
	SPDXLicenseCode_CC_BY_NC_SA_2_0                      SPDXLicenseCode_Value = 79
	SPDXLicenseCode_CC_BY_NC_SA_2_5                      SPDXLicenseCode_Value = 80
	SPDXLicenseCode_CC_BY_NC_SA_3_0                      SPDXLicenseCode_Value = 81
	SPDXLicenseCode_CC_BY_NC_SA_4_0                      SPDXLicenseCode_Value = 82
	SPDXLicenseCode_CC_BY_ND_1_0                         SPDXLicenseCode_Value = 83
	SPDXLicenseCode_CC_BY_ND_2_0                         SPDXLicenseCode_Value = 84
	SPDXLicenseCode_CC_BY_ND_2_5                         SPDXLicenseCode_Value = 85
	SPDXLicenseCode_CC_BY_ND_3_0                         SPDXLicenseCode_Value = 86
	SPDXLicenseCode_CC_BY_ND_4_0                         SPDXLicenseCode_Value = 87
	SPDXLicenseCode_CC_BY_SA_1_0                         SPDXLicenseCode_Value = 88
	SPDXLicenseCode_CC_BY_SA_2_0                         SPDXLicenseCode_Value = 89
	SPDXLicenseCode_CC_BY_SA_2_5                         SPDXLicenseCode_Value = 90
	SPDXLicenseCode_CC_BY_SA_3_0                         SPDXLicenseCode_Value = 91
	SPDXLicenseCode_CC_BY_SA_4_0                         SPDXLicenseCode_Value = 92
	SPDXLicenseCode_CC0_1_0                              SPDXLicenseCode_Value = 93
	SPDXLicenseCode_CDDL_1_0                             SPDXLicenseCode_Value = 94
	SPDXLicenseCode_CDDL_1_1                             SPDXLicenseCode_Value = 95
	SPDXLicenseCode_CDLA_PERMISSIVE_1_0                  SPDXLicenseCode_Value = 96
	SPDXLicenseCode_CDLA_SHARING_1_0                     SPDXLicenseCode_Value = 97
	SPDXLicenseCode_CECILL_1_0                           SPDXLicenseCode_Value = 98
	SPDXLicenseCode_CECILL_1_1                           SPDXLicenseCode_Value = 99
	SPDXLicenseCode_CECILL_2_0                           SPDXLicenseCode_Value = 100
	SPDXLicenseCode_CECILL_2_1                           SPDXLicenseCode_Value = 101
	SPDXLicenseCode_CECILL_B                             SPDXLicenseCode_Value = 102
	SPDXLicenseCode_CECILL_C                             SPDXLicenseCode_Value = 103
	SPDXLicenseCode_CL_ARTISTIC                          SPDXLicenseCode_Value = 104
	SPDXLicenseCode_CNRI_JYTHON                          SPDXLicenseCode_Value = 105
	SPDXLicenseCode_CNRI_PYTHON_GPL_COMPATIBLE           SPDXLicenseCode_Value = 106
	SPDXLicenseCode_CNRI_PYTHON                          SPDXLicenseCode_Value = 107
	SPDXLicenseCode_CONDOR_1_1                           SPDXLicenseCode_Value = 108
	SPDXLicenseCode_CPAL_1_0                             SPDXLicenseCode_Value = 109
	SPDXLicenseCode_CPL_1_0                              SPDXLicenseCode_Value = 110
	SPDXLicenseCode_CPOL_1_02                            SPDXLicenseCode_Value = 111
	SPDXLicenseCode_CROSSWORD                            SPDXLicenseCode_Value = 112
	SPDXLicenseCode_CRYSTAL_STACKER                      SPDXLicenseCode_Value = 113
	SPDXLicenseCode_CUA_OPL_1_0                          SPDXLicenseCode_Value = 114
	SPDXLicenseCode_CUBE                                 SPDXLicenseCode_Value = 115
	SPDXLicenseCode_CURL                                 SPDXLicenseCode_Value = 116
	SPDXLicenseCode_D_FSL_1_0                            SPDXLicenseCode_Value = 117
	SPDXLicenseCode_DIFFMARK                             SPDXLicenseCode_Value = 118
	SPDXLicenseCode_DOC                                  SPDXLicenseCode_Value = 119
	SPDXLicenseCode_DOTSEQN                              SPDXLicenseCode_Value = 120
	SPDXLicenseCode_DSDP                                 SPDXLicenseCode_Value = 121
	SPDXLicenseCode_DVIPDFM                              SPDXLicenseCode_Value = 122
	SPDXLicenseCode_ECL_1_0                              SPDXLicenseCode_Value = 123
	SPDXLicenseCode_ECL_2_0                              SPDXLicenseCode_Value = 124
	SPDXLicenseCode_EFL_1_0                              SPDXLicenseCode_Value = 125
	SPDXLicenseCode_EFL_2_0                              SPDXLicenseCode_Value = 126
	SPDXLicenseCode_E_GENIX                              SPDXLicenseCode_Value = 127
	SPDXLicenseCode_ENTESSA                              SPDXLicenseCode_Value = 128
	SPDXLicenseCode_EPL_1_0                              SPDXLicenseCode_Value = 129
	SPDXLicenseCode_EPL_2_0                              SPDXLicenseCode_Value = 130
	SPDXLicenseCode_ERL_PL_1_1                           SPDXLicenseCode_Value = 131
	SPDXLicenseCode_EU_DATAGRID                          SPDXLicenseCode_Value = 132
	SPDXLicenseCode_EUPL_1_0                             SPDXLicenseCode_Value = 133
	SPDXLicenseCode_EUPL_1_1                             SPDXLicenseCode_Value = 134
	SPDXLicenseCode_EUPL_1_2                             SPDXLicenseCode_Value = 135
	SPDXLicenseCode_EUROSYM                              SPDXLicenseCode_Value = 136
	SPDXLicenseCode_FAIR                                 SPDXLicenseCode_Value = 137
	SPDXLicenseCode_FRAMEWORX_1_0                        SPDXLicenseCode_Value = 138
	SPDXLicenseCode_FREE_IMAGE                           SPDXLicenseCode_Value = 139
	SPDXLicenseCode_FSFAP                                SPDXLicenseCode_Value = 140
	SPDXLicenseCode_FSFUL                                SPDXLicenseCode_Value = 141
	SPDXLicenseCode_FSFULLR                              SPDXLicenseCode_Value = 142
	SPDXLicenseCode_FTL                                  SPDXLicenseCode_Value = 143
	SPDXLicenseCode_GFDL_1_1_ONLY                        SPDXLicenseCode_Value = 144
	SPDXLicenseCode_GFDL_1_1_OR_LATER                    SPDXLicenseCode_Value = 145
	SPDXLicenseCode_GFDL_1_2_ONLY                        SPDXLicenseCode_Value = 146
	SPDXLicenseCode_GFDL_1_2_OR_LATER                    SPDXLicenseCode_Value = 147
	SPDXLicenseCode_GFDL_1_3_ONLY                        SPDXLicenseCode_Value = 148
	SPDXLicenseCode_GFDL_1_3_OR_LATER                    SPDXLicenseCode_Value = 149
	SPDXLicenseCode_GIFTWARE                             SPDXLicenseCode_Value = 150
	SPDXLicenseCode_GL2PS                                SPDXLicenseCode_Value = 151
	SPDXLicenseCode_GLIDE                                SPDXLicenseCode_Value = 152
	SPDXLicenseCode_GLULXE                               SPDXLicenseCode_Value = 153
	SPDXLicenseCode_GNUPLOT                              SPDXLicenseCode_Value = 154
	SPDXLicenseCode_GPL_1_0_ONLY                         SPDXLicenseCode_Value = 155
	SPDXLicenseCode_GPL_1_0_OR_LATER                     SPDXLicenseCode_Value = 156
	SPDXLicenseCode_GPL_2_0_ONLY                         SPDXLicenseCode_Value = 157
	SPDXLicenseCode_GPL_2_0_OR_LATER                     SPDXLicenseCode_Value = 158
	SPDXLicenseCode_GPL_3_0_ONLY                         SPDXLicenseCode_Value = 159
	SPDXLicenseCode_GPL_3_0_OR_LATER                     SPDXLicenseCode_Value = 160
	SPDXLicenseCode_G_SOAP_1_3B                          SPDXLicenseCode_Value = 161
	SPDXLicenseCode_HASKELL_REPORT                       SPDXLicenseCode_Value = 162
	SPDXLicenseCode_HPND                                 SPDXLicenseCode_Value = 163
	SPDXLicenseCode_IBM_PIBS                             SPDXLicenseCode_Value = 164
	SPDXLicenseCode_ICU                                  SPDXLicenseCode_Value = 165
	SPDXLicenseCode_IJG                                  SPDXLicenseCode_Value = 166
	SPDXLicenseCode_IMAGE_MAGICK                         SPDXLicenseCode_Value = 167
	SPDXLicenseCode_I_MATIX                              SPDXLicenseCode_Value = 168
	SPDXLicenseCode_IMLIB2                               SPDXLicenseCode_Value = 169
	SPDXLicenseCode_INFO_ZIP                             SPDXLicenseCode_Value = 170
	SPDXLicenseCode_INTEL_ACPI                           SPDXLicenseCode_Value = 171
	SPDXLicenseCode_INTEL                                SPDXLicenseCode_Value = 172
	SPDXLicenseCode_INTERBASE_1_0                        SPDXLicenseCode_Value = 173
	SPDXLicenseCode_IPA                                  SPDXLicenseCode_Value = 174
	SPDXLicenseCode_IPL_1_0                              SPDXLicenseCode_Value = 175
	SPDXLicenseCode_ISC                                  SPDXLicenseCode_Value = 176
	SPDXLicenseCode_JAS_PER_2_0                          SPDXLicenseCode_Value = 177
	SPDXLicenseCode_JSON                                 SPDXLicenseCode_Value = 178
	SPDXLicenseCode_LAL_1_2                              SPDXLicenseCode_Value = 179
	SPDXLicenseCode_LAL_1_3                              SPDXLicenseCode_Value = 180
	SPDXLicenseCode_LATEX2E                              SPDXLicenseCode_Value = 181
	SPDXLicenseCode_LEPTONICA                            SPDXLicenseCode_Value = 182
	SPDXLicenseCode_LGPL_2_0_ONLY                        SPDXLicenseCode_Value = 183
	SPDXLicenseCode_LGPL_2_0_OR_LATER                    SPDXLicenseCode_Value = 184
	SPDXLicenseCode_LGPL_2_1_ONLY                        SPDXLicenseCode_Value = 185
	SPDXLicenseCode_LGPL_2_1_OR_LATER                    SPDXLicenseCode_Value = 186
	SPDXLicenseCode_LGPL_3_0_ONLY                        SPDXLicenseCode_Value = 187
	SPDXLicenseCode_LGPL_3_0_OR_LATER                    SPDXLicenseCode_Value = 188
	SPDXLicenseCode_LGPLLR                               SPDXLicenseCode_Value = 189
	SPDXLicenseCode_LIBPNG                               SPDXLicenseCode_Value = 190
	SPDXLicenseCode_LIBTIFF                              SPDXLicenseCode_Value = 191
	SPDXLicenseCode_LI_LI_Q_P_1_1                        SPDXLicenseCode_Value = 192
	SPDXLicenseCode_LI_LI_Q_R_1_1                        SPDXLicenseCode_Value = 193
	SPDXLicenseCode_LI_LI_Q_RPLUS_1_1                    SPDXLicenseCode_Value = 194
	SPDXLicenseCode_LINUX_OPEN_IB                        SPDXLicenseCode_Value = 195
	SPDXLicenseCode_LPL_1_0                              SPDXLicenseCode_Value = 196
	SPDXLicenseCode_LPL_1_02                             SPDXLicenseCode_Value = 197
	SPDXLicenseCode_LPPL_1_0                             SPDXLicenseCode_Value = 198
	SPDXLicenseCode_LPPL_1_1                             SPDXLicenseCode_Value = 199
	SPDXLicenseCode_LPPL_1_2                             SPDXLicenseCode_Value = 200
	SPDXLicenseCode_LPPL_1_3A                            SPDXLicenseCode_Value = 201
	SPDXLicenseCode_LPPL_1_3C                            SPDXLicenseCode_Value = 202
	SPDXLicenseCode_MAKE_INDEX                           SPDXLicenseCode_Value = 203
	SPDXLicenseCode_MIR_OS                               SPDXLicenseCode_Value = 204
	SPDXLicenseCode_MIT_0                                SPDXLicenseCode_Value = 205
	SPDXLicenseCode_MIT_ADVERTISING                      SPDXLicenseCode_Value = 206
	SPDXLicenseCode_MIT_CMU                              SPDXLicenseCode_Value = 207
	SPDXLicenseCode_MIT_ENNA                             SPDXLicenseCode_Value = 208
	SPDXLicenseCode_MIT_FEH                              SPDXLicenseCode_Value = 209
	SPDXLicenseCode_MIT                                  SPDXLicenseCode_Value = 210
	SPDXLicenseCode_MITNFA                               SPDXLicenseCode_Value = 211
	SPDXLicenseCode_MOTOSOTO                             SPDXLicenseCode_Value = 212
	SPDXLicenseCode_MPICH2                               SPDXLicenseCode_Value = 213
	SPDXLicenseCode_MPL_1_0                              SPDXLicenseCode_Value = 214
	SPDXLicenseCode_MPL_1_1                              SPDXLicenseCode_Value = 215
	SPDXLicenseCode_MPL_2_0_NO_COPYLEFT_EXCEPTION        SPDXLicenseCode_Value = 216
	SPDXLicenseCode_MPL_2_0                              SPDXLicenseCode_Value = 217
	SPDXLicenseCode_MS_PL                                SPDXLicenseCode_Value = 218
	SPDXLicenseCode_MS_RL                                SPDXLicenseCode_Value = 219
	SPDXLicenseCode_MTLL                                 SPDXLicenseCode_Value = 220
	SPDXLicenseCode_MULTICS                              SPDXLicenseCode_Value = 221
	SPDXLicenseCode_MUP                                  SPDXLicenseCode_Value = 222
	SPDXLicenseCode_NASA_1_3                             SPDXLicenseCode_Value = 223
	SPDXLicenseCode_NAUMEN                               SPDXLicenseCode_Value = 224
	SPDXLicenseCode_NBPL_1_0                             SPDXLicenseCode_Value = 225
	SPDXLicenseCode_NCSA                                 SPDXLicenseCode_Value = 226
	SPDXLicenseCode_NET_SNMP                             SPDXLicenseCode_Value = 227
	SPDXLicenseCode_NET_CDF                              SPDXLicenseCode_Value = 228
	SPDXLicenseCode_NEWSLETR                             SPDXLicenseCode_Value = 229
	SPDXLicenseCode_NGPL                                 SPDXLicenseCode_Value = 230
	SPDXLicenseCode_NLOD_1_0                             SPDXLicenseCode_Value = 231
	SPDXLicenseCode_NLPL                                 SPDXLicenseCode_Value = 232
	SPDXLicenseCode_NOKIA                                SPDXLicenseCode_Value = 233
	SPDXLicenseCode_NOSL                                 SPDXLicenseCode_Value = 234
	SPDXLicenseCode_NOWEB                                SPDXLicenseCode_Value = 235
	SPDXLicenseCode_NPL_1_0                              SPDXLicenseCode_Value = 236
	SPDXLicenseCode_NPL_1_1                              SPDXLicenseCode_Value = 237
	SPDXLicenseCode_NPOSL_3_0                            SPDXLicenseCode_Value = 238
	SPDXLicenseCode_NRL                                  SPDXLicenseCode_Value = 239
	SPDXLicenseCode_NTP                                  SPDXLicenseCode_Value = 240
	SPDXLicenseCode_OCCT_PL                              SPDXLicenseCode_Value = 241
	SPDXLicenseCode_OCLC_2_0                             SPDXLicenseCode_Value = 242
	SPDXLicenseCode_O_DB_L_1_0                           SPDXLicenseCode_Value = 243
	SPDXLicenseCode_OFL_1_0                              SPDXLicenseCode_Value = 244
	SPDXLicenseCode_OFL_1_1                              SPDXLicenseCode_Value = 245
	SPDXLicenseCode_OGTSL                                SPDXLicenseCode_Value = 246
	SPDXLicenseCode_OLDAP_1_1                            SPDXLicenseCode_Value = 247
	SPDXLicenseCode_OLDAP_1_2                            SPDXLicenseCode_Value = 248
	SPDXLicenseCode_OLDAP_1_3                            SPDXLicenseCode_Value = 249
	SPDXLicenseCode_OLDAP_1_4                            SPDXLicenseCode_Value = 250
	SPDXLicenseCode_OLDAP_2_0_1                          SPDXLicenseCode_Value = 251
	SPDXLicenseCode_OLDAP_2_0                            SPDXLicenseCode_Value = 252
	SPDXLicenseCode_OLDAP_2_1                            SPDXLicenseCode_Value = 253
	SPDXLicenseCode_OLDAP_2_2_1                          SPDXLicenseCode_Value = 254
	SPDXLicenseCode_OLDAP_2_2_2                          SPDXLicenseCode_Value = 255
	SPDXLicenseCode_OLDAP_2_2                            SPDXLicenseCode_Value = 256
	SPDXLicenseCode_OLDAP_2_3                            SPDXLicenseCode_Value = 257
	SPDXLicenseCode_OLDAP_2_4                            SPDXLicenseCode_Value = 258
	SPDXLicenseCode_OLDAP_2_5                            SPDXLicenseCode_Value = 259
	SPDXLicenseCode_OLDAP_2_6                            SPDXLicenseCode_Value = 260
	SPDXLicenseCode_OLDAP_2_7                            SPDXLicenseCode_Value = 261
	SPDXLicenseCode_OLDAP_2_8                            SPDXLicenseCode_Value = 262
	SPDXLicenseCode_OML                                  SPDXLicenseCode_Value = 263
	SPDXLicenseCode_OPEN_SSL                             SPDXLicenseCode_Value = 264
	SPDXLicenseCode_OPL_1_0                              SPDXLicenseCode_Value = 265
	SPDXLicenseCode_OSET_PL_2_1                          SPDXLicenseCode_Value = 266
	SPDXLicenseCode_OSL_1_0                              SPDXLicenseCode_Value = 267
	SPDXLicenseCode_OSL_1_1                              SPDXLicenseCode_Value = 268
	SPDXLicenseCode_OSL_2_0                              SPDXLicenseCode_Value = 269
	SPDXLicenseCode_OSL_2_1                              SPDXLicenseCode_Value = 270
	SPDXLicenseCode_OSL_3_0                              SPDXLicenseCode_Value = 271
	SPDXLicenseCode_PDDL_1_0                             SPDXLicenseCode_Value = 272
	SPDXLicenseCode_PHP_3_0                              SPDXLicenseCode_Value = 273
	SPDXLicenseCode_PHP_3_01                             SPDXLicenseCode_Value = 274
	SPDXLicenseCode_PLEXUS                               SPDXLicenseCode_Value = 275
	SPDXLicenseCode_POSTGRE_SQL                          SPDXLicenseCode_Value = 276
	SPDXLicenseCode_PSFRAG                               SPDXLicenseCode_Value = 277
	SPDXLicenseCode_PSUTILS                              SPDXLicenseCode_Value = 278
	SPDXLicenseCode_PYTHON_2_0                           SPDXLicenseCode_Value = 279
	SPDXLicenseCode_QHULL                                SPDXLicenseCode_Value = 280
	SPDXLicenseCode_QPL_1_0                              SPDXLicenseCode_Value = 281
	SPDXLicenseCode_RDISC                                SPDXLicenseCode_Value = 282
	SPDXLicenseCode_R_HE_COS_1_1                         SPDXLicenseCode_Value = 283
	SPDXLicenseCode_RPL_1_1                              SPDXLicenseCode_Value = 284
	SPDXLicenseCode_RPL_1_5                              SPDXLicenseCode_Value = 285
	SPDXLicenseCode_RPSL_1_0                             SPDXLicenseCode_Value = 286
	SPDXLicenseCode_RSA_MD                               SPDXLicenseCode_Value = 287
	SPDXLicenseCode_RSCPL                                SPDXLicenseCode_Value = 288
	SPDXLicenseCode_RUBY                                 SPDXLicenseCode_Value = 289
	SPDXLicenseCode_SAX_PD                               SPDXLicenseCode_Value = 290
	SPDXLicenseCode_SAXPATH                              SPDXLicenseCode_Value = 291
	SPDXLicenseCode_SCEA                                 SPDXLicenseCode_Value = 292
	SPDXLicenseCode_SENDMAIL                             SPDXLicenseCode_Value = 293
	SPDXLicenseCode_SGI_B_1_0                            SPDXLicenseCode_Value = 294
	SPDXLicenseCode_SGI_B_1_1                            SPDXLicenseCode_Value = 295
	SPDXLicenseCode_SGI_B_2_0                            SPDXLicenseCode_Value = 296
	SPDXLicenseCode_SIM_PL_2_0                           SPDXLicenseCode_Value = 297
	SPDXLicenseCode_SISSL_1_2                            SPDXLicenseCode_Value = 298
	SPDXLicenseCode_SISSL                                SPDXLicenseCode_Value = 299
	SPDXLicenseCode_SLEEPYCAT                            SPDXLicenseCode_Value = 300
	SPDXLicenseCode_SMLNJ                                SPDXLicenseCode_Value = 301
	SPDXLicenseCode_SMPPL                                SPDXLicenseCode_Value = 302
	SPDXLicenseCode_SNIA                                 SPDXLicenseCode_Value = 303
	SPDXLicenseCode_SPENCER_86                           SPDXLicenseCode_Value = 304
	SPDXLicenseCode_SPENCER_94                           SPDXLicenseCode_Value = 305
	SPDXLicenseCode_SPENCER_99                           SPDXLicenseCode_Value = 306
	SPDXLicenseCode_SPL_1_0                              SPDXLicenseCode_Value = 307
	SPDXLicenseCode_SUGAR_CRM_1_1_3                      SPDXLicenseCode_Value = 308
	SPDXLicenseCode_SWL                                  SPDXLicenseCode_Value = 309
	SPDXLicenseCode_TCL                                  SPDXLicenseCode_Value = 310
	SPDXLicenseCode_TCP_WRAPPERS                         SPDXLicenseCode_Value = 311
	SPDXLicenseCode_T_MATE                               SPDXLicenseCode_Value = 312
	SPDXLicenseCode_TORQUE_1_1                           SPDXLicenseCode_Value = 313
	SPDXLicenseCode_TOSL                                 SPDXLicenseCode_Value = 314
	SPDXLicenseCode_UNICODE_DFS_2015                     SPDXLicenseCode_Value = 315
	SPDXLicenseCode_UNICODE_DFS_2016                     SPDXLicenseCode_Value = 316
	SPDXLicenseCode_UNICODE_TOU                          SPDXLicenseCode_Value = 317
	SPDXLicenseCode_UNLICENSE                            SPDXLicenseCode_Value = 318
	SPDXLicenseCode_UPL_1_0                              SPDXLicenseCode_Value = 319
	SPDXLicenseCode_VIM                                  SPDXLicenseCode_Value = 320
	SPDXLicenseCode_VOSTROM                              SPDXLicenseCode_Value = 321
	SPDXLicenseCode_VSL_1_0                              SPDXLicenseCode_Value = 322
	SPDXLicenseCode_W3C_19980720                         SPDXLicenseCode_Value = 323
	SPDXLicenseCode_W3C_20150513                         SPDXLicenseCode_Value = 324
	SPDXLicenseCode_W3C                                  SPDXLicenseCode_Value = 325
	SPDXLicenseCode_WATCOM_1_0                           SPDXLicenseCode_Value = 326
	SPDXLicenseCode_WSUIPA                               SPDXLicenseCode_Value = 327
	SPDXLicenseCode_WTFPL                                SPDXLicenseCode_Value = 328
	SPDXLicenseCode_X11                                  SPDXLicenseCode_Value = 329
	SPDXLicenseCode_XEROX                                SPDXLicenseCode_Value = 330
	SPDXLicenseCode_X_FREE86_1_1                         SPDXLicenseCode_Value = 331
	SPDXLicenseCode_XINETD                               SPDXLicenseCode_Value = 332
	SPDXLicenseCode_XNET                                 SPDXLicenseCode_Value = 333
	SPDXLicenseCode_XPP                                  SPDXLicenseCode_Value = 334
	SPDXLicenseCode_X_SKAT                               SPDXLicenseCode_Value = 335
	SPDXLicenseCode_YPL_1_0                              SPDXLicenseCode_Value = 336
	SPDXLicenseCode_YPL_1_1                              SPDXLicenseCode_Value = 337
	SPDXLicenseCode_ZED                                  SPDXLicenseCode_Value = 338
	SPDXLicenseCode_ZEND_2_0                             SPDXLicenseCode_Value = 339
	SPDXLicenseCode_ZIMBRA_1_3                           SPDXLicenseCode_Value = 340
	SPDXLicenseCode_ZIMBRA_1_4                           SPDXLicenseCode_Value = 341
	SPDXLicenseCode_ZLIB_ACKNOWLEDGEMENT                 SPDXLicenseCode_Value = 342
	SPDXLicenseCode_ZLIB                                 SPDXLicenseCode_Value = 343
	SPDXLicenseCode_ZPL_1_1                              SPDXLicenseCode_Value = 344
	SPDXLicenseCode_ZPL_2_0                              SPDXLicenseCode_Value = 345
	SPDXLicenseCode_ZPL_2_1                              SPDXLicenseCode_Value = 346
)

// Enum value maps for SPDXLicenseCode_Value.
var (
	SPDXLicenseCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "NOT_OPEN_SOURCE",
		2:   "BSD_ZERO_CLAUSE_LICENSE",
		3:   "AAL",
		4:   "ABSTYLES",
		5:   "ADOBE_2006",
		6:   "ADOBE_GLYPH",
		7:   "ADSL",
		8:   "AFL_1_1",
		9:   "AFL_1_2",
		10:  "AFL_2_0",
		11:  "AFL_2_1",
		12:  "AFL_3_0",
		13:  "AFMPARSE",
		14:  "AGPL_1_0_ONLY",
		15:  "AGPL_1_0_OR_LATER",
		16:  "AGPL_3_0_ONLY",
		17:  "AGPL_3_0_OR_LATER",
		18:  "ALADDIN",
		19:  "AMDPLPA",
		20:  "AML",
		21:  "AMPAS",
		22:  "ANTLR_PD",
		23:  "APACHE_1_0",
		24:  "APACHE_1_1",
		25:  "APACHE_2_0",
		26:  "APAFML",
		27:  "APL_1_0",
		28:  "APSL_1_0",
		29:  "APSL_1_1",
		30:  "APSL_1_2",
		31:  "APSL_2_0",
		32:  "ARTISTIC_1_0_CL8",
		33:  "ARTISTIC_1_0_PERL",
		34:  "ARTISTIC_1_0",
		35:  "ARTISTIC_2_0",
		36:  "BAHYPH",
		37:  "BARR",
		38:  "BEERWARE",
		39:  "BIT_TORRENT_1_0",
		40:  "BIT_TORRENT_1_1",
		41:  "BORCEUX",
		42:  "BSD_1_CLAUSE",
		43:  "BSD_2_CLAUSE_FREE_BSD",
		44:  "BSD_2_CLAUSE_NET_BSD",
		45:  "BSD_2_CLAUSE_PATENT",
		46:  "BSD_2_CLAUSE",
		47:  "BSD_3_CLAUSE_ATTRIBUTION",
		48:  "BSD_3_CLAUSE_CLEAR",
		49:  "BSD_3_CLAUSE_LBNL",
		50:  "BSD_3_CLAUSE_NO_NUCLEAR_LICENSE_2014",
		51:  "BSD_3_CLAUSE_NO_NUCLEAR_LICENSE",
		52:  "BSD_3_CLAUSE_NO_NUCLEAR_WARRANTY",
		53:  "BSD_3_CLAUSE",
		54:  "BSD_4_CLAUSE_UC",
		55:  "BSD_4_CLAUSE",
		56:  "BSD_PROTECTION",
		57:  "BSD_SOURCE_CODE",
		58:  "BSL_1_0",
		59:  "BZIP2_1_0_5",
		60:  "BZIP2_1_0_6",
		61:  "CALDERA",
		62:  "CATOSL_1_1",
		63:  "CC_BY_1_0",
		64:  "CC_BY_2_0",
		65:  "CC_BY_2_5",
		66:  "CC_BY_3_0",
		67:  "CC_BY_4_0",
		68:  "CC_BY_NC_1_0",
		69:  "CC_BY_NC_2_0",
		70:  "CC_BY_NC_2_5",
		71:  "CC_BY_NC_3_0",
		72:  "CC_BY_NC_4_0",
		73:  "CC_BY_NC_ND_1_0",
		74:  "CC_BY_NC_ND_2_0",
		75:  "CC_BY_NC_ND_2_5",
		76:  "CC_BY_NC_ND_3_0",
		77:  "CC_BY_NC_ND_4_0",
		78:  "CC_BY_NC_SA_1_0",
		79:  "CC_BY_NC_SA_2_0",
		80:  "CC_BY_NC_SA_2_5",
		81:  "CC_BY_NC_SA_3_0",
		82:  "CC_BY_NC_SA_4_0",
		83:  "CC_BY_ND_1_0",
		84:  "CC_BY_ND_2_0",
		85:  "CC_BY_ND_2_5",
		86:  "CC_BY_ND_3_0",
		87:  "CC_BY_ND_4_0",
		88:  "CC_BY_SA_1_0",
		89:  "CC_BY_SA_2_0",
		90:  "CC_BY_SA_2_5",
		91:  "CC_BY_SA_3_0",
		92:  "CC_BY_SA_4_0",
		93:  "CC0_1_0",
		94:  "CDDL_1_0",
		95:  "CDDL_1_1",
		96:  "CDLA_PERMISSIVE_1_0",
		97:  "CDLA_SHARING_1_0",
		98:  "CECILL_1_0",
		99:  "CECILL_1_1",
		100: "CECILL_2_0",
		101: "CECILL_2_1",
		102: "CECILL_B",
		103: "CECILL_C",
		104: "CL_ARTISTIC",
		105: "CNRI_JYTHON",
		106: "CNRI_PYTHON_GPL_COMPATIBLE",
		107: "CNRI_PYTHON",
		108: "CONDOR_1_1",
		109: "CPAL_1_0",
		110: "CPL_1_0",
		111: "CPOL_1_02",
		112: "CROSSWORD",
		113: "CRYSTAL_STACKER",
		114: "CUA_OPL_1_0",
		115: "CUBE",
		116: "CURL",
		117: "D_FSL_1_0",
		118: "DIFFMARK",
		119: "DOC",
		120: "DOTSEQN",
		121: "DSDP",
		122: "DVIPDFM",
		123: "ECL_1_0",
		124: "ECL_2_0",
		125: "EFL_1_0",
		126: "EFL_2_0",
		127: "E_GENIX",
		128: "ENTESSA",
		129: "EPL_1_0",
		130: "EPL_2_0",
		131: "ERL_PL_1_1",
		132: "EU_DATAGRID",
		133: "EUPL_1_0",
		134: "EUPL_1_1",
		135: "EUPL_1_2",
		136: "EUROSYM",
		137: "FAIR",
		138: "FRAMEWORX_1_0",
		139: "FREE_IMAGE",
		140: "FSFAP",
		141: "FSFUL",
		142: "FSFULLR",
		143: "FTL",
		144: "GFDL_1_1_ONLY",
		145: "GFDL_1_1_OR_LATER",
		146: "GFDL_1_2_ONLY",
		147: "GFDL_1_2_OR_LATER",
		148: "GFDL_1_3_ONLY",
		149: "GFDL_1_3_OR_LATER",
		150: "GIFTWARE",
		151: "GL2PS",
		152: "GLIDE",
		153: "GLULXE",
		154: "GNUPLOT",
		155: "GPL_1_0_ONLY",
		156: "GPL_1_0_OR_LATER",
		157: "GPL_2_0_ONLY",
		158: "GPL_2_0_OR_LATER",
		159: "GPL_3_0_ONLY",
		160: "GPL_3_0_OR_LATER",
		161: "G_SOAP_1_3B",
		162: "HASKELL_REPORT",
		163: "HPND",
		164: "IBM_PIBS",
		165: "ICU",
		166: "IJG",
		167: "IMAGE_MAGICK",
		168: "I_MATIX",
		169: "IMLIB2",
		170: "INFO_ZIP",
		171: "INTEL_ACPI",
		172: "INTEL",
		173: "INTERBASE_1_0",
		174: "IPA",
		175: "IPL_1_0",
		176: "ISC",
		177: "JAS_PER_2_0",
		178: "JSON",
		179: "LAL_1_2",
		180: "LAL_1_3",
		181: "LATEX2E",
		182: "LEPTONICA",
		183: "LGPL_2_0_ONLY",
		184: "LGPL_2_0_OR_LATER",
		185: "LGPL_2_1_ONLY",
		186: "LGPL_2_1_OR_LATER",
		187: "LGPL_3_0_ONLY",
		188: "LGPL_3_0_OR_LATER",
		189: "LGPLLR",
		190: "LIBPNG",
		191: "LIBTIFF",
		192: "LI_LI_Q_P_1_1",
		193: "LI_LI_Q_R_1_1",
		194: "LI_LI_Q_RPLUS_1_1",
		195: "LINUX_OPEN_IB",
		196: "LPL_1_0",
		197: "LPL_1_02",
		198: "LPPL_1_0",
		199: "LPPL_1_1",
		200: "LPPL_1_2",
		201: "LPPL_1_3A",
		202: "LPPL_1_3C",
		203: "MAKE_INDEX",
		204: "MIR_OS",
		205: "MIT_0",
		206: "MIT_ADVERTISING",
		207: "MIT_CMU",
		208: "MIT_ENNA",
		209: "MIT_FEH",
		210: "MIT",
		211: "MITNFA",
		212: "MOTOSOTO",
		213: "MPICH2",
		214: "MPL_1_0",
		215: "MPL_1_1",
		216: "MPL_2_0_NO_COPYLEFT_EXCEPTION",
		217: "MPL_2_0",
		218: "MS_PL",
		219: "MS_RL",
		220: "MTLL",
		221: "MULTICS",
		222: "MUP",
		223: "NASA_1_3",
		224: "NAUMEN",
		225: "NBPL_1_0",
		226: "NCSA",
		227: "NET_SNMP",
		228: "NET_CDF",
		229: "NEWSLETR",
		230: "NGPL",
		231: "NLOD_1_0",
		232: "NLPL",
		233: "NOKIA",
		234: "NOSL",
		235: "NOWEB",
		236: "NPL_1_0",
		237: "NPL_1_1",
		238: "NPOSL_3_0",
		239: "NRL",
		240: "NTP",
		241: "OCCT_PL",
		242: "OCLC_2_0",
		243: "O_DB_L_1_0",
		244: "OFL_1_0",
		245: "OFL_1_1",
		246: "OGTSL",
		247: "OLDAP_1_1",
		248: "OLDAP_1_2",
		249: "OLDAP_1_3",
		250: "OLDAP_1_4",
		251: "OLDAP_2_0_1",
		252: "OLDAP_2_0",
		253: "OLDAP_2_1",
		254: "OLDAP_2_2_1",
		255: "OLDAP_2_2_2",
		256: "OLDAP_2_2",
		257: "OLDAP_2_3",
		258: "OLDAP_2_4",
		259: "OLDAP_2_5",
		260: "OLDAP_2_6",
		261: "OLDAP_2_7",
		262: "OLDAP_2_8",
		263: "OML",
		264: "OPEN_SSL",
		265: "OPL_1_0",
		266: "OSET_PL_2_1",
		267: "OSL_1_0",
		268: "OSL_1_1",
		269: "OSL_2_0",
		270: "OSL_2_1",
		271: "OSL_3_0",
		272: "PDDL_1_0",
		273: "PHP_3_0",
		274: "PHP_3_01",
		275: "PLEXUS",
		276: "POSTGRE_SQL",
		277: "PSFRAG",
		278: "PSUTILS",
		279: "PYTHON_2_0",
		280: "QHULL",
		281: "QPL_1_0",
		282: "RDISC",
		283: "R_HE_COS_1_1",
		284: "RPL_1_1",
		285: "RPL_1_5",
		286: "RPSL_1_0",
		287: "RSA_MD",
		288: "RSCPL",
		289: "RUBY",
		290: "SAX_PD",
		291: "SAXPATH",
		292: "SCEA",
		293: "SENDMAIL",
		294: "SGI_B_1_0",
		295: "SGI_B_1_1",
		296: "SGI_B_2_0",
		297: "SIM_PL_2_0",
		298: "SISSL_1_2",
		299: "SISSL",
		300: "SLEEPYCAT",
		301: "SMLNJ",
		302: "SMPPL",
		303: "SNIA",
		304: "SPENCER_86",
		305: "SPENCER_94",
		306: "SPENCER_99",
		307: "SPL_1_0",
		308: "SUGAR_CRM_1_1_3",
		309: "SWL",
		310: "TCL",
		311: "TCP_WRAPPERS",
		312: "T_MATE",
		313: "TORQUE_1_1",
		314: "TOSL",
		315: "UNICODE_DFS_2015",
		316: "UNICODE_DFS_2016",
		317: "UNICODE_TOU",
		318: "UNLICENSE",
		319: "UPL_1_0",
		320: "VIM",
		321: "VOSTROM",
		322: "VSL_1_0",
		323: "W3C_19980720",
		324: "W3C_20150513",
		325: "W3C",
		326: "WATCOM_1_0",
		327: "WSUIPA",
		328: "WTFPL",
		329: "X11",
		330: "XEROX",
		331: "X_FREE86_1_1",
		332: "XINETD",
		333: "XNET",
		334: "XPP",
		335: "X_SKAT",
		336: "YPL_1_0",
		337: "YPL_1_1",
		338: "ZED",
		339: "ZEND_2_0",
		340: "ZIMBRA_1_3",
		341: "ZIMBRA_1_4",
		342: "ZLIB_ACKNOWLEDGEMENT",
		343: "ZLIB",
		344: "ZPL_1_1",
		345: "ZPL_2_0",
		346: "ZPL_2_1",
	}
	SPDXLicenseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":                0,
		"NOT_OPEN_SOURCE":                      1,
		"BSD_ZERO_CLAUSE_LICENSE":              2,
		"AAL":                                  3,
		"ABSTYLES":                             4,
		"ADOBE_2006":                           5,
		"ADOBE_GLYPH":                          6,
		"ADSL":                                 7,
		"AFL_1_1":                              8,
		"AFL_1_2":                              9,
		"AFL_2_0":                              10,
		"AFL_2_1":                              11,
		"AFL_3_0":                              12,
		"AFMPARSE":                             13,
		"AGPL_1_0_ONLY":                        14,
		"AGPL_1_0_OR_LATER":                    15,
		"AGPL_3_0_ONLY":                        16,
		"AGPL_3_0_OR_LATER":                    17,
		"ALADDIN":                              18,
		"AMDPLPA":                              19,
		"AML":                                  20,
		"AMPAS":                                21,
		"ANTLR_PD":                             22,
		"APACHE_1_0":                           23,
		"APACHE_1_1":                           24,
		"APACHE_2_0":                           25,
		"APAFML":                               26,
		"APL_1_0":                              27,
		"APSL_1_0":                             28,
		"APSL_1_1":                             29,
		"APSL_1_2":                             30,
		"APSL_2_0":                             31,
		"ARTISTIC_1_0_CL8":                     32,
		"ARTISTIC_1_0_PERL":                    33,
		"ARTISTIC_1_0":                         34,
		"ARTISTIC_2_0":                         35,
		"BAHYPH":                               36,
		"BARR":                                 37,
		"BEERWARE":                             38,
		"BIT_TORRENT_1_0":                      39,
		"BIT_TORRENT_1_1":                      40,
		"BORCEUX":                              41,
		"BSD_1_CLAUSE":                         42,
		"BSD_2_CLAUSE_FREE_BSD":                43,
		"BSD_2_CLAUSE_NET_BSD":                 44,
		"BSD_2_CLAUSE_PATENT":                  45,
		"BSD_2_CLAUSE":                         46,
		"BSD_3_CLAUSE_ATTRIBUTION":             47,
		"BSD_3_CLAUSE_CLEAR":                   48,
		"BSD_3_CLAUSE_LBNL":                    49,
		"BSD_3_CLAUSE_NO_NUCLEAR_LICENSE_2014": 50,
		"BSD_3_CLAUSE_NO_NUCLEAR_LICENSE":      51,
		"BSD_3_CLAUSE_NO_NUCLEAR_WARRANTY":     52,
		"BSD_3_CLAUSE":                         53,
		"BSD_4_CLAUSE_UC":                      54,
		"BSD_4_CLAUSE":                         55,
		"BSD_PROTECTION":                       56,
		"BSD_SOURCE_CODE":                      57,
		"BSL_1_0":                              58,
		"BZIP2_1_0_5":                          59,
		"BZIP2_1_0_6":                          60,
		"CALDERA":                              61,
		"CATOSL_1_1":                           62,
		"CC_BY_1_0":                            63,
		"CC_BY_2_0":                            64,
		"CC_BY_2_5":                            65,
		"CC_BY_3_0":                            66,
		"CC_BY_4_0":                            67,
		"CC_BY_NC_1_0":                         68,
		"CC_BY_NC_2_0":                         69,
		"CC_BY_NC_2_5":                         70,
		"CC_BY_NC_3_0":                         71,
		"CC_BY_NC_4_0":                         72,
		"CC_BY_NC_ND_1_0":                      73,
		"CC_BY_NC_ND_2_0":                      74,
		"CC_BY_NC_ND_2_5":                      75,
		"CC_BY_NC_ND_3_0":                      76,
		"CC_BY_NC_ND_4_0":                      77,
		"CC_BY_NC_SA_1_0":                      78,
		"CC_BY_NC_SA_2_0":                      79,
		"CC_BY_NC_SA_2_5":                      80,
		"CC_BY_NC_SA_3_0":                      81,
		"CC_BY_NC_SA_4_0":                      82,
		"CC_BY_ND_1_0":                         83,
		"CC_BY_ND_2_0":                         84,
		"CC_BY_ND_2_5":                         85,
		"CC_BY_ND_3_0":                         86,
		"CC_BY_ND_4_0":                         87,
		"CC_BY_SA_1_0":                         88,
		"CC_BY_SA_2_0":                         89,
		"CC_BY_SA_2_5":                         90,
		"CC_BY_SA_3_0":                         91,
		"CC_BY_SA_4_0":                         92,
		"CC0_1_0":                              93,
		"CDDL_1_0":                             94,
		"CDDL_1_1":                             95,
		"CDLA_PERMISSIVE_1_0":                  96,
		"CDLA_SHARING_1_0":                     97,
		"CECILL_1_0":                           98,
		"CECILL_1_1":                           99,
		"CECILL_2_0":                           100,
		"CECILL_2_1":                           101,
		"CECILL_B":                             102,
		"CECILL_C":                             103,
		"CL_ARTISTIC":                          104,
		"CNRI_JYTHON":                          105,
		"CNRI_PYTHON_GPL_COMPATIBLE":           106,
		"CNRI_PYTHON":                          107,
		"CONDOR_1_1":                           108,
		"CPAL_1_0":                             109,
		"CPL_1_0":                              110,
		"CPOL_1_02":                            111,
		"CROSSWORD":                            112,
		"CRYSTAL_STACKER":                      113,
		"CUA_OPL_1_0":                          114,
		"CUBE":                                 115,
		"CURL":                                 116,
		"D_FSL_1_0":                            117,
		"DIFFMARK":                             118,
		"DOC":                                  119,
		"DOTSEQN":                              120,
		"DSDP":                                 121,
		"DVIPDFM":                              122,
		"ECL_1_0":                              123,
		"ECL_2_0":                              124,
		"EFL_1_0":                              125,
		"EFL_2_0":                              126,
		"E_GENIX":                              127,
		"ENTESSA":                              128,
		"EPL_1_0":                              129,
		"EPL_2_0":                              130,
		"ERL_PL_1_1":                           131,
		"EU_DATAGRID":                          132,
		"EUPL_1_0":                             133,
		"EUPL_1_1":                             134,
		"EUPL_1_2":                             135,
		"EUROSYM":                              136,
		"FAIR":                                 137,
		"FRAMEWORX_1_0":                        138,
		"FREE_IMAGE":                           139,
		"FSFAP":                                140,
		"FSFUL":                                141,
		"FSFULLR":                              142,
		"FTL":                                  143,
		"GFDL_1_1_ONLY":                        144,
		"GFDL_1_1_OR_LATER":                    145,
		"GFDL_1_2_ONLY":                        146,
		"GFDL_1_2_OR_LATER":                    147,
		"GFDL_1_3_ONLY":                        148,
		"GFDL_1_3_OR_LATER":                    149,
		"GIFTWARE":                             150,
		"GL2PS":                                151,
		"GLIDE":                                152,
		"GLULXE":                               153,
		"GNUPLOT":                              154,
		"GPL_1_0_ONLY":                         155,
		"GPL_1_0_OR_LATER":                     156,
		"GPL_2_0_ONLY":                         157,
		"GPL_2_0_OR_LATER":                     158,
		"GPL_3_0_ONLY":                         159,
		"GPL_3_0_OR_LATER":                     160,
		"G_SOAP_1_3B":                          161,
		"HASKELL_REPORT":                       162,
		"HPND":                                 163,
		"IBM_PIBS":                             164,
		"ICU":                                  165,
		"IJG":                                  166,
		"IMAGE_MAGICK":                         167,
		"I_MATIX":                              168,
		"IMLIB2":                               169,
		"INFO_ZIP":                             170,
		"INTEL_ACPI":                           171,
		"INTEL":                                172,
		"INTERBASE_1_0":                        173,
		"IPA":                                  174,
		"IPL_1_0":                              175,
		"ISC":                                  176,
		"JAS_PER_2_0":                          177,
		"JSON":                                 178,
		"LAL_1_2":                              179,
		"LAL_1_3":                              180,
		"LATEX2E":                              181,
		"LEPTONICA":                            182,
		"LGPL_2_0_ONLY":                        183,
		"LGPL_2_0_OR_LATER":                    184,
		"LGPL_2_1_ONLY":                        185,
		"LGPL_2_1_OR_LATER":                    186,
		"LGPL_3_0_ONLY":                        187,
		"LGPL_3_0_OR_LATER":                    188,
		"LGPLLR":                               189,
		"LIBPNG":                               190,
		"LIBTIFF":                              191,
		"LI_LI_Q_P_1_1":                        192,
		"LI_LI_Q_R_1_1":                        193,
		"LI_LI_Q_RPLUS_1_1":                    194,
		"LINUX_OPEN_IB":                        195,
		"LPL_1_0":                              196,
		"LPL_1_02":                             197,
		"LPPL_1_0":                             198,
		"LPPL_1_1":                             199,
		"LPPL_1_2":                             200,
		"LPPL_1_3A":                            201,
		"LPPL_1_3C":                            202,
		"MAKE_INDEX":                           203,
		"MIR_OS":                               204,
		"MIT_0":                                205,
		"MIT_ADVERTISING":                      206,
		"MIT_CMU":                              207,
		"MIT_ENNA":                             208,
		"MIT_FEH":                              209,
		"MIT":                                  210,
		"MITNFA":                               211,
		"MOTOSOTO":                             212,
		"MPICH2":                               213,
		"MPL_1_0":                              214,
		"MPL_1_1":                              215,
		"MPL_2_0_NO_COPYLEFT_EXCEPTION":        216,
		"MPL_2_0":                              217,
		"MS_PL":                                218,
		"MS_RL":                                219,
		"MTLL":                                 220,
		"MULTICS":                              221,
		"MUP":                                  222,
		"NASA_1_3":                             223,
		"NAUMEN":                               224,
		"NBPL_1_0":                             225,
		"NCSA":                                 226,
		"NET_SNMP":                             227,
		"NET_CDF":                              228,
		"NEWSLETR":                             229,
		"NGPL":                                 230,
		"NLOD_1_0":                             231,
		"NLPL":                                 232,
		"NOKIA":                                233,
		"NOSL":                                 234,
		"NOWEB":                                235,
		"NPL_1_0":                              236,
		"NPL_1_1":                              237,
		"NPOSL_3_0":                            238,
		"NRL":                                  239,
		"NTP":                                  240,
		"OCCT_PL":                              241,
		"OCLC_2_0":                             242,
		"O_DB_L_1_0":                           243,
		"OFL_1_0":                              244,
		"OFL_1_1":                              245,
		"OGTSL":                                246,
		"OLDAP_1_1":                            247,
		"OLDAP_1_2":                            248,
		"OLDAP_1_3":                            249,
		"OLDAP_1_4":                            250,
		"OLDAP_2_0_1":                          251,
		"OLDAP_2_0":                            252,
		"OLDAP_2_1":                            253,
		"OLDAP_2_2_1":                          254,
		"OLDAP_2_2_2":                          255,
		"OLDAP_2_2":                            256,
		"OLDAP_2_3":                            257,
		"OLDAP_2_4":                            258,
		"OLDAP_2_5":                            259,
		"OLDAP_2_6":                            260,
		"OLDAP_2_7":                            261,
		"OLDAP_2_8":                            262,
		"OML":                                  263,
		"OPEN_SSL":                             264,
		"OPL_1_0":                              265,
		"OSET_PL_2_1":                          266,
		"OSL_1_0":                              267,
		"OSL_1_1":                              268,
		"OSL_2_0":                              269,
		"OSL_2_1":                              270,
		"OSL_3_0":                              271,
		"PDDL_1_0":                             272,
		"PHP_3_0":                              273,
		"PHP_3_01":                             274,
		"PLEXUS":                               275,
		"POSTGRE_SQL":                          276,
		"PSFRAG":                               277,
		"PSUTILS":                              278,
		"PYTHON_2_0":                           279,
		"QHULL":                                280,
		"QPL_1_0":                              281,
		"RDISC":                                282,
		"R_HE_COS_1_1":                         283,
		"RPL_1_1":                              284,
		"RPL_1_5":                              285,
		"RPSL_1_0":                             286,
		"RSA_MD":                               287,
		"RSCPL":                                288,
		"RUBY":                                 289,
		"SAX_PD":                               290,
		"SAXPATH":                              291,
		"SCEA":                                 292,
		"SENDMAIL":                             293,
		"SGI_B_1_0":                            294,
		"SGI_B_1_1":                            295,
		"SGI_B_2_0":                            296,
		"SIM_PL_2_0":                           297,
		"SISSL_1_2":                            298,
		"SISSL":                                299,
		"SLEEPYCAT":                            300,
		"SMLNJ":                                301,
		"SMPPL":                                302,
		"SNIA":                                 303,
		"SPENCER_86":                           304,
		"SPENCER_94":                           305,
		"SPENCER_99":                           306,
		"SPL_1_0":                              307,
		"SUGAR_CRM_1_1_3":                      308,
		"SWL":                                  309,
		"TCL":                                  310,
		"TCP_WRAPPERS":                         311,
		"T_MATE":                               312,
		"TORQUE_1_1":                           313,
		"TOSL":                                 314,
		"UNICODE_DFS_2015":                     315,
		"UNICODE_DFS_2016":                     316,
		"UNICODE_TOU":                          317,
		"UNLICENSE":                            318,
		"UPL_1_0":                              319,
		"VIM":                                  320,
		"VOSTROM":                              321,
		"VSL_1_0":                              322,
		"W3C_19980720":                         323,
		"W3C_20150513":                         324,
		"W3C":                                  325,
		"WATCOM_1_0":                           326,
		"WSUIPA":                               327,
		"WTFPL":                                328,
		"X11":                                  329,
		"XEROX":                                330,
		"X_FREE86_1_1":                         331,
		"XINETD":                               332,
		"XNET":                                 333,
		"XPP":                                  334,
		"X_SKAT":                               335,
		"YPL_1_0":                              336,
		"YPL_1_1":                              337,
		"ZED":                                  338,
		"ZEND_2_0":                             339,
		"ZIMBRA_1_3":                           340,
		"ZIMBRA_1_4":                           341,
		"ZLIB_ACKNOWLEDGEMENT":                 342,
		"ZLIB":                                 343,
		"ZPL_1_1":                              344,
		"ZPL_2_0":                              345,
		"ZPL_2_1":                              346,
	}
)

func (x SPDXLicenseCode_Value) Enum() *SPDXLicenseCode_Value {
	p := new(SPDXLicenseCode_Value)
	*p = x
	return p
}

func (x SPDXLicenseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SPDXLicenseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[186].Descriptor()
}

func (SPDXLicenseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[186]
}

func (x SPDXLicenseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SPDXLicenseCode_Value.Descriptor instead.
func (SPDXLicenseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{186, 0}
}

type SearchComparatorCode_Value int32

const (
	SearchComparatorCode_INVALID_UNINITIALIZED SearchComparatorCode_Value = 0
	SearchComparatorCode_EQ                    SearchComparatorCode_Value = 1
	SearchComparatorCode_NE                    SearchComparatorCode_Value = 2
	SearchComparatorCode_GT                    SearchComparatorCode_Value = 3
	SearchComparatorCode_LT                    SearchComparatorCode_Value = 4
	SearchComparatorCode_GE                    SearchComparatorCode_Value = 5
	SearchComparatorCode_LE                    SearchComparatorCode_Value = 6
	SearchComparatorCode_SA                    SearchComparatorCode_Value = 7
	SearchComparatorCode_EB                    SearchComparatorCode_Value = 8
	SearchComparatorCode_AP                    SearchComparatorCode_Value = 9
)

// Enum value maps for SearchComparatorCode_Value.
var (
	SearchComparatorCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "EQ",
		2: "NE",
		3: "GT",
		4: "LT",
		5: "GE",
		6: "LE",
		7: "SA",
		8: "EB",
		9: "AP",
	}
	SearchComparatorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"EQ":                    1,
		"NE":                    2,
		"GT":                    3,
		"LT":                    4,
		"GE":                    5,
		"LE":                    6,
		"SA":                    7,
		"EB":                    8,
		"AP":                    9,
	}
)

func (x SearchComparatorCode_Value) Enum() *SearchComparatorCode_Value {
	p := new(SearchComparatorCode_Value)
	*p = x
	return p
}

func (x SearchComparatorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchComparatorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[187].Descriptor()
}

func (SearchComparatorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[187]
}

func (x SearchComparatorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchComparatorCode_Value.Descriptor instead.
func (SearchComparatorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{187, 0}
}

type SearchEntryModeCode_Value int32

const (
	SearchEntryModeCode_INVALID_UNINITIALIZED SearchEntryModeCode_Value = 0
	SearchEntryModeCode_MATCH                 SearchEntryModeCode_Value = 1
	SearchEntryModeCode_INCLUDE               SearchEntryModeCode_Value = 2
	SearchEntryModeCode_OUTCOME               SearchEntryModeCode_Value = 3
)

// Enum value maps for SearchEntryModeCode_Value.
var (
	SearchEntryModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MATCH",
		2: "INCLUDE",
		3: "OUTCOME",
	}
	SearchEntryModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MATCH":                 1,
		"INCLUDE":               2,
		"OUTCOME":               3,
	}
)

func (x SearchEntryModeCode_Value) Enum() *SearchEntryModeCode_Value {
	p := new(SearchEntryModeCode_Value)
	*p = x
	return p
}

func (x SearchEntryModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchEntryModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[188].Descriptor()
}

func (SearchEntryModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[188]
}

func (x SearchEntryModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchEntryModeCode_Value.Descriptor instead.
func (SearchEntryModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{188, 0}
}

type SearchModifierCode_Value int32

const (
	SearchModifierCode_INVALID_UNINITIALIZED SearchModifierCode_Value = 0
	SearchModifierCode_MISSING               SearchModifierCode_Value = 1
	SearchModifierCode_EXACT                 SearchModifierCode_Value = 2
	SearchModifierCode_CONTAINS              SearchModifierCode_Value = 3
	SearchModifierCode_NOT                   SearchModifierCode_Value = 4
	SearchModifierCode_TEXT                  SearchModifierCode_Value = 5
	SearchModifierCode_IN                    SearchModifierCode_Value = 6
	SearchModifierCode_NOT_IN                SearchModifierCode_Value = 7
	SearchModifierCode_BELOW                 SearchModifierCode_Value = 8
	SearchModifierCode_ABOVE                 SearchModifierCode_Value = 9
	SearchModifierCode_TYPE                  SearchModifierCode_Value = 10
	SearchModifierCode_IDENTIFIER            SearchModifierCode_Value = 11
	SearchModifierCode_OF_TYPE               SearchModifierCode_Value = 12
)

// Enum value maps for SearchModifierCode_Value.
var (
	SearchModifierCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "MISSING",
		2:  "EXACT",
		3:  "CONTAINS",
		4:  "NOT",
		5:  "TEXT",
		6:  "IN",
		7:  "NOT_IN",
		8:  "BELOW",
		9:  "ABOVE",
		10: "TYPE",
		11: "IDENTIFIER",
		12: "OF_TYPE",
	}
	SearchModifierCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MISSING":               1,
		"EXACT":                 2,
		"CONTAINS":              3,
		"NOT":                   4,
		"TEXT":                  5,
		"IN":                    6,
		"NOT_IN":                7,
		"BELOW":                 8,
		"ABOVE":                 9,
		"TYPE":                  10,
		"IDENTIFIER":            11,
		"OF_TYPE":               12,
	}
)

func (x SearchModifierCode_Value) Enum() *SearchModifierCode_Value {
	p := new(SearchModifierCode_Value)
	*p = x
	return p
}

func (x SearchModifierCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchModifierCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[189].Descriptor()
}

func (SearchModifierCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[189]
}

func (x SearchModifierCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchModifierCode_Value.Descriptor instead.
func (SearchModifierCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{189, 0}
}

type SearchParamTypeCode_Value int32

const (
	SearchParamTypeCode_INVALID_UNINITIALIZED SearchParamTypeCode_Value = 0
	SearchParamTypeCode_NUMBER                SearchParamTypeCode_Value = 1
	SearchParamTypeCode_DATE                  SearchParamTypeCode_Value = 2
	SearchParamTypeCode_STRING                SearchParamTypeCode_Value = 3
	SearchParamTypeCode_TOKEN                 SearchParamTypeCode_Value = 4
	SearchParamTypeCode_REFERENCE             SearchParamTypeCode_Value = 5
	SearchParamTypeCode_COMPOSITE             SearchParamTypeCode_Value = 6
	SearchParamTypeCode_QUANTITY              SearchParamTypeCode_Value = 7
	SearchParamTypeCode_URI                   SearchParamTypeCode_Value = 8
	SearchParamTypeCode_SPECIAL               SearchParamTypeCode_Value = 9
)

// Enum value maps for SearchParamTypeCode_Value.
var (
	SearchParamTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NUMBER",
		2: "DATE",
		3: "STRING",
		4: "TOKEN",
		5: "REFERENCE",
		6: "COMPOSITE",
		7: "QUANTITY",
		8: "URI",
		9: "SPECIAL",
	}
	SearchParamTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NUMBER":                1,
		"DATE":                  2,
		"STRING":                3,
		"TOKEN":                 4,
		"REFERENCE":             5,
		"COMPOSITE":             6,
		"QUANTITY":              7,
		"URI":                   8,
		"SPECIAL":               9,
	}
)

func (x SearchParamTypeCode_Value) Enum() *SearchParamTypeCode_Value {
	p := new(SearchParamTypeCode_Value)
	*p = x
	return p
}

func (x SearchParamTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchParamTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[190].Descriptor()
}

func (SearchParamTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[190]
}

func (x SearchParamTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchParamTypeCode_Value.Descriptor instead.
func (SearchParamTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{190, 0}
}

type SequenceTypeCode_Value int32

const (
	SequenceTypeCode_INVALID_UNINITIALIZED SequenceTypeCode_Value = 0
	SequenceTypeCode_AA                    SequenceTypeCode_Value = 1
	SequenceTypeCode_DNA                   SequenceTypeCode_Value = 2
	SequenceTypeCode_RNA                   SequenceTypeCode_Value = 3
)

// Enum value maps for SequenceTypeCode_Value.
var (
	SequenceTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AA",
		2: "DNA",
		3: "RNA",
	}
	SequenceTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AA":                    1,
		"DNA":                   2,
		"RNA":                   3,
	}
)

func (x SequenceTypeCode_Value) Enum() *SequenceTypeCode_Value {
	p := new(SequenceTypeCode_Value)
	*p = x
	return p
}

func (x SequenceTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SequenceTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[191].Descriptor()
}

func (SequenceTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[191]
}

func (x SequenceTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SequenceTypeCode_Value.Descriptor instead.
func (SequenceTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{191, 0}
}

type SlicingRulesCode_Value int32

const (
	SlicingRulesCode_INVALID_UNINITIALIZED SlicingRulesCode_Value = 0
	SlicingRulesCode_CLOSED                SlicingRulesCode_Value = 1
	SlicingRulesCode_OPEN                  SlicingRulesCode_Value = 2
	SlicingRulesCode_OPEN_AT_END           SlicingRulesCode_Value = 3
)

// Enum value maps for SlicingRulesCode_Value.
var (
	SlicingRulesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLOSED",
		2: "OPEN",
		3: "OPEN_AT_END",
	}
	SlicingRulesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLOSED":                1,
		"OPEN":                  2,
		"OPEN_AT_END":           3,
	}
)

func (x SlicingRulesCode_Value) Enum() *SlicingRulesCode_Value {
	p := new(SlicingRulesCode_Value)
	*p = x
	return p
}

func (x SlicingRulesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlicingRulesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[192].Descriptor()
}

func (SlicingRulesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[192]
}

func (x SlicingRulesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlicingRulesCode_Value.Descriptor instead.
func (SlicingRulesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{192, 0}
}

type SlotStatusCode_Value int32

const (
	SlotStatusCode_INVALID_UNINITIALIZED SlotStatusCode_Value = 0
	SlotStatusCode_BUSY                  SlotStatusCode_Value = 1
	SlotStatusCode_FREE                  SlotStatusCode_Value = 2
	SlotStatusCode_BUSY_UNAVAILABLE      SlotStatusCode_Value = 3
	SlotStatusCode_BUSY_TENTATIVE        SlotStatusCode_Value = 4
	SlotStatusCode_ENTERED_IN_ERROR      SlotStatusCode_Value = 5
)

// Enum value maps for SlotStatusCode_Value.
var (
	SlotStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BUSY",
		2: "FREE",
		3: "BUSY_UNAVAILABLE",
		4: "BUSY_TENTATIVE",
		5: "ENTERED_IN_ERROR",
	}
	SlotStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BUSY":                  1,
		"FREE":                  2,
		"BUSY_UNAVAILABLE":      3,
		"BUSY_TENTATIVE":        4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x SlotStatusCode_Value) Enum() *SlotStatusCode_Value {
	p := new(SlotStatusCode_Value)
	*p = x
	return p
}

func (x SlotStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SlotStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[193].Descriptor()
}

func (SlotStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[193]
}

func (x SlotStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SlotStatusCode_Value.Descriptor instead.
func (SlotStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{193, 0}
}

type SmartCapabilitiesCode_Value int32

const (
	SmartCapabilitiesCode_INVALID_UNINITIALIZED         SmartCapabilitiesCode_Value = 0
	SmartCapabilitiesCode_LAUNCH_EHR                    SmartCapabilitiesCode_Value = 1
	SmartCapabilitiesCode_LAUNCH_STANDALONE             SmartCapabilitiesCode_Value = 2
	SmartCapabilitiesCode_CLIENT_PUBLIC                 SmartCapabilitiesCode_Value = 3
	SmartCapabilitiesCode_CLIENT_CONFIDENTIAL_SYMMETRIC SmartCapabilitiesCode_Value = 4
	SmartCapabilitiesCode_SSO_OPENID_CONNECT            SmartCapabilitiesCode_Value = 5
	SmartCapabilitiesCode_CONTEXT_PASSTHROUGH_BANNER    SmartCapabilitiesCode_Value = 6
	SmartCapabilitiesCode_CONTEXT_PASSTHROUGH_STYLE     SmartCapabilitiesCode_Value = 7
	SmartCapabilitiesCode_CONTEXT_EHR_PATIENT           SmartCapabilitiesCode_Value = 8
	SmartCapabilitiesCode_CONTEXT_EHR_ENCOUNTER         SmartCapabilitiesCode_Value = 9
	SmartCapabilitiesCode_CONTEXT_STANDALONE_PATIENT    SmartCapabilitiesCode_Value = 10
	SmartCapabilitiesCode_CONTEXT_STANDALONE_ENCOUNTER  SmartCapabilitiesCode_Value = 11
	SmartCapabilitiesCode_PERMISSION_OFFLINE            SmartCapabilitiesCode_Value = 12
	SmartCapabilitiesCode_PERMISSION_PATIENT            SmartCapabilitiesCode_Value = 13
	SmartCapabilitiesCode_PERMISSION_USER               SmartCapabilitiesCode_Value = 14
)

// Enum value maps for SmartCapabilitiesCode_Value.
var (
	SmartCapabilitiesCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "LAUNCH_EHR",
		2:  "LAUNCH_STANDALONE",
		3:  "CLIENT_PUBLIC",
		4:  "CLIENT_CONFIDENTIAL_SYMMETRIC",
		5:  "SSO_OPENID_CONNECT",
		6:  "CONTEXT_PASSTHROUGH_BANNER",
		7:  "CONTEXT_PASSTHROUGH_STYLE",
		8:  "CONTEXT_EHR_PATIENT",
		9:  "CONTEXT_EHR_ENCOUNTER",
		10: "CONTEXT_STANDALONE_PATIENT",
		11: "CONTEXT_STANDALONE_ENCOUNTER",
		12: "PERMISSION_OFFLINE",
		13: "PERMISSION_PATIENT",
		14: "PERMISSION_USER",
	}
	SmartCapabilitiesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":         0,
		"LAUNCH_EHR":                    1,
		"LAUNCH_STANDALONE":             2,
		"CLIENT_PUBLIC":                 3,
		"CLIENT_CONFIDENTIAL_SYMMETRIC": 4,
		"SSO_OPENID_CONNECT":            5,
		"CONTEXT_PASSTHROUGH_BANNER":    6,
		"CONTEXT_PASSTHROUGH_STYLE":     7,
		"CONTEXT_EHR_PATIENT":           8,
		"CONTEXT_EHR_ENCOUNTER":         9,
		"CONTEXT_STANDALONE_PATIENT":    10,
		"CONTEXT_STANDALONE_ENCOUNTER":  11,
		"PERMISSION_OFFLINE":            12,
		"PERMISSION_PATIENT":            13,
		"PERMISSION_USER":               14,
	}
)

func (x SmartCapabilitiesCode_Value) Enum() *SmartCapabilitiesCode_Value {
	p := new(SmartCapabilitiesCode_Value)
	*p = x
	return p
}

func (x SmartCapabilitiesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SmartCapabilitiesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[194].Descriptor()
}

func (SmartCapabilitiesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[194]
}

func (x SmartCapabilitiesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SmartCapabilitiesCode_Value.Descriptor instead.
func (SmartCapabilitiesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{194, 0}
}

type SortDirectionCode_Value int32

const (
	SortDirectionCode_INVALID_UNINITIALIZED SortDirectionCode_Value = 0
	SortDirectionCode_ASCENDING             SortDirectionCode_Value = 1
	SortDirectionCode_DESCENDING            SortDirectionCode_Value = 2
)

// Enum value maps for SortDirectionCode_Value.
var (
	SortDirectionCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ASCENDING",
		2: "DESCENDING",
	}
	SortDirectionCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ASCENDING":             1,
		"DESCENDING":            2,
	}
)

func (x SortDirectionCode_Value) Enum() *SortDirectionCode_Value {
	p := new(SortDirectionCode_Value)
	*p = x
	return p
}

func (x SortDirectionCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SortDirectionCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[195].Descriptor()
}

func (SortDirectionCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[195]
}

func (x SortDirectionCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SortDirectionCode_Value.Descriptor instead.
func (SortDirectionCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{195, 0}
}

type SpecimenContainedPreferenceCode_Value int32

const (
	SpecimenContainedPreferenceCode_INVALID_UNINITIALIZED SpecimenContainedPreferenceCode_Value = 0
	SpecimenContainedPreferenceCode_PREFERRED             SpecimenContainedPreferenceCode_Value = 1
	SpecimenContainedPreferenceCode_ALTERNATE             SpecimenContainedPreferenceCode_Value = 2
)

// Enum value maps for SpecimenContainedPreferenceCode_Value.
var (
	SpecimenContainedPreferenceCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PREFERRED",
		2: "ALTERNATE",
	}
	SpecimenContainedPreferenceCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PREFERRED":             1,
		"ALTERNATE":             2,
	}
)

func (x SpecimenContainedPreferenceCode_Value) Enum() *SpecimenContainedPreferenceCode_Value {
	p := new(SpecimenContainedPreferenceCode_Value)
	*p = x
	return p
}

func (x SpecimenContainedPreferenceCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecimenContainedPreferenceCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[196].Descriptor()
}

func (SpecimenContainedPreferenceCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[196]
}

func (x SpecimenContainedPreferenceCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecimenContainedPreferenceCode_Value.Descriptor instead.
func (SpecimenContainedPreferenceCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{196, 0}
}

type SpecimenStatusCode_Value int32

const (
	SpecimenStatusCode_INVALID_UNINITIALIZED SpecimenStatusCode_Value = 0
	SpecimenStatusCode_AVAILABLE             SpecimenStatusCode_Value = 1
	SpecimenStatusCode_UNAVAILABLE           SpecimenStatusCode_Value = 2
	SpecimenStatusCode_UNSATISFACTORY        SpecimenStatusCode_Value = 3
	SpecimenStatusCode_ENTERED_IN_ERROR      SpecimenStatusCode_Value = 4
)

// Enum value maps for SpecimenStatusCode_Value.
var (
	SpecimenStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "AVAILABLE",
		2: "UNAVAILABLE",
		3: "UNSATISFACTORY",
		4: "ENTERED_IN_ERROR",
	}
	SpecimenStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AVAILABLE":             1,
		"UNAVAILABLE":           2,
		"UNSATISFACTORY":        3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x SpecimenStatusCode_Value) Enum() *SpecimenStatusCode_Value {
	p := new(SpecimenStatusCode_Value)
	*p = x
	return p
}

func (x SpecimenStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecimenStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[197].Descriptor()
}

func (SpecimenStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[197]
}

func (x SpecimenStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecimenStatusCode_Value.Descriptor instead.
func (SpecimenStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{197, 0}
}

type StandardsStatusCode_Value int32

const (
	StandardsStatusCode_INVALID_UNINITIALIZED StandardsStatusCode_Value = 0
	StandardsStatusCode_DRAFT                 StandardsStatusCode_Value = 1
	StandardsStatusCode_NORMATIVE             StandardsStatusCode_Value = 2
	StandardsStatusCode_TRIAL_USE             StandardsStatusCode_Value = 3
	StandardsStatusCode_INFORMATIVE           StandardsStatusCode_Value = 4
	StandardsStatusCode_DEPRECATED            StandardsStatusCode_Value = 5
	StandardsStatusCode_EXTERNAL              StandardsStatusCode_Value = 6
)

// Enum value maps for StandardsStatusCode_Value.
var (
	StandardsStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "NORMATIVE",
		3: "TRIAL_USE",
		4: "INFORMATIVE",
		5: "DEPRECATED",
		6: "EXTERNAL",
	}
	StandardsStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"NORMATIVE":             2,
		"TRIAL_USE":             3,
		"INFORMATIVE":           4,
		"DEPRECATED":            5,
		"EXTERNAL":              6,
	}
)

func (x StandardsStatusCode_Value) Enum() *StandardsStatusCode_Value {
	p := new(StandardsStatusCode_Value)
	*p = x
	return p
}

func (x StandardsStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandardsStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[198].Descriptor()
}

func (StandardsStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[198]
}

func (x StandardsStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StandardsStatusCode_Value.Descriptor instead.
func (StandardsStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{198, 0}
}

type StatusCode_Value int32

const (
	StatusCode_INVALID_UNINITIALIZED StatusCode_Value = 0
	StatusCode_ATTESTED              StatusCode_Value = 1
	StatusCode_VALIDATED             StatusCode_Value = 2
	StatusCode_IN_PROCESS            StatusCode_Value = 3
	StatusCode_REQ_REVALID           StatusCode_Value = 4
	StatusCode_VAL_FAIL              StatusCode_Value = 5
	StatusCode_REVAL_FAIL            StatusCode_Value = 6
)

// Enum value maps for StatusCode_Value.
var (
	StatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "ATTESTED",
		2: "VALIDATED",
		3: "IN_PROCESS",
		4: "REQ_REVALID",
		5: "VAL_FAIL",
		6: "REVAL_FAIL",
	}
	StatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ATTESTED":              1,
		"VALIDATED":             2,
		"IN_PROCESS":            3,
		"REQ_REVALID":           4,
		"VAL_FAIL":              5,
		"REVAL_FAIL":            6,
	}
)

func (x StatusCode_Value) Enum() *StatusCode_Value {
	p := new(StatusCode_Value)
	*p = x
	return p
}

func (x StatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[199].Descriptor()
}

func (StatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[199]
}

func (x StatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode_Value.Descriptor instead.
func (StatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{199, 0}
}

type StrandTypeCode_Value int32

const (
	StrandTypeCode_INVALID_UNINITIALIZED StrandTypeCode_Value = 0
	StrandTypeCode_WATSON                StrandTypeCode_Value = 1
	StrandTypeCode_CRICK                 StrandTypeCode_Value = 2
)

// Enum value maps for StrandTypeCode_Value.
var (
	StrandTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "WATSON",
		2: "CRICK",
	}
	StrandTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"WATSON":                1,
		"CRICK":                 2,
	}
)

func (x StrandTypeCode_Value) Enum() *StrandTypeCode_Value {
	p := new(StrandTypeCode_Value)
	*p = x
	return p
}

func (x StrandTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StrandTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[200].Descriptor()
}

func (StrandTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[200]
}

func (x StrandTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StrandTypeCode_Value.Descriptor instead.
func (StrandTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{200, 0}
}

type StructureDefinitionKindCode_Value int32

const (
	StructureDefinitionKindCode_INVALID_UNINITIALIZED StructureDefinitionKindCode_Value = 0
	StructureDefinitionKindCode_PRIMITIVE_TYPE        StructureDefinitionKindCode_Value = 1
	StructureDefinitionKindCode_COMPLEX_TYPE          StructureDefinitionKindCode_Value = 2
	StructureDefinitionKindCode_RESOURCE              StructureDefinitionKindCode_Value = 3
	StructureDefinitionKindCode_LOGICAL               StructureDefinitionKindCode_Value = 4
)

// Enum value maps for StructureDefinitionKindCode_Value.
var (
	StructureDefinitionKindCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PRIMITIVE_TYPE",
		2: "COMPLEX_TYPE",
		3: "RESOURCE",
		4: "LOGICAL",
	}
	StructureDefinitionKindCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PRIMITIVE_TYPE":        1,
		"COMPLEX_TYPE":          2,
		"RESOURCE":              3,
		"LOGICAL":               4,
	}
)

func (x StructureDefinitionKindCode_Value) Enum() *StructureDefinitionKindCode_Value {
	p := new(StructureDefinitionKindCode_Value)
	*p = x
	return p
}

func (x StructureDefinitionKindCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureDefinitionKindCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[201].Descriptor()
}

func (StructureDefinitionKindCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[201]
}

func (x StructureDefinitionKindCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureDefinitionKindCode_Value.Descriptor instead.
func (StructureDefinitionKindCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{201, 0}
}

type StructureMapContextTypeCode_Value int32

const (
	StructureMapContextTypeCode_INVALID_UNINITIALIZED StructureMapContextTypeCode_Value = 0
	StructureMapContextTypeCode_TYPE                  StructureMapContextTypeCode_Value = 1
	StructureMapContextTypeCode_VARIABLE              StructureMapContextTypeCode_Value = 2
)

// Enum value maps for StructureMapContextTypeCode_Value.
var (
	StructureMapContextTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TYPE",
		2: "VARIABLE",
	}
	StructureMapContextTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TYPE":                  1,
		"VARIABLE":              2,
	}
)

func (x StructureMapContextTypeCode_Value) Enum() *StructureMapContextTypeCode_Value {
	p := new(StructureMapContextTypeCode_Value)
	*p = x
	return p
}

func (x StructureMapContextTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapContextTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[202].Descriptor()
}

func (StructureMapContextTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[202]
}

func (x StructureMapContextTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapContextTypeCode_Value.Descriptor instead.
func (StructureMapContextTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{202, 0}
}

type StructureMapGroupTypeModeCode_Value int32

const (
	StructureMapGroupTypeModeCode_INVALID_UNINITIALIZED StructureMapGroupTypeModeCode_Value = 0
	StructureMapGroupTypeModeCode_NONE                  StructureMapGroupTypeModeCode_Value = 1
	StructureMapGroupTypeModeCode_TYPES                 StructureMapGroupTypeModeCode_Value = 2
	StructureMapGroupTypeModeCode_TYPE_AND_TYPES        StructureMapGroupTypeModeCode_Value = 3
)

// Enum value maps for StructureMapGroupTypeModeCode_Value.
var (
	StructureMapGroupTypeModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NONE",
		2: "TYPES",
		3: "TYPE_AND_TYPES",
	}
	StructureMapGroupTypeModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NONE":                  1,
		"TYPES":                 2,
		"TYPE_AND_TYPES":        3,
	}
)

func (x StructureMapGroupTypeModeCode_Value) Enum() *StructureMapGroupTypeModeCode_Value {
	p := new(StructureMapGroupTypeModeCode_Value)
	*p = x
	return p
}

func (x StructureMapGroupTypeModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapGroupTypeModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[203].Descriptor()
}

func (StructureMapGroupTypeModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[203]
}

func (x StructureMapGroupTypeModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapGroupTypeModeCode_Value.Descriptor instead.
func (StructureMapGroupTypeModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{203, 0}
}

type StructureMapInputModeCode_Value int32

const (
	StructureMapInputModeCode_INVALID_UNINITIALIZED StructureMapInputModeCode_Value = 0
	StructureMapInputModeCode_SOURCE                StructureMapInputModeCode_Value = 1
	StructureMapInputModeCode_TARGET                StructureMapInputModeCode_Value = 2
)

// Enum value maps for StructureMapInputModeCode_Value.
var (
	StructureMapInputModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOURCE",
		2: "TARGET",
	}
	StructureMapInputModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOURCE":                1,
		"TARGET":                2,
	}
)

func (x StructureMapInputModeCode_Value) Enum() *StructureMapInputModeCode_Value {
	p := new(StructureMapInputModeCode_Value)
	*p = x
	return p
}

func (x StructureMapInputModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapInputModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[204].Descriptor()
}

func (StructureMapInputModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[204]
}

func (x StructureMapInputModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapInputModeCode_Value.Descriptor instead.
func (StructureMapInputModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{204, 0}
}

type StructureMapModelModeCode_Value int32

const (
	StructureMapModelModeCode_INVALID_UNINITIALIZED StructureMapModelModeCode_Value = 0
	StructureMapModelModeCode_SOURCE                StructureMapModelModeCode_Value = 1
	StructureMapModelModeCode_QUERIED               StructureMapModelModeCode_Value = 2
	StructureMapModelModeCode_TARGET                StructureMapModelModeCode_Value = 3
	StructureMapModelModeCode_PRODUCED              StructureMapModelModeCode_Value = 4
)

// Enum value maps for StructureMapModelModeCode_Value.
var (
	StructureMapModelModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SOURCE",
		2: "QUERIED",
		3: "TARGET",
		4: "PRODUCED",
	}
	StructureMapModelModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SOURCE":                1,
		"QUERIED":               2,
		"TARGET":                3,
		"PRODUCED":              4,
	}
)

func (x StructureMapModelModeCode_Value) Enum() *StructureMapModelModeCode_Value {
	p := new(StructureMapModelModeCode_Value)
	*p = x
	return p
}

func (x StructureMapModelModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapModelModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[205].Descriptor()
}

func (StructureMapModelModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[205]
}

func (x StructureMapModelModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapModelModeCode_Value.Descriptor instead.
func (StructureMapModelModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{205, 0}
}

type StructureMapSourceListModeCode_Value int32

const (
	StructureMapSourceListModeCode_INVALID_UNINITIALIZED StructureMapSourceListModeCode_Value = 0
	StructureMapSourceListModeCode_FIRST                 StructureMapSourceListModeCode_Value = 1
	StructureMapSourceListModeCode_NOT_FIRST             StructureMapSourceListModeCode_Value = 2
	StructureMapSourceListModeCode_LAST                  StructureMapSourceListModeCode_Value = 3
	StructureMapSourceListModeCode_NOT_LAST              StructureMapSourceListModeCode_Value = 4
	StructureMapSourceListModeCode_ONLY_ONE              StructureMapSourceListModeCode_Value = 5
)

// Enum value maps for StructureMapSourceListModeCode_Value.
var (
	StructureMapSourceListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FIRST",
		2: "NOT_FIRST",
		3: "LAST",
		4: "NOT_LAST",
		5: "ONLY_ONE",
	}
	StructureMapSourceListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FIRST":                 1,
		"NOT_FIRST":             2,
		"LAST":                  3,
		"NOT_LAST":              4,
		"ONLY_ONE":              5,
	}
)

func (x StructureMapSourceListModeCode_Value) Enum() *StructureMapSourceListModeCode_Value {
	p := new(StructureMapSourceListModeCode_Value)
	*p = x
	return p
}

func (x StructureMapSourceListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapSourceListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[206].Descriptor()
}

func (StructureMapSourceListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[206]
}

func (x StructureMapSourceListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapSourceListModeCode_Value.Descriptor instead.
func (StructureMapSourceListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{206, 0}
}

type StructureMapTargetListModeCode_Value int32

const (
	StructureMapTargetListModeCode_INVALID_UNINITIALIZED StructureMapTargetListModeCode_Value = 0
	StructureMapTargetListModeCode_FIRST                 StructureMapTargetListModeCode_Value = 1
	StructureMapTargetListModeCode_SHARE                 StructureMapTargetListModeCode_Value = 2
	StructureMapTargetListModeCode_LAST                  StructureMapTargetListModeCode_Value = 3
	StructureMapTargetListModeCode_COLLATE               StructureMapTargetListModeCode_Value = 4
)

// Enum value maps for StructureMapTargetListModeCode_Value.
var (
	StructureMapTargetListModeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "FIRST",
		2: "SHARE",
		3: "LAST",
		4: "COLLATE",
	}
	StructureMapTargetListModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"FIRST":                 1,
		"SHARE":                 2,
		"LAST":                  3,
		"COLLATE":               4,
	}
)

func (x StructureMapTargetListModeCode_Value) Enum() *StructureMapTargetListModeCode_Value {
	p := new(StructureMapTargetListModeCode_Value)
	*p = x
	return p
}

func (x StructureMapTargetListModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapTargetListModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[207].Descriptor()
}

func (StructureMapTargetListModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[207]
}

func (x StructureMapTargetListModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapTargetListModeCode_Value.Descriptor instead.
func (StructureMapTargetListModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{207, 0}
}

type StructureMapTransformCode_Value int32

const (
	StructureMapTransformCode_INVALID_UNINITIALIZED StructureMapTransformCode_Value = 0
	StructureMapTransformCode_CREATE                StructureMapTransformCode_Value = 1
	StructureMapTransformCode_COPY                  StructureMapTransformCode_Value = 2
	StructureMapTransformCode_TRUNCATE              StructureMapTransformCode_Value = 3
	StructureMapTransformCode_ESCAPE                StructureMapTransformCode_Value = 4
	StructureMapTransformCode_CAST                  StructureMapTransformCode_Value = 5
	StructureMapTransformCode_APPEND                StructureMapTransformCode_Value = 6
	StructureMapTransformCode_TRANSLATE             StructureMapTransformCode_Value = 7
	StructureMapTransformCode_REFERENCE             StructureMapTransformCode_Value = 8
	StructureMapTransformCode_DATE_OP               StructureMapTransformCode_Value = 9
	StructureMapTransformCode_UUID                  StructureMapTransformCode_Value = 10
	StructureMapTransformCode_POINTER               StructureMapTransformCode_Value = 11
	StructureMapTransformCode_EVALUATE              StructureMapTransformCode_Value = 12
	StructureMapTransformCode_CC                    StructureMapTransformCode_Value = 13
	StructureMapTransformCode_C                     StructureMapTransformCode_Value = 14
	StructureMapTransformCode_QTY                   StructureMapTransformCode_Value = 15
	StructureMapTransformCode_ID                    StructureMapTransformCode_Value = 16
	StructureMapTransformCode_CP                    StructureMapTransformCode_Value = 17
)

// Enum value maps for StructureMapTransformCode_Value.
var (
	StructureMapTransformCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "CREATE",
		2:  "COPY",
		3:  "TRUNCATE",
		4:  "ESCAPE",
		5:  "CAST",
		6:  "APPEND",
		7:  "TRANSLATE",
		8:  "REFERENCE",
		9:  "DATE_OP",
		10: "UUID",
		11: "POINTER",
		12: "EVALUATE",
		13: "CC",
		14: "C",
		15: "QTY",
		16: "ID",
		17: "CP",
	}
	StructureMapTransformCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CREATE":                1,
		"COPY":                  2,
		"TRUNCATE":              3,
		"ESCAPE":                4,
		"CAST":                  5,
		"APPEND":                6,
		"TRANSLATE":             7,
		"REFERENCE":             8,
		"DATE_OP":               9,
		"UUID":                  10,
		"POINTER":               11,
		"EVALUATE":              12,
		"CC":                    13,
		"C":                     14,
		"QTY":                   15,
		"ID":                    16,
		"CP":                    17,
	}
)

func (x StructureMapTransformCode_Value) Enum() *StructureMapTransformCode_Value {
	p := new(StructureMapTransformCode_Value)
	*p = x
	return p
}

func (x StructureMapTransformCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructureMapTransformCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[208].Descriptor()
}

func (StructureMapTransformCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[208]
}

func (x StructureMapTransformCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructureMapTransformCode_Value.Descriptor instead.
func (StructureMapTransformCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{208, 0}
}

type SubscriptionChannelTypeCode_Value int32

const (
	SubscriptionChannelTypeCode_INVALID_UNINITIALIZED SubscriptionChannelTypeCode_Value = 0
	SubscriptionChannelTypeCode_REST_HOOK             SubscriptionChannelTypeCode_Value = 1
	SubscriptionChannelTypeCode_WEBSOCKET             SubscriptionChannelTypeCode_Value = 2
	SubscriptionChannelTypeCode_EMAIL                 SubscriptionChannelTypeCode_Value = 3
	SubscriptionChannelTypeCode_SMS                   SubscriptionChannelTypeCode_Value = 4
	SubscriptionChannelTypeCode_MESSAGE               SubscriptionChannelTypeCode_Value = 5
)

// Enum value maps for SubscriptionChannelTypeCode_Value.
var (
	SubscriptionChannelTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REST_HOOK",
		2: "WEBSOCKET",
		3: "EMAIL",
		4: "SMS",
		5: "MESSAGE",
	}
	SubscriptionChannelTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REST_HOOK":             1,
		"WEBSOCKET":             2,
		"EMAIL":                 3,
		"SMS":                   4,
		"MESSAGE":               5,
	}
)

func (x SubscriptionChannelTypeCode_Value) Enum() *SubscriptionChannelTypeCode_Value {
	p := new(SubscriptionChannelTypeCode_Value)
	*p = x
	return p
}

func (x SubscriptionChannelTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionChannelTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[209].Descriptor()
}

func (SubscriptionChannelTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[209]
}

func (x SubscriptionChannelTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionChannelTypeCode_Value.Descriptor instead.
func (SubscriptionChannelTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{209, 0}
}

type SubscriptionStatusCode_Value int32

const (
	SubscriptionStatusCode_INVALID_UNINITIALIZED SubscriptionStatusCode_Value = 0
	SubscriptionStatusCode_REQUESTED             SubscriptionStatusCode_Value = 1
	SubscriptionStatusCode_ACTIVE                SubscriptionStatusCode_Value = 2
	SubscriptionStatusCode_ERROR                 SubscriptionStatusCode_Value = 3
	SubscriptionStatusCode_OFF                   SubscriptionStatusCode_Value = 4
)

// Enum value maps for SubscriptionStatusCode_Value.
var (
	SubscriptionStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "REQUESTED",
		2: "ACTIVE",
		3: "ERROR",
		4: "OFF",
	}
	SubscriptionStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"REQUESTED":             1,
		"ACTIVE":                2,
		"ERROR":                 3,
		"OFF":                   4,
	}
)

func (x SubscriptionStatusCode_Value) Enum() *SubscriptionStatusCode_Value {
	p := new(SubscriptionStatusCode_Value)
	*p = x
	return p
}

func (x SubscriptionStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubscriptionStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[210].Descriptor()
}

func (SubscriptionStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[210]
}

func (x SubscriptionStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubscriptionStatusCode_Value.Descriptor instead.
func (SubscriptionStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{210, 0}
}

type SupplyDeliveryStatusCode_Value int32

const (
	SupplyDeliveryStatusCode_INVALID_UNINITIALIZED SupplyDeliveryStatusCode_Value = 0
	SupplyDeliveryStatusCode_IN_PROGRESS           SupplyDeliveryStatusCode_Value = 1
	SupplyDeliveryStatusCode_COMPLETED             SupplyDeliveryStatusCode_Value = 2
	SupplyDeliveryStatusCode_ABANDONED             SupplyDeliveryStatusCode_Value = 3
	SupplyDeliveryStatusCode_ENTERED_IN_ERROR      SupplyDeliveryStatusCode_Value = 4
)

// Enum value maps for SupplyDeliveryStatusCode_Value.
var (
	SupplyDeliveryStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "IN_PROGRESS",
		2: "COMPLETED",
		3: "ABANDONED",
		4: "ENTERED_IN_ERROR",
	}
	SupplyDeliveryStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"IN_PROGRESS":           1,
		"COMPLETED":             2,
		"ABANDONED":             3,
		"ENTERED_IN_ERROR":      4,
	}
)

func (x SupplyDeliveryStatusCode_Value) Enum() *SupplyDeliveryStatusCode_Value {
	p := new(SupplyDeliveryStatusCode_Value)
	*p = x
	return p
}

func (x SupplyDeliveryStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyDeliveryStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[211].Descriptor()
}

func (SupplyDeliveryStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[211]
}

func (x SupplyDeliveryStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyDeliveryStatusCode_Value.Descriptor instead.
func (SupplyDeliveryStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{211, 0}
}

type SupplyItemTypeCode_Value int32

const (
	SupplyItemTypeCode_INVALID_UNINITIALIZED SupplyItemTypeCode_Value = 0
	SupplyItemTypeCode_MEDICATION            SupplyItemTypeCode_Value = 1
	SupplyItemTypeCode_DEVICE                SupplyItemTypeCode_Value = 2
)

// Enum value maps for SupplyItemTypeCode_Value.
var (
	SupplyItemTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "MEDICATION",
		2: "DEVICE",
	}
	SupplyItemTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"MEDICATION":            1,
		"DEVICE":                2,
	}
)

func (x SupplyItemTypeCode_Value) Enum() *SupplyItemTypeCode_Value {
	p := new(SupplyItemTypeCode_Value)
	*p = x
	return p
}

func (x SupplyItemTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyItemTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[212].Descriptor()
}

func (SupplyItemTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[212]
}

func (x SupplyItemTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyItemTypeCode_Value.Descriptor instead.
func (SupplyItemTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{212, 0}
}

type SupplyRequestStatusCode_Value int32

const (
	SupplyRequestStatusCode_INVALID_UNINITIALIZED SupplyRequestStatusCode_Value = 0
	SupplyRequestStatusCode_DRAFT                 SupplyRequestStatusCode_Value = 1
	SupplyRequestStatusCode_ACTIVE                SupplyRequestStatusCode_Value = 2
	SupplyRequestStatusCode_SUSPENDED             SupplyRequestStatusCode_Value = 3
	SupplyRequestStatusCode_CANCELLED             SupplyRequestStatusCode_Value = 4
	SupplyRequestStatusCode_COMPLETED             SupplyRequestStatusCode_Value = 5
	SupplyRequestStatusCode_ENTERED_IN_ERROR      SupplyRequestStatusCode_Value = 6
	SupplyRequestStatusCode_UNKNOWN               SupplyRequestStatusCode_Value = 7
)

// Enum value maps for SupplyRequestStatusCode_Value.
var (
	SupplyRequestStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "ACTIVE",
		3: "SUSPENDED",
		4: "CANCELLED",
		5: "COMPLETED",
		6: "ENTERED_IN_ERROR",
		7: "UNKNOWN",
	}
	SupplyRequestStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"ACTIVE":                2,
		"SUSPENDED":             3,
		"CANCELLED":             4,
		"COMPLETED":             5,
		"ENTERED_IN_ERROR":      6,
		"UNKNOWN":               7,
	}
)

func (x SupplyRequestStatusCode_Value) Enum() *SupplyRequestStatusCode_Value {
	p := new(SupplyRequestStatusCode_Value)
	*p = x
	return p
}

func (x SupplyRequestStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SupplyRequestStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[213].Descriptor()
}

func (SupplyRequestStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[213]
}

func (x SupplyRequestStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SupplyRequestStatusCode_Value.Descriptor instead.
func (SupplyRequestStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{213, 0}
}

type TaskIntentCode_Value int32

const (
	TaskIntentCode_INVALID_UNINITIALIZED TaskIntentCode_Value = 0
	TaskIntentCode_UNKNOWN               TaskIntentCode_Value = 1
)

// Enum value maps for TaskIntentCode_Value.
var (
	TaskIntentCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UNKNOWN",
	}
	TaskIntentCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UNKNOWN":               1,
	}
)

func (x TaskIntentCode_Value) Enum() *TaskIntentCode_Value {
	p := new(TaskIntentCode_Value)
	*p = x
	return p
}

func (x TaskIntentCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskIntentCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[214].Descriptor()
}

func (TaskIntentCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[214]
}

func (x TaskIntentCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskIntentCode_Value.Descriptor instead.
func (TaskIntentCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{214, 0}
}

type TaskStatusCode_Value int32

const (
	TaskStatusCode_INVALID_UNINITIALIZED TaskStatusCode_Value = 0
	TaskStatusCode_DRAFT                 TaskStatusCode_Value = 1
	TaskStatusCode_REQUESTED             TaskStatusCode_Value = 2
	TaskStatusCode_RECEIVED              TaskStatusCode_Value = 3
	TaskStatusCode_ACCEPTED              TaskStatusCode_Value = 4
	TaskStatusCode_REJECTED              TaskStatusCode_Value = 5
	TaskStatusCode_READY                 TaskStatusCode_Value = 6
	TaskStatusCode_CANCELLED             TaskStatusCode_Value = 7
	TaskStatusCode_IN_PROGRESS           TaskStatusCode_Value = 8
	TaskStatusCode_ON_HOLD               TaskStatusCode_Value = 9
	TaskStatusCode_FAILED                TaskStatusCode_Value = 10
	TaskStatusCode_COMPLETED             TaskStatusCode_Value = 11
	TaskStatusCode_ENTERED_IN_ERROR      TaskStatusCode_Value = 12
)

// Enum value maps for TaskStatusCode_Value.
var (
	TaskStatusCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "DRAFT",
		2:  "REQUESTED",
		3:  "RECEIVED",
		4:  "ACCEPTED",
		5:  "REJECTED",
		6:  "READY",
		7:  "CANCELLED",
		8:  "IN_PROGRESS",
		9:  "ON_HOLD",
		10: "FAILED",
		11: "COMPLETED",
		12: "ENTERED_IN_ERROR",
	}
	TaskStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"REQUESTED":             2,
		"RECEIVED":              3,
		"ACCEPTED":              4,
		"REJECTED":              5,
		"READY":                 6,
		"CANCELLED":             7,
		"IN_PROGRESS":           8,
		"ON_HOLD":               9,
		"FAILED":                10,
		"COMPLETED":             11,
		"ENTERED_IN_ERROR":      12,
	}
)

func (x TaskStatusCode_Value) Enum() *TaskStatusCode_Value {
	p := new(TaskStatusCode_Value)
	*p = x
	return p
}

func (x TaskStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[215].Descriptor()
}

func (TaskStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[215]
}

func (x TaskStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatusCode_Value.Descriptor instead.
func (TaskStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{215, 0}
}

type TemplateStatusCodeLifeCycleCode_Value int32

const (
	TemplateStatusCodeLifeCycleCode_INVALID_UNINITIALIZED TemplateStatusCodeLifeCycleCode_Value = 0
	TemplateStatusCodeLifeCycleCode_DRAFT                 TemplateStatusCodeLifeCycleCode_Value = 1
	TemplateStatusCodeLifeCycleCode_PENDING               TemplateStatusCodeLifeCycleCode_Value = 2
	TemplateStatusCodeLifeCycleCode_ACTIVE                TemplateStatusCodeLifeCycleCode_Value = 3
	TemplateStatusCodeLifeCycleCode_REVIEW                TemplateStatusCodeLifeCycleCode_Value = 4
	TemplateStatusCodeLifeCycleCode_CANCELLED             TemplateStatusCodeLifeCycleCode_Value = 5
	TemplateStatusCodeLifeCycleCode_REJECTED              TemplateStatusCodeLifeCycleCode_Value = 6
	TemplateStatusCodeLifeCycleCode_RETIRED               TemplateStatusCodeLifeCycleCode_Value = 7
	TemplateStatusCodeLifeCycleCode_TERMINATED            TemplateStatusCodeLifeCycleCode_Value = 8
)

// Enum value maps for TemplateStatusCodeLifeCycleCode_Value.
var (
	TemplateStatusCodeLifeCycleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DRAFT",
		2: "PENDING",
		3: "ACTIVE",
		4: "REVIEW",
		5: "CANCELLED",
		6: "REJECTED",
		7: "RETIRED",
		8: "TERMINATED",
	}
	TemplateStatusCodeLifeCycleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DRAFT":                 1,
		"PENDING":               2,
		"ACTIVE":                3,
		"REVIEW":                4,
		"CANCELLED":             5,
		"REJECTED":              6,
		"RETIRED":               7,
		"TERMINATED":            8,
	}
)

func (x TemplateStatusCodeLifeCycleCode_Value) Enum() *TemplateStatusCodeLifeCycleCode_Value {
	p := new(TemplateStatusCodeLifeCycleCode_Value)
	*p = x
	return p
}

func (x TemplateStatusCodeLifeCycleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TemplateStatusCodeLifeCycleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[216].Descriptor()
}

func (TemplateStatusCodeLifeCycleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[216]
}

func (x TemplateStatusCodeLifeCycleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TemplateStatusCodeLifeCycleCode_Value.Descriptor instead.
func (TemplateStatusCodeLifeCycleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{216, 0}
}

type TestReportActionResultCode_Value int32

const (
	TestReportActionResultCode_INVALID_UNINITIALIZED TestReportActionResultCode_Value = 0
	TestReportActionResultCode_PASS                  TestReportActionResultCode_Value = 1
	TestReportActionResultCode_SKIP                  TestReportActionResultCode_Value = 2
	TestReportActionResultCode_FAIL                  TestReportActionResultCode_Value = 3
	TestReportActionResultCode_WARNING               TestReportActionResultCode_Value = 4
	TestReportActionResultCode_ERROR                 TestReportActionResultCode_Value = 5
)

// Enum value maps for TestReportActionResultCode_Value.
var (
	TestReportActionResultCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PASS",
		2: "SKIP",
		3: "FAIL",
		4: "WARNING",
		5: "ERROR",
	}
	TestReportActionResultCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PASS":                  1,
		"SKIP":                  2,
		"FAIL":                  3,
		"WARNING":               4,
		"ERROR":                 5,
	}
)

func (x TestReportActionResultCode_Value) Enum() *TestReportActionResultCode_Value {
	p := new(TestReportActionResultCode_Value)
	*p = x
	return p
}

func (x TestReportActionResultCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportActionResultCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[217].Descriptor()
}

func (TestReportActionResultCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[217]
}

func (x TestReportActionResultCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportActionResultCode_Value.Descriptor instead.
func (TestReportActionResultCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{217, 0}
}

type TestReportParticipantTypeCode_Value int32

const (
	TestReportParticipantTypeCode_INVALID_UNINITIALIZED TestReportParticipantTypeCode_Value = 0
	TestReportParticipantTypeCode_TEST_ENGINE           TestReportParticipantTypeCode_Value = 1
	TestReportParticipantTypeCode_CLIENT                TestReportParticipantTypeCode_Value = 2
	TestReportParticipantTypeCode_SERVER                TestReportParticipantTypeCode_Value = 3
)

// Enum value maps for TestReportParticipantTypeCode_Value.
var (
	TestReportParticipantTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "TEST_ENGINE",
		2: "CLIENT",
		3: "SERVER",
	}
	TestReportParticipantTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"TEST_ENGINE":           1,
		"CLIENT":                2,
		"SERVER":                3,
	}
)

func (x TestReportParticipantTypeCode_Value) Enum() *TestReportParticipantTypeCode_Value {
	p := new(TestReportParticipantTypeCode_Value)
	*p = x
	return p
}

func (x TestReportParticipantTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportParticipantTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[218].Descriptor()
}

func (TestReportParticipantTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[218]
}

func (x TestReportParticipantTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportParticipantTypeCode_Value.Descriptor instead.
func (TestReportParticipantTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{218, 0}
}

type TestReportResultCode_Value int32

const (
	TestReportResultCode_INVALID_UNINITIALIZED TestReportResultCode_Value = 0
	TestReportResultCode_PASS                  TestReportResultCode_Value = 1
	TestReportResultCode_FAIL                  TestReportResultCode_Value = 2
	TestReportResultCode_PENDING               TestReportResultCode_Value = 3
)

// Enum value maps for TestReportResultCode_Value.
var (
	TestReportResultCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "PASS",
		2: "FAIL",
		3: "PENDING",
	}
	TestReportResultCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"PASS":                  1,
		"FAIL":                  2,
		"PENDING":               3,
	}
)

func (x TestReportResultCode_Value) Enum() *TestReportResultCode_Value {
	p := new(TestReportResultCode_Value)
	*p = x
	return p
}

func (x TestReportResultCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportResultCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[219].Descriptor()
}

func (TestReportResultCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[219]
}

func (x TestReportResultCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportResultCode_Value.Descriptor instead.
func (TestReportResultCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{219, 0}
}

type TestReportStatusCode_Value int32

const (
	TestReportStatusCode_INVALID_UNINITIALIZED TestReportStatusCode_Value = 0
	TestReportStatusCode_COMPLETED             TestReportStatusCode_Value = 1
	TestReportStatusCode_IN_PROGRESS           TestReportStatusCode_Value = 2
	TestReportStatusCode_WAITING               TestReportStatusCode_Value = 3
	TestReportStatusCode_STOPPED               TestReportStatusCode_Value = 4
	TestReportStatusCode_ENTERED_IN_ERROR      TestReportStatusCode_Value = 5
)

// Enum value maps for TestReportStatusCode_Value.
var (
	TestReportStatusCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "COMPLETED",
		2: "IN_PROGRESS",
		3: "WAITING",
		4: "STOPPED",
		5: "ENTERED_IN_ERROR",
	}
	TestReportStatusCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"COMPLETED":             1,
		"IN_PROGRESS":           2,
		"WAITING":               3,
		"STOPPED":               4,
		"ENTERED_IN_ERROR":      5,
	}
)

func (x TestReportStatusCode_Value) Enum() *TestReportStatusCode_Value {
	p := new(TestReportStatusCode_Value)
	*p = x
	return p
}

func (x TestReportStatusCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestReportStatusCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[220].Descriptor()
}

func (TestReportStatusCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[220]
}

func (x TestReportStatusCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestReportStatusCode_Value.Descriptor instead.
func (TestReportStatusCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{220, 0}
}

type TestScriptRequestMethodCode_Value int32

const (
	TestScriptRequestMethodCode_INVALID_UNINITIALIZED TestScriptRequestMethodCode_Value = 0
	TestScriptRequestMethodCode_DELETE                TestScriptRequestMethodCode_Value = 1
	TestScriptRequestMethodCode_GET                   TestScriptRequestMethodCode_Value = 2
	TestScriptRequestMethodCode_OPTIONS               TestScriptRequestMethodCode_Value = 3
	TestScriptRequestMethodCode_PATCH                 TestScriptRequestMethodCode_Value = 4
	TestScriptRequestMethodCode_POST                  TestScriptRequestMethodCode_Value = 5
	TestScriptRequestMethodCode_PUT                   TestScriptRequestMethodCode_Value = 6
	TestScriptRequestMethodCode_HEAD                  TestScriptRequestMethodCode_Value = 7
)

// Enum value maps for TestScriptRequestMethodCode_Value.
var (
	TestScriptRequestMethodCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "DELETE",
		2: "GET",
		3: "OPTIONS",
		4: "PATCH",
		5: "POST",
		6: "PUT",
		7: "HEAD",
	}
	TestScriptRequestMethodCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"DELETE":                1,
		"GET":                   2,
		"OPTIONS":               3,
		"PATCH":                 4,
		"POST":                  5,
		"PUT":                   6,
		"HEAD":                  7,
	}
)

func (x TestScriptRequestMethodCode_Value) Enum() *TestScriptRequestMethodCode_Value {
	p := new(TestScriptRequestMethodCode_Value)
	*p = x
	return p
}

func (x TestScriptRequestMethodCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestScriptRequestMethodCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[221].Descriptor()
}

func (TestScriptRequestMethodCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[221]
}

func (x TestScriptRequestMethodCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestScriptRequestMethodCode_Value.Descriptor instead.
func (TestScriptRequestMethodCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{221, 0}
}

type TriggerTypeCode_Value int32

const (
	TriggerTypeCode_INVALID_UNINITIALIZED TriggerTypeCode_Value = 0
	TriggerTypeCode_NAMED_EVENT           TriggerTypeCode_Value = 1
	TriggerTypeCode_PERIODIC              TriggerTypeCode_Value = 2
	TriggerTypeCode_DATA_CHANGED          TriggerTypeCode_Value = 3
	TriggerTypeCode_DATA_ADDED            TriggerTypeCode_Value = 4
	TriggerTypeCode_DATA_MODIFIED         TriggerTypeCode_Value = 5
	TriggerTypeCode_DATA_REMOVED          TriggerTypeCode_Value = 6
	TriggerTypeCode_DATA_ACCESSED         TriggerTypeCode_Value = 7
	TriggerTypeCode_DATA_ACCESS_ENDED     TriggerTypeCode_Value = 8
)

// Enum value maps for TriggerTypeCode_Value.
var (
	TriggerTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NAMED_EVENT",
		2: "PERIODIC",
		3: "DATA_CHANGED",
		4: "DATA_ADDED",
		5: "DATA_MODIFIED",
		6: "DATA_REMOVED",
		7: "DATA_ACCESSED",
		8: "DATA_ACCESS_ENDED",
	}
	TriggerTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NAMED_EVENT":           1,
		"PERIODIC":              2,
		"DATA_CHANGED":          3,
		"DATA_ADDED":            4,
		"DATA_MODIFIED":         5,
		"DATA_REMOVED":          6,
		"DATA_ACCESSED":         7,
		"DATA_ACCESS_ENDED":     8,
	}
)

func (x TriggerTypeCode_Value) Enum() *TriggerTypeCode_Value {
	p := new(TriggerTypeCode_Value)
	*p = x
	return p
}

func (x TriggerTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[222].Descriptor()
}

func (TriggerTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[222]
}

func (x TriggerTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerTypeCode_Value.Descriptor instead.
func (TriggerTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{222, 0}
}

type TypeDerivationRuleCode_Value int32

const (
	TypeDerivationRuleCode_INVALID_UNINITIALIZED TypeDerivationRuleCode_Value = 0
	TypeDerivationRuleCode_SPECIALIZATION        TypeDerivationRuleCode_Value = 1
	TypeDerivationRuleCode_CONSTRAINT            TypeDerivationRuleCode_Value = 2
)

// Enum value maps for TypeDerivationRuleCode_Value.
var (
	TypeDerivationRuleCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "SPECIALIZATION",
		2: "CONSTRAINT",
	}
	TypeDerivationRuleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"SPECIALIZATION":        1,
		"CONSTRAINT":            2,
	}
)

func (x TypeDerivationRuleCode_Value) Enum() *TypeDerivationRuleCode_Value {
	p := new(TypeDerivationRuleCode_Value)
	*p = x
	return p
}

func (x TypeDerivationRuleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypeDerivationRuleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[223].Descriptor()
}

func (TypeDerivationRuleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[223]
}

func (x TypeDerivationRuleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypeDerivationRuleCode_Value.Descriptor instead.
func (TypeDerivationRuleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{223, 0}
}

type UDIEntryTypeCode_Value int32

const (
	UDIEntryTypeCode_INVALID_UNINITIALIZED UDIEntryTypeCode_Value = 0
	UDIEntryTypeCode_BARCODE               UDIEntryTypeCode_Value = 1
	UDIEntryTypeCode_RFID                  UDIEntryTypeCode_Value = 2
	UDIEntryTypeCode_MANUAL                UDIEntryTypeCode_Value = 3
	UDIEntryTypeCode_CARD                  UDIEntryTypeCode_Value = 4
	UDIEntryTypeCode_SELF_REPORTED         UDIEntryTypeCode_Value = 5
	UDIEntryTypeCode_UNKNOWN               UDIEntryTypeCode_Value = 6
)

// Enum value maps for UDIEntryTypeCode_Value.
var (
	UDIEntryTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "BARCODE",
		2: "RFID",
		3: "MANUAL",
		4: "CARD",
		5: "SELF_REPORTED",
		6: "UNKNOWN",
	}
	UDIEntryTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"BARCODE":               1,
		"RFID":                  2,
		"MANUAL":                3,
		"CARD":                  4,
		"SELF_REPORTED":         5,
		"UNKNOWN":               6,
	}
)

func (x UDIEntryTypeCode_Value) Enum() *UDIEntryTypeCode_Value {
	p := new(UDIEntryTypeCode_Value)
	*p = x
	return p
}

func (x UDIEntryTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UDIEntryTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[224].Descriptor()
}

func (UDIEntryTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[224]
}

func (x UDIEntryTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UDIEntryTypeCode_Value.Descriptor instead.
func (UDIEntryTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{224, 0}
}

type UseCode_Value int32

const (
	UseCode_INVALID_UNINITIALIZED UseCode_Value = 0
	UseCode_CLAIM                 UseCode_Value = 1
	UseCode_PREAUTHORIZATION      UseCode_Value = 2
	UseCode_PREDETERMINATION      UseCode_Value = 3
)

// Enum value maps for UseCode_Value.
var (
	UseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "CLAIM",
		2: "PREAUTHORIZATION",
		3: "PREDETERMINATION",
	}
	UseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"CLAIM":                 1,
		"PREAUTHORIZATION":      2,
		"PREDETERMINATION":      3,
	}
)

func (x UseCode_Value) Enum() *UseCode_Value {
	p := new(UseCode_Value)
	*p = x
	return p
}

func (x UseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[225].Descriptor()
}

func (UseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[225]
}

func (x UseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UseCode_Value.Descriptor instead.
func (UseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{225, 0}
}

type V20444Code_Value int32

const (
	V20444Code_INVALID_UNINITIALIZED V20444Code_Value = 0
	V20444Code_F                     V20444Code_Value = 1
	V20444Code_G                     V20444Code_Value = 2
)

// Enum value maps for V20444Code_Value.
var (
	V20444Code_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "F",
		2: "G",
	}
	V20444Code_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"F":                     1,
		"G":                     2,
	}
)

func (x V20444Code_Value) Enum() *V20444Code_Value {
	p := new(V20444Code_Value)
	*p = x
	return p
}

func (x V20444Code_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V20444Code_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[226].Descriptor()
}

func (V20444Code_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[226]
}

func (x V20444Code_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V20444Code_Value.Descriptor instead.
func (V20444Code_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{226, 0}
}

type V3AddressUseCode_Value int32

const (
	V3AddressUseCode_INVALID_UNINITIALIZED         V3AddressUseCode_Value = 0
	V3AddressUseCode_GENERAL_ADDRESS_USE           V3AddressUseCode_Value = 1
	V3AddressUseCode_BAD                           V3AddressUseCode_Value = 2
	V3AddressUseCode_CONF                          V3AddressUseCode_Value = 3
	V3AddressUseCode_H                             V3AddressUseCode_Value = 4
	V3AddressUseCode_HP                            V3AddressUseCode_Value = 5
	V3AddressUseCode_HV                            V3AddressUseCode_Value = 6
	V3AddressUseCode_OLD                           V3AddressUseCode_Value = 7
	V3AddressUseCode_TMP                           V3AddressUseCode_Value = 8
	V3AddressUseCode_WP                            V3AddressUseCode_Value = 9
	V3AddressUseCode_DIR                           V3AddressUseCode_Value = 10
	V3AddressUseCode_PUB                           V3AddressUseCode_Value = 11
	V3AddressUseCode_POSTAL_ADDRESS_USE            V3AddressUseCode_Value = 12
	V3AddressUseCode_PHYS                          V3AddressUseCode_Value = 13
	V3AddressUseCode_PST                           V3AddressUseCode_Value = 14
	V3AddressUseCode_TELECOMMUNICATION_ADDRESS_USE V3AddressUseCode_Value = 15
	V3AddressUseCode_AS                            V3AddressUseCode_Value = 16
	V3AddressUseCode_EC                            V3AddressUseCode_Value = 17
	V3AddressUseCode_MC                            V3AddressUseCode_Value = 18
	V3AddressUseCode_PG                            V3AddressUseCode_Value = 19
)

// Enum value maps for V3AddressUseCode_Value.
var (
	V3AddressUseCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "GENERAL_ADDRESS_USE",
		2:  "BAD",
		3:  "CONF",
		4:  "H",
		5:  "HP",
		6:  "HV",
		7:  "OLD",
		8:  "TMP",
		9:  "WP",
		10: "DIR",
		11: "PUB",
		12: "POSTAL_ADDRESS_USE",
		13: "PHYS",
		14: "PST",
		15: "TELECOMMUNICATION_ADDRESS_USE",
		16: "AS",
		17: "EC",
		18: "MC",
		19: "PG",
	}
	V3AddressUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":         0,
		"GENERAL_ADDRESS_USE":           1,
		"BAD":                           2,
		"CONF":                          3,
		"H":                             4,
		"HP":                            5,
		"HV":                            6,
		"OLD":                           7,
		"TMP":                           8,
		"WP":                            9,
		"DIR":                           10,
		"PUB":                           11,
		"POSTAL_ADDRESS_USE":            12,
		"PHYS":                          13,
		"PST":                           14,
		"TELECOMMUNICATION_ADDRESS_USE": 15,
		"AS":                            16,
		"EC":                            17,
		"MC":                            18,
		"PG":                            19,
	}
)

func (x V3AddressUseCode_Value) Enum() *V3AddressUseCode_Value {
	p := new(V3AddressUseCode_Value)
	*p = x
	return p
}

func (x V3AddressUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3AddressUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[227].Descriptor()
}

func (V3AddressUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[227]
}

func (x V3AddressUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3AddressUseCode_Value.Descriptor instead.
func (V3AddressUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{227, 0}
}

type V3ConfidentialityCode_Value int32

const (
	V3ConfidentialityCode_INVALID_UNINITIALIZED          V3ConfidentialityCode_Value = 0
	V3ConfidentialityCode_CONFIDENTIALITY                V3ConfidentialityCode_Value = 1
	V3ConfidentialityCode_L                              V3ConfidentialityCode_Value = 2
	V3ConfidentialityCode_M                              V3ConfidentialityCode_Value = 3
	V3ConfidentialityCode_N                              V3ConfidentialityCode_Value = 4
	V3ConfidentialityCode_R                              V3ConfidentialityCode_Value = 5
	V3ConfidentialityCode_U                              V3ConfidentialityCode_Value = 6
	V3ConfidentialityCode_V                              V3ConfidentialityCode_Value = 7
	V3ConfidentialityCode_CONFIDENTIALITY_BY_ACCESS_KIND V3ConfidentialityCode_Value = 8
	V3ConfidentialityCode_B                              V3ConfidentialityCode_Value = 9
	V3ConfidentialityCode_D                              V3ConfidentialityCode_Value = 10
	V3ConfidentialityCode_I                              V3ConfidentialityCode_Value = 11
	V3ConfidentialityCode_CONFIDENTIALITY_BY_INFO_TYPE   V3ConfidentialityCode_Value = 12
	V3ConfidentialityCode_ETH                            V3ConfidentialityCode_Value = 13
	V3ConfidentialityCode_HIV                            V3ConfidentialityCode_Value = 14
	V3ConfidentialityCode_PSY                            V3ConfidentialityCode_Value = 15
	V3ConfidentialityCode_SDV                            V3ConfidentialityCode_Value = 16
	V3ConfidentialityCode_CONFIDENTIALITY_MODIFIERS      V3ConfidentialityCode_Value = 17
	V3ConfidentialityCode_C                              V3ConfidentialityCode_Value = 18
	V3ConfidentialityCode_S                              V3ConfidentialityCode_Value = 19
	V3ConfidentialityCode_T                              V3ConfidentialityCode_Value = 20
)

// Enum value maps for V3ConfidentialityCode_Value.
var (
	V3ConfidentialityCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "CONFIDENTIALITY",
		2:  "L",
		3:  "M",
		4:  "N",
		5:  "R",
		6:  "U",
		7:  "V",
		8:  "CONFIDENTIALITY_BY_ACCESS_KIND",
		9:  "B",
		10: "D",
		11: "I",
		12: "CONFIDENTIALITY_BY_INFO_TYPE",
		13: "ETH",
		14: "HIV",
		15: "PSY",
		16: "SDV",
		17: "CONFIDENTIALITY_MODIFIERS",
		18: "C",
		19: "S",
		20: "T",
	}
	V3ConfidentialityCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":          0,
		"CONFIDENTIALITY":                1,
		"L":                              2,
		"M":                              3,
		"N":                              4,
		"R":                              5,
		"U":                              6,
		"V":                              7,
		"CONFIDENTIALITY_BY_ACCESS_KIND": 8,
		"B":                              9,
		"D":                              10,
		"I":                              11,
		"CONFIDENTIALITY_BY_INFO_TYPE":   12,
		"ETH":                            13,
		"HIV":                            14,
		"PSY":                            15,
		"SDV":                            16,
		"CONFIDENTIALITY_MODIFIERS":      17,
		"C":                              18,
		"S":                              19,
		"T":                              20,
	}
)

func (x V3ConfidentialityCode_Value) Enum() *V3ConfidentialityCode_Value {
	p := new(V3ConfidentialityCode_Value)
	*p = x
	return p
}

func (x V3ConfidentialityCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3ConfidentialityCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[228].Descriptor()
}

func (V3ConfidentialityCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[228]
}

func (x V3ConfidentialityCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3ConfidentialityCode_Value.Descriptor instead.
func (V3ConfidentialityCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{228, 0}
}

type V3EntityNamePartQualifierCode_Value int32

const (
	V3EntityNamePartQualifierCode_INVALID_UNINITIALIZED                      V3EntityNamePartQualifierCode_Value = 0
	V3EntityNamePartQualifierCode_ORGANIZATION_NAME_PART_QUALIFIER           V3EntityNamePartQualifierCode_Value = 1
	V3EntityNamePartQualifierCode_AC                                         V3EntityNamePartQualifierCode_Value = 2
	V3EntityNamePartQualifierCode_AD                                         V3EntityNamePartQualifierCode_Value = 3
	V3EntityNamePartQualifierCode_BR                                         V3EntityNamePartQualifierCode_Value = 4
	V3EntityNamePartQualifierCode_CL                                         V3EntityNamePartQualifierCode_Value = 5
	V3EntityNamePartQualifierCode_IN                                         V3EntityNamePartQualifierCode_Value = 6
	V3EntityNamePartQualifierCode_LS                                         V3EntityNamePartQualifierCode_Value = 7
	V3EntityNamePartQualifierCode_NB                                         V3EntityNamePartQualifierCode_Value = 8
	V3EntityNamePartQualifierCode_PR                                         V3EntityNamePartQualifierCode_Value = 9
	V3EntityNamePartQualifierCode_SP                                         V3EntityNamePartQualifierCode_Value = 10
	V3EntityNamePartQualifierCode_TITLE                                      V3EntityNamePartQualifierCode_Value = 11
	V3EntityNamePartQualifierCode_VV                                         V3EntityNamePartQualifierCode_Value = 12
	V3EntityNamePartQualifierCode_PHARMACEUTICAL_ENTITY_NAME_PART_QUALIFIERS V3EntityNamePartQualifierCode_Value = 13
	V3EntityNamePartQualifierCode_CON                                        V3EntityNamePartQualifierCode_Value = 14
	V3EntityNamePartQualifierCode_DEV                                        V3EntityNamePartQualifierCode_Value = 15
	V3EntityNamePartQualifierCode_FLAV                                       V3EntityNamePartQualifierCode_Value = 16
	V3EntityNamePartQualifierCode_FORMUL                                     V3EntityNamePartQualifierCode_Value = 17
	V3EntityNamePartQualifierCode_FRM                                        V3EntityNamePartQualifierCode_Value = 18
	V3EntityNamePartQualifierCode_INV                                        V3EntityNamePartQualifierCode_Value = 19
	V3EntityNamePartQualifierCode_POPUL                                      V3EntityNamePartQualifierCode_Value = 20
	V3EntityNamePartQualifierCode_SCI                                        V3EntityNamePartQualifierCode_Value = 21
	V3EntityNamePartQualifierCode_STR                                        V3EntityNamePartQualifierCode_Value = 22
	V3EntityNamePartQualifierCode_TIME                                       V3EntityNamePartQualifierCode_Value = 23
	V3EntityNamePartQualifierCode_TMK                                        V3EntityNamePartQualifierCode_Value = 24
	V3EntityNamePartQualifierCode_USE                                        V3EntityNamePartQualifierCode_Value = 25
	V3EntityNamePartQualifierCode_PERSON_NAME_PART_QUALIFIER                 V3EntityNamePartQualifierCode_Value = 26
	V3EntityNamePartQualifierCode_PERSON_NAME_PART_AFFIX_TYPES               V3EntityNamePartQualifierCode_Value = 27
	V3EntityNamePartQualifierCode_PERSON_NAME_PART_CHANGE_QUALIFIER          V3EntityNamePartQualifierCode_Value = 28
	V3EntityNamePartQualifierCode_PERSON_NAME_PART_MISC_QUALIFIER            V3EntityNamePartQualifierCode_Value = 29
)

// Enum value maps for V3EntityNamePartQualifierCode_Value.
var (
	V3EntityNamePartQualifierCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "ORGANIZATION_NAME_PART_QUALIFIER",
		2:  "AC",
		3:  "AD",
		4:  "BR",
		5:  "CL",
		6:  "IN",
		7:  "LS",
		8:  "NB",
		9:  "PR",
		10: "SP",
		11: "TITLE",
		12: "VV",
		13: "PHARMACEUTICAL_ENTITY_NAME_PART_QUALIFIERS",
		14: "CON",
		15: "DEV",
		16: "FLAV",
		17: "FORMUL",
		18: "FRM",
		19: "INV",
		20: "POPUL",
		21: "SCI",
		22: "STR",
		23: "TIME",
		24: "TMK",
		25: "USE",
		26: "PERSON_NAME_PART_QUALIFIER",
		27: "PERSON_NAME_PART_AFFIX_TYPES",
		28: "PERSON_NAME_PART_CHANGE_QUALIFIER",
		29: "PERSON_NAME_PART_MISC_QUALIFIER",
	}
	V3EntityNamePartQualifierCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":            0,
		"ORGANIZATION_NAME_PART_QUALIFIER": 1,
		"AC":                               2,
		"AD":                               3,
		"BR":                               4,
		"CL":                               5,
		"IN":                               6,
		"LS":                               7,
		"NB":                               8,
		"PR":                               9,
		"SP":                               10,
		"TITLE":                            11,
		"VV":                               12,
		"PHARMACEUTICAL_ENTITY_NAME_PART_QUALIFIERS": 13,
		"CON":                               14,
		"DEV":                               15,
		"FLAV":                              16,
		"FORMUL":                            17,
		"FRM":                               18,
		"INV":                               19,
		"POPUL":                             20,
		"SCI":                               21,
		"STR":                               22,
		"TIME":                              23,
		"TMK":                               24,
		"USE":                               25,
		"PERSON_NAME_PART_QUALIFIER":        26,
		"PERSON_NAME_PART_AFFIX_TYPES":      27,
		"PERSON_NAME_PART_CHANGE_QUALIFIER": 28,
		"PERSON_NAME_PART_MISC_QUALIFIER":   29,
	}
)

func (x V3EntityNamePartQualifierCode_Value) Enum() *V3EntityNamePartQualifierCode_Value {
	p := new(V3EntityNamePartQualifierCode_Value)
	*p = x
	return p
}

func (x V3EntityNamePartQualifierCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3EntityNamePartQualifierCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[229].Descriptor()
}

func (V3EntityNamePartQualifierCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[229]
}

func (x V3EntityNamePartQualifierCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3EntityNamePartQualifierCode_Value.Descriptor instead.
func (V3EntityNamePartQualifierCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{229, 0}
}

type V3EntityNamePartQualifierR2Code_Value int32

const (
	V3EntityNamePartQualifierR2Code_INVALID_UNINITIALIZED                      V3EntityNamePartQualifierR2Code_Value = 0
	V3EntityNamePartQualifierR2Code_AD                                         V3EntityNamePartQualifierR2Code_Value = 1
	V3EntityNamePartQualifierR2Code_SP                                         V3EntityNamePartQualifierR2Code_Value = 2
	V3EntityNamePartQualifierR2Code_BR                                         V3EntityNamePartQualifierR2Code_Value = 3
	V3EntityNamePartQualifierR2Code_CL                                         V3EntityNamePartQualifierR2Code_Value = 4
	V3EntityNamePartQualifierR2Code_IN                                         V3EntityNamePartQualifierR2Code_Value = 5
	V3EntityNamePartQualifierR2Code_LS                                         V3EntityNamePartQualifierR2Code_Value = 6
	V3EntityNamePartQualifierR2Code_MID                                        V3EntityNamePartQualifierR2Code_Value = 7
	V3EntityNamePartQualifierR2Code_PFX                                        V3EntityNamePartQualifierR2Code_Value = 8
	V3EntityNamePartQualifierR2Code_PHARMACEUTICAL_ENTITY_NAME_PART_QUALIFIERS V3EntityNamePartQualifierR2Code_Value = 9
	V3EntityNamePartQualifierR2Code_CON                                        V3EntityNamePartQualifierR2Code_Value = 10
	V3EntityNamePartQualifierR2Code_DEV                                        V3EntityNamePartQualifierR2Code_Value = 11
	V3EntityNamePartQualifierR2Code_FLAV                                       V3EntityNamePartQualifierR2Code_Value = 12
	V3EntityNamePartQualifierR2Code_FORMUL                                     V3EntityNamePartQualifierR2Code_Value = 13
	V3EntityNamePartQualifierR2Code_FRM                                        V3EntityNamePartQualifierR2Code_Value = 14
	V3EntityNamePartQualifierR2Code_INV                                        V3EntityNamePartQualifierR2Code_Value = 15
	V3EntityNamePartQualifierR2Code_POPUL                                      V3EntityNamePartQualifierR2Code_Value = 16
	V3EntityNamePartQualifierR2Code_SCI                                        V3EntityNamePartQualifierR2Code_Value = 17
	V3EntityNamePartQualifierR2Code_STR                                        V3EntityNamePartQualifierR2Code_Value = 18
	V3EntityNamePartQualifierR2Code_TIME                                       V3EntityNamePartQualifierR2Code_Value = 19
	V3EntityNamePartQualifierR2Code_TMK                                        V3EntityNamePartQualifierR2Code_Value = 20
	V3EntityNamePartQualifierR2Code_USE                                        V3EntityNamePartQualifierR2Code_Value = 21
	V3EntityNamePartQualifierR2Code_SFX                                        V3EntityNamePartQualifierR2Code_Value = 22
	V3EntityNamePartQualifierR2Code_TITLE_STYLES                               V3EntityNamePartQualifierR2Code_Value = 23
	V3EntityNamePartQualifierR2Code_AC                                         V3EntityNamePartQualifierR2Code_Value = 24
	V3EntityNamePartQualifierR2Code_HON                                        V3EntityNamePartQualifierR2Code_Value = 25
	V3EntityNamePartQualifierR2Code_NB                                         V3EntityNamePartQualifierR2Code_Value = 26
	V3EntityNamePartQualifierR2Code_PR                                         V3EntityNamePartQualifierR2Code_Value = 27
)

// Enum value maps for V3EntityNamePartQualifierR2Code_Value.
var (
	V3EntityNamePartQualifierR2Code_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "AD",
		2:  "SP",
		3:  "BR",
		4:  "CL",
		5:  "IN",
		6:  "LS",
		7:  "MID",
		8:  "PFX",
		9:  "PHARMACEUTICAL_ENTITY_NAME_PART_QUALIFIERS",
		10: "CON",
		11: "DEV",
		12: "FLAV",
		13: "FORMUL",
		14: "FRM",
		15: "INV",
		16: "POPUL",
		17: "SCI",
		18: "STR",
		19: "TIME",
		20: "TMK",
		21: "USE",
		22: "SFX",
		23: "TITLE_STYLES",
		24: "AC",
		25: "HON",
		26: "NB",
		27: "PR",
	}
	V3EntityNamePartQualifierR2Code_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AD":                    1,
		"SP":                    2,
		"BR":                    3,
		"CL":                    4,
		"IN":                    5,
		"LS":                    6,
		"MID":                   7,
		"PFX":                   8,
		"PHARMACEUTICAL_ENTITY_NAME_PART_QUALIFIERS": 9,
		"CON":          10,
		"DEV":          11,
		"FLAV":         12,
		"FORMUL":       13,
		"FRM":          14,
		"INV":          15,
		"POPUL":        16,
		"SCI":          17,
		"STR":          18,
		"TIME":         19,
		"TMK":          20,
		"USE":          21,
		"SFX":          22,
		"TITLE_STYLES": 23,
		"AC":           24,
		"HON":          25,
		"NB":           26,
		"PR":           27,
	}
)

func (x V3EntityNamePartQualifierR2Code_Value) Enum() *V3EntityNamePartQualifierR2Code_Value {
	p := new(V3EntityNamePartQualifierR2Code_Value)
	*p = x
	return p
}

func (x V3EntityNamePartQualifierR2Code_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3EntityNamePartQualifierR2Code_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[230].Descriptor()
}

func (V3EntityNamePartQualifierR2Code_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[230]
}

func (x V3EntityNamePartQualifierR2Code_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3EntityNamePartQualifierR2Code_Value.Descriptor instead.
func (V3EntityNamePartQualifierR2Code_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{230, 0}
}

type V3EntityNameUseCode_Value int32

const (
	V3EntityNameUseCode_INVALID_UNINITIALIZED   V3EntityNameUseCode_Value = 0
	V3EntityNameUseCode_NAME_REPRESENTATION_USE V3EntityNameUseCode_Value = 1
	V3EntityNameUseCode_ABC                     V3EntityNameUseCode_Value = 2
	V3EntityNameUseCode_IDE                     V3EntityNameUseCode_Value = 3
	V3EntityNameUseCode_SYL                     V3EntityNameUseCode_Value = 4
	V3EntityNameUseCode_ASGN                    V3EntityNameUseCode_Value = 5
	V3EntityNameUseCode_C                       V3EntityNameUseCode_Value = 6
	V3EntityNameUseCode_I                       V3EntityNameUseCode_Value = 7
	V3EntityNameUseCode_L                       V3EntityNameUseCode_Value = 8
	V3EntityNameUseCode_OR                      V3EntityNameUseCode_Value = 9
	V3EntityNameUseCode_P                       V3EntityNameUseCode_Value = 10
	V3EntityNameUseCode_A                       V3EntityNameUseCode_Value = 11
	V3EntityNameUseCode_R                       V3EntityNameUseCode_Value = 12
	V3EntityNameUseCode_SRCH                    V3EntityNameUseCode_Value = 13
	V3EntityNameUseCode_PHON                    V3EntityNameUseCode_Value = 14
	V3EntityNameUseCode_SNDX                    V3EntityNameUseCode_Value = 15
)

// Enum value maps for V3EntityNameUseCode_Value.
var (
	V3EntityNameUseCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "NAME_REPRESENTATION_USE",
		2:  "ABC",
		3:  "IDE",
		4:  "SYL",
		5:  "ASGN",
		6:  "C",
		7:  "I",
		8:  "L",
		9:  "OR",
		10: "P",
		11: "A",
		12: "R",
		13: "SRCH",
		14: "PHON",
		15: "SNDX",
	}
	V3EntityNameUseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":   0,
		"NAME_REPRESENTATION_USE": 1,
		"ABC":                     2,
		"IDE":                     3,
		"SYL":                     4,
		"ASGN":                    5,
		"C":                       6,
		"I":                       7,
		"L":                       8,
		"OR":                      9,
		"P":                       10,
		"A":                       11,
		"R":                       12,
		"SRCH":                    13,
		"PHON":                    14,
		"SNDX":                    15,
	}
)

func (x V3EntityNameUseCode_Value) Enum() *V3EntityNameUseCode_Value {
	p := new(V3EntityNameUseCode_Value)
	*p = x
	return p
}

func (x V3EntityNameUseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3EntityNameUseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[231].Descriptor()
}

func (V3EntityNameUseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[231]
}

func (x V3EntityNameUseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3EntityNameUseCode_Value.Descriptor instead.
func (V3EntityNameUseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{231, 0}
}

type V3EntityNameUseR2Code_Value int32

const (
	V3EntityNameUseR2Code_INVALID_UNINITIALIZED   V3EntityNameUseR2Code_Value = 0
	V3EntityNameUseR2Code_ASSUMED                 V3EntityNameUseR2Code_Value = 1
	V3EntityNameUseR2Code_A                       V3EntityNameUseR2Code_Value = 2
	V3EntityNameUseR2Code_ANON                    V3EntityNameUseR2Code_Value = 3
	V3EntityNameUseR2Code_I                       V3EntityNameUseR2Code_Value = 4
	V3EntityNameUseR2Code_P                       V3EntityNameUseR2Code_Value = 5
	V3EntityNameUseR2Code_R                       V3EntityNameUseR2Code_Value = 6
	V3EntityNameUseR2Code_C                       V3EntityNameUseR2Code_Value = 7
	V3EntityNameUseR2Code_M                       V3EntityNameUseR2Code_Value = 8
	V3EntityNameUseR2Code_NAME_REPRESENTATION_USE V3EntityNameUseR2Code_Value = 9
	V3EntityNameUseR2Code_ABC                     V3EntityNameUseR2Code_Value = 10
	V3EntityNameUseR2Code_IDE                     V3EntityNameUseR2Code_Value = 11
	V3EntityNameUseR2Code_SYL                     V3EntityNameUseR2Code_Value = 12
	V3EntityNameUseR2Code_OLD                     V3EntityNameUseR2Code_Value = 13
	V3EntityNameUseR2Code_DN                      V3EntityNameUseR2Code_Value = 14
	V3EntityNameUseR2Code_OR                      V3EntityNameUseR2Code_Value = 15
	V3EntityNameUseR2Code_PHON                    V3EntityNameUseR2Code_Value = 16
	V3EntityNameUseR2Code_SRCH                    V3EntityNameUseR2Code_Value = 17
	V3EntityNameUseR2Code_T                       V3EntityNameUseR2Code_Value = 18
)

// Enum value maps for V3EntityNameUseR2Code_Value.
var (
	V3EntityNameUseR2Code_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "ASSUMED",
		2:  "A",
		3:  "ANON",
		4:  "I",
		5:  "P",
		6:  "R",
		7:  "C",
		8:  "M",
		9:  "NAME_REPRESENTATION_USE",
		10: "ABC",
		11: "IDE",
		12: "SYL",
		13: "OLD",
		14: "DN",
		15: "OR",
		16: "PHON",
		17: "SRCH",
		18: "T",
	}
	V3EntityNameUseR2Code_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":   0,
		"ASSUMED":                 1,
		"A":                       2,
		"ANON":                    3,
		"I":                       4,
		"P":                       5,
		"R":                       6,
		"C":                       7,
		"M":                       8,
		"NAME_REPRESENTATION_USE": 9,
		"ABC":                     10,
		"IDE":                     11,
		"SYL":                     12,
		"OLD":                     13,
		"DN":                      14,
		"OR":                      15,
		"PHON":                    16,
		"SRCH":                    17,
		"T":                       18,
	}
)

func (x V3EntityNameUseR2Code_Value) Enum() *V3EntityNameUseR2Code_Value {
	p := new(V3EntityNameUseR2Code_Value)
	*p = x
	return p
}

func (x V3EntityNameUseR2Code_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3EntityNameUseR2Code_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[232].Descriptor()
}

func (V3EntityNameUseR2Code_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[232]
}

func (x V3EntityNameUseR2Code_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3EntityNameUseR2Code_Value.Descriptor instead.
func (V3EntityNameUseR2Code_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{232, 0}
}

type V3NullFlavorCode_Value int32

const (
	V3NullFlavorCode_INVALID_UNINITIALIZED V3NullFlavorCode_Value = 0
	V3NullFlavorCode_NI                    V3NullFlavorCode_Value = 1
	V3NullFlavorCode_INV                   V3NullFlavorCode_Value = 2
	V3NullFlavorCode_DER                   V3NullFlavorCode_Value = 3
	V3NullFlavorCode_OTH                   V3NullFlavorCode_Value = 4
	V3NullFlavorCode_NINF                  V3NullFlavorCode_Value = 5
	V3NullFlavorCode_PINF                  V3NullFlavorCode_Value = 6
	V3NullFlavorCode_UNC                   V3NullFlavorCode_Value = 7
	V3NullFlavorCode_MSK                   V3NullFlavorCode_Value = 8
	V3NullFlavorCode_NA                    V3NullFlavorCode_Value = 9
	V3NullFlavorCode_UNK                   V3NullFlavorCode_Value = 10
	V3NullFlavorCode_ASKU                  V3NullFlavorCode_Value = 11
	V3NullFlavorCode_NAV                   V3NullFlavorCode_Value = 12
	V3NullFlavorCode_NASK                  V3NullFlavorCode_Value = 13
	V3NullFlavorCode_NAVU                  V3NullFlavorCode_Value = 14
	V3NullFlavorCode_QS                    V3NullFlavorCode_Value = 15
	V3NullFlavorCode_TRC                   V3NullFlavorCode_Value = 16
	V3NullFlavorCode_NP                    V3NullFlavorCode_Value = 17
)

// Enum value maps for V3NullFlavorCode_Value.
var (
	V3NullFlavorCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "NI",
		2:  "INV",
		3:  "DER",
		4:  "OTH",
		5:  "NINF",
		6:  "PINF",
		7:  "UNC",
		8:  "MSK",
		9:  "NA",
		10: "UNK",
		11: "ASKU",
		12: "NAV",
		13: "NASK",
		14: "NAVU",
		15: "QS",
		16: "TRC",
		17: "NP",
	}
	V3NullFlavorCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NI":                    1,
		"INV":                   2,
		"DER":                   3,
		"OTH":                   4,
		"NINF":                  5,
		"PINF":                  6,
		"UNC":                   7,
		"MSK":                   8,
		"NA":                    9,
		"UNK":                   10,
		"ASKU":                  11,
		"NAV":                   12,
		"NASK":                  13,
		"NAVU":                  14,
		"QS":                    15,
		"TRC":                   16,
		"NP":                    17,
	}
)

func (x V3NullFlavorCode_Value) Enum() *V3NullFlavorCode_Value {
	p := new(V3NullFlavorCode_Value)
	*p = x
	return p
}

func (x V3NullFlavorCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3NullFlavorCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[233].Descriptor()
}

func (V3NullFlavorCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[233]
}

func (x V3NullFlavorCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3NullFlavorCode_Value.Descriptor instead.
func (V3NullFlavorCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{233, 0}
}

type V3ParticipationModeCode_Value int32

const (
	V3ParticipationModeCode_INVALID_UNINITIALIZED V3ParticipationModeCode_Value = 0
	V3ParticipationModeCode_ELECTRONIC            V3ParticipationModeCode_Value = 1
	V3ParticipationModeCode_PHYSICAL              V3ParticipationModeCode_Value = 2
	V3ParticipationModeCode_REMOTE                V3ParticipationModeCode_Value = 3
	V3ParticipationModeCode_VERBAL                V3ParticipationModeCode_Value = 4
	V3ParticipationModeCode_DICTATE               V3ParticipationModeCode_Value = 5
	V3ParticipationModeCode_FACE                  V3ParticipationModeCode_Value = 6
	V3ParticipationModeCode_PHONE                 V3ParticipationModeCode_Value = 7
	V3ParticipationModeCode_VIDEOCONF             V3ParticipationModeCode_Value = 8
	V3ParticipationModeCode_WRITTEN               V3ParticipationModeCode_Value = 9
	V3ParticipationModeCode_FAXWRIT               V3ParticipationModeCode_Value = 10
	V3ParticipationModeCode_HANDWRIT              V3ParticipationModeCode_Value = 11
	V3ParticipationModeCode_MAILWRIT              V3ParticipationModeCode_Value = 12
	V3ParticipationModeCode_ONLINEWRIT            V3ParticipationModeCode_Value = 13
	V3ParticipationModeCode_EMAILWRIT             V3ParticipationModeCode_Value = 14
	V3ParticipationModeCode_TYPEWRIT              V3ParticipationModeCode_Value = 15
)

// Enum value maps for V3ParticipationModeCode_Value.
var (
	V3ParticipationModeCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "ELECTRONIC",
		2:  "PHYSICAL",
		3:  "REMOTE",
		4:  "VERBAL",
		5:  "DICTATE",
		6:  "FACE",
		7:  "PHONE",
		8:  "VIDEOCONF",
		9:  "WRITTEN",
		10: "FAXWRIT",
		11: "HANDWRIT",
		12: "MAILWRIT",
		13: "ONLINEWRIT",
		14: "EMAILWRIT",
		15: "TYPEWRIT",
	}
	V3ParticipationModeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"ELECTRONIC":            1,
		"PHYSICAL":              2,
		"REMOTE":                3,
		"VERBAL":                4,
		"DICTATE":               5,
		"FACE":                  6,
		"PHONE":                 7,
		"VIDEOCONF":             8,
		"WRITTEN":               9,
		"FAXWRIT":               10,
		"HANDWRIT":              11,
		"MAILWRIT":              12,
		"ONLINEWRIT":            13,
		"EMAILWRIT":             14,
		"TYPEWRIT":              15,
	}
)

func (x V3ParticipationModeCode_Value) Enum() *V3ParticipationModeCode_Value {
	p := new(V3ParticipationModeCode_Value)
	*p = x
	return p
}

func (x V3ParticipationModeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3ParticipationModeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[234].Descriptor()
}

func (V3ParticipationModeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[234]
}

func (x V3ParticipationModeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3ParticipationModeCode_Value.Descriptor instead.
func (V3ParticipationModeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{234, 0}
}

type V3ProbabilityDistributionTypeCode_Value int32

const (
	V3ProbabilityDistributionTypeCode_INVALID_UNINITIALIZED V3ProbabilityDistributionTypeCode_Value = 0
	V3ProbabilityDistributionTypeCode_B                     V3ProbabilityDistributionTypeCode_Value = 1
	V3ProbabilityDistributionTypeCode_E                     V3ProbabilityDistributionTypeCode_Value = 2
	V3ProbabilityDistributionTypeCode_F                     V3ProbabilityDistributionTypeCode_Value = 3
	V3ProbabilityDistributionTypeCode_G                     V3ProbabilityDistributionTypeCode_Value = 4
	V3ProbabilityDistributionTypeCode_LN                    V3ProbabilityDistributionTypeCode_Value = 5
	V3ProbabilityDistributionTypeCode_N                     V3ProbabilityDistributionTypeCode_Value = 6
	V3ProbabilityDistributionTypeCode_T                     V3ProbabilityDistributionTypeCode_Value = 7
	V3ProbabilityDistributionTypeCode_U                     V3ProbabilityDistributionTypeCode_Value = 8
	V3ProbabilityDistributionTypeCode_X2                    V3ProbabilityDistributionTypeCode_Value = 9
)

// Enum value maps for V3ProbabilityDistributionTypeCode_Value.
var (
	V3ProbabilityDistributionTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "B",
		2: "E",
		3: "F",
		4: "G",
		5: "LN",
		6: "N",
		7: "T",
		8: "U",
		9: "X2",
	}
	V3ProbabilityDistributionTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"B":                     1,
		"E":                     2,
		"F":                     3,
		"G":                     4,
		"LN":                    5,
		"N":                     6,
		"T":                     7,
		"U":                     8,
		"X2":                    9,
	}
)

func (x V3ProbabilityDistributionTypeCode_Value) Enum() *V3ProbabilityDistributionTypeCode_Value {
	p := new(V3ProbabilityDistributionTypeCode_Value)
	*p = x
	return p
}

func (x V3ProbabilityDistributionTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3ProbabilityDistributionTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[235].Descriptor()
}

func (V3ProbabilityDistributionTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[235]
}

func (x V3ProbabilityDistributionTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3ProbabilityDistributionTypeCode_Value.Descriptor instead.
func (V3ProbabilityDistributionTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{235, 0}
}

type V3RoleCode_Value int32

const (
	V3RoleCode_INVALID_UNINITIALIZED                          V3RoleCode_Value = 0
	V3RoleCode_AFFILIATION_ROLE_TYPE                          V3RoleCode_Value = 1
	V3RoleCode_AGENT_ROLE_TYPE                                V3RoleCode_Value = 2
	V3RoleCode_AMENDER                                        V3RoleCode_Value = 3
	V3RoleCode_CLASSIFIER                                     V3RoleCode_Value = 4
	V3RoleCode_CONSENTER                                      V3RoleCode_Value = 5
	V3RoleCode_CONSWIT                                        V3RoleCode_Value = 6
	V3RoleCode_COPART                                         V3RoleCode_Value = 7
	V3RoleCode_DECLASSIFIER                                   V3RoleCode_Value = 8
	V3RoleCode_DELEGATEE                                      V3RoleCode_Value = 9
	V3RoleCode_DELEGATOR                                      V3RoleCode_Value = 10
	V3RoleCode_DOWNGRDER                                      V3RoleCode_Value = 11
	V3RoleCode_DRIVCLASSIFIER                                 V3RoleCode_Value = 12
	V3RoleCode_GRANTEE                                        V3RoleCode_Value = 13
	V3RoleCode_GRANTOR                                        V3RoleCode_Value = 14
	V3RoleCode_INTPRTER                                       V3RoleCode_Value = 15
	V3RoleCode_REVIEWER                                       V3RoleCode_Value = 16
	V3RoleCode_VALIDATOR                                      V3RoleCode_Value = 17
	V3RoleCode_COVERAGE_SPONSOR_ROLE_TYPE                     V3RoleCode_Value = 18
	V3RoleCode_FULLINS                                        V3RoleCode_Value = 19
	V3RoleCode_SELFINS                                        V3RoleCode_Value = 20
	V3RoleCode_PAYOR_ROLE_TYPE                                V3RoleCode_Value = 21
	V3RoleCode_ENROLBKR                                       V3RoleCode_Value = 22
	V3RoleCode_TPA                                            V3RoleCode_Value = 23
	V3RoleCode_UMO                                            V3RoleCode_Value = 24
	V3RoleCode_RESPRSN                                        V3RoleCode_Value = 25
	V3RoleCode_EXCEST                                         V3RoleCode_Value = 26
	V3RoleCode_GUADLTM                                        V3RoleCode_Value = 27
	V3RoleCode_GUARD                                          V3RoleCode_Value = 28
	V3RoleCode_POWATT                                         V3RoleCode_Value = 29
	V3RoleCode_DPOWATT                                        V3RoleCode_Value = 30
	V3RoleCode_HPOWATT                                        V3RoleCode_Value = 31
	V3RoleCode_SPOWATT                                        V3RoleCode_Value = 32
	V3RoleCode_ASSIGNED_ROLE_TYPE                             V3RoleCode_Value = 33
	V3RoleCode_ASSIGNED_NON_PERSON_LIVING_SUBJECT_ROLE_TYPE   V3RoleCode_Value = 34
	V3RoleCode_ASSIST                                         V3RoleCode_Value = 35
	V3RoleCode_BIOTH                                          V3RoleCode_Value = 36
	V3RoleCode_ANTIBIOT                                       V3RoleCode_Value = 37
	V3RoleCode_DEBR                                           V3RoleCode_Value = 38
	V3RoleCode_CCO                                            V3RoleCode_Value = 39
	V3RoleCode_SEE                                            V3RoleCode_Value = 40
	V3RoleCode_SNIFF                                          V3RoleCode_Value = 41
	V3RoleCode_CERTIFIED_ENTITY_TYPE                          V3RoleCode_Value = 42
	V3RoleCode_CITIZEN_ROLE_TYPE                              V3RoleCode_Value = 43
	V3RoleCode_CAS                                            V3RoleCode_Value = 44
	V3RoleCode_CASM                                           V3RoleCode_Value = 45
	V3RoleCode_CN                                             V3RoleCode_Value = 46
	V3RoleCode_CNRP                                           V3RoleCode_Value = 47
	V3RoleCode_CNRPM                                          V3RoleCode_Value = 48
	V3RoleCode_CPCA                                           V3RoleCode_Value = 49
	V3RoleCode_CRP                                            V3RoleCode_Value = 50
	V3RoleCode_CRPM                                           V3RoleCode_Value = 51
	V3RoleCode_CONTACT_ROLE_TYPE                              V3RoleCode_Value = 52
	V3RoleCode_ADMINISTRATIVE_CONTACT_ROLE_TYPE               V3RoleCode_Value = 53
	V3RoleCode_BILL                                           V3RoleCode_Value = 54
	V3RoleCode_ORG                                            V3RoleCode_Value = 55
	V3RoleCode_PAYOR                                          V3RoleCode_Value = 56
	V3RoleCode_ECON                                           V3RoleCode_Value = 57
	V3RoleCode_NOK                                            V3RoleCode_Value = 58
	V3RoleCode_IDENTIFIED_ENTITY_TYPE                         V3RoleCode_Value = 59
	V3RoleCode_LOCATION_IDENTIFIED_ENTITY_ROLE_CODE           V3RoleCode_Value = 60
	V3RoleCode_ACHFID                                         V3RoleCode_Value = 61
	V3RoleCode_JURID                                          V3RoleCode_Value = 62
	V3RoleCode_LOCHFID                                        V3RoleCode_Value = 63
	V3RoleCode_LIVING_SUBJECT_PRODUCTION_CLASS                V3RoleCode_Value = 64
	V3RoleCode_BF                                             V3RoleCode_Value = 65
	V3RoleCode_BL                                             V3RoleCode_Value = 66
	V3RoleCode_BR                                             V3RoleCode_Value = 67
	V3RoleCode_CO                                             V3RoleCode_Value = 68
	V3RoleCode_DA                                             V3RoleCode_Value = 69
	V3RoleCode_DR                                             V3RoleCode_Value = 70
	V3RoleCode_DU                                             V3RoleCode_Value = 71
	V3RoleCode_FI                                             V3RoleCode_Value = 72
	V3RoleCode_LY                                             V3RoleCode_Value = 73
	V3RoleCode_MT                                             V3RoleCode_Value = 74
	V3RoleCode_MU                                             V3RoleCode_Value = 75
	V3RoleCode_PL                                             V3RoleCode_Value = 76
	V3RoleCode_RC                                             V3RoleCode_Value = 77
	V3RoleCode_SH                                             V3RoleCode_Value = 78
	V3RoleCode_VL                                             V3RoleCode_Value = 79
	V3RoleCode_WL                                             V3RoleCode_Value = 80
	V3RoleCode_WO                                             V3RoleCode_Value = 81
	V3RoleCode_MEDICATION_GENERALIZATION_ROLE_TYPE            V3RoleCode_Value = 82
	V3RoleCode_DC                                             V3RoleCode_Value = 83
	V3RoleCode_GD                                             V3RoleCode_Value = 84
	V3RoleCode_GDF                                            V3RoleCode_Value = 85
	V3RoleCode_GDS                                            V3RoleCode_Value = 86
	V3RoleCode_GDSF                                           V3RoleCode_Value = 87
	V3RoleCode_MGDSF                                          V3RoleCode_Value = 88
	V3RoleCode_MEMBER_ROLE_TYPE                               V3RoleCode_Value = 89
	V3RoleCode_TRB                                            V3RoleCode_Value = 90
	V3RoleCode_PERSONAL_RELATIONSHIP_ROLE_TYPE                V3RoleCode_Value = 91
	V3RoleCode_FAMMEMB                                        V3RoleCode_Value = 92
	V3RoleCode_CHILD                                          V3RoleCode_Value = 93
	V3RoleCode_CHLDADOPT                                      V3RoleCode_Value = 94
	V3RoleCode_DAUADOPT                                       V3RoleCode_Value = 95
	V3RoleCode_SONADOPT                                       V3RoleCode_Value = 96
	V3RoleCode_CHLDFOST                                       V3RoleCode_Value = 97
	V3RoleCode_DAUFOST                                        V3RoleCode_Value = 98
	V3RoleCode_SONFOST                                        V3RoleCode_Value = 99
	V3RoleCode_DAUC                                           V3RoleCode_Value = 100
	V3RoleCode_DAU                                            V3RoleCode_Value = 101
	V3RoleCode_STPDAU                                         V3RoleCode_Value = 102
	V3RoleCode_NCHILD                                         V3RoleCode_Value = 103
	V3RoleCode_SON                                            V3RoleCode_Value = 104
	V3RoleCode_SONC                                           V3RoleCode_Value = 105
	V3RoleCode_STPSON                                         V3RoleCode_Value = 106
	V3RoleCode_STPCHLD                                        V3RoleCode_Value = 107
	V3RoleCode_EXT                                            V3RoleCode_Value = 108
	V3RoleCode_AUNT                                           V3RoleCode_Value = 109
	V3RoleCode_MAUNT                                          V3RoleCode_Value = 110
	V3RoleCode_PAUNT                                          V3RoleCode_Value = 111
	V3RoleCode_COUSN                                          V3RoleCode_Value = 112
	V3RoleCode_MCOUSN                                         V3RoleCode_Value = 113
	V3RoleCode_PCOUSN                                         V3RoleCode_Value = 114
	V3RoleCode_GGRPRN                                         V3RoleCode_Value = 115
	V3RoleCode_GGRFTH                                         V3RoleCode_Value = 116
	V3RoleCode_MGGRFTH                                        V3RoleCode_Value = 117
	V3RoleCode_PGGRFTH                                        V3RoleCode_Value = 118
	V3RoleCode_GGRMTH                                         V3RoleCode_Value = 119
	V3RoleCode_MGGRMTH                                        V3RoleCode_Value = 120
	V3RoleCode_PGGRMTH                                        V3RoleCode_Value = 121
	V3RoleCode_MGGRPRN                                        V3RoleCode_Value = 122
	V3RoleCode_PGGRPRN                                        V3RoleCode_Value = 123
	V3RoleCode_GRNDCHILD                                      V3RoleCode_Value = 124
	V3RoleCode_GRNDDAU                                        V3RoleCode_Value = 125
	V3RoleCode_GRNDSON                                        V3RoleCode_Value = 126
	V3RoleCode_GRPRN                                          V3RoleCode_Value = 127
	V3RoleCode_GRFTH                                          V3RoleCode_Value = 128
	V3RoleCode_MGRFTH                                         V3RoleCode_Value = 129
	V3RoleCode_PGRFTH                                         V3RoleCode_Value = 130
	V3RoleCode_GRMTH                                          V3RoleCode_Value = 131
	V3RoleCode_MGRMTH                                         V3RoleCode_Value = 132
	V3RoleCode_PGRMTH                                         V3RoleCode_Value = 133
	V3RoleCode_MGRPRN                                         V3RoleCode_Value = 134
	V3RoleCode_PGRPRN                                         V3RoleCode_Value = 135
	V3RoleCode_INLAW                                          V3RoleCode_Value = 136
	V3RoleCode_CHLDINLAW                                      V3RoleCode_Value = 137
	V3RoleCode_DAUINLAW                                       V3RoleCode_Value = 138
	V3RoleCode_SONINLAW                                       V3RoleCode_Value = 139
	V3RoleCode_PRNINLAW                                       V3RoleCode_Value = 140
	V3RoleCode_FTHINLAW                                       V3RoleCode_Value = 141
	V3RoleCode_MTHINLAW                                       V3RoleCode_Value = 142
	V3RoleCode_SIBINLAW                                       V3RoleCode_Value = 143
	V3RoleCode_BROINLAW                                       V3RoleCode_Value = 144
	V3RoleCode_SISINLAW                                       V3RoleCode_Value = 145
	V3RoleCode_NIENEPH                                        V3RoleCode_Value = 146
	V3RoleCode_NEPHEW                                         V3RoleCode_Value = 147
	V3RoleCode_NIECE                                          V3RoleCode_Value = 148
	V3RoleCode_UNCLE                                          V3RoleCode_Value = 149
	V3RoleCode_MUNCLE                                         V3RoleCode_Value = 150
	V3RoleCode_PUNCLE                                         V3RoleCode_Value = 151
	V3RoleCode_PRN                                            V3RoleCode_Value = 152
	V3RoleCode_ADOPTP                                         V3RoleCode_Value = 153
	V3RoleCode_ADOPTF                                         V3RoleCode_Value = 154
	V3RoleCode_ADOPTM                                         V3RoleCode_Value = 155
	V3RoleCode_FTH                                            V3RoleCode_Value = 156
	V3RoleCode_FTHFOST                                        V3RoleCode_Value = 157
	V3RoleCode_NFTH                                           V3RoleCode_Value = 158
	V3RoleCode_NFTHF                                          V3RoleCode_Value = 159
	V3RoleCode_STPFTH                                         V3RoleCode_Value = 160
	V3RoleCode_MTH                                            V3RoleCode_Value = 161
	V3RoleCode_GESTM                                          V3RoleCode_Value = 162
	V3RoleCode_MTHFOST                                        V3RoleCode_Value = 163
	V3RoleCode_NMTH                                           V3RoleCode_Value = 164
	V3RoleCode_NMTHF                                          V3RoleCode_Value = 165
	V3RoleCode_STPMTH                                         V3RoleCode_Value = 166
	V3RoleCode_NPRN                                           V3RoleCode_Value = 167
	V3RoleCode_PRNFOST                                        V3RoleCode_Value = 168
	V3RoleCode_STPPRN                                         V3RoleCode_Value = 169
	V3RoleCode_SIB                                            V3RoleCode_Value = 170
	V3RoleCode_BRO                                            V3RoleCode_Value = 171
	V3RoleCode_HBRO                                           V3RoleCode_Value = 172
	V3RoleCode_NBRO                                           V3RoleCode_Value = 173
	V3RoleCode_TWINBRO                                        V3RoleCode_Value = 174
	V3RoleCode_FTWINBRO                                       V3RoleCode_Value = 175
	V3RoleCode_ITWINBRO                                       V3RoleCode_Value = 176
	V3RoleCode_STPBRO                                         V3RoleCode_Value = 177
	V3RoleCode_HSIB                                           V3RoleCode_Value = 178
	V3RoleCode_HSIS                                           V3RoleCode_Value = 179
	V3RoleCode_NSIB                                           V3RoleCode_Value = 180
	V3RoleCode_NSIS                                           V3RoleCode_Value = 181
	V3RoleCode_TWINSIS                                        V3RoleCode_Value = 182
	V3RoleCode_FTWINSIS                                       V3RoleCode_Value = 183
	V3RoleCode_ITWINSIS                                       V3RoleCode_Value = 184
	V3RoleCode_TWIN                                           V3RoleCode_Value = 185
	V3RoleCode_FTWIN                                          V3RoleCode_Value = 186
	V3RoleCode_ITWIN                                          V3RoleCode_Value = 187
	V3RoleCode_SIS                                            V3RoleCode_Value = 188
	V3RoleCode_STPSIS                                         V3RoleCode_Value = 189
	V3RoleCode_STPSIB                                         V3RoleCode_Value = 190
	V3RoleCode_SIGOTHR                                        V3RoleCode_Value = 191
	V3RoleCode_DOMPART                                        V3RoleCode_Value = 192
	V3RoleCode_FMRSPS                                         V3RoleCode_Value = 193
	V3RoleCode_SPS                                            V3RoleCode_Value = 194
	V3RoleCode_HUSB                                           V3RoleCode_Value = 195
	V3RoleCode_WIFE                                           V3RoleCode_Value = 196
	V3RoleCode_FRND                                           V3RoleCode_Value = 197
	V3RoleCode_NBOR                                           V3RoleCode_Value = 198
	V3RoleCode_ONESELF                                        V3RoleCode_Value = 199
	V3RoleCode_ROOM                                           V3RoleCode_Value = 200
	V3RoleCode_POLICY_OR_PROGRAM_COVERAGE_ROLE_TYPE           V3RoleCode_Value = 201
	V3RoleCode_COVERAGE_ROLE_TYPE                             V3RoleCode_Value = 202
	V3RoleCode_FAMDEP                                         V3RoleCode_Value = 203
	V3RoleCode_HANDIC                                         V3RoleCode_Value = 204
	V3RoleCode_INJ                                            V3RoleCode_Value = 205
	V3RoleCode_SELF                                           V3RoleCode_Value = 206
	V3RoleCode_SPON                                           V3RoleCode_Value = 207
	V3RoleCode_STUD                                           V3RoleCode_Value = 208
	V3RoleCode_FSTUD                                          V3RoleCode_Value = 209
	V3RoleCode_PSTUD                                          V3RoleCode_Value = 210
	V3RoleCode_ADOPT                                          V3RoleCode_Value = 211
	V3RoleCode_GCHILD                                         V3RoleCode_Value = 212
	V3RoleCode_GPARNT                                         V3RoleCode_Value = 213
	V3RoleCode_NAT                                            V3RoleCode_Value = 214
	V3RoleCode_NIENE                                          V3RoleCode_Value = 215
	V3RoleCode_PARNT                                          V3RoleCode_Value = 216
	V3RoleCode_SPSE                                           V3RoleCode_Value = 217
	V3RoleCode_STEP                                           V3RoleCode_Value = 218
	V3RoleCode_COVERED_PARTY_ROLE_TYPE                        V3RoleCode_Value = 219
	V3RoleCode_CLAIMANT_COVERED_PARTY_ROLE_TYPE               V3RoleCode_Value = 220
	V3RoleCode_CRIMEVIC                                       V3RoleCode_Value = 221
	V3RoleCode_INJWKR                                         V3RoleCode_Value = 222
	V3RoleCode_DEPENDENT_COVERED_PARTY_ROLE_TYPE              V3RoleCode_Value = 223
	V3RoleCode_COCBEN                                         V3RoleCode_Value = 224
	V3RoleCode_DIFFABL                                        V3RoleCode_Value = 225
	V3RoleCode_WARD                                           V3RoleCode_Value = 226
	V3RoleCode_INDIVIDUAL_INSURED_PARTY_ROLE_TYPE             V3RoleCode_Value = 227
	V3RoleCode_RETIREE                                        V3RoleCode_Value = 228
	V3RoleCode_PROGRAM_ELIGIBLE_PARTY_ROLE_TYPE               V3RoleCode_Value = 229
	V3RoleCode_INDIG                                          V3RoleCode_Value = 230
	V3RoleCode_MIL                                            V3RoleCode_Value = 231
	V3RoleCode_ACTMIL                                         V3RoleCode_Value = 232
	V3RoleCode_RETMIL                                         V3RoleCode_Value = 233
	V3RoleCode_VET                                            V3RoleCode_Value = 234
	V3RoleCode_SUBSCRIBER_COVERED_PARTY_ROLE_TYPE             V3RoleCode_Value = 235
	V3RoleCode_RESEARCH_SUBJECT_ROLE_BASIS                    V3RoleCode_Value = 236
	V3RoleCode_ERL                                            V3RoleCode_Value = 237
	V3RoleCode_SCN                                            V3RoleCode_Value = 238
	V3RoleCode_SERVICE_DELIVERY_LOCATION_ROLE_TYPE            V3RoleCode_Value = 239
	V3RoleCode_DEDICATED_SERVICE_DELIVERY_LOCATION_ROLE_TYPE  V3RoleCode_Value = 240
	V3RoleCode_DEDICATED_CLINICAL_LOCATION_ROLE_TYPE          V3RoleCode_Value = 241
	V3RoleCode_DX                                             V3RoleCode_Value = 242
	V3RoleCode_CVDX                                           V3RoleCode_Value = 243
	V3RoleCode_CATH                                           V3RoleCode_Value = 244
	V3RoleCode_ECHO                                           V3RoleCode_Value = 245
	V3RoleCode_GIDX                                           V3RoleCode_Value = 246
	V3RoleCode_ENDOS                                          V3RoleCode_Value = 247
	V3RoleCode_RADDX                                          V3RoleCode_Value = 248
	V3RoleCode_RADO                                           V3RoleCode_Value = 249
	V3RoleCode_RNEU                                           V3RoleCode_Value = 250
	V3RoleCode_HOSP                                           V3RoleCode_Value = 251
	V3RoleCode_CHR                                            V3RoleCode_Value = 252
	V3RoleCode_GACH                                           V3RoleCode_Value = 253
	V3RoleCode_MHSP                                           V3RoleCode_Value = 254
	V3RoleCode_PSYCHF                                         V3RoleCode_Value = 255
	V3RoleCode_RH                                             V3RoleCode_Value = 256
	V3RoleCode_RHAT                                           V3RoleCode_Value = 257
	V3RoleCode_RHII                                           V3RoleCode_Value = 258
	V3RoleCode_RHMAD                                          V3RoleCode_Value = 259
	V3RoleCode_RHPI                                           V3RoleCode_Value = 260
	V3RoleCode_RHPIH                                          V3RoleCode_Value = 261
	V3RoleCode_RHPIMS                                         V3RoleCode_Value = 262
	V3RoleCode_RHPIVS                                         V3RoleCode_Value = 263
	V3RoleCode_RHYAD                                          V3RoleCode_Value = 264
	V3RoleCode_HU                                             V3RoleCode_Value = 265
	V3RoleCode_BMTU                                           V3RoleCode_Value = 266
	V3RoleCode_CCU                                            V3RoleCode_Value = 267
	V3RoleCode_CHEST                                          V3RoleCode_Value = 268
	V3RoleCode_EPIL                                           V3RoleCode_Value = 269
	V3RoleCode_ER                                             V3RoleCode_Value = 270
	V3RoleCode_ETU                                            V3RoleCode_Value = 271
	V3RoleCode_HD                                             V3RoleCode_Value = 272
	V3RoleCode_HLAB                                           V3RoleCode_Value = 273
	V3RoleCode_INLAB                                          V3RoleCode_Value = 274
	V3RoleCode_OUTLAB                                         V3RoleCode_Value = 275
	V3RoleCode_HRAD                                           V3RoleCode_Value = 276
	V3RoleCode_HUSCS                                          V3RoleCode_Value = 277
	V3RoleCode_ICU                                            V3RoleCode_Value = 278
	V3RoleCode_PEDICU                                         V3RoleCode_Value = 279
	V3RoleCode_PEDNICU                                        V3RoleCode_Value = 280
	V3RoleCode_INPHARM                                        V3RoleCode_Value = 281
	V3RoleCode_MBL                                            V3RoleCode_Value = 282
	V3RoleCode_NCCS                                           V3RoleCode_Value = 283
	V3RoleCode_NS                                             V3RoleCode_Value = 284
	V3RoleCode_OUTPHARM                                       V3RoleCode_Value = 285
	V3RoleCode_PEDU                                           V3RoleCode_Value = 286
	V3RoleCode_PHU                                            V3RoleCode_Value = 287
	V3RoleCode_RHU                                            V3RoleCode_Value = 288
	V3RoleCode_SLEEP                                          V3RoleCode_Value = 289
	V3RoleCode_NCCF                                           V3RoleCode_Value = 290
	V3RoleCode_SNF                                            V3RoleCode_Value = 291
	V3RoleCode_OF                                             V3RoleCode_Value = 292
	V3RoleCode_ALL                                            V3RoleCode_Value = 293
	V3RoleCode_AMPUT                                          V3RoleCode_Value = 294
	V3RoleCode_BMTC                                           V3RoleCode_Value = 295
	V3RoleCode_BREAST                                         V3RoleCode_Value = 296
	V3RoleCode_CANC                                           V3RoleCode_Value = 297
	V3RoleCode_CAPC                                           V3RoleCode_Value = 298
	V3RoleCode_CARD                                           V3RoleCode_Value = 299
	V3RoleCode_PEDCARD                                        V3RoleCode_Value = 300
	V3RoleCode_COAG                                           V3RoleCode_Value = 301
	V3RoleCode_CRS                                            V3RoleCode_Value = 302
	V3RoleCode_DERM                                           V3RoleCode_Value = 303
	V3RoleCode_ENDO                                           V3RoleCode_Value = 304
	V3RoleCode_PEDE                                           V3RoleCode_Value = 305
	V3RoleCode_ENT                                            V3RoleCode_Value = 306
	V3RoleCode_FMC                                            V3RoleCode_Value = 307
	V3RoleCode_GI                                             V3RoleCode_Value = 308
	V3RoleCode_PEDGI                                          V3RoleCode_Value = 309
	V3RoleCode_GIM                                            V3RoleCode_Value = 310
	V3RoleCode_GYN                                            V3RoleCode_Value = 311
	V3RoleCode_HEM                                            V3RoleCode_Value = 312
	V3RoleCode_PEDHEM                                         V3RoleCode_Value = 313
	V3RoleCode_HTN                                            V3RoleCode_Value = 314
	V3RoleCode_IEC                                            V3RoleCode_Value = 315
	V3RoleCode_INFD                                           V3RoleCode_Value = 316
	V3RoleCode_PEDID                                          V3RoleCode_Value = 317
	V3RoleCode_INV                                            V3RoleCode_Value = 318
	V3RoleCode_LYMPH                                          V3RoleCode_Value = 319
	V3RoleCode_MGEN                                           V3RoleCode_Value = 320
	V3RoleCode_NEPH                                           V3RoleCode_Value = 321
	V3RoleCode_PEDNEPH                                        V3RoleCode_Value = 322
	V3RoleCode_NEUR                                           V3RoleCode_Value = 323
	V3RoleCode_OB                                             V3RoleCode_Value = 324
	V3RoleCode_OMS                                            V3RoleCode_Value = 325
	V3RoleCode_ONCL                                           V3RoleCode_Value = 326
	V3RoleCode_PEDHO                                          V3RoleCode_Value = 327
	V3RoleCode_OPH                                            V3RoleCode_Value = 328
	V3RoleCode_OPTC                                           V3RoleCode_Value = 329
	V3RoleCode_ORTHO                                          V3RoleCode_Value = 330
	V3RoleCode_HAND                                           V3RoleCode_Value = 331
	V3RoleCode_PAINCL                                         V3RoleCode_Value = 332
	V3RoleCode_PC                                             V3RoleCode_Value = 333
	V3RoleCode_PEDC                                           V3RoleCode_Value = 334
	V3RoleCode_PEDRHEUM                                       V3RoleCode_Value = 335
	V3RoleCode_POD                                            V3RoleCode_Value = 336
	V3RoleCode_PREV                                           V3RoleCode_Value = 337
	V3RoleCode_PROCTO                                         V3RoleCode_Value = 338
	V3RoleCode_PROFF                                          V3RoleCode_Value = 339
	V3RoleCode_PROS                                           V3RoleCode_Value = 340
	V3RoleCode_PSI                                            V3RoleCode_Value = 341
	V3RoleCode_PSY                                            V3RoleCode_Value = 342
	V3RoleCode_RHEUM                                          V3RoleCode_Value = 343
	V3RoleCode_SPMED                                          V3RoleCode_Value = 344
	V3RoleCode_SU                                             V3RoleCode_Value = 345
	V3RoleCode_PLS                                            V3RoleCode_Value = 346
	V3RoleCode_URO                                            V3RoleCode_Value = 347
	V3RoleCode_TR                                             V3RoleCode_Value = 348
	V3RoleCode_TRAVEL                                         V3RoleCode_Value = 349
	V3RoleCode_WND                                            V3RoleCode_Value = 350
	V3RoleCode_RTF                                            V3RoleCode_Value = 351
	V3RoleCode_PRC                                            V3RoleCode_Value = 352
	V3RoleCode_SURF                                           V3RoleCode_Value = 353
	V3RoleCode_DEDICATED_NON_CLINICAL_LOCATION_ROLE_TYPE      V3RoleCode_Value = 354
	V3RoleCode_DADDR                                          V3RoleCode_Value = 355
	V3RoleCode_MOBL                                           V3RoleCode_Value = 356
	V3RoleCode_AMB                                            V3RoleCode_Value = 357
	V3RoleCode_PHARM                                          V3RoleCode_Value = 358
	V3RoleCode_INCIDENTAL_SERVICE_DELIVERY_LOCATION_ROLE_TYPE V3RoleCode_Value = 359
	V3RoleCode_ACC                                            V3RoleCode_Value = 360
	V3RoleCode_COMM                                           V3RoleCode_Value = 361
	V3RoleCode_CSC                                            V3RoleCode_Value = 362
	V3RoleCode_PTRES                                          V3RoleCode_Value = 363
	V3RoleCode_SCHOOL                                         V3RoleCode_Value = 364
	V3RoleCode_UPC                                            V3RoleCode_Value = 365
	V3RoleCode_WORK                                           V3RoleCode_Value = 366
	V3RoleCode_SPECIMEN_ROLE_TYPE                             V3RoleCode_Value = 367
	V3RoleCode_C                                              V3RoleCode_Value = 368
	V3RoleCode_G                                              V3RoleCode_Value = 369
	V3RoleCode_L                                              V3RoleCode_Value = 370
	V3RoleCode_P                                              V3RoleCode_Value = 371
	V3RoleCode_Q                                              V3RoleCode_Value = 372
	V3RoleCode_B                                              V3RoleCode_Value = 373
	V3RoleCode_E                                              V3RoleCode_Value = 374
	V3RoleCode_F                                              V3RoleCode_Value = 375
	V3RoleCode_O                                              V3RoleCode_Value = 376
	V3RoleCode_V                                              V3RoleCode_Value = 377
	V3RoleCode_R                                              V3RoleCode_Value = 378
	V3RoleCode_CLAIM                                          V3RoleCode_Value = 379
	V3RoleCode_COMMUNITY_LABORATORY                           V3RoleCode_Value = 380
	V3RoleCode_GT                                             V3RoleCode_Value = 381
	V3RoleCode_HOME_HEALTH                                    V3RoleCode_Value = 382
	V3RoleCode_LABORATORY                                     V3RoleCode_Value = 383
	V3RoleCode_PATHOLOGIST                                    V3RoleCode_Value = 384
	V3RoleCode_PH                                             V3RoleCode_Value = 385
	V3RoleCode_PHLEBOTOMIST                                   V3RoleCode_Value = 386
	V3RoleCode_PROG                                           V3RoleCode_Value = 387
	V3RoleCode_PT                                             V3RoleCode_Value = 388
	V3RoleCode_SUBJECT                                        V3RoleCode_Value = 389
	V3RoleCode_THIRD_PARTY                                    V3RoleCode_Value = 390
	V3RoleCode_DEP                                            V3RoleCode_Value = 391
	V3RoleCode_DEPEN                                          V3RoleCode_Value = 392
	V3RoleCode_FM                                             V3RoleCode_Value = 393
	V3RoleCode_INDIV                                          V3RoleCode_Value = 394
	V3RoleCode_NAMED                                          V3RoleCode_Value = 395
	V3RoleCode_PSYCHCF                                        V3RoleCode_Value = 396
	V3RoleCode_SUBSCR                                         V3RoleCode_Value = 397
)

// Enum value maps for V3RoleCode_Value.
var (
	V3RoleCode_Value_name = map[int32]string{
		0:   "INVALID_UNINITIALIZED",
		1:   "AFFILIATION_ROLE_TYPE",
		2:   "AGENT_ROLE_TYPE",
		3:   "AMENDER",
		4:   "CLASSIFIER",
		5:   "CONSENTER",
		6:   "CONSWIT",
		7:   "COPART",
		8:   "DECLASSIFIER",
		9:   "DELEGATEE",
		10:  "DELEGATOR",
		11:  "DOWNGRDER",
		12:  "DRIVCLASSIFIER",
		13:  "GRANTEE",
		14:  "GRANTOR",
		15:  "INTPRTER",
		16:  "REVIEWER",
		17:  "VALIDATOR",
		18:  "COVERAGE_SPONSOR_ROLE_TYPE",
		19:  "FULLINS",
		20:  "SELFINS",
		21:  "PAYOR_ROLE_TYPE",
		22:  "ENROLBKR",
		23:  "TPA",
		24:  "UMO",
		25:  "RESPRSN",
		26:  "EXCEST",
		27:  "GUADLTM",
		28:  "GUARD",
		29:  "POWATT",
		30:  "DPOWATT",
		31:  "HPOWATT",
		32:  "SPOWATT",
		33:  "ASSIGNED_ROLE_TYPE",
		34:  "ASSIGNED_NON_PERSON_LIVING_SUBJECT_ROLE_TYPE",
		35:  "ASSIST",
		36:  "BIOTH",
		37:  "ANTIBIOT",
		38:  "DEBR",
		39:  "CCO",
		40:  "SEE",
		41:  "SNIFF",
		42:  "CERTIFIED_ENTITY_TYPE",
		43:  "CITIZEN_ROLE_TYPE",
		44:  "CAS",
		45:  "CASM",
		46:  "CN",
		47:  "CNRP",
		48:  "CNRPM",
		49:  "CPCA",
		50:  "CRP",
		51:  "CRPM",
		52:  "CONTACT_ROLE_TYPE",
		53:  "ADMINISTRATIVE_CONTACT_ROLE_TYPE",
		54:  "BILL",
		55:  "ORG",
		56:  "PAYOR",
		57:  "ECON",
		58:  "NOK",
		59:  "IDENTIFIED_ENTITY_TYPE",
		60:  "LOCATION_IDENTIFIED_ENTITY_ROLE_CODE",
		61:  "ACHFID",
		62:  "JURID",
		63:  "LOCHFID",
		64:  "LIVING_SUBJECT_PRODUCTION_CLASS",
		65:  "BF",
		66:  "BL",
		67:  "BR",
		68:  "CO",
		69:  "DA",
		70:  "DR",
		71:  "DU",
		72:  "FI",
		73:  "LY",
		74:  "MT",
		75:  "MU",
		76:  "PL",
		77:  "RC",
		78:  "SH",
		79:  "VL",
		80:  "WL",
		81:  "WO",
		82:  "MEDICATION_GENERALIZATION_ROLE_TYPE",
		83:  "DC",
		84:  "GD",
		85:  "GDF",
		86:  "GDS",
		87:  "GDSF",
		88:  "MGDSF",
		89:  "MEMBER_ROLE_TYPE",
		90:  "TRB",
		91:  "PERSONAL_RELATIONSHIP_ROLE_TYPE",
		92:  "FAMMEMB",
		93:  "CHILD",
		94:  "CHLDADOPT",
		95:  "DAUADOPT",
		96:  "SONADOPT",
		97:  "CHLDFOST",
		98:  "DAUFOST",
		99:  "SONFOST",
		100: "DAUC",
		101: "DAU",
		102: "STPDAU",
		103: "NCHILD",
		104: "SON",
		105: "SONC",
		106: "STPSON",
		107: "STPCHLD",
		108: "EXT",
		109: "AUNT",
		110: "MAUNT",
		111: "PAUNT",
		112: "COUSN",
		113: "MCOUSN",
		114: "PCOUSN",
		115: "GGRPRN",
		116: "GGRFTH",
		117: "MGGRFTH",
		118: "PGGRFTH",
		119: "GGRMTH",
		120: "MGGRMTH",
		121: "PGGRMTH",
		122: "MGGRPRN",
		123: "PGGRPRN",
		124: "GRNDCHILD",
		125: "GRNDDAU",
		126: "GRNDSON",
		127: "GRPRN",
		128: "GRFTH",
		129: "MGRFTH",
		130: "PGRFTH",
		131: "GRMTH",
		132: "MGRMTH",
		133: "PGRMTH",
		134: "MGRPRN",
		135: "PGRPRN",
		136: "INLAW",
		137: "CHLDINLAW",
		138: "DAUINLAW",
		139: "SONINLAW",
		140: "PRNINLAW",
		141: "FTHINLAW",
		142: "MTHINLAW",
		143: "SIBINLAW",
		144: "BROINLAW",
		145: "SISINLAW",
		146: "NIENEPH",
		147: "NEPHEW",
		148: "NIECE",
		149: "UNCLE",
		150: "MUNCLE",
		151: "PUNCLE",
		152: "PRN",
		153: "ADOPTP",
		154: "ADOPTF",
		155: "ADOPTM",
		156: "FTH",
		157: "FTHFOST",
		158: "NFTH",
		159: "NFTHF",
		160: "STPFTH",
		161: "MTH",
		162: "GESTM",
		163: "MTHFOST",
		164: "NMTH",
		165: "NMTHF",
		166: "STPMTH",
		167: "NPRN",
		168: "PRNFOST",
		169: "STPPRN",
		170: "SIB",
		171: "BRO",
		172: "HBRO",
		173: "NBRO",
		174: "TWINBRO",
		175: "FTWINBRO",
		176: "ITWINBRO",
		177: "STPBRO",
		178: "HSIB",
		179: "HSIS",
		180: "NSIB",
		181: "NSIS",
		182: "TWINSIS",
		183: "FTWINSIS",
		184: "ITWINSIS",
		185: "TWIN",
		186: "FTWIN",
		187: "ITWIN",
		188: "SIS",
		189: "STPSIS",
		190: "STPSIB",
		191: "SIGOTHR",
		192: "DOMPART",
		193: "FMRSPS",
		194: "SPS",
		195: "HUSB",
		196: "WIFE",
		197: "FRND",
		198: "NBOR",
		199: "ONESELF",
		200: "ROOM",
		201: "POLICY_OR_PROGRAM_COVERAGE_ROLE_TYPE",
		202: "COVERAGE_ROLE_TYPE",
		203: "FAMDEP",
		204: "HANDIC",
		205: "INJ",
		206: "SELF",
		207: "SPON",
		208: "STUD",
		209: "FSTUD",
		210: "PSTUD",
		211: "ADOPT",
		212: "GCHILD",
		213: "GPARNT",
		214: "NAT",
		215: "NIENE",
		216: "PARNT",
		217: "SPSE",
		218: "STEP",
		219: "COVERED_PARTY_ROLE_TYPE",
		220: "CLAIMANT_COVERED_PARTY_ROLE_TYPE",
		221: "CRIMEVIC",
		222: "INJWKR",
		223: "DEPENDENT_COVERED_PARTY_ROLE_TYPE",
		224: "COCBEN",
		225: "DIFFABL",
		226: "WARD",
		227: "INDIVIDUAL_INSURED_PARTY_ROLE_TYPE",
		228: "RETIREE",
		229: "PROGRAM_ELIGIBLE_PARTY_ROLE_TYPE",
		230: "INDIG",
		231: "MIL",
		232: "ACTMIL",
		233: "RETMIL",
		234: "VET",
		235: "SUBSCRIBER_COVERED_PARTY_ROLE_TYPE",
		236: "RESEARCH_SUBJECT_ROLE_BASIS",
		237: "ERL",
		238: "SCN",
		239: "SERVICE_DELIVERY_LOCATION_ROLE_TYPE",
		240: "DEDICATED_SERVICE_DELIVERY_LOCATION_ROLE_TYPE",
		241: "DEDICATED_CLINICAL_LOCATION_ROLE_TYPE",
		242: "DX",
		243: "CVDX",
		244: "CATH",
		245: "ECHO",
		246: "GIDX",
		247: "ENDOS",
		248: "RADDX",
		249: "RADO",
		250: "RNEU",
		251: "HOSP",
		252: "CHR",
		253: "GACH",
		254: "MHSP",
		255: "PSYCHF",
		256: "RH",
		257: "RHAT",
		258: "RHII",
		259: "RHMAD",
		260: "RHPI",
		261: "RHPIH",
		262: "RHPIMS",
		263: "RHPIVS",
		264: "RHYAD",
		265: "HU",
		266: "BMTU",
		267: "CCU",
		268: "CHEST",
		269: "EPIL",
		270: "ER",
		271: "ETU",
		272: "HD",
		273: "HLAB",
		274: "INLAB",
		275: "OUTLAB",
		276: "HRAD",
		277: "HUSCS",
		278: "ICU",
		279: "PEDICU",
		280: "PEDNICU",
		281: "INPHARM",
		282: "MBL",
		283: "NCCS",
		284: "NS",
		285: "OUTPHARM",
		286: "PEDU",
		287: "PHU",
		288: "RHU",
		289: "SLEEP",
		290: "NCCF",
		291: "SNF",
		292: "OF",
		293: "ALL",
		294: "AMPUT",
		295: "BMTC",
		296: "BREAST",
		297: "CANC",
		298: "CAPC",
		299: "CARD",
		300: "PEDCARD",
		301: "COAG",
		302: "CRS",
		303: "DERM",
		304: "ENDO",
		305: "PEDE",
		306: "ENT",
		307: "FMC",
		308: "GI",
		309: "PEDGI",
		310: "GIM",
		311: "GYN",
		312: "HEM",
		313: "PEDHEM",
		314: "HTN",
		315: "IEC",
		316: "INFD",
		317: "PEDID",
		318: "INV",
		319: "LYMPH",
		320: "MGEN",
		321: "NEPH",
		322: "PEDNEPH",
		323: "NEUR",
		324: "OB",
		325: "OMS",
		326: "ONCL",
		327: "PEDHO",
		328: "OPH",
		329: "OPTC",
		330: "ORTHO",
		331: "HAND",
		332: "PAINCL",
		333: "PC",
		334: "PEDC",
		335: "PEDRHEUM",
		336: "POD",
		337: "PREV",
		338: "PROCTO",
		339: "PROFF",
		340: "PROS",
		341: "PSI",
		342: "PSY",
		343: "RHEUM",
		344: "SPMED",
		345: "SU",
		346: "PLS",
		347: "URO",
		348: "TR",
		349: "TRAVEL",
		350: "WND",
		351: "RTF",
		352: "PRC",
		353: "SURF",
		354: "DEDICATED_NON_CLINICAL_LOCATION_ROLE_TYPE",
		355: "DADDR",
		356: "MOBL",
		357: "AMB",
		358: "PHARM",
		359: "INCIDENTAL_SERVICE_DELIVERY_LOCATION_ROLE_TYPE",
		360: "ACC",
		361: "COMM",
		362: "CSC",
		363: "PTRES",
		364: "SCHOOL",
		365: "UPC",
		366: "WORK",
		367: "SPECIMEN_ROLE_TYPE",
		368: "C",
		369: "G",
		370: "L",
		371: "P",
		372: "Q",
		373: "B",
		374: "E",
		375: "F",
		376: "O",
		377: "V",
		378: "R",
		379: "CLAIM",
		380: "COMMUNITY_LABORATORY",
		381: "GT",
		382: "HOME_HEALTH",
		383: "LABORATORY",
		384: "PATHOLOGIST",
		385: "PH",
		386: "PHLEBOTOMIST",
		387: "PROG",
		388: "PT",
		389: "SUBJECT",
		390: "THIRD_PARTY",
		391: "DEP",
		392: "DEPEN",
		393: "FM",
		394: "INDIV",
		395: "NAMED",
		396: "PSYCHCF",
		397: "SUBSCR",
	}
	V3RoleCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED":      0,
		"AFFILIATION_ROLE_TYPE":      1,
		"AGENT_ROLE_TYPE":            2,
		"AMENDER":                    3,
		"CLASSIFIER":                 4,
		"CONSENTER":                  5,
		"CONSWIT":                    6,
		"COPART":                     7,
		"DECLASSIFIER":               8,
		"DELEGATEE":                  9,
		"DELEGATOR":                  10,
		"DOWNGRDER":                  11,
		"DRIVCLASSIFIER":             12,
		"GRANTEE":                    13,
		"GRANTOR":                    14,
		"INTPRTER":                   15,
		"REVIEWER":                   16,
		"VALIDATOR":                  17,
		"COVERAGE_SPONSOR_ROLE_TYPE": 18,
		"FULLINS":                    19,
		"SELFINS":                    20,
		"PAYOR_ROLE_TYPE":            21,
		"ENROLBKR":                   22,
		"TPA":                        23,
		"UMO":                        24,
		"RESPRSN":                    25,
		"EXCEST":                     26,
		"GUADLTM":                    27,
		"GUARD":                      28,
		"POWATT":                     29,
		"DPOWATT":                    30,
		"HPOWATT":                    31,
		"SPOWATT":                    32,
		"ASSIGNED_ROLE_TYPE":         33,
		"ASSIGNED_NON_PERSON_LIVING_SUBJECT_ROLE_TYPE": 34,
		"ASSIST":                               35,
		"BIOTH":                                36,
		"ANTIBIOT":                             37,
		"DEBR":                                 38,
		"CCO":                                  39,
		"SEE":                                  40,
		"SNIFF":                                41,
		"CERTIFIED_ENTITY_TYPE":                42,
		"CITIZEN_ROLE_TYPE":                    43,
		"CAS":                                  44,
		"CASM":                                 45,
		"CN":                                   46,
		"CNRP":                                 47,
		"CNRPM":                                48,
		"CPCA":                                 49,
		"CRP":                                  50,
		"CRPM":                                 51,
		"CONTACT_ROLE_TYPE":                    52,
		"ADMINISTRATIVE_CONTACT_ROLE_TYPE":     53,
		"BILL":                                 54,
		"ORG":                                  55,
		"PAYOR":                                56,
		"ECON":                                 57,
		"NOK":                                  58,
		"IDENTIFIED_ENTITY_TYPE":               59,
		"LOCATION_IDENTIFIED_ENTITY_ROLE_CODE": 60,
		"ACHFID":                               61,
		"JURID":                                62,
		"LOCHFID":                              63,
		"LIVING_SUBJECT_PRODUCTION_CLASS":      64,
		"BF":                                   65,
		"BL":                                   66,
		"BR":                                   67,
		"CO":                                   68,
		"DA":                                   69,
		"DR":                                   70,
		"DU":                                   71,
		"FI":                                   72,
		"LY":                                   73,
		"MT":                                   74,
		"MU":                                   75,
		"PL":                                   76,
		"RC":                                   77,
		"SH":                                   78,
		"VL":                                   79,
		"WL":                                   80,
		"WO":                                   81,
		"MEDICATION_GENERALIZATION_ROLE_TYPE":  82,
		"DC":                                   83,
		"GD":                                   84,
		"GDF":                                  85,
		"GDS":                                  86,
		"GDSF":                                 87,
		"MGDSF":                                88,
		"MEMBER_ROLE_TYPE":                     89,
		"TRB":                                  90,
		"PERSONAL_RELATIONSHIP_ROLE_TYPE":      91,
		"FAMMEMB":                              92,
		"CHILD":                                93,
		"CHLDADOPT":                            94,
		"DAUADOPT":                             95,
		"SONADOPT":                             96,
		"CHLDFOST":                             97,
		"DAUFOST":                              98,
		"SONFOST":                              99,
		"DAUC":                                 100,
		"DAU":                                  101,
		"STPDAU":                               102,
		"NCHILD":                               103,
		"SON":                                  104,
		"SONC":                                 105,
		"STPSON":                               106,
		"STPCHLD":                              107,
		"EXT":                                  108,
		"AUNT":                                 109,
		"MAUNT":                                110,
		"PAUNT":                                111,
		"COUSN":                                112,
		"MCOUSN":                               113,
		"PCOUSN":                               114,
		"GGRPRN":                               115,
		"GGRFTH":                               116,
		"MGGRFTH":                              117,
		"PGGRFTH":                              118,
		"GGRMTH":                               119,
		"MGGRMTH":                              120,
		"PGGRMTH":                              121,
		"MGGRPRN":                              122,
		"PGGRPRN":                              123,
		"GRNDCHILD":                            124,
		"GRNDDAU":                              125,
		"GRNDSON":                              126,
		"GRPRN":                                127,
		"GRFTH":                                128,
		"MGRFTH":                               129,
		"PGRFTH":                               130,
		"GRMTH":                                131,
		"MGRMTH":                               132,
		"PGRMTH":                               133,
		"MGRPRN":                               134,
		"PGRPRN":                               135,
		"INLAW":                                136,
		"CHLDINLAW":                            137,
		"DAUINLAW":                             138,
		"SONINLAW":                             139,
		"PRNINLAW":                             140,
		"FTHINLAW":                             141,
		"MTHINLAW":                             142,
		"SIBINLAW":                             143,
		"BROINLAW":                             144,
		"SISINLAW":                             145,
		"NIENEPH":                              146,
		"NEPHEW":                               147,
		"NIECE":                                148,
		"UNCLE":                                149,
		"MUNCLE":                               150,
		"PUNCLE":                               151,
		"PRN":                                  152,
		"ADOPTP":                               153,
		"ADOPTF":                               154,
		"ADOPTM":                               155,
		"FTH":                                  156,
		"FTHFOST":                              157,
		"NFTH":                                 158,
		"NFTHF":                                159,
		"STPFTH":                               160,
		"MTH":                                  161,
		"GESTM":                                162,
		"MTHFOST":                              163,
		"NMTH":                                 164,
		"NMTHF":                                165,
		"STPMTH":                               166,
		"NPRN":                                 167,
		"PRNFOST":                              168,
		"STPPRN":                               169,
		"SIB":                                  170,
		"BRO":                                  171,
		"HBRO":                                 172,
		"NBRO":                                 173,
		"TWINBRO":                              174,
		"FTWINBRO":                             175,
		"ITWINBRO":                             176,
		"STPBRO":                               177,
		"HSIB":                                 178,
		"HSIS":                                 179,
		"NSIB":                                 180,
		"NSIS":                                 181,
		"TWINSIS":                              182,
		"FTWINSIS":                             183,
		"ITWINSIS":                             184,
		"TWIN":                                 185,
		"FTWIN":                                186,
		"ITWIN":                                187,
		"SIS":                                  188,
		"STPSIS":                               189,
		"STPSIB":                               190,
		"SIGOTHR":                              191,
		"DOMPART":                              192,
		"FMRSPS":                               193,
		"SPS":                                  194,
		"HUSB":                                 195,
		"WIFE":                                 196,
		"FRND":                                 197,
		"NBOR":                                 198,
		"ONESELF":                              199,
		"ROOM":                                 200,
		"POLICY_OR_PROGRAM_COVERAGE_ROLE_TYPE": 201,
		"COVERAGE_ROLE_TYPE":                   202,
		"FAMDEP":                               203,
		"HANDIC":                               204,
		"INJ":                                  205,
		"SELF":                                 206,
		"SPON":                                 207,
		"STUD":                                 208,
		"FSTUD":                                209,
		"PSTUD":                                210,
		"ADOPT":                                211,
		"GCHILD":                               212,
		"GPARNT":                               213,
		"NAT":                                  214,
		"NIENE":                                215,
		"PARNT":                                216,
		"SPSE":                                 217,
		"STEP":                                 218,
		"COVERED_PARTY_ROLE_TYPE":              219,
		"CLAIMANT_COVERED_PARTY_ROLE_TYPE":     220,
		"CRIMEVIC":                             221,
		"INJWKR":                               222,
		"DEPENDENT_COVERED_PARTY_ROLE_TYPE":    223,
		"COCBEN":                               224,
		"DIFFABL":                              225,
		"WARD":                                 226,
		"INDIVIDUAL_INSURED_PARTY_ROLE_TYPE":   227,
		"RETIREE":                              228,
		"PROGRAM_ELIGIBLE_PARTY_ROLE_TYPE":     229,
		"INDIG":                                230,
		"MIL":                                  231,
		"ACTMIL":                               232,
		"RETMIL":                               233,
		"VET":                                  234,
		"SUBSCRIBER_COVERED_PARTY_ROLE_TYPE":   235,
		"RESEARCH_SUBJECT_ROLE_BASIS":          236,
		"ERL":                                  237,
		"SCN":                                  238,
		"SERVICE_DELIVERY_LOCATION_ROLE_TYPE":  239,
		"DEDICATED_SERVICE_DELIVERY_LOCATION_ROLE_TYPE": 240,
		"DEDICATED_CLINICAL_LOCATION_ROLE_TYPE":         241,
		"DX":                                            242,
		"CVDX":                                          243,
		"CATH":                                          244,
		"ECHO":                                          245,
		"GIDX":                                          246,
		"ENDOS":                                         247,
		"RADDX":                                         248,
		"RADO":                                          249,
		"RNEU":                                          250,
		"HOSP":                                          251,
		"CHR":                                           252,
		"GACH":                                          253,
		"MHSP":                                          254,
		"PSYCHF":                                        255,
		"RH":                                            256,
		"RHAT":                                          257,
		"RHII":                                          258,
		"RHMAD":                                         259,
		"RHPI":                                          260,
		"RHPIH":                                         261,
		"RHPIMS":                                        262,
		"RHPIVS":                                        263,
		"RHYAD":                                         264,
		"HU":                                            265,
		"BMTU":                                          266,
		"CCU":                                           267,
		"CHEST":                                         268,
		"EPIL":                                          269,
		"ER":                                            270,
		"ETU":                                           271,
		"HD":                                            272,
		"HLAB":                                          273,
		"INLAB":                                         274,
		"OUTLAB":                                        275,
		"HRAD":                                          276,
		"HUSCS":                                         277,
		"ICU":                                           278,
		"PEDICU":                                        279,
		"PEDNICU":                                       280,
		"INPHARM":                                       281,
		"MBL":                                           282,
		"NCCS":                                          283,
		"NS":                                            284,
		"OUTPHARM":                                      285,
		"PEDU":                                          286,
		"PHU":                                           287,
		"RHU":                                           288,
		"SLEEP":                                         289,
		"NCCF":                                          290,
		"SNF":                                           291,
		"OF":                                            292,
		"ALL":                                           293,
		"AMPUT":                                         294,
		"BMTC":                                          295,
		"BREAST":                                        296,
		"CANC":                                          297,
		"CAPC":                                          298,
		"CARD":                                          299,
		"PEDCARD":                                       300,
		"COAG":                                          301,
		"CRS":                                           302,
		"DERM":                                          303,
		"ENDO":                                          304,
		"PEDE":                                          305,
		"ENT":                                           306,
		"FMC":                                           307,
		"GI":                                            308,
		"PEDGI":                                         309,
		"GIM":                                           310,
		"GYN":                                           311,
		"HEM":                                           312,
		"PEDHEM":                                        313,
		"HTN":                                           314,
		"IEC":                                           315,
		"INFD":                                          316,
		"PEDID":                                         317,
		"INV":                                           318,
		"LYMPH":                                         319,
		"MGEN":                                          320,
		"NEPH":                                          321,
		"PEDNEPH":                                       322,
		"NEUR":                                          323,
		"OB":                                            324,
		"OMS":                                           325,
		"ONCL":                                          326,
		"PEDHO":                                         327,
		"OPH":                                           328,
		"OPTC":                                          329,
		"ORTHO":                                         330,
		"HAND":                                          331,
		"PAINCL":                                        332,
		"PC":                                            333,
		"PEDC":                                          334,
		"PEDRHEUM":                                      335,
		"POD":                                           336,
		"PREV":                                          337,
		"PROCTO":                                        338,
		"PROFF":                                         339,
		"PROS":                                          340,
		"PSI":                                           341,
		"PSY":                                           342,
		"RHEUM":                                         343,
		"SPMED":                                         344,
		"SU":                                            345,
		"PLS":                                           346,
		"URO":                                           347,
		"TR":                                            348,
		"TRAVEL":                                        349,
		"WND":                                           350,
		"RTF":                                           351,
		"PRC":                                           352,
		"SURF":                                          353,
		"DEDICATED_NON_CLINICAL_LOCATION_ROLE_TYPE": 354,
		"DADDR": 355,
		"MOBL":  356,
		"AMB":   357,
		"PHARM": 358,
		"INCIDENTAL_SERVICE_DELIVERY_LOCATION_ROLE_TYPE": 359,
		"ACC":                  360,
		"COMM":                 361,
		"CSC":                  362,
		"PTRES":                363,
		"SCHOOL":               364,
		"UPC":                  365,
		"WORK":                 366,
		"SPECIMEN_ROLE_TYPE":   367,
		"C":                    368,
		"G":                    369,
		"L":                    370,
		"P":                    371,
		"Q":                    372,
		"B":                    373,
		"E":                    374,
		"F":                    375,
		"O":                    376,
		"V":                    377,
		"R":                    378,
		"CLAIM":                379,
		"COMMUNITY_LABORATORY": 380,
		"GT":                   381,
		"HOME_HEALTH":          382,
		"LABORATORY":           383,
		"PATHOLOGIST":          384,
		"PH":                   385,
		"PHLEBOTOMIST":         386,
		"PROG":                 387,
		"PT":                   388,
		"SUBJECT":              389,
		"THIRD_PARTY":          390,
		"DEP":                  391,
		"DEPEN":                392,
		"FM":                   393,
		"INDIV":                394,
		"NAMED":                395,
		"PSYCHCF":              396,
		"SUBSCR":               397,
	}
)

func (x V3RoleCode_Value) Enum() *V3RoleCode_Value {
	p := new(V3RoleCode_Value)
	*p = x
	return p
}

func (x V3RoleCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3RoleCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[236].Descriptor()
}

func (V3RoleCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[236]
}

func (x V3RoleCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3RoleCode_Value.Descriptor instead.
func (V3RoleCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{236, 0}
}

type V3TimingEventCode_Value int32

const (
	V3TimingEventCode_INVALID_UNINITIALIZED V3TimingEventCode_Value = 0
	V3TimingEventCode_AC                    V3TimingEventCode_Value = 1
	V3TimingEventCode_ACD                   V3TimingEventCode_Value = 2
	V3TimingEventCode_ACM                   V3TimingEventCode_Value = 3
	V3TimingEventCode_ACV                   V3TimingEventCode_Value = 4
	V3TimingEventCode_C                     V3TimingEventCode_Value = 5
	V3TimingEventCode_CD                    V3TimingEventCode_Value = 6
	V3TimingEventCode_CM                    V3TimingEventCode_Value = 7
	V3TimingEventCode_CV                    V3TimingEventCode_Value = 8
	V3TimingEventCode_HS                    V3TimingEventCode_Value = 9
	V3TimingEventCode_IC                    V3TimingEventCode_Value = 10
	V3TimingEventCode_ICD                   V3TimingEventCode_Value = 11
	V3TimingEventCode_ICM                   V3TimingEventCode_Value = 12
	V3TimingEventCode_ICV                   V3TimingEventCode_Value = 13
	V3TimingEventCode_PC                    V3TimingEventCode_Value = 14
	V3TimingEventCode_PCD                   V3TimingEventCode_Value = 15
	V3TimingEventCode_PCM                   V3TimingEventCode_Value = 16
	V3TimingEventCode_PCV                   V3TimingEventCode_Value = 17
	V3TimingEventCode_WAKE                  V3TimingEventCode_Value = 18
)

// Enum value maps for V3TimingEventCode_Value.
var (
	V3TimingEventCode_Value_name = map[int32]string{
		0:  "INVALID_UNINITIALIZED",
		1:  "AC",
		2:  "ACD",
		3:  "ACM",
		4:  "ACV",
		5:  "C",
		6:  "CD",
		7:  "CM",
		8:  "CV",
		9:  "HS",
		10: "IC",
		11: "ICD",
		12: "ICM",
		13: "ICV",
		14: "PC",
		15: "PCD",
		16: "PCM",
		17: "PCV",
		18: "WAKE",
	}
	V3TimingEventCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"AC":                    1,
		"ACD":                   2,
		"ACM":                   3,
		"ACV":                   4,
		"C":                     5,
		"CD":                    6,
		"CM":                    7,
		"CV":                    8,
		"HS":                    9,
		"IC":                    10,
		"ICD":                   11,
		"ICM":                   12,
		"ICV":                   13,
		"PC":                    14,
		"PCD":                   15,
		"PCM":                   16,
		"PCV":                   17,
		"WAKE":                  18,
	}
)

func (x V3TimingEventCode_Value) Enum() *V3TimingEventCode_Value {
	p := new(V3TimingEventCode_Value)
	*p = x
	return p
}

func (x V3TimingEventCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (V3TimingEventCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[237].Descriptor()
}

func (V3TimingEventCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[237]
}

func (x V3TimingEventCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use V3TimingEventCode_Value.Descriptor instead.
func (V3TimingEventCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{237, 0}
}

type VisionBaseCode_Value int32

const (
	VisionBaseCode_INVALID_UNINITIALIZED VisionBaseCode_Value = 0
	VisionBaseCode_UP                    VisionBaseCode_Value = 1
	VisionBaseCode_DOWN                  VisionBaseCode_Value = 2
	VisionBaseCode_IN                    VisionBaseCode_Value = 3
	VisionBaseCode_OUT                   VisionBaseCode_Value = 4
)

// Enum value maps for VisionBaseCode_Value.
var (
	VisionBaseCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "UP",
		2: "DOWN",
		3: "IN",
		4: "OUT",
	}
	VisionBaseCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"UP":                    1,
		"DOWN":                  2,
		"IN":                    3,
		"OUT":                   4,
	}
)

func (x VisionBaseCode_Value) Enum() *VisionBaseCode_Value {
	p := new(VisionBaseCode_Value)
	*p = x
	return p
}

func (x VisionBaseCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisionBaseCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[238].Descriptor()
}

func (VisionBaseCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[238]
}

func (x VisionBaseCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisionBaseCode_Value.Descriptor instead.
func (VisionBaseCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{238, 0}
}

type VisionEyesCode_Value int32

const (
	VisionEyesCode_INVALID_UNINITIALIZED VisionEyesCode_Value = 0
	VisionEyesCode_RIGHT                 VisionEyesCode_Value = 1
	VisionEyesCode_LEFT                  VisionEyesCode_Value = 2
)

// Enum value maps for VisionEyesCode_Value.
var (
	VisionEyesCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "RIGHT",
		2: "LEFT",
	}
	VisionEyesCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"RIGHT":                 1,
		"LEFT":                  2,
	}
)

func (x VisionEyesCode_Value) Enum() *VisionEyesCode_Value {
	p := new(VisionEyesCode_Value)
	*p = x
	return p
}

func (x VisionEyesCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VisionEyesCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[239].Descriptor()
}

func (VisionEyesCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[239]
}

func (x VisionEyesCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VisionEyesCode_Value.Descriptor instead.
func (VisionEyesCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{239, 0}
}

type XPathUsageTypeCode_Value int32

const (
	XPathUsageTypeCode_INVALID_UNINITIALIZED XPathUsageTypeCode_Value = 0
	XPathUsageTypeCode_NORMAL                XPathUsageTypeCode_Value = 1
	XPathUsageTypeCode_PHONETIC              XPathUsageTypeCode_Value = 2
	XPathUsageTypeCode_NEARBY                XPathUsageTypeCode_Value = 3
	XPathUsageTypeCode_DISTANCE              XPathUsageTypeCode_Value = 4
	XPathUsageTypeCode_OTHER                 XPathUsageTypeCode_Value = 5
)

// Enum value maps for XPathUsageTypeCode_Value.
var (
	XPathUsageTypeCode_Value_name = map[int32]string{
		0: "INVALID_UNINITIALIZED",
		1: "NORMAL",
		2: "PHONETIC",
		3: "NEARBY",
		4: "DISTANCE",
		5: "OTHER",
	}
	XPathUsageTypeCode_Value_value = map[string]int32{
		"INVALID_UNINITIALIZED": 0,
		"NORMAL":                1,
		"PHONETIC":              2,
		"NEARBY":                3,
		"DISTANCE":              4,
		"OTHER":                 5,
	}
)

func (x XPathUsageTypeCode_Value) Enum() *XPathUsageTypeCode_Value {
	p := new(XPathUsageTypeCode_Value)
	*p = x
	return p
}

func (x XPathUsageTypeCode_Value) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XPathUsageTypeCode_Value) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[240].Descriptor()
}

func (XPathUsageTypeCode_Value) Type() protoreflect.EnumType {
	return &file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes[240]
}

func (x XPathUsageTypeCode_Value) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XPathUsageTypeCode_Value.Descriptor instead.
func (XPathUsageTypeCode_Value) EnumDescriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{240, 0}
}

// A list of the base types defined by this version of the FHIR specification -
// types that are defined, but for which only specializations actually are
// created. See http://hl7.org/fhir/abstract-types
type AbstractTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbstractTypeCode) Reset() {
	*x = AbstractTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractTypeCode) ProtoMessage() {}

func (x *AbstractTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractTypeCode.ProtoReflect.Descriptor instead.
func (*AbstractTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{0}
}

// Indicates whether the account is available to be used.
// See http://hl7.org/fhir/account-status
type AccountStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccountStatusCode) Reset() {
	*x = AccountStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountStatusCode) ProtoMessage() {}

func (x *AccountStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountStatusCode.ProtoReflect.Descriptor instead.
func (*AccountStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{1}
}

// Defines behavior for an action or a group for how many times that item may be
// repeated. See http://hl7.org/fhir/action-cardinality-behavior
type ActionCardinalityBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionCardinalityBehaviorCode) Reset() {
	*x = ActionCardinalityBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionCardinalityBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionCardinalityBehaviorCode) ProtoMessage() {}

func (x *ActionCardinalityBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionCardinalityBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionCardinalityBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{2}
}

// Defines the kinds of conditions that can appear on actions.
// See http://hl7.org/fhir/action-condition-kind
type ActionConditionKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionConditionKindCode) Reset() {
	*x = ActionConditionKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionConditionKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionConditionKindCode) ProtoMessage() {}

func (x *ActionConditionKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionConditionKindCode.ProtoReflect.Descriptor instead.
func (*ActionConditionKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{3}
}

// Defines organization behavior of a group.
// See http://hl7.org/fhir/action-grouping-behavior
type ActionGroupingBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionGroupingBehaviorCode) Reset() {
	*x = ActionGroupingBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionGroupingBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionGroupingBehaviorCode) ProtoMessage() {}

func (x *ActionGroupingBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionGroupingBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionGroupingBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{4}
}

// The type of participant for the action.
// See http://hl7.org/fhir/action-participant-type
type ActionParticipantTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionParticipantTypeCode) Reset() {
	*x = ActionParticipantTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionParticipantTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionParticipantTypeCode) ProtoMessage() {}

func (x *ActionParticipantTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionParticipantTypeCode.ProtoReflect.Descriptor instead.
func (*ActionParticipantTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{5}
}

// Defines selection frequency behavior for an action or group.
// See http://hl7.org/fhir/action-precheck-behavior
type ActionPrecheckBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionPrecheckBehaviorCode) Reset() {
	*x = ActionPrecheckBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPrecheckBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPrecheckBehaviorCode) ProtoMessage() {}

func (x *ActionPrecheckBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPrecheckBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionPrecheckBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{6}
}

// Defines the types of relationships between actions.
// See http://hl7.org/fhir/action-relationship-type
type ActionRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionRelationshipTypeCode) Reset() {
	*x = ActionRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRelationshipTypeCode) ProtoMessage() {}

func (x *ActionRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*ActionRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{7}
}

// Defines expectations around whether an action or action group is required.
// See http://hl7.org/fhir/action-required-behavior
type ActionRequiredBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionRequiredBehaviorCode) Reset() {
	*x = ActionRequiredBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequiredBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequiredBehaviorCode) ProtoMessage() {}

func (x *ActionRequiredBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequiredBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionRequiredBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{8}
}

// Defines selection behavior of a group.
// See http://hl7.org/fhir/action-selection-behavior
type ActionSelectionBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ActionSelectionBehaviorCode) Reset() {
	*x = ActionSelectionBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSelectionBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSelectionBehaviorCode) ProtoMessage() {}

func (x *ActionSelectionBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSelectionBehaviorCode.ProtoReflect.Descriptor instead.
func (*ActionSelectionBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{9}
}

// The type of an address (physical / postal).
// See http://hl7.org/fhir/address-type
type AddressTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddressTypeCode) Reset() {
	*x = AddressTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressTypeCode) ProtoMessage() {}

func (x *AddressTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressTypeCode.ProtoReflect.Descriptor instead.
func (*AddressTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{10}
}

// The use of an address.
// See http://hl7.org/fhir/address-use
type AddressUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddressUseCode) Reset() {
	*x = AddressUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressUseCode) ProtoMessage() {}

func (x *AddressUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressUseCode.ProtoReflect.Descriptor instead.
func (*AddressUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{11}
}

// The gender of a person used for administrative purposes.
// See http://hl7.org/fhir/administrative-gender
type AdministrativeGenderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdministrativeGenderCode) Reset() {
	*x = AdministrativeGenderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdministrativeGenderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdministrativeGenderCode) ProtoMessage() {}

func (x *AdministrativeGenderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdministrativeGenderCode.ProtoReflect.Descriptor instead.
func (*AdministrativeGenderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{12}
}

// Overall nature of the adverse event, e.g. real or potential.
// See http://hl7.org/fhir/adverse-event-actuality
type AdverseEventActualityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdverseEventActualityCode) Reset() {
	*x = AdverseEventActualityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventActualityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventActualityCode) ProtoMessage() {}

func (x *AdverseEventActualityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventActualityCode.ProtoReflect.Descriptor instead.
func (*AdverseEventActualityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{13}
}

// TODO (and should this be required?).
// See http://terminology.hl7.org/CodeSystem/adverse-event-outcome
type AdverseEventOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdverseEventOutcomeCode) Reset() {
	*x = AdverseEventOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventOutcomeCode) ProtoMessage() {}

func (x *AdverseEventOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventOutcomeCode.ProtoReflect.Descriptor instead.
func (*AdverseEventOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{14}
}

// The severity of the adverse event itself, in direct relation to the subject.
// See http://terminology.hl7.org/CodeSystem/adverse-event-severity
type AdverseEventSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AdverseEventSeverityCode) Reset() {
	*x = AdverseEventSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdverseEventSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdverseEventSeverityCode) ProtoMessage() {}

func (x *AdverseEventSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdverseEventSeverityCode.ProtoReflect.Descriptor instead.
func (*AdverseEventSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{15}
}

// How resource references can be aggregated.
// See http://hl7.org/fhir/resource-aggregation-mode
type AggregationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AggregationModeCode) Reset() {
	*x = AggregationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregationModeCode) ProtoMessage() {}

func (x *AggregationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregationModeCode.ProtoReflect.Descriptor instead.
func (*AggregationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{16}
}

// Category of an identified substance associated with allergies or
// intolerances. See http://hl7.org/fhir/allergy-intolerance-category
type AllergyIntoleranceCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceCategoryCode) Reset() {
	*x = AllergyIntoleranceCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCategoryCode) ProtoMessage() {}

func (x *AllergyIntoleranceCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCategoryCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{17}
}

// Preferred value set for AllergyIntolerance Clinical Status.
// See http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical
type AllergyIntoleranceClinicalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceClinicalStatusCode) Reset() {
	*x = AllergyIntoleranceClinicalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceClinicalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceClinicalStatusCode) ProtoMessage() {}

func (x *AllergyIntoleranceClinicalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceClinicalStatusCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceClinicalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{18}
}

// Estimate of the potential clinical harm, or seriousness, of a reaction to an
// identified substance. See http://hl7.org/fhir/allergy-intolerance-criticality
type AllergyIntoleranceCriticalityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceCriticalityCode) Reset() {
	*x = AllergyIntoleranceCriticalityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceCriticalityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceCriticalityCode) ProtoMessage() {}

func (x *AllergyIntoleranceCriticalityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceCriticalityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceCriticalityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{19}
}

// Clinical assessment of the severity of a reaction event as a whole,
// potentially considering multiple different manifestations. See
// http://hl7.org/fhir/reaction-event-severity
type AllergyIntoleranceSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceSeverityCode) Reset() {
	*x = AllergyIntoleranceSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceSeverityCode) ProtoMessage() {}

func (x *AllergyIntoleranceSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceSeverityCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{20}
}

// The risk of an adverse reaction (allergy or intolerance) for this patient
// upon exposure to the substance (including pharmaceutical products). See
// http://terminology.hl7.org/CodeSystem/allerg-intol-substance-exp-risk
type AllergyIntoleranceSubstanceExposureRiskCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceSubstanceExposureRiskCode) Reset() {
	*x = AllergyIntoleranceSubstanceExposureRiskCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceSubstanceExposureRiskCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceSubstanceExposureRiskCode) ProtoMessage() {}

func (x *AllergyIntoleranceSubstanceExposureRiskCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceSubstanceExposureRiskCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceSubstanceExposureRiskCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{21}
}

// Identification of the underlying physiological mechanism for a Reaction Risk.
// See http://hl7.org/fhir/allergy-intolerance-type
type AllergyIntoleranceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceTypeCode) Reset() {
	*x = AllergyIntoleranceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceTypeCode) ProtoMessage() {}

func (x *AllergyIntoleranceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceTypeCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{22}
}

// Preferred value set for AllergyIntolerance Verification Status.
// See http://terminology.hl7.org/CodeSystem/allergyintolerance-verification
type AllergyIntoleranceVerificationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AllergyIntoleranceVerificationStatusCode) Reset() {
	*x = AllergyIntoleranceVerificationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllergyIntoleranceVerificationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllergyIntoleranceVerificationStatusCode) ProtoMessage() {}

func (x *AllergyIntoleranceVerificationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllergyIntoleranceVerificationStatusCode.ProtoReflect.Descriptor instead.
func (*AllergyIntoleranceVerificationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{23}
}

// The free/busy status of an appointment.
// See http://hl7.org/fhir/appointmentstatus
type AppointmentStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AppointmentStatusCode) Reset() {
	*x = AppointmentStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentStatusCode) ProtoMessage() {}

func (x *AppointmentStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentStatusCode.ProtoReflect.Descriptor instead.
func (*AppointmentStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{24}
}

// The type of direction to use for assertion.
// See http://hl7.org/fhir/assert-direction-codes
type AssertionDirectionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssertionDirectionTypeCode) Reset() {
	*x = AssertionDirectionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionDirectionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionDirectionTypeCode) ProtoMessage() {}

func (x *AssertionDirectionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionDirectionTypeCode.ProtoReflect.Descriptor instead.
func (*AssertionDirectionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{25}
}

// The type of operator to use for assertion.
// See http://hl7.org/fhir/assert-operator-codes
type AssertionOperatorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssertionOperatorTypeCode) Reset() {
	*x = AssertionOperatorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionOperatorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionOperatorTypeCode) ProtoMessage() {}

func (x *AssertionOperatorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionOperatorTypeCode.ProtoReflect.Descriptor instead.
func (*AssertionOperatorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{26}
}

// The type of response code to use for assertion.
// See http://hl7.org/fhir/assert-response-code-types
type AssertionResponseTypesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssertionResponseTypesCode) Reset() {
	*x = AssertionResponseTypesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssertionResponseTypesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssertionResponseTypesCode) ProtoMessage() {}

func (x *AssertionResponseTypesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssertionResponseTypesCode.ProtoReflect.Descriptor instead.
func (*AssertionResponseTypesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{27}
}

// Indicator for type of action performed during the event that generated the
// event. See http://hl7.org/fhir/audit-event-action
type AuditEventActionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuditEventActionCode) Reset() {
	*x = AuditEventActionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventActionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventActionCode) ProtoMessage() {}

func (x *AuditEventActionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventActionCode.ProtoReflect.Descriptor instead.
func (*AuditEventActionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{28}
}

// The type of network access point of this agent in the audit event.
// See http://hl7.org/fhir/network-type
type AuditEventAgentNetworkTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuditEventAgentNetworkTypeCode) Reset() {
	*x = AuditEventAgentNetworkTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventAgentNetworkTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventAgentNetworkTypeCode) ProtoMessage() {}

func (x *AuditEventAgentNetworkTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventAgentNetworkTypeCode.ProtoReflect.Descriptor instead.
func (*AuditEventAgentNetworkTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{29}
}

// Indicates whether the event succeeded or failed.
// See http://hl7.org/fhir/audit-event-outcome
type AuditEventOutcomeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AuditEventOutcomeCode) Reset() {
	*x = AuditEventOutcomeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditEventOutcomeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditEventOutcomeCode) ProtoMessage() {}

func (x *AuditEventOutcomeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditEventOutcomeCode.ProtoReflect.Descriptor instead.
func (*AuditEventOutcomeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{30}
}

// Whether the cost applies to in-network or out-of-network providers.
// See http://terminology.hl7.org/CodeSystem/applicability
type BenefitCostApplicabilityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BenefitCostApplicabilityCode) Reset() {
	*x = BenefitCostApplicabilityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenefitCostApplicabilityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenefitCostApplicabilityCode) ProtoMessage() {}

func (x *BenefitCostApplicabilityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenefitCostApplicabilityCode.ProtoReflect.Descriptor instead.
func (*BenefitCostApplicabilityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{31}
}

// Indication of the degree of conformance expectations associated with a
// binding. See http://hl7.org/fhir/binding-strength
type BindingStrengthCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BindingStrengthCode) Reset() {
	*x = BindingStrengthCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindingStrengthCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingStrengthCode) ProtoMessage() {}

func (x *BindingStrengthCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingStrengthCode.ProtoReflect.Descriptor instead.
func (*BindingStrengthCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{32}
}

// Biologically Derived Product Category.
// See http://hl7.org/fhir/product-category
type BiologicallyDerivedProductCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BiologicallyDerivedProductCategoryCode) Reset() {
	*x = BiologicallyDerivedProductCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiologicallyDerivedProductCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiologicallyDerivedProductCategoryCode) ProtoMessage() {}

func (x *BiologicallyDerivedProductCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiologicallyDerivedProductCategoryCode.ProtoReflect.Descriptor instead.
func (*BiologicallyDerivedProductCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{33}
}

// Biologically Derived Product Status.
// See http://hl7.org/fhir/product-status
type BiologicallyDerivedProductStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BiologicallyDerivedProductStatusCode) Reset() {
	*x = BiologicallyDerivedProductStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiologicallyDerivedProductStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiologicallyDerivedProductStatusCode) ProtoMessage() {}

func (x *BiologicallyDerivedProductStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiologicallyDerivedProductStatusCode.ProtoReflect.Descriptor instead.
func (*BiologicallyDerivedProductStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{34}
}

// BiologicallyDerived Product Storage Scale.
// See http://hl7.org/fhir/product-storage-scale
type BiologicallyDerivedProductStorageScaleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BiologicallyDerivedProductStorageScaleCode) Reset() {
	*x = BiologicallyDerivedProductStorageScaleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BiologicallyDerivedProductStorageScaleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BiologicallyDerivedProductStorageScaleCode) ProtoMessage() {}

func (x *BiologicallyDerivedProductStorageScaleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BiologicallyDerivedProductStorageScaleCode.ProtoReflect.Descriptor instead.
func (*BiologicallyDerivedProductStorageScaleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{35}
}

// Indicates the purpose of a bundle - how it is intended to be used.
// See http://hl7.org/fhir/bundle-type
type BundleTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BundleTypeCode) Reset() {
	*x = BundleTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BundleTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BundleTypeCode) ProtoMessage() {}

func (x *BundleTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BundleTypeCode.ProtoReflect.Descriptor instead.
func (*BundleTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{36}
}

// The master set of status codes used throughout FHIR. All status codes are
// mapped to one of these codes. See http://hl7.org/fhir/resource-status
type CanonicalStatusCodesForFHIRResourcesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CanonicalStatusCodesForFHIRResourcesCode) Reset() {
	*x = CanonicalStatusCodesForFHIRResourcesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CanonicalStatusCodesForFHIRResourcesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CanonicalStatusCodesForFHIRResourcesCode) ProtoMessage() {}

func (x *CanonicalStatusCodesForFHIRResourcesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CanonicalStatusCodesForFHIRResourcesCode.ProtoReflect.Descriptor instead.
func (*CanonicalStatusCodesForFHIRResourcesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{37}
}

// How a capability statement is intended to be used.
// See http://hl7.org/fhir/capability-statement-kind
type CapabilityStatementKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CapabilityStatementKindCode) Reset() {
	*x = CapabilityStatementKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CapabilityStatementKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilityStatementKindCode) ProtoMessage() {}

func (x *CapabilityStatementKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilityStatementKindCode.ProtoReflect.Descriptor instead.
func (*CapabilityStatementKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{38}
}

// Codes that reflect the current state of a care plan activity within its
// overall life cycle. See http://hl7.org/fhir/care-plan-activity-status
type CarePlanActivityStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CarePlanActivityStatusCode) Reset() {
	*x = CarePlanActivityStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CarePlanActivityStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CarePlanActivityStatusCode) ProtoMessage() {}

func (x *CarePlanActivityStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CarePlanActivityStatusCode.ProtoReflect.Descriptor instead.
func (*CarePlanActivityStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{39}
}

// Indicates the status of the care team.
// See http://hl7.org/fhir/care-team-status
type CareTeamStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CareTeamStatusCode) Reset() {
	*x = CareTeamStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CareTeamStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CareTeamStatusCode) ProtoMessage() {}

func (x *CareTeamStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CareTeamStatusCode.ProtoReflect.Descriptor instead.
func (*CareTeamStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{40}
}

// The type of relations between entries.
// See http://hl7.org/fhir/relation-type
type CatalogEntryRelationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CatalogEntryRelationTypeCode) Reset() {
	*x = CatalogEntryRelationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalogEntryRelationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalogEntryRelationTypeCode) ProtoMessage() {}

func (x *CatalogEntryRelationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalogEntryRelationTypeCode.ProtoReflect.Descriptor instead.
func (*CatalogEntryRelationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{41}
}

// Codes identifying the lifecycle stage of a ChargeItem.
// See http://hl7.org/fhir/chargeitem-status
type ChargeItemStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChargeItemStatusCode) Reset() {
	*x = ChargeItemStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargeItemStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargeItemStatusCode) ProtoMessage() {}

func (x *ChargeItemStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargeItemStatusCode.ProtoReflect.Descriptor instead.
func (*ChargeItemStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{42}
}

// Direction in which lists of possible answers should be displayed.
// See http://terminology.hl7.org/CodeSystem/choice-list-orientation
type ChoiceListOrientationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChoiceListOrientationCode) Reset() {
	*x = ChoiceListOrientationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChoiceListOrientationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChoiceListOrientationCode) ProtoMessage() {}

func (x *ChoiceListOrientationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChoiceListOrientationCode.ProtoReflect.Descriptor instead.
func (*ChoiceListOrientationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{43}
}

// This value set includes Claim Processing Outcome codes.
// See http://hl7.org/fhir/remittance-outcome
type ClaimProcessingCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClaimProcessingCode) Reset() {
	*x = ClaimProcessingCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClaimProcessingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClaimProcessingCode) ProtoMessage() {}

func (x *ClaimProcessingCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClaimProcessingCode.ProtoReflect.Descriptor instead.
func (*ClaimProcessingCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{44}
}

// The degree to which the server supports the code search parameter on
// ValueSet, if it is supported. See http://hl7.org/fhir/code-search-support
type CodeSearchSupportCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CodeSearchSupportCode) Reset() {
	*x = CodeSearchSupportCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSearchSupportCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSearchSupportCode) ProtoMessage() {}

func (x *CodeSearchSupportCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSearchSupportCode.ProtoReflect.Descriptor instead.
func (*CodeSearchSupportCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{45}
}

// The extent of the content of the code system (the concepts and codes it
// defines) are represented in a code system resource. See
// http://hl7.org/fhir/codesystem-content-mode
type CodeSystemContentModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CodeSystemContentModeCode) Reset() {
	*x = CodeSystemContentModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemContentModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemContentModeCode) ProtoMessage() {}

func (x *CodeSystemContentModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemContentModeCode.ProtoReflect.Descriptor instead.
func (*CodeSystemContentModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{46}
}

// The meaning of the hierarchy of concepts in a code system.
// See http://hl7.org/fhir/codesystem-hierarchy-meaning
type CodeSystemHierarchyMeaningCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CodeSystemHierarchyMeaningCode) Reset() {
	*x = CodeSystemHierarchyMeaningCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeSystemHierarchyMeaningCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeSystemHierarchyMeaningCode) ProtoMessage() {}

func (x *CodeSystemHierarchyMeaningCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeSystemHierarchyMeaningCode.ProtoReflect.Descriptor instead.
func (*CodeSystemHierarchyMeaningCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{47}
}

// Which type a compartment definition describes.
// See http://hl7.org/fhir/compartment-type
type CompartmentTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompartmentTypeCode) Reset() {
	*x = CompartmentTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompartmentTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompartmentTypeCode) ProtoMessage() {}

func (x *CompartmentTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompartmentTypeCode.ProtoReflect.Descriptor instead.
func (*CompartmentTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{48}
}

// The way in which a person authenticated a composition.
// See http://hl7.org/fhir/composition-attestation-mode
type CompositionAttestationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompositionAttestationModeCode) Reset() {
	*x = CompositionAttestationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositionAttestationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionAttestationModeCode) ProtoMessage() {}

func (x *CompositionAttestationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionAttestationModeCode.ProtoReflect.Descriptor instead.
func (*CompositionAttestationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{49}
}

// The workflow/clinical status of the composition.
// See http://hl7.org/fhir/composition-status
type CompositionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompositionStatusCode) Reset() {
	*x = CompositionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositionStatusCode) ProtoMessage() {}

func (x *CompositionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositionStatusCode.ProtoReflect.Descriptor instead.
func (*CompositionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{50}
}

// The degree of equivalence between concepts.
// See http://hl7.org/fhir/concept-map-equivalence
type ConceptMapEquivalenceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConceptMapEquivalenceCode) Reset() {
	*x = ConceptMapEquivalenceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapEquivalenceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapEquivalenceCode) ProtoMessage() {}

func (x *ConceptMapEquivalenceCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapEquivalenceCode.ProtoReflect.Descriptor instead.
func (*ConceptMapEquivalenceCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{51}
}

// Defines which action to take if there is no match in the group.
// See http://hl7.org/fhir/conceptmap-unmapped-mode
type ConceptMapGroupUnmappedModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConceptMapGroupUnmappedModeCode) Reset() {
	*x = ConceptMapGroupUnmappedModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConceptMapGroupUnmappedModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConceptMapGroupUnmappedModeCode) ProtoMessage() {}

func (x *ConceptMapGroupUnmappedModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConceptMapGroupUnmappedModeCode.ProtoReflect.Descriptor instead.
func (*ConceptMapGroupUnmappedModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{52}
}

// Preferred value set for Condition Clinical Status.
// See http://terminology.hl7.org/CodeSystem/condition-clinical
type ConditionClinicalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConditionClinicalStatusCode) Reset() {
	*x = ConditionClinicalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionClinicalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionClinicalStatusCode) ProtoMessage() {}

func (x *ConditionClinicalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionClinicalStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionClinicalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{53}
}

// The verification status to support or decline the clinical status of the
// condition or diagnosis. See
// http://terminology.hl7.org/CodeSystem/condition-ver-status
type ConditionVerificationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConditionVerificationStatusCode) Reset() {
	*x = ConditionVerificationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionVerificationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionVerificationStatusCode) ProtoMessage() {}

func (x *ConditionVerificationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionVerificationStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionVerificationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{54}
}

// A code that indicates how the server supports conditional delete.
// See http://hl7.org/fhir/conditional-delete-status
type ConditionalDeleteStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConditionalDeleteStatusCode) Reset() {
	*x = ConditionalDeleteStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalDeleteStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalDeleteStatusCode) ProtoMessage() {}

func (x *ConditionalDeleteStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalDeleteStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionalDeleteStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{55}
}

// A code that indicates how the server supports conditional read.
// See http://hl7.org/fhir/conditional-read-status
type ConditionalReadStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConditionalReadStatusCode) Reset() {
	*x = ConditionalReadStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalReadStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalReadStatusCode) ProtoMessage() {}

func (x *ConditionalReadStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalReadStatusCode.ProtoReflect.Descriptor instead.
func (*ConditionalReadStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{56}
}

// Indicates the degree of adherence to a specified behavior or capability
// expected for a system to be deemed conformant with a specification. See
// http://terminology.hl7.org/CodeSystem/conformance-expectation
type ConformanceExpectationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConformanceExpectationCode) Reset() {
	*x = ConformanceExpectationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConformanceExpectationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConformanceExpectationCode) ProtoMessage() {}

func (x *ConformanceExpectationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConformanceExpectationCode.ProtoReflect.Descriptor instead.
func (*ConformanceExpectationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{57}
}

// How a resource reference is interpreted when testing consent restrictions.
// See http://hl7.org/fhir/consent-data-meaning
type ConsentDataMeaningCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsentDataMeaningCode) Reset() {
	*x = ConsentDataMeaningCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentDataMeaningCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentDataMeaningCode) ProtoMessage() {}

func (x *ConsentDataMeaningCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentDataMeaningCode.ProtoReflect.Descriptor instead.
func (*ConsentDataMeaningCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{58}
}

// How a rule statement is applied, such as adding additional consent or
// removing consent. See http://hl7.org/fhir/consent-provision-type
type ConsentProvisionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsentProvisionTypeCode) Reset() {
	*x = ConsentProvisionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentProvisionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentProvisionTypeCode) ProtoMessage() {}

func (x *ConsentProvisionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentProvisionTypeCode.ProtoReflect.Descriptor instead.
func (*ConsentProvisionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{59}
}

// Indicates the state of the consent.
// See http://hl7.org/fhir/consent-state-codes
type ConsentStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConsentStateCode) Reset() {
	*x = ConsentStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsentStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsentStateCode) ProtoMessage() {}

func (x *ConsentStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsentStateCode.ProtoReflect.Descriptor instead.
func (*ConsentStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{60}
}

// SHALL applications comply with this constraint?
// See http://hl7.org/fhir/constraint-severity
type ConstraintSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConstraintSeverityCode) Reset() {
	*x = ConstraintSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstraintSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstraintSeverityCode) ProtoMessage() {}

func (x *ConstraintSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstraintSeverityCode.ProtoReflect.Descriptor instead.
func (*ConstraintSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{61}
}

// Telecommunications form for contact point.
// See http://hl7.org/fhir/contact-point-system
type ContactPointSystemCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContactPointSystemCode) Reset() {
	*x = ContactPointSystemCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPointSystemCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPointSystemCode) ProtoMessage() {}

func (x *ContactPointSystemCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPointSystemCode.ProtoReflect.Descriptor instead.
func (*ContactPointSystemCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{62}
}

// Use of contact point.
// See http://hl7.org/fhir/contact-point-use
type ContactPointUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContactPointUseCode) Reset() {
	*x = ContactPointUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPointUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPointUseCode) ProtoMessage() {}

func (x *ContactPointUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPointUseCode.ProtoReflect.Descriptor instead.
func (*ContactPointUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{63}
}

// This value set contract specific codes for status.
// See http://hl7.org/fhir/contract-publicationstatus
type ContractResourcePublicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContractResourcePublicationStatusCode) Reset() {
	*x = ContractResourcePublicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractResourcePublicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractResourcePublicationStatusCode) ProtoMessage() {}

func (x *ContractResourcePublicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractResourcePublicationStatusCode.ProtoReflect.Descriptor instead.
func (*ContractResourcePublicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{64}
}

// This value set contract specific codes for status.
// See http://hl7.org/fhir/contract-status
type ContractResourceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContractResourceStatusCode) Reset() {
	*x = ContractResourceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractResourceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractResourceStatusCode) ProtoMessage() {}

func (x *ContractResourceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractResourceStatusCode.ProtoReflect.Descriptor instead.
func (*ContractResourceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{65}
}

// The type of contributor.
// See http://hl7.org/fhir/contributor-type
type ContributorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ContributorTypeCode) Reset() {
	*x = ContributorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContributorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContributorTypeCode) ProtoMessage() {}

func (x *ContributorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContributorTypeCode.ProtoReflect.Descriptor instead.
func (*ContributorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{66}
}

// Used to specify why the normally expected content of the data element is
// missing. See http://terminology.hl7.org/CodeSystem/data-absent-reason
type DataAbsentReasonCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataAbsentReasonCode) Reset() {
	*x = DataAbsentReasonCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAbsentReasonCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAbsentReasonCode) ProtoMessage() {}

func (x *DataAbsentReasonCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAbsentReasonCode.ProtoReflect.Descriptor instead.
func (*DataAbsentReasonCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{67}
}

// A version specific list of the data types defined by the FHIR specification
// for use as an element  type (any of the FHIR defined data types). See
// http://hl7.org/fhir/data-types
type DataTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DataTypeCode) Reset() {
	*x = DataTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataTypeCode) ProtoMessage() {}

func (x *DataTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataTypeCode.ProtoReflect.Descriptor instead.
func (*DataTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{68}
}

// The days of the week.
// See http://hl7.org/fhir/days-of-week
type DaysOfWeekCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DaysOfWeekCode) Reset() {
	*x = DaysOfWeekCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaysOfWeekCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaysOfWeekCode) ProtoMessage() {}

func (x *DaysOfWeekCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaysOfWeekCode.ProtoReflect.Descriptor instead.
func (*DaysOfWeekCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{69}
}

// Indicates the potential degree of impact of the identified issue on the
// patient. See http://hl7.org/fhir/detectedissue-severity
type DetectedIssueSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DetectedIssueSeverityCode) Reset() {
	*x = DetectedIssueSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectedIssueSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectedIssueSeverityCode) ProtoMessage() {}

func (x *DetectedIssueSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectedIssueSeverityCode.ProtoReflect.Descriptor instead.
func (*DetectedIssueSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{70}
}

// Describes the state of a metric calibration.
// See http://hl7.org/fhir/metric-calibration-state
type DeviceMetricCalibrationStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetricCalibrationStateCode) Reset() {
	*x = DeviceMetricCalibrationStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCalibrationStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCalibrationStateCode) ProtoMessage() {}

func (x *DeviceMetricCalibrationStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCalibrationStateCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCalibrationStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{71}
}

// Describes the type of a metric calibration.
// See http://hl7.org/fhir/metric-calibration-type
type DeviceMetricCalibrationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetricCalibrationTypeCode) Reset() {
	*x = DeviceMetricCalibrationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCalibrationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCalibrationTypeCode) ProtoMessage() {}

func (x *DeviceMetricCalibrationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCalibrationTypeCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCalibrationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{72}
}

// Describes the category of the metric.
// See http://hl7.org/fhir/metric-category
type DeviceMetricCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetricCategoryCode) Reset() {
	*x = DeviceMetricCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricCategoryCode) ProtoMessage() {}

func (x *DeviceMetricCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricCategoryCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{73}
}

// Describes the typical color of representation.
// See http://hl7.org/fhir/metric-color
type DeviceMetricColorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetricColorCode) Reset() {
	*x = DeviceMetricColorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricColorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricColorCode) ProtoMessage() {}

func (x *DeviceMetricColorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricColorCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricColorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{74}
}

// Describes the operational status of the DeviceMetric.
// See http://hl7.org/fhir/metric-operational-status
type DeviceMetricOperationalStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceMetricOperationalStatusCode) Reset() {
	*x = DeviceMetricOperationalStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetricOperationalStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetricOperationalStatusCode) ProtoMessage() {}

func (x *DeviceMetricOperationalStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetricOperationalStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceMetricOperationalStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{75}
}

// The type of name the device is referred by.
// See http://hl7.org/fhir/device-nametype
type DeviceNameTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceNameTypeCode) Reset() {
	*x = DeviceNameTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceNameTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceNameTypeCode) ProtoMessage() {}

func (x *DeviceNameTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceNameTypeCode.ProtoReflect.Descriptor instead.
func (*DeviceNameTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{76}
}

// A coded concept indicating the current status of the Device Usage.
// See http://hl7.org/fhir/device-statement-status
type DeviceUseStatementStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeviceUseStatementStatusCode) Reset() {
	*x = DeviceUseStatementStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceUseStatementStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceUseStatementStatusCode) ProtoMessage() {}

func (x *DeviceUseStatementStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceUseStatementStatusCode.ProtoReflect.Descriptor instead.
func (*DeviceUseStatementStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{77}
}

// The status of the diagnostic report.
// See http://hl7.org/fhir/diagnostic-report-status
type DiagnosticReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiagnosticReportStatusCode) Reset() {
	*x = DiagnosticReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiagnosticReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiagnosticReportStatusCode) ProtoMessage() {}

func (x *DiagnosticReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiagnosticReportStatusCode.ProtoReflect.Descriptor instead.
func (*DiagnosticReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{78}
}

// How an element value is interpreted when discrimination is evaluated.
// See http://hl7.org/fhir/discriminator-type
type DiscriminatorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DiscriminatorTypeCode) Reset() {
	*x = DiscriminatorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscriminatorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscriminatorTypeCode) ProtoMessage() {}

func (x *DiscriminatorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscriminatorTypeCode.ProtoReflect.Descriptor instead.
func (*DiscriminatorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{79}
}

// Whether the application produces or consumes documents.
// See http://hl7.org/fhir/document-mode
type DocumentModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DocumentModeCode) Reset() {
	*x = DocumentModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentModeCode) ProtoMessage() {}

func (x *DocumentModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentModeCode.ProtoReflect.Descriptor instead.
func (*DocumentModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{80}
}

// The status of the document reference.
// See http://hl7.org/fhir/document-reference-status
type DocumentReferenceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DocumentReferenceStatusCode) Reset() {
	*x = DocumentReferenceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentReferenceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentReferenceStatusCode) ProtoMessage() {}

func (x *DocumentReferenceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentReferenceStatusCode.ProtoReflect.Descriptor instead.
func (*DocumentReferenceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{81}
}

// The type of relationship between documents.
// See http://hl7.org/fhir/document-relationship-type
type DocumentRelationshipTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DocumentRelationshipTypeCode) Reset() {
	*x = DocumentRelationshipTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentRelationshipTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentRelationshipTypeCode) ProtoMessage() {}

func (x *DocumentRelationshipTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentRelationshipTypeCode.ProtoReflect.Descriptor instead.
func (*DocumentRelationshipTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{82}
}

// A code specifying the types of information being requested.
// See http://hl7.org/fhir/eligibilityrequest-purpose
type EligibilityRequestPurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EligibilityRequestPurposeCode) Reset() {
	*x = EligibilityRequestPurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilityRequestPurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilityRequestPurposeCode) ProtoMessage() {}

func (x *EligibilityRequestPurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilityRequestPurposeCode.ProtoReflect.Descriptor instead.
func (*EligibilityRequestPurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{83}
}

// A code specifying the types of information being requested.
// See http://hl7.org/fhir/eligibilityresponse-purpose
type EligibilityResponsePurposeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EligibilityResponsePurposeCode) Reset() {
	*x = EligibilityResponsePurposeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EligibilityResponsePurposeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EligibilityResponsePurposeCode) ProtoMessage() {}

func (x *EligibilityResponsePurposeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EligibilityResponsePurposeCode.ProtoReflect.Descriptor instead.
func (*EligibilityResponsePurposeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{84}
}

// Controls how multiple enableWhen values are interpreted -  whether all or any
// must be true. See http://hl7.org/fhir/questionnaire-enable-behavior
type EnableWhenBehaviorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EnableWhenBehaviorCode) Reset() {
	*x = EnableWhenBehaviorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableWhenBehaviorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableWhenBehaviorCode) ProtoMessage() {}

func (x *EnableWhenBehaviorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableWhenBehaviorCode.ProtoReflect.Descriptor instead.
func (*EnableWhenBehaviorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{85}
}

// The status of the location.
// See http://hl7.org/fhir/encounter-location-status
type EncounterLocationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EncounterLocationStatusCode) Reset() {
	*x = EncounterLocationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterLocationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterLocationStatusCode) ProtoMessage() {}

func (x *EncounterLocationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterLocationStatusCode.ProtoReflect.Descriptor instead.
func (*EncounterLocationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{86}
}

// Current state of the encounter.
// See http://hl7.org/fhir/encounter-status
type EncounterStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EncounterStatusCode) Reset() {
	*x = EncounterStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncounterStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncounterStatusCode) ProtoMessage() {}

func (x *EncounterStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncounterStatusCode.ProtoReflect.Descriptor instead.
func (*EncounterStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{87}
}

// The status of the endpoint.
// See http://hl7.org/fhir/endpoint-status
type EndpointStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EndpointStatusCode) Reset() {
	*x = EndpointStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndpointStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointStatusCode) ProtoMessage() {}

func (x *EndpointStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointStatusCode.ProtoReflect.Descriptor instead.
func (*EndpointStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{88}
}

// The status of the episode of care.
// See http://hl7.org/fhir/episode-of-care-status
type EpisodeOfCareStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EpisodeOfCareStatusCode) Reset() {
	*x = EpisodeOfCareStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EpisodeOfCareStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EpisodeOfCareStatusCode) ProtoMessage() {}

func (x *EpisodeOfCareStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EpisodeOfCareStatusCode.ProtoReflect.Descriptor instead.
func (*EpisodeOfCareStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{89}
}

// The mode of a message capability statement.
// See http://hl7.org/fhir/event-capability-mode
type EventCapabilityModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventCapabilityModeCode) Reset() {
	*x = EventCapabilityModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventCapabilityModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventCapabilityModeCode) ProtoMessage() {}

func (x *EventCapabilityModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventCapabilityModeCode.ProtoReflect.Descriptor instead.
func (*EventCapabilityModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{90}
}

// Codes identifying the lifecycle stage of an event.
// See http://hl7.org/fhir/event-status
type EventStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventStatusCode) Reset() {
	*x = EventStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventStatusCode) ProtoMessage() {}

func (x *EventStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventStatusCode.ProtoReflect.Descriptor instead.
func (*EventStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{91}
}

// Real world event relating to the schedule.
// See http://hl7.org/fhir/event-timing
type EventTimingCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EventTimingCode) Reset() {
	*x = EventTimingCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventTimingCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventTimingCode) ProtoMessage() {}

func (x *EventTimingCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventTimingCode.ProtoReflect.Descriptor instead.
func (*EventTimingCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{92}
}

// The possible types of variables for exposures or outcomes (E.g. Dichotomous,
// Continuous, Descriptive). See http://hl7.org/fhir/variable-type
type EvidenceVariableTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EvidenceVariableTypeCode) Reset() {
	*x = EvidenceVariableTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceVariableTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceVariableTypeCode) ProtoMessage() {}

func (x *EvidenceVariableTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceVariableTypeCode.ProtoReflect.Descriptor instead.
func (*EvidenceVariableTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{93}
}

// The type of actor - system or human.
// See http://hl7.org/fhir/examplescenario-actor-type
type ExampleScenarioActorTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExampleScenarioActorTypeCode) Reset() {
	*x = ExampleScenarioActorTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleScenarioActorTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleScenarioActorTypeCode) ProtoMessage() {}

func (x *ExampleScenarioActorTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleScenarioActorTypeCode.ProtoReflect.Descriptor instead.
func (*ExampleScenarioActorTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{94}
}

// Declares what the source of a parameter is.
// See http://terminology.hl7.org/CodeSystem/expansion-parameter-source
type ExpansionParameterSourceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExpansionParameterSourceCode) Reset() {
	*x = ExpansionParameterSourceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpansionParameterSourceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpansionParameterSourceCode) ProtoMessage() {}

func (x *ExpansionParameterSourceCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpansionParameterSourceCode.ProtoReflect.Descriptor instead.
func (*ExpansionParameterSourceCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{95}
}

// Defines how concepts are processed into the expansion when it's for UI
// presentation. See
// http://terminology.hl7.org/CodeSystem/expansion-processing-rule
type ExpansionProcessingRuleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExpansionProcessingRuleCode) Reset() {
	*x = ExpansionProcessingRuleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpansionProcessingRuleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpansionProcessingRuleCode) ProtoMessage() {}

func (x *ExpansionProcessingRuleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpansionProcessingRuleCode.ProtoReflect.Descriptor instead.
func (*ExpansionProcessingRuleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{96}
}

// A code specifying the state of the resource instance.
// See http://hl7.org/fhir/explanationofbenefit-status
type ExplanationOfBenefitStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExplanationOfBenefitStatusCode) Reset() {
	*x = ExplanationOfBenefitStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplanationOfBenefitStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplanationOfBenefitStatusCode) ProtoMessage() {}

func (x *ExplanationOfBenefitStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplanationOfBenefitStatusCode.ProtoReflect.Descriptor instead.
func (*ExplanationOfBenefitStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{97}
}

// Whether the results by exposure is describing the results for the primary
// exposure of interest (exposure) or the alternative state
// (exposureAlternative). See http://hl7.org/fhir/exposure-state
type ExposureStateCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExposureStateCode) Reset() {
	*x = ExposureStateCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExposureStateCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExposureStateCode) ProtoMessage() {}

func (x *ExposureStateCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExposureStateCode.ProtoReflect.Descriptor instead.
func (*ExposureStateCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{98}
}

// How an extension context is interpreted.
// See http://hl7.org/fhir/extension-context-type
type ExtensionContextTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExtensionContextTypeCode) Reset() {
	*x = ExtensionContextTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtensionContextTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionContextTypeCode) ProtoMessage() {}

func (x *ExtensionContextTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionContextTypeCode.ProtoReflect.Descriptor instead.
func (*ExtensionContextTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{99}
}

// The availability status of the device.
// See http://hl7.org/fhir/device-status
type FHIRDeviceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRDeviceStatusCode) Reset() {
	*x = FHIRDeviceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRDeviceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRDeviceStatusCode) ProtoMessage() {}

func (x *FHIRDeviceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRDeviceStatusCode.ProtoReflect.Descriptor instead.
func (*FHIRDeviceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{100}
}

// The set of interactions defined by the RESTful part of the FHIR
// specification. See http://hl7.org/fhir/restful-interaction
type FHIRRestfulInteractionsCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRRestfulInteractionsCode) Reset() {
	*x = FHIRRestfulInteractionsCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRRestfulInteractionsCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRRestfulInteractionsCode) ProtoMessage() {}

func (x *FHIRRestfulInteractionsCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRRestfulInteractionsCode.ProtoReflect.Descriptor instead.
func (*FHIRRestfulInteractionsCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{101}
}

// A code to indicate if the substance is actively used.
// See http://hl7.org/fhir/substance-status
type FHIRSubstanceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRSubstanceStatusCode) Reset() {
	*x = FHIRSubstanceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRSubstanceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRSubstanceStatusCode) ProtoMessage() {}

func (x *FHIRSubstanceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRSubstanceStatusCode.ProtoReflect.Descriptor instead.
func (*FHIRSubstanceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{102}
}

// All published FHIR Versions.
// See http://hl7.org/fhir/FHIR-version
type FHIRVersionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FHIRVersionCode) Reset() {
	*x = FHIRVersionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FHIRVersionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FHIRVersionCode) ProtoMessage() {}

func (x *FHIRVersionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FHIRVersionCode.ProtoReflect.Descriptor instead.
func (*FHIRVersionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{103}
}

// A code that identifies the status of the family history record.
// See http://hl7.org/fhir/history-status
type FamilyHistoryStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FamilyHistoryStatusCode) Reset() {
	*x = FamilyHistoryStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyHistoryStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyHistoryStatusCode) ProtoMessage() {}

func (x *FamilyHistoryStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyHistoryStatusCode.ProtoReflect.Descriptor instead.
func (*FamilyHistoryStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{104}
}

// The kind of operation to perform as a part of a property based filter.
// See http://hl7.org/fhir/filter-operator
type FilterOperatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FilterOperatorCode) Reset() {
	*x = FilterOperatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterOperatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterOperatorCode) ProtoMessage() {}

func (x *FilterOperatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterOperatorCode.ProtoReflect.Descriptor instead.
func (*FilterOperatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{105}
}

// This value set includes Status codes.
// See http://hl7.org/fhir/fm-status
type FinancialResourceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinancialResourceStatusCode) Reset() {
	*x = FinancialResourceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialResourceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialResourceStatusCode) ProtoMessage() {}

func (x *FinancialResourceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialResourceStatusCode.ProtoReflect.Descriptor instead.
func (*FinancialResourceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{106}
}

// Indicates whether this flag is active and needs to be displayed to a user, or
// whether it is no longer needed or was entered in error. See
// http://hl7.org/fhir/flag-status
type FlagStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FlagStatusCode) Reset() {
	*x = FlagStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlagStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlagStatusCode) ProtoMessage() {}

func (x *FlagStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlagStatusCode.ProtoReflect.Descriptor instead.
func (*FlagStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{107}
}

// Codes indicating whether the goal has been accepted by a stakeholder.
// See http://terminology.hl7.org/CodeSystem/goal-acceptance-status
type GoalAcceptanceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoalAcceptanceStatusCode) Reset() {
	*x = GoalAcceptanceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalAcceptanceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalAcceptanceStatusCode) ProtoMessage() {}

func (x *GoalAcceptanceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalAcceptanceStatusCode.ProtoReflect.Descriptor instead.
func (*GoalAcceptanceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{108}
}

// Codes that reflect the current state of a goal and whether the goal is still
// being targeted. See http://hl7.org/fhir/goal-status
type GoalLifecycleStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GoalLifecycleStatusCode) Reset() {
	*x = GoalLifecycleStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoalLifecycleStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoalLifecycleStatusCode) ProtoMessage() {}

func (x *GoalLifecycleStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoalLifecycleStatusCode.ProtoReflect.Descriptor instead.
func (*GoalLifecycleStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{109}
}

// How a compartment must be linked.
// See http://hl7.org/fhir/graph-compartment-rule
type GraphCompartmentRuleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GraphCompartmentRuleCode) Reset() {
	*x = GraphCompartmentRuleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphCompartmentRuleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphCompartmentRuleCode) ProtoMessage() {}

func (x *GraphCompartmentRuleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphCompartmentRuleCode.ProtoReflect.Descriptor instead.
func (*GraphCompartmentRuleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{110}
}

// Defines how a compartment rule is used.
// See http://hl7.org/fhir/graph-compartment-use
type GraphCompartmentUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GraphCompartmentUseCode) Reset() {
	*x = GraphCompartmentUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraphCompartmentUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraphCompartmentUseCode) ProtoMessage() {}

func (x *GraphCompartmentUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraphCompartmentUseCode.ProtoReflect.Descriptor instead.
func (*GraphCompartmentUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{111}
}

// Possible group measure aggregates (E.g. Mean, Median).
// See http://hl7.org/fhir/group-measure
type GroupMeasureCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupMeasureCode) Reset() {
	*x = GroupMeasureCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMeasureCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMeasureCode) ProtoMessage() {}

func (x *GroupMeasureCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMeasureCode.ProtoReflect.Descriptor instead.
func (*GroupMeasureCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{112}
}

// Types of resources that are part of group.
// See http://hl7.org/fhir/group-type
type GroupTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupTypeCode) Reset() {
	*x = GroupTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupTypeCode) ProtoMessage() {}

func (x *GroupTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupTypeCode.ProtoReflect.Descriptor instead.
func (*GroupTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{113}
}

// The status of a guidance response.
// See http://hl7.org/fhir/guidance-response-status
type GuidanceResponseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuidanceResponseStatusCode) Reset() {
	*x = GuidanceResponseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidanceResponseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidanceResponseStatusCode) ProtoMessage() {}

func (x *GuidanceResponseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidanceResponseStatusCode.ProtoReflect.Descriptor instead.
func (*GuidanceResponseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{114}
}

// A code that indicates how the page is generated.
// See http://hl7.org/fhir/guide-page-generation
type GuidePageGenerationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuidePageGenerationCode) Reset() {
	*x = GuidePageGenerationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuidePageGenerationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuidePageGenerationCode) ProtoMessage() {}

func (x *GuidePageGenerationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuidePageGenerationCode.ProtoReflect.Descriptor instead.
func (*GuidePageGenerationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{115}
}

// Code of parameter that is input to the guide.
// See http://hl7.org/fhir/guide-parameter-code
type GuideParameterCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GuideParameterCode) Reset() {
	*x = GuideParameterCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GuideParameterCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GuideParameterCode) ProtoMessage() {}

func (x *GuideParameterCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GuideParameterCode.ProtoReflect.Descriptor instead.
func (*GuideParameterCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{116}
}

// An HL7 administrative unit that owns artifacts in the FHIR specification.
// See http://terminology.hl7.org/CodeSystem/hl7-work-group
type HL7WorkgroupCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HL7WorkgroupCode) Reset() {
	*x = HL7WorkgroupCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HL7WorkgroupCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HL7WorkgroupCode) ProtoMessage() {}

func (x *HL7WorkgroupCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HL7WorkgroupCode.ProtoReflect.Descriptor instead.
func (*HL7WorkgroupCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{117}
}

// HTTP verbs (in the HTTP command line). See [HTTP
// rfc](https://tools.ietf.org/html/rfc7231) for details. See
// http://hl7.org/fhir/http-verb
type HTTPVerbCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HTTPVerbCode) Reset() {
	*x = HTTPVerbCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPVerbCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPVerbCode) ProtoMessage() {}

func (x *HTTPVerbCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPVerbCode.ProtoReflect.Descriptor instead.
func (*HTTPVerbCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{118}
}

// A code that represents the preferred display order of the components of a
// human name. See http://terminology.hl7.org/CodeSystem/name-assembly-order
type HumanNameAssemblyOrderCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HumanNameAssemblyOrderCode) Reset() {
	*x = HumanNameAssemblyOrderCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HumanNameAssemblyOrderCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HumanNameAssemblyOrderCode) ProtoMessage() {}

func (x *HumanNameAssemblyOrderCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HumanNameAssemblyOrderCode.ProtoReflect.Descriptor instead.
func (*HumanNameAssemblyOrderCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{119}
}

// Identifies the purpose for this identifier, if known .
// See http://hl7.org/fhir/identifier-use
type IdentifierUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IdentifierUseCode) Reset() {
	*x = IdentifierUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifierUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifierUseCode) ProtoMessage() {}

func (x *IdentifierUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifierUseCode.ProtoReflect.Descriptor instead.
func (*IdentifierUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{120}
}

// The level of confidence that this link represents the same actual person,
// based on NIST Authentication Levels. See
// http://hl7.org/fhir/identity-assuranceLevel
type IdentityAssuranceLevelCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IdentityAssuranceLevelCode) Reset() {
	*x = IdentityAssuranceLevelCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityAssuranceLevelCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityAssuranceLevelCode) ProtoMessage() {}

func (x *IdentityAssuranceLevelCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityAssuranceLevelCode.ProtoReflect.Descriptor instead.
func (*IdentityAssuranceLevelCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{121}
}

// The status of the ImagingStudy.
// See http://hl7.org/fhir/imagingstudy-status
type ImagingStudyStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImagingStudyStatusCode) Reset() {
	*x = ImagingStudyStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagingStudyStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagingStudyStatusCode) ProtoMessage() {}

func (x *ImagingStudyStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagingStudyStatusCode.ProtoReflect.Descriptor instead.
func (*ImagingStudyStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{122}
}

// A set codes that define the functional status of an implanted device.
// See http://terminology.hl7.org/CodeSystem/implantStatus
type ImplantStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ImplantStatusCode) Reset() {
	*x = ImplantStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplantStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplantStatusCode) ProtoMessage() {}

func (x *ImplantStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplantStatusCode.ProtoReflect.Descriptor instead.
func (*ImplantStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{123}
}

// Codes indicating the kind of the price component.
// See http://hl7.org/fhir/invoice-priceComponentType
type InvoicePriceComponentTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvoicePriceComponentTypeCode) Reset() {
	*x = InvoicePriceComponentTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoicePriceComponentTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoicePriceComponentTypeCode) ProtoMessage() {}

func (x *InvoicePriceComponentTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoicePriceComponentTypeCode.ProtoReflect.Descriptor instead.
func (*InvoicePriceComponentTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{124}
}

// Codes identifying the lifecycle stage of an Invoice.
// See http://hl7.org/fhir/invoice-status
type InvoiceStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InvoiceStatusCode) Reset() {
	*x = InvoiceStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvoiceStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvoiceStatusCode) ProtoMessage() {}

func (x *InvoiceStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvoiceStatusCode.ProtoReflect.Descriptor instead.
func (*InvoiceStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{125}
}

// How the issue affects the success of the action.
// See http://hl7.org/fhir/issue-severity
type IssueSeverityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueSeverityCode) Reset() {
	*x = IssueSeverityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueSeverityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueSeverityCode) ProtoMessage() {}

func (x *IssueSeverityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueSeverityCode.ProtoReflect.Descriptor instead.
func (*IssueSeverityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{126}
}

// A code that describes the type of issue.
// See http://hl7.org/fhir/issue-type
type IssueTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IssueTypeCode) Reset() {
	*x = IssueTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueTypeCode) ProtoMessage() {}

func (x *IssueTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueTypeCode.ProtoReflect.Descriptor instead.
func (*IssueTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{127}
}

// The type of link between this patient resource and another patient resource.
// See http://hl7.org/fhir/link-type
type LinkTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkTypeCode) Reset() {
	*x = LinkTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkTypeCode) ProtoMessage() {}

func (x *LinkTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkTypeCode.ProtoReflect.Descriptor instead.
func (*LinkTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{128}
}

// Used to distinguish different roles a resource can play within a set of
// linked resources. See http://hl7.org/fhir/linkage-type
type LinkageTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkageTypeCode) Reset() {
	*x = LinkageTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkageTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkageTypeCode) ProtoMessage() {}

func (x *LinkageTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkageTypeCode.ProtoReflect.Descriptor instead.
func (*LinkageTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{129}
}

// The processing mode that applies to this list.
// See http://hl7.org/fhir/list-mode
type ListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListModeCode) Reset() {
	*x = ListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModeCode) ProtoMessage() {}

func (x *ListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModeCode.ProtoReflect.Descriptor instead.
func (*ListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{130}
}

// The current state of the list.
// See http://hl7.org/fhir/list-status
type ListStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStatusCode) Reset() {
	*x = ListStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStatusCode) ProtoMessage() {}

func (x *ListStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStatusCode.ProtoReflect.Descriptor instead.
func (*ListStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{131}
}

// Indicates whether a resource instance represents a specific location or a
// class of locations. See http://hl7.org/fhir/location-mode
type LocationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocationModeCode) Reset() {
	*x = LocationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationModeCode) ProtoMessage() {}

func (x *LocationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationModeCode.ProtoReflect.Descriptor instead.
func (*LocationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{132}
}

// Indicates whether the location is still in use.
// See http://hl7.org/fhir/location-status
type LocationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocationStatusCode) Reset() {
	*x = LocationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationStatusCode) ProtoMessage() {}

func (x *LocationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationStatusCode.ProtoReflect.Descriptor instead.
func (*LocationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{133}
}

// A Master Patient Index (MPI) assessment of whether a candidate patient record
// is a match or not. See http://terminology.hl7.org/CodeSystem/match-grade
type MatchGradeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MatchGradeCode) Reset() {
	*x = MatchGradeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchGradeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchGradeCode) ProtoMessage() {}

func (x *MatchGradeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchGradeCode.ProtoReflect.Descriptor instead.
func (*MatchGradeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{134}
}

// Observation values that indicate what change in a measurement value or score
// is indicative of an improvement in the measured item or scored issue. See
// http://terminology.hl7.org/CodeSystem/measure-improvement-notation
type MeasureImprovementNotationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeasureImprovementNotationCode) Reset() {
	*x = MeasureImprovementNotationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureImprovementNotationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureImprovementNotationCode) ProtoMessage() {}

func (x *MeasureImprovementNotationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureImprovementNotationCode.ProtoReflect.Descriptor instead.
func (*MeasureImprovementNotationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{135}
}

// The status of the measure report.
// See http://hl7.org/fhir/measure-report-status
type MeasureReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeasureReportStatusCode) Reset() {
	*x = MeasureReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReportStatusCode) ProtoMessage() {}

func (x *MeasureReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReportStatusCode.ProtoReflect.Descriptor instead.
func (*MeasureReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{136}
}

// The type of the measure report.
// See http://hl7.org/fhir/measure-report-type
type MeasureReportTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeasureReportTypeCode) Reset() {
	*x = MeasureReportTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureReportTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureReportTypeCode) ProtoMessage() {}

func (x *MeasureReportTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureReportTypeCode.ProtoReflect.Descriptor instead.
func (*MeasureReportTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{137}
}

// MedicationAdministration Status Codes
// See http://terminology.hl7.org/CodeSystem/medication-admin-status
type MedicationAdministrationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationAdministrationStatusCode) Reset() {
	*x = MedicationAdministrationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationAdministrationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationAdministrationStatusCode) ProtoMessage() {}

func (x *MedicationAdministrationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationAdministrationStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationAdministrationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{138}
}

// MedicationDispense Status Codes
// See http://terminology.hl7.org/CodeSystem/medicationdispense-status
type MedicationDispenseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationDispenseStatusCode) Reset() {
	*x = MedicationDispenseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationDispenseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationDispenseStatusCode) ProtoMessage() {}

func (x *MedicationDispenseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationDispenseStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationDispenseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{139}
}

// MedicationKnowledge Status Codes
// See http://terminology.hl7.org/CodeSystem/medicationknowledge-status
type MedicationKnowledgeStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationKnowledgeStatusCode) Reset() {
	*x = MedicationKnowledgeStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationKnowledgeStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationKnowledgeStatusCode) ProtoMessage() {}

func (x *MedicationKnowledgeStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationKnowledgeStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationKnowledgeStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{140}
}

// MedicationRequest Intent Codes
// See http://hl7.org/fhir/CodeSystem/medicationrequest-intent
type MedicationRequestIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationRequestIntentCode) Reset() {
	*x = MedicationRequestIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationRequestIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationRequestIntentCode) ProtoMessage() {}

func (x *MedicationRequestIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationRequestIntentCode.ProtoReflect.Descriptor instead.
func (*MedicationRequestIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{141}
}

// Medication Status Codes
// See http://hl7.org/fhir/CodeSystem/medication-statement-status
type MedicationStatementStatusCodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationStatementStatusCodes) Reset() {
	*x = MedicationStatementStatusCodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatementStatusCodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatementStatusCodes) ProtoMessage() {}

func (x *MedicationStatementStatusCodes) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatementStatusCodes.ProtoReflect.Descriptor instead.
func (*MedicationStatementStatusCodes) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{142}
}

// Medication Status Codes
// See http://hl7.org/fhir/CodeSystem/medication-status
type MedicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationStatusCode) Reset() {
	*x = MedicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationStatusCode) ProtoMessage() {}

func (x *MedicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{143}
}

// MedicationRequest Status Codes
// See http://hl7.org/fhir/CodeSystem/medicationrequest-status
type MedicationrequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MedicationrequestStatusCode) Reset() {
	*x = MedicationrequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MedicationrequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedicationrequestStatusCode) ProtoMessage() {}

func (x *MedicationrequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedicationrequestStatusCode.ProtoReflect.Descriptor instead.
func (*MedicationrequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{144}
}

// The impact of the content of a message.
// See http://hl7.org/fhir/message-significance-category
type MessageSignificanceCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageSignificanceCategoryCode) Reset() {
	*x = MessageSignificanceCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageSignificanceCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageSignificanceCategoryCode) ProtoMessage() {}

func (x *MessageSignificanceCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageSignificanceCategoryCode.ProtoReflect.Descriptor instead.
func (*MessageSignificanceCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{145}
}

// HL7-defined table of codes which identify conditions under which
// acknowledgments are required to be returned in response to a message. See
// http://hl7.org/fhir/messageheader-response-request
type MessageheaderResponseRequestCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MessageheaderResponseRequestCode) Reset() {
	*x = MessageheaderResponseRequestCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageheaderResponseRequestCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageheaderResponseRequestCode) ProtoMessage() {}

func (x *MessageheaderResponseRequestCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageheaderResponseRequestCode.ProtoReflect.Descriptor instead.
func (*MessageheaderResponseRequestCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{146}
}

// The use of a human name.
// See http://hl7.org/fhir/name-use
type NameUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NameUseCode) Reset() {
	*x = NameUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameUseCode) ProtoMessage() {}

func (x *NameUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameUseCode.ProtoReflect.Descriptor instead.
func (*NameUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{147}
}

// Identifies the style of unique identifier used to identify a namespace.
// See http://hl7.org/fhir/namingsystem-identifier-type
type NamingSystemIdentifierTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamingSystemIdentifierTypeCode) Reset() {
	*x = NamingSystemIdentifierTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystemIdentifierTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystemIdentifierTypeCode) ProtoMessage() {}

func (x *NamingSystemIdentifierTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystemIdentifierTypeCode.ProtoReflect.Descriptor instead.
func (*NamingSystemIdentifierTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{148}
}

// Identifies the purpose of the naming system.
// See http://hl7.org/fhir/namingsystem-type
type NamingSystemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamingSystemTypeCode) Reset() {
	*x = NamingSystemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamingSystemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamingSystemTypeCode) ProtoMessage() {}

func (x *NamingSystemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamingSystemTypeCode.ProtoReflect.Descriptor instead.
func (*NamingSystemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{149}
}

// The status of a resource narrative.
// See http://hl7.org/fhir/narrative-status
type NarrativeStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NarrativeStatusCode) Reset() {
	*x = NarrativeStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NarrativeStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NarrativeStatusCode) ProtoMessage() {}

func (x *NarrativeStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NarrativeStatusCode.ProtoReflect.Descriptor instead.
func (*NarrativeStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{150}
}

// The presentation types of notes.
// See http://hl7.org/fhir/note-type
type NoteTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NoteTypeCode) Reset() {
	*x = NoteTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteTypeCode) ProtoMessage() {}

func (x *NoteTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteTypeCode.ProtoReflect.Descriptor instead.
func (*NoteTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{151}
}

// Permitted data type for observation value.
// See http://hl7.org/fhir/permitted-data-type
type ObservationDataTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObservationDataTypeCode) Reset() {
	*x = ObservationDataTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationDataTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationDataTypeCode) ProtoMessage() {}

func (x *ObservationDataTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationDataTypeCode.ProtoReflect.Descriptor instead.
func (*ObservationDataTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{152}
}

// Codes identifying the category of observation range.
// See http://hl7.org/fhir/observation-range-category
type ObservationRangeCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObservationRangeCategoryCode) Reset() {
	*x = ObservationRangeCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationRangeCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRangeCategoryCode) ProtoMessage() {}

func (x *ObservationRangeCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRangeCategoryCode.ProtoReflect.Descriptor instead.
func (*ObservationRangeCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{153}
}

// Codes providing the status of an observation.
// See http://hl7.org/fhir/observation-status
type ObservationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ObservationStatusCode) Reset() {
	*x = ObservationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationStatusCode) ProtoMessage() {}

func (x *ObservationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationStatusCode.ProtoReflect.Descriptor instead.
func (*ObservationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{154}
}

// Whether an operation is a normal operation or a query.
// See http://hl7.org/fhir/operation-kind
type OperationKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperationKindCode) Reset() {
	*x = OperationKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationKindCode) ProtoMessage() {}

func (x *OperationKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationKindCode.ProtoReflect.Descriptor instead.
func (*OperationKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{155}
}

// Whether an operation parameter is an input or an output parameter.
// See http://hl7.org/fhir/operation-parameter-use
type OperationParameterUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OperationParameterUseCode) Reset() {
	*x = OperationParameterUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationParameterUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationParameterUseCode) ProtoMessage() {}

func (x *OperationParameterUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationParameterUseCode.ProtoReflect.Descriptor instead.
func (*OperationParameterUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{156}
}

// Type for orientation.
// See http://hl7.org/fhir/orientation-type
type OrientationTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OrientationTypeCode) Reset() {
	*x = OrientationTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrientationTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrientationTypeCode) ProtoMessage() {}

func (x *OrientationTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrientationTypeCode.ProtoReflect.Descriptor instead.
func (*OrientationTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{157}
}

// Is the Participant required to attend the appointment.
// See http://hl7.org/fhir/participantrequired
type ParticipantRequiredCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ParticipantRequiredCode) Reset() {
	*x = ParticipantRequiredCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantRequiredCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantRequiredCode) ProtoMessage() {}

func (x *ParticipantRequiredCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantRequiredCode.ProtoReflect.Descriptor instead.
func (*ParticipantRequiredCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{158}
}

// The Participation status of an appointment.
// See http://hl7.org/fhir/participationstatus
type ParticipationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ParticipationStatusCode) Reset() {
	*x = ParticipationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipationStatusCode) ProtoMessage() {}

func (x *ParticipationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipationStatusCode.ProtoReflect.Descriptor instead.
func (*ParticipationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{159}
}

// How a property is represented when serialized.
// See http://hl7.org/fhir/property-representation
type PropertyRepresentationCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PropertyRepresentationCode) Reset() {
	*x = PropertyRepresentationCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyRepresentationCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyRepresentationCode) ProtoMessage() {}

func (x *PropertyRepresentationCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyRepresentationCode.ProtoReflect.Descriptor instead.
func (*PropertyRepresentationCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{160}
}

// The type of a property value.
// See http://hl7.org/fhir/concept-property-type
type PropertyTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PropertyTypeCode) Reset() {
	*x = PropertyTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyTypeCode) ProtoMessage() {}

func (x *PropertyTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyTypeCode.ProtoReflect.Descriptor instead.
func (*PropertyTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{161}
}

// How an entity was used in an activity.
// See http://hl7.org/fhir/provenance-entity-role
type ProvenanceEntityRoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProvenanceEntityRoleCode) Reset() {
	*x = ProvenanceEntityRoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvenanceEntityRoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvenanceEntityRoleCode) ProtoMessage() {}

func (x *ProvenanceEntityRoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvenanceEntityRoleCode.ProtoReflect.Descriptor instead.
func (*ProvenanceEntityRoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{162}
}

// The lifecycle status of an artifact.
// See http://hl7.org/fhir/publication-status
type PublicationStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublicationStatusCode) Reset() {
	*x = PublicationStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicationStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicationStatusCode) ProtoMessage() {}

func (x *PublicationStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicationStatusCode.ProtoReflect.Descriptor instead.
func (*PublicationStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{163}
}

// Type for quality report.
// See http://hl7.org/fhir/quality-type
type QualityTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QualityTypeCode) Reset() {
	*x = QualityTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QualityTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QualityTypeCode) ProtoMessage() {}

func (x *QualityTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QualityTypeCode.ProtoReflect.Descriptor instead.
func (*QualityTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{164}
}

// How the Quantity should be understood and represented.
// See http://hl7.org/fhir/quantity-comparator
type QuantityComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuantityComparatorCode) Reset() {
	*x = QuantityComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantityComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantityComparatorCode) ProtoMessage() {}

func (x *QuantityComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantityComparatorCode.ProtoReflect.Descriptor instead.
func (*QuantityComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{165}
}

// The criteria by which a question is enabled.
// See http://hl7.org/fhir/questionnaire-enable-operator
type QuestionnaireItemOperatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireItemOperatorCode) Reset() {
	*x = QuestionnaireItemOperatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemOperatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemOperatorCode) ProtoMessage() {}

func (x *QuestionnaireItemOperatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemOperatorCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemOperatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{166}
}

// Distinguishes groups from questions and display text and indicates data type
// for questions. See http://hl7.org/fhir/item-type
type QuestionnaireItemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireItemTypeCode) Reset() {
	*x = QuestionnaireItemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemTypeCode) ProtoMessage() {}

func (x *QuestionnaireItemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemTypeCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{167}
}

// Identifies the modes of usage of a questionnaire that should enable a
// particular questionnaire item. See
// http://terminology.hl7.org/CodeSystem/questionnaire-usage-mode
type QuestionnaireItemUsageModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireItemUsageModeCode) Reset() {
	*x = QuestionnaireItemUsageModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireItemUsageModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireItemUsageModeCode) ProtoMessage() {}

func (x *QuestionnaireItemUsageModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireItemUsageModeCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireItemUsageModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{168}
}

// Lifecycle status of the questionnaire response.
// See http://hl7.org/fhir/questionnaire-answers-status
type QuestionnaireResponseStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *QuestionnaireResponseStatusCode) Reset() {
	*x = QuestionnaireResponseStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuestionnaireResponseStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionnaireResponseStatusCode) ProtoMessage() {}

func (x *QuestionnaireResponseStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionnaireResponseStatusCode.ProtoReflect.Descriptor instead.
func (*QuestionnaireResponseStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{169}
}

// A set of flags that defines how references are supported.
// See http://hl7.org/fhir/reference-handling-policy
type ReferenceHandlingPolicyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReferenceHandlingPolicyCode) Reset() {
	*x = ReferenceHandlingPolicyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceHandlingPolicyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceHandlingPolicyCode) ProtoMessage() {}

func (x *ReferenceHandlingPolicyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceHandlingPolicyCode.ProtoReflect.Descriptor instead.
func (*ReferenceHandlingPolicyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{170}
}

// Whether a reference needs to be version specific or version independent, or
// whether either can be used. See http://hl7.org/fhir/reference-version-rules
type ReferenceVersionRulesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReferenceVersionRulesCode) Reset() {
	*x = ReferenceVersionRulesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferenceVersionRulesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferenceVersionRulesCode) ProtoMessage() {}

func (x *ReferenceVersionRulesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferenceVersionRulesCode.ProtoReflect.Descriptor instead.
func (*ReferenceVersionRulesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{171}
}

// The type of relationship to the related artifact.
// See http://hl7.org/fhir/related-artifact-type
type RelatedArtifactTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelatedArtifactTypeCode) Reset() {
	*x = RelatedArtifactTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedArtifactTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedArtifactTypeCode) ProtoMessage() {}

func (x *RelatedArtifactTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedArtifactTypeCode.ProtoReflect.Descriptor instead.
func (*RelatedArtifactTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{172}
}

// Type for access of external URI.
// See http://hl7.org/fhir/repository-type
type RepositoryTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RepositoryTypeCode) Reset() {
	*x = RepositoryTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepositoryTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepositoryTypeCode) ProtoMessage() {}

func (x *RepositoryTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepositoryTypeCode.ProtoReflect.Descriptor instead.
func (*RepositoryTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{173}
}

// Codes indicating the degree of authority/intentionality associated with a
// request. See http://hl7.org/fhir/request-intent
type RequestIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestIntentCode) Reset() {
	*x = RequestIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestIntentCode) ProtoMessage() {}

func (x *RequestIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestIntentCode.ProtoReflect.Descriptor instead.
func (*RequestIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{174}
}

// Identifies the level of importance to be assigned to actioning the request.
// See http://hl7.org/fhir/request-priority
type RequestPriorityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestPriorityCode) Reset() {
	*x = RequestPriorityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPriorityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPriorityCode) ProtoMessage() {}

func (x *RequestPriorityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPriorityCode.ProtoReflect.Descriptor instead.
func (*RequestPriorityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{175}
}

// A list of all the request resource types defined in this version of the FHIR
// specification. See http://hl7.org/fhir/request-resource-types
type RequestResourceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestResourceTypeCode) Reset() {
	*x = RequestResourceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestResourceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestResourceTypeCode) ProtoMessage() {}

func (x *RequestResourceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestResourceTypeCode.ProtoReflect.Descriptor instead.
func (*RequestResourceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{176}
}

// Codes identifying the lifecycle stage of a request.
// See http://hl7.org/fhir/request-status
type RequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestStatusCode) Reset() {
	*x = RequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestStatusCode) ProtoMessage() {}

func (x *RequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestStatusCode.ProtoReflect.Descriptor instead.
func (*RequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{177}
}

// The possible types of research elements (E.g. Population, Exposure, Outcome).
// See http://hl7.org/fhir/research-element-type
type ResearchElementTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResearchElementTypeCode) Reset() {
	*x = ResearchElementTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResearchElementTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResearchElementTypeCode) ProtoMessage() {}

func (x *ResearchElementTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResearchElementTypeCode.ProtoReflect.Descriptor instead.
func (*ResearchElementTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{178}
}

// Codes that convey the current status of the research study.
// See http://hl7.org/fhir/research-study-status
type ResearchStudyStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResearchStudyStatusCode) Reset() {
	*x = ResearchStudyStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResearchStudyStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResearchStudyStatusCode) ProtoMessage() {}

func (x *ResearchStudyStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResearchStudyStatusCode.ProtoReflect.Descriptor instead.
func (*ResearchStudyStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{179}
}

// Indicates the progression of a study subject through a study.
// See http://hl7.org/fhir/research-subject-status
type ResearchSubjectStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResearchSubjectStatusCode) Reset() {
	*x = ResearchSubjectStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResearchSubjectStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResearchSubjectStatusCode) ProtoMessage() {}

func (x *ResearchSubjectStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResearchSubjectStatusCode.ProtoReflect.Descriptor instead.
func (*ResearchSubjectStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{180}
}

// Provides general guidance around the kind of access Control to Read, Search,
// Create, Update, or Delete a resource. See
// http://terminology.hl7.org/CodeSystem/resource-security-category
type ResourceSecurityCategoryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResourceSecurityCategoryCode) Reset() {
	*x = ResourceSecurityCategoryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceSecurityCategoryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSecurityCategoryCode) ProtoMessage() {}

func (x *ResourceSecurityCategoryCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSecurityCategoryCode.ProtoReflect.Descriptor instead.
func (*ResourceSecurityCategoryCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{181}
}

// One of the resource types defined as part of this version of FHIR.
// See http://hl7.org/fhir/resource-types
type ResourceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResourceTypeCode) Reset() {
	*x = ResourceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTypeCode) ProtoMessage() {}

func (x *ResourceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTypeCode.ProtoReflect.Descriptor instead.
func (*ResourceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{182}
}

// How the system supports versioning for a resource.
// See http://hl7.org/fhir/versioning-policy
type ResourceVersionPolicyCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResourceVersionPolicyCode) Reset() {
	*x = ResourceVersionPolicyCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceVersionPolicyCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceVersionPolicyCode) ProtoMessage() {}

func (x *ResourceVersionPolicyCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceVersionPolicyCode.ProtoReflect.Descriptor instead.
func (*ResourceVersionPolicyCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{183}
}

// The kind of response to a message.
// See http://hl7.org/fhir/response-code
type ResponseTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResponseTypeCode) Reset() {
	*x = ResponseTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseTypeCode) ProtoMessage() {}

func (x *ResponseTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseTypeCode.ProtoReflect.Descriptor instead.
func (*ResponseTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{184}
}

// The mode of a RESTful capability statement.
// See http://hl7.org/fhir/restful-capability-mode
type RestfulCapabilityModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RestfulCapabilityModeCode) Reset() {
	*x = RestfulCapabilityModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestfulCapabilityModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestfulCapabilityModeCode) ProtoMessage() {}

func (x *RestfulCapabilityModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestfulCapabilityModeCode.ProtoReflect.Descriptor instead.
func (*RestfulCapabilityModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{185}
}

// The license that applies to an Implementation Guide (using an SPDX license
// Identifiers, or 'not-open-source'). The binding is required but new SPDX
// license Identifiers are allowed to be used (https://spdx.org/licenses/). See
// http://hl7.org/fhir/spdx-license
type SPDXLicenseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SPDXLicenseCode) Reset() {
	*x = SPDXLicenseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPDXLicenseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPDXLicenseCode) ProtoMessage() {}

func (x *SPDXLicenseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPDXLicenseCode.ProtoReflect.Descriptor instead.
func (*SPDXLicenseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{186}
}

// What Search Comparator Codes are supported in search.
// See http://hl7.org/fhir/search-comparator
type SearchComparatorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchComparatorCode) Reset() {
	*x = SearchComparatorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchComparatorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchComparatorCode) ProtoMessage() {}

func (x *SearchComparatorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchComparatorCode.ProtoReflect.Descriptor instead.
func (*SearchComparatorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{187}
}

// Why an entry is in the result set - whether it's included as a match or
// because of an _include requirement, or to convey information or warning
// information about the search process. See
// http://hl7.org/fhir/search-entry-mode
type SearchEntryModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchEntryModeCode) Reset() {
	*x = SearchEntryModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchEntryModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchEntryModeCode) ProtoMessage() {}

func (x *SearchEntryModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchEntryModeCode.ProtoReflect.Descriptor instead.
func (*SearchEntryModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{188}
}

// A supported modifier for a search parameter.
// See http://hl7.org/fhir/search-modifier-code
type SearchModifierCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchModifierCode) Reset() {
	*x = SearchModifierCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchModifierCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchModifierCode) ProtoMessage() {}

func (x *SearchModifierCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchModifierCode.ProtoReflect.Descriptor instead.
func (*SearchModifierCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{189}
}

// Data types allowed to be used for search parameters.
// See http://hl7.org/fhir/search-param-type
type SearchParamTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SearchParamTypeCode) Reset() {
	*x = SearchParamTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchParamTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchParamTypeCode) ProtoMessage() {}

func (x *SearchParamTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchParamTypeCode.ProtoReflect.Descriptor instead.
func (*SearchParamTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{190}
}

// Type if a sequence -- DNA, RNA, or amino acid sequence.
// See http://hl7.org/fhir/sequence-type
type SequenceTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SequenceTypeCode) Reset() {
	*x = SequenceTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequenceTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceTypeCode) ProtoMessage() {}

func (x *SequenceTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceTypeCode.ProtoReflect.Descriptor instead.
func (*SequenceTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{191}
}

// How slices are interpreted when evaluating an instance.
// See http://hl7.org/fhir/resource-slicing-rules
type SlicingRulesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SlicingRulesCode) Reset() {
	*x = SlicingRulesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlicingRulesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlicingRulesCode) ProtoMessage() {}

func (x *SlicingRulesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlicingRulesCode.ProtoReflect.Descriptor instead.
func (*SlicingRulesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{192}
}

// The free/busy status of the slot.
// See http://hl7.org/fhir/slotstatus
type SlotStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SlotStatusCode) Reset() {
	*x = SlotStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlotStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlotStatusCode) ProtoMessage() {}

func (x *SlotStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlotStatusCode.ProtoReflect.Descriptor instead.
func (*SlotStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{193}
}

// Codes that define what the server is capable of.
// See http://terminology.hl7.org/CodeSystem/smart-capabilities
type SmartCapabilitiesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SmartCapabilitiesCode) Reset() {
	*x = SmartCapabilitiesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmartCapabilitiesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmartCapabilitiesCode) ProtoMessage() {}

func (x *SmartCapabilitiesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmartCapabilitiesCode.ProtoReflect.Descriptor instead.
func (*SmartCapabilitiesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{194}
}

// The possible sort directions, ascending or descending.
// See http://hl7.org/fhir/sort-direction
type SortDirectionCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SortDirectionCode) Reset() {
	*x = SortDirectionCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortDirectionCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortDirectionCode) ProtoMessage() {}

func (x *SortDirectionCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortDirectionCode.ProtoReflect.Descriptor instead.
func (*SortDirectionCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{195}
}

// Degree of preference of a type of conditioned specimen.
// See http://hl7.org/fhir/specimen-contained-preference
type SpecimenContainedPreferenceCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpecimenContainedPreferenceCode) Reset() {
	*x = SpecimenContainedPreferenceCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenContainedPreferenceCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenContainedPreferenceCode) ProtoMessage() {}

func (x *SpecimenContainedPreferenceCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenContainedPreferenceCode.ProtoReflect.Descriptor instead.
func (*SpecimenContainedPreferenceCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{196}
}

// Codes providing the status/availability of a specimen.
// See http://hl7.org/fhir/specimen-status
type SpecimenStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SpecimenStatusCode) Reset() {
	*x = SpecimenStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecimenStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecimenStatusCode) ProtoMessage() {}

func (x *SpecimenStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecimenStatusCode.ProtoReflect.Descriptor instead.
func (*SpecimenStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{197}
}

// HL7 Ballot/Standards status of artifact.
// See http://terminology.hl7.org/CodeSystem/standards-status
type StandardsStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StandardsStatusCode) Reset() {
	*x = StandardsStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandardsStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandardsStatusCode) ProtoMessage() {}

func (x *StandardsStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandardsStatusCode.ProtoReflect.Descriptor instead.
func (*StandardsStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{198}
}

// The validation status of the target
// See http://hl7.org/fhir/CodeSystem/status
type StatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusCode) Reset() {
	*x = StatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusCode) ProtoMessage() {}

func (x *StatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusCode.ProtoReflect.Descriptor instead.
func (*StatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{199}
}

// Type for strand.
// See http://hl7.org/fhir/strand-type
type StrandTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StrandTypeCode) Reset() {
	*x = StrandTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StrandTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrandTypeCode) ProtoMessage() {}

func (x *StrandTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrandTypeCode.ProtoReflect.Descriptor instead.
func (*StrandTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{200}
}

// Defines the type of structure that a definition is describing.
// See http://hl7.org/fhir/structure-definition-kind
type StructureDefinitionKindCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureDefinitionKindCode) Reset() {
	*x = StructureDefinitionKindCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureDefinitionKindCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureDefinitionKindCode) ProtoMessage() {}

func (x *StructureDefinitionKindCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureDefinitionKindCode.ProtoReflect.Descriptor instead.
func (*StructureDefinitionKindCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{201}
}

// How to interpret the context.
// See http://hl7.org/fhir/map-context-type
type StructureMapContextTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapContextTypeCode) Reset() {
	*x = StructureMapContextTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapContextTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapContextTypeCode) ProtoMessage() {}

func (x *StructureMapContextTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapContextTypeCode.ProtoReflect.Descriptor instead.
func (*StructureMapContextTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{202}
}

// If this is the default rule set to apply for the source type, or this
// combination of types. See http://hl7.org/fhir/map-group-type-mode
type StructureMapGroupTypeModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapGroupTypeModeCode) Reset() {
	*x = StructureMapGroupTypeModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapGroupTypeModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapGroupTypeModeCode) ProtoMessage() {}

func (x *StructureMapGroupTypeModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapGroupTypeModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapGroupTypeModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{203}
}

// Mode for this instance of data.
// See http://hl7.org/fhir/map-input-mode
type StructureMapInputModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapInputModeCode) Reset() {
	*x = StructureMapInputModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapInputModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapInputModeCode) ProtoMessage() {}

func (x *StructureMapInputModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapInputModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapInputModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{204}
}

// How the referenced structure is used in this mapping.
// See http://hl7.org/fhir/map-model-mode
type StructureMapModelModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapModelModeCode) Reset() {
	*x = StructureMapModelModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapModelModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapModelModeCode) ProtoMessage() {}

func (x *StructureMapModelModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapModelModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapModelModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{205}
}

// If field is a list, how to manage the source.
// See http://hl7.org/fhir/map-source-list-mode
type StructureMapSourceListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapSourceListModeCode) Reset() {
	*x = StructureMapSourceListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapSourceListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapSourceListModeCode) ProtoMessage() {}

func (x *StructureMapSourceListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapSourceListModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapSourceListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{206}
}

// If field is a list, how to manage the production.
// See http://hl7.org/fhir/map-target-list-mode
type StructureMapTargetListModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapTargetListModeCode) Reset() {
	*x = StructureMapTargetListModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapTargetListModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapTargetListModeCode) ProtoMessage() {}

func (x *StructureMapTargetListModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapTargetListModeCode.ProtoReflect.Descriptor instead.
func (*StructureMapTargetListModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{207}
}

// How data is copied/created.
// See http://hl7.org/fhir/map-transform
type StructureMapTransformCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StructureMapTransformCode) Reset() {
	*x = StructureMapTransformCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StructureMapTransformCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructureMapTransformCode) ProtoMessage() {}

func (x *StructureMapTransformCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructureMapTransformCode.ProtoReflect.Descriptor instead.
func (*StructureMapTransformCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{208}
}

// The type of method used to execute a subscription.
// See http://hl7.org/fhir/subscription-channel-type
type SubscriptionChannelTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscriptionChannelTypeCode) Reset() {
	*x = SubscriptionChannelTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionChannelTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionChannelTypeCode) ProtoMessage() {}

func (x *SubscriptionChannelTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionChannelTypeCode.ProtoReflect.Descriptor instead.
func (*SubscriptionChannelTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{209}
}

// The status of a subscription.
// See http://hl7.org/fhir/subscription-status
type SubscriptionStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubscriptionStatusCode) Reset() {
	*x = SubscriptionStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionStatusCode) ProtoMessage() {}

func (x *SubscriptionStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionStatusCode.ProtoReflect.Descriptor instead.
func (*SubscriptionStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{210}
}

// Status of the supply delivery.
// See http://hl7.org/fhir/supplydelivery-status
type SupplyDeliveryStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SupplyDeliveryStatusCode) Reset() {
	*x = SupplyDeliveryStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyDeliveryStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyDeliveryStatusCode) ProtoMessage() {}

func (x *SupplyDeliveryStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyDeliveryStatusCode.ProtoReflect.Descriptor instead.
func (*SupplyDeliveryStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{211}
}

// This value sets refers to a specific supply item.
// See http://terminology.hl7.org/CodeSystem/supply-item-type
type SupplyItemTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SupplyItemTypeCode) Reset() {
	*x = SupplyItemTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyItemTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyItemTypeCode) ProtoMessage() {}

func (x *SupplyItemTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyItemTypeCode.ProtoReflect.Descriptor instead.
func (*SupplyItemTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{212}
}

// Status of the supply request.
// See http://hl7.org/fhir/supplyrequest-status
type SupplyRequestStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SupplyRequestStatusCode) Reset() {
	*x = SupplyRequestStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SupplyRequestStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyRequestStatusCode) ProtoMessage() {}

func (x *SupplyRequestStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyRequestStatusCode.ProtoReflect.Descriptor instead.
func (*SupplyRequestStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{213}
}

// Distinguishes whether the task is a proposal, plan or full order.
// See http://hl7.org/fhir/task-intent
type TaskIntentCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskIntentCode) Reset() {
	*x = TaskIntentCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIntentCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIntentCode) ProtoMessage() {}

func (x *TaskIntentCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIntentCode.ProtoReflect.Descriptor instead.
func (*TaskIntentCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{214}
}

// The current status of the task.
// See http://hl7.org/fhir/task-status
type TaskStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TaskStatusCode) Reset() {
	*x = TaskStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskStatusCode) ProtoMessage() {}

func (x *TaskStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskStatusCode.ProtoReflect.Descriptor instead.
func (*TaskStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{215}
}

// Life cycle of the Status Code of a Template Design (Version)
// See urn:oid:2.16.840.1.113883.3.1937.98.5.8
type TemplateStatusCodeLifeCycleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TemplateStatusCodeLifeCycleCode) Reset() {
	*x = TemplateStatusCodeLifeCycleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateStatusCodeLifeCycleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateStatusCodeLifeCycleCode) ProtoMessage() {}

func (x *TemplateStatusCodeLifeCycleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateStatusCodeLifeCycleCode.ProtoReflect.Descriptor instead.
func (*TemplateStatusCodeLifeCycleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{216}
}

// The results of executing an action.
// See http://hl7.org/fhir/report-action-result-codes
type TestReportActionResultCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestReportActionResultCode) Reset() {
	*x = TestReportActionResultCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportActionResultCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportActionResultCode) ProtoMessage() {}

func (x *TestReportActionResultCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportActionResultCode.ProtoReflect.Descriptor instead.
func (*TestReportActionResultCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{217}
}

// The type of participant.
// See http://hl7.org/fhir/report-participant-type
type TestReportParticipantTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestReportParticipantTypeCode) Reset() {
	*x = TestReportParticipantTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportParticipantTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportParticipantTypeCode) ProtoMessage() {}

func (x *TestReportParticipantTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportParticipantTypeCode.ProtoReflect.Descriptor instead.
func (*TestReportParticipantTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{218}
}

// The reported execution result.
// See http://hl7.org/fhir/report-result-codes
type TestReportResultCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestReportResultCode) Reset() {
	*x = TestReportResultCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportResultCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportResultCode) ProtoMessage() {}

func (x *TestReportResultCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportResultCode.ProtoReflect.Descriptor instead.
func (*TestReportResultCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{219}
}

// The current status of the test report.
// See http://hl7.org/fhir/report-status-codes
type TestReportStatusCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestReportStatusCode) Reset() {
	*x = TestReportStatusCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestReportStatusCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestReportStatusCode) ProtoMessage() {}

func (x *TestReportStatusCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestReportStatusCode.ProtoReflect.Descriptor instead.
func (*TestReportStatusCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{220}
}

// The allowable request method or HTTP operation codes.
// See http://hl7.org/fhir/http-operations
type TestScriptRequestMethodCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TestScriptRequestMethodCode) Reset() {
	*x = TestScriptRequestMethodCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestScriptRequestMethodCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestScriptRequestMethodCode) ProtoMessage() {}

func (x *TestScriptRequestMethodCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestScriptRequestMethodCode.ProtoReflect.Descriptor instead.
func (*TestScriptRequestMethodCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{221}
}

// The type of trigger.
// See http://hl7.org/fhir/trigger-type
type TriggerTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TriggerTypeCode) Reset() {
	*x = TriggerTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerTypeCode) ProtoMessage() {}

func (x *TriggerTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerTypeCode.ProtoReflect.Descriptor instead.
func (*TriggerTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{222}
}

// How a type relates to its baseDefinition.
// See http://hl7.org/fhir/type-derivation-rule
type TypeDerivationRuleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TypeDerivationRuleCode) Reset() {
	*x = TypeDerivationRuleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeDerivationRuleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeDerivationRuleCode) ProtoMessage() {}

func (x *TypeDerivationRuleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeDerivationRuleCode.ProtoReflect.Descriptor instead.
func (*TypeDerivationRuleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{223}
}

// Codes to identify how UDI data was entered.
// See http://hl7.org/fhir/udi-entry-type
type UDIEntryTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UDIEntryTypeCode) Reset() {
	*x = UDIEntryTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UDIEntryTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UDIEntryTypeCode) ProtoMessage() {}

func (x *UDIEntryTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UDIEntryTypeCode.ProtoReflect.Descriptor instead.
func (*UDIEntryTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{224}
}

// The purpose of the Claim: predetermination, preauthorization, claim.
// See http://hl7.org/fhir/claim-use
type UseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UseCode) Reset() {
	*x = UseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCode) ProtoMessage() {}

func (x *UseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCode.ProtoReflect.Descriptor instead.
func (*UseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{225}
}

// FHIR Value set/code system definition for HL7 v2 table 0444 ( Name assembly
// order) See http://terminology.hl7.org/CodeSystem/v2-0444
type V20444Code struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V20444Code) Reset() {
	*x = V20444Code{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V20444Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V20444Code) ProtoMessage() {}

func (x *V20444Code) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V20444Code.ProtoReflect.Descriptor instead.
func (*V20444Code) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{226}
}

//	Codes that provide guidance around the circumstances in which a given
//	address should be used.
//
// See http://terminology.hl7.org/CodeSystem/v3-AddressUse
type V3AddressUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3AddressUseCode) Reset() {
	*x = V3AddressUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3AddressUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3AddressUseCode) ProtoMessage() {}

func (x *V3AddressUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3AddressUseCode.ProtoReflect.Descriptor instead.
func (*V3AddressUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{227}
}

//	A set of codes specifying the security classification of acts and roles in
//	accordance with the definition for concept domain "Confidentiality".
//
// See http://terminology.hl7.org/CodeSystem/v3-Confidentiality
type V3ConfidentialityCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3ConfidentialityCode) Reset() {
	*x = V3ConfidentialityCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3ConfidentialityCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3ConfidentialityCode) ProtoMessage() {}

func (x *V3ConfidentialityCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3ConfidentialityCode.ProtoReflect.Descriptor instead.
func (*V3ConfidentialityCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{228}
}

//	OpenIssue:
//
// Needs description
// See http://terminology.hl7.org/CodeSystem/v3-EntityNamePartQualifier
type V3EntityNamePartQualifierCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3EntityNamePartQualifierCode) Reset() {
	*x = V3EntityNamePartQualifierCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3EntityNamePartQualifierCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3EntityNamePartQualifierCode) ProtoMessage() {}

func (x *V3EntityNamePartQualifierCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3EntityNamePartQualifierCode.ProtoReflect.Descriptor instead.
func (*V3EntityNamePartQualifierCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{229}
}

//	Description:
//
// The qualifier is a set of codes each of which specifies a certain subcategory
// of the name part in addition to the main name part type. For example, a given
// name may be flagged as a nickname, a family name may be a pseudonym or a name
// of public records. See
// http://terminology.hl7.org/CodeSystem/v3-EntityNamePartQualifierR2
type V3EntityNamePartQualifierR2Code struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3EntityNamePartQualifierR2Code) Reset() {
	*x = V3EntityNamePartQualifierR2Code{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3EntityNamePartQualifierR2Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3EntityNamePartQualifierR2Code) ProtoMessage() {}

func (x *V3EntityNamePartQualifierR2Code) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3EntityNamePartQualifierR2Code.ProtoReflect.Descriptor instead.
func (*V3EntityNamePartQualifierR2Code) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{230}
}

// **** MISSING DEFINITIONS ****
// See http://terminology.hl7.org/CodeSystem/v3-EntityNameUse
type V3EntityNameUseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3EntityNameUseCode) Reset() {
	*x = V3EntityNameUseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3EntityNameUseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3EntityNameUseCode) ProtoMessage() {}

func (x *V3EntityNameUseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3EntityNameUseCode.ProtoReflect.Descriptor instead.
func (*V3EntityNameUseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{231}
}

//	Description:
//
// A set of codes advising a system or user which name in a set of names to
// select for a given purpose. See
// http://terminology.hl7.org/CodeSystem/v3-EntityNameUseR2
type V3EntityNameUseR2Code struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3EntityNameUseR2Code) Reset() {
	*x = V3EntityNameUseR2Code{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3EntityNameUseR2Code) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3EntityNameUseR2Code) ProtoMessage() {}

func (x *V3EntityNameUseR2Code) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3EntityNameUseR2Code.ProtoReflect.Descriptor instead.
func (*V3EntityNameUseR2Code) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{232}
}

//	A collection of codes specifying why a valid value is not present.
//
// See http://terminology.hl7.org/CodeSystem/v3-NullFlavor
type V3NullFlavorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3NullFlavorCode) Reset() {
	*x = V3NullFlavorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3NullFlavorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3NullFlavorCode) ProtoMessage() {}

func (x *V3NullFlavorCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3NullFlavorCode.ProtoReflect.Descriptor instead.
func (*V3NullFlavorCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{233}
}

//	A set of codes specifying the modality by which the Entity playing the Role
//	is participating in the Act.  Examples:
//
// Physically present, over the telephone, written communication.  Rationale:
//
// Particularly for author (originator) participants this is used to specify
// whether the information represented by the act was initially provided
// verbally, (hand-)written, or electronically.  Open Issue:
//
// There needs to be a reexamination of the hierarchies as there seems to be
// some muddling between ELECTRONIC and other concepts that involve electronic
// communication that are in other hierarchies. See
// http://terminology.hl7.org/CodeSystem/v3-ParticipationMode
type V3ParticipationModeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3ParticipationModeCode) Reset() {
	*x = V3ParticipationModeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3ParticipationModeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3ParticipationModeCode) ProtoMessage() {}

func (x *V3ParticipationModeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3ParticipationModeCode.ProtoReflect.Descriptor instead.
func (*V3ParticipationModeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{234}
}

// **** MISSING DEFINITIONS ****
// See http://terminology.hl7.org/CodeSystem/v3-ProbabilityDistributionType
type V3ProbabilityDistributionTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3ProbabilityDistributionTypeCode) Reset() {
	*x = V3ProbabilityDistributionTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3ProbabilityDistributionTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3ProbabilityDistributionTypeCode) ProtoMessage() {}

func (x *V3ProbabilityDistributionTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3ProbabilityDistributionTypeCode.ProtoReflect.Descriptor instead.
func (*V3ProbabilityDistributionTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{235}
}

//	A set of codes further specifying the kind of Role; specific classification
//	codes for further qualifying RoleClass codes.
//
// See http://terminology.hl7.org/CodeSystem/v3-RoleCode
type V3RoleCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3RoleCode) Reset() {
	*x = V3RoleCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3RoleCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3RoleCode) ProtoMessage() {}

func (x *V3RoleCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3RoleCode.ProtoReflect.Descriptor instead.
func (*V3RoleCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{236}
}

// **** MISSING DEFINITIONS ****
// See http://terminology.hl7.org/CodeSystem/v3-TimingEvent
type V3TimingEventCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *V3TimingEventCode) Reset() {
	*x = V3TimingEventCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *V3TimingEventCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*V3TimingEventCode) ProtoMessage() {}

func (x *V3TimingEventCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use V3TimingEventCode.ProtoReflect.Descriptor instead.
func (*V3TimingEventCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{237}
}

// A coded concept listing the base codes.
// See http://hl7.org/fhir/vision-base-codes
type VisionBaseCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VisionBaseCode) Reset() {
	*x = VisionBaseCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionBaseCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionBaseCode) ProtoMessage() {}

func (x *VisionBaseCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionBaseCode.ProtoReflect.Descriptor instead.
func (*VisionBaseCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{238}
}

// A coded concept listing the eye codes.
// See http://hl7.org/fhir/vision-eye-codes
type VisionEyesCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VisionEyesCode) Reset() {
	*x = VisionEyesCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisionEyesCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisionEyesCode) ProtoMessage() {}

func (x *VisionEyesCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisionEyesCode.ProtoReflect.Descriptor instead.
func (*VisionEyesCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{239}
}

// How a search parameter relates to the set of elements returned by evaluating
// its xpath query. See http://hl7.org/fhir/search-xpath-usage
type XPathUsageTypeCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *XPathUsageTypeCode) Reset() {
	*x = XPathUsageTypeCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XPathUsageTypeCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XPathUsageTypeCode) ProtoMessage() {}

func (x *XPathUsageTypeCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XPathUsageTypeCode.ProtoReflect.Descriptor instead.
func (*XPathUsageTypeCode) Descriptor() ([]byte, []int) {
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP(), []int{240}
}

var File_proto_google_fhir_proto_r4_core_codes_proto protoreflect.FileDescriptor

var file_proto_google_fhir_proto_r4_core_codes_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x1a, 0x29, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01,
	0x0a, 0x10, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x76, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x41, 0x4e, 0x59, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x6e, 0x79,
	0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a,
	0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x1d, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x35, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x22, 0x96, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x03, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x1a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x03, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x19, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52,
	0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x1a, 0x31, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x67,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45, 0x53, 0x10, 0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e,
	0x4f, 0x10, 0x02, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x72, 0x65, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2d, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x92, 0x02, 0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42,
	0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x45, 0x46,
	0x4f, 0x52, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4e, 0x43, 0x55, 0x52, 0x52, 0x45,
	0x4e, 0x54, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x07, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x46, 0x54, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x46, 0x54,
	0x45, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x09, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x01, 0x0a,
	0x1a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x53, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4f,
	0x55, 0x4c, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2d, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xcd, 0x01, 0x0a, 0x1b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e,
	0x59, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x4c, 0x4c, 0x5f, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x45, 0x58, 0x41, 0x43, 0x54, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x4d, 0x4f, 0x52, 0x45, 0x10, 0x06,
	0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x4f, 0x53, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x59,
	0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10,
	0x03, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7d, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2d, 0x75, 0x73, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x18,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x1a, 0x2f, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x8d, 0x01, 0x0a,
	0x19, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x70, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f,
	0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xfc, 0x01, 0x0a,
	0x17, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x4e, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x45, 0x53, 0x4f,
	0x4c, 0x56, 0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4c,
	0x41, 0x45, 0x10, 0x04, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6c, 0x61, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x1a, 0x41, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3b,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2d, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x18,
	0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x4d, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x56, 0x45, 0x52, 0x45, 0x10,
	0x03, 0x1a, 0x42, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x33,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x1e, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49,
	0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x4f, 0x4f, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47,
	0x49, 0x43, 0x10, 0x04, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xbc, 0x01, 0x0a,
	0x24, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44,
	0x10, 0x03, 0x1a, 0x47, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x41, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x2d, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x22, 0xac, 0x01, 0x0a, 0x21,
	0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x10, 0x03, 0x1a,
	0x39, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x9b, 0x01, 0x0a, 0x1e, 0x41,
	0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x4f, 0x44, 0x45, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x56,
	0x45, 0x52, 0x45, 0x10, 0x03, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d,
	0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xd4, 0x01, 0x0a, 0x2b, 0x41, 0x6c, 0x6c,
	0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x52, 0x69, 0x73, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a,
	0x13, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x49, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x5f, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b,
	0x10, 0x02, 0x1a, 0x4b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x2d, 0x73, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x78, 0x70, 0x2d, 0x72, 0x69, 0x73, 0x6b, 0x22,
	0x92, 0x01, 0x0a, 0x1a, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c,
	0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x74,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x02,
	0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x67, 0x79, 0x2d, 0x69, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x28, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79,
	0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xb2, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49,
	0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x46, 0x55, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x4b, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x45, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x69, 0x6e,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xfb, 0x01, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xe1, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4f, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55, 0x4c,
	0x46, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x53, 0x48, 0x4f,
	0x57, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x45,
	0x43, 0x4b, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x49,
	0x54, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0a, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f,
	0x4e, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x02, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x73,
	0x73, 0x65, 0x72, 0x74, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0xea, 0x02, 0x0a, 0x19, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xcc, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x53, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x53, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x74, 0x45, 0x71,
	0x75, 0x61, 0x6c, 0x73, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x06,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x6e, 0x6f, 0x74, 0x49, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x67,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x6c, 0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x50,
	0x54, 0x59, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54,
	0x59, 0x10, 0x08, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x74, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10,
	0x09, 0x12, 0x23, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x53, 0x10, 0x0a, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x6e, 0x6f, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x56, 0x41, 0x4c, 0x10, 0x0b,
	0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x73, 0x73, 0x65,
	0x72, 0x74, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x99, 0x03, 0x0a, 0x1a, 0x41, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xfa, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4b, 0x41, 0x59, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x0a,
	0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a,
	0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x6e, 0x6f, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x41, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x46,
	0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x09, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x07, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x6e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x08, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4e,
	0x6f, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e,
	0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4e, 0x45, 0x10,
	0x0a, 0x12, 0x31, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x12, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xb9, 0x01,
	0x0a, 0x14, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x01, 0x43,
	0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x43, 0x12, 0x0e, 0x0a, 0x01, 0x52,
	0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x52, 0x12, 0x0e, 0x0a, 0x01, 0x55,
	0x10, 0x03, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x55, 0x12, 0x0e, 0x0a, 0x01, 0x44,
	0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x44, 0x12, 0x0e, 0x0a, 0x01, 0x45,
	0x10, 0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x45, 0x1a, 0x2c, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xee, 0x01, 0x0a, 0x1e, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcb, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x0c, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x31, 0x12, 0x17, 0x0a, 0x0a,
	0x49, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x1a, 0x07, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x32, 0x12, 0x1d, 0x0a, 0x10, 0x54, 0x45, 0x4c, 0x45, 0x50, 0x48, 0x4f,
	0x4e, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x07, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x01, 0x33, 0x12, 0x1a, 0x0a, 0x0d, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x34,
	0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x01, 0x35, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x15, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x30, 0x12,
	0x1a, 0x0a, 0x0d, 0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x34, 0x12, 0x1c, 0x0a, 0x0f, 0x53,
	0x45, 0x52, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x38, 0x12, 0x1b, 0x0a, 0x0d, 0x4d, 0x41, 0x4a,
	0x4f, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x1a, 0x08, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x02, 0x31, 0x32, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x1c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x43, 0x6f, 0x73, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x4e, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4f,
	0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x39, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x45, 0x58, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x1a, 0x2a, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0xd3, 0x01, 0x0a, 0x26, 0x42, 0x69, 0x6f,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x52, 0x47, 0x41,
	0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x4c, 0x55, 0x49, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x45,
	0x4c, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x2b, 0x0a, 0x10, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x15, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x62, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x94,
	0x01, 0x0a, 0x24, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6c, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x28, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x2a, 0x42, 0x69, 0x6f, 0x6c, 0x6f, 0x67,
	0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x7b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x41, 0x52, 0x45,
	0x4e, 0x48, 0x45, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x4c, 0x53, 0x49,
	0x55, 0x53, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x4c, 0x56, 0x49, 0x4e, 0x10, 0x03,
	0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x2d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2d, 0x73, 0x63, 0x61, 0x6c,
	0x65, 0x22, 0xed, 0x01, 0x0a, 0x0e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41,
	0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x06, 0x12, 0x0b,
	0x0a, 0x07, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x53, 0x45, 0x54, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xc2, 0x04, 0x0a, 0x28, 0x43, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x46, 0x48, 0x49,
	0x52, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x95,
	0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x52, 0x52, 0x49, 0x56, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x11, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c,
	0x56, 0x45, 0x44, 0x10, 0x14, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x46, 0x55, 0x54, 0x45, 0x44,
	0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x16, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x17, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x53, 0x59, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52, 0x45, 0x45, 0x10,
	0x19, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x1a,
	0x12, 0x13, 0x0a, 0x0f, 0x41, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x46, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x10, 0x1b, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x45, 0x48, 0x49, 0x4e, 0x44, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x1c, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x1d, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x44, 0x55, 0x43, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x10, 0x1e, 0x12, 0x0d, 0x0a, 0x09,
	0x48, 0x57, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x10, 0x1f, 0x1a, 0x29, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa7, 0x01, 0x0a, 0x1b, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x69,
	0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x03, 0x1a, 0x33, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x82, 0x02, 0x0a, 0x1a, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xe3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09,
	0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x61, 0x72, 0x65,
	0x2d, 0x70, 0x6c, 0x61, 0x6e, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65,
	0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x1a, 0x2a,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x61, 0x72, 0x65, 0x2d, 0x74,
	0x65, 0x61, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x43,
	0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10,
	0x02, 0x1a, 0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e,
	0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x49, 0x4c, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x07, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa3,
	0x01, 0x0a, 0x19, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x85, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x45, 0x52, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x1a,
	0x43, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x10, 0x04, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72,
	0x65, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x41,
	0x4d, 0x50, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x52, 0x41, 0x47, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x05, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x4d, 0x65, 0x61,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x53, 0x5f, 0x41, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x5f,
	0x4f, 0x46, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x10, 0x04, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d,
	0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x2d, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e,
	0x67, 0x22, 0x8b, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a,
	0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x4e,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x13,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x50, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x05, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xb6, 0x01, 0x0a, 0x1e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x46, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x45, 0x47, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x04,
	0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x4c, 0x49,
	0x4d, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x26, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x4d, 0x61, 0x70, 0x45, 0x71, 0x75, 0x69, 0x76, 0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4c, 0x41, 0x54,
	0x45, 0x44, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x49, 0x56, 0x41,
	0x4c, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x49, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x55, 0x42, 0x53, 0x55, 0x4d, 0x45, 0x53, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x41,
	0x52, 0x52, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x53, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x45,
	0x58, 0x41, 0x43, 0x54, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x4a, 0x4f, 0x49, 0x4e,
	0x54, 0x10, 0x0a, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x6d, 0x61, 0x70, 0x2d, 0x65, 0x71, 0x75, 0x69, 0x76,
	0x61, 0x6c, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x63, 0x65,
	0x70, 0x74, 0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x55, 0x6e, 0x6d, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x50, 0x10, 0x03, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x6d, 0x61, 0x70, 0x2d, 0x75, 0x6e, 0x6d,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x1b, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x45, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x4c, 0x41, 0x50, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45,
	0x44, 0x10, 0x06, 0x1a, 0x3e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6c, 0x69, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x22, 0xee, 0x01, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a,
	0x0b, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x46, 0x55, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x06, 0x1a, 0x40, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x4c, 0x45, 0x10, 0x03, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x19,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x53, 0x49,
	0x4e, 0x43, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54,
	0x43, 0x48, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x53, 0x55, 0x50,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x72, 0x65,
	0x61, 0x64, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x1a, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a,
	0x05, 0x53, 0x48, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x53, 0x48, 0x41, 0x4c, 0x4c, 0x12, 0x18, 0x0a, 0x06, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x10,
	0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x12,
	0x12, 0x0a, 0x03, 0x4d, 0x41, 0x59, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x4d, 0x41, 0x59, 0x12, 0x20, 0x0a, 0x0a, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f,
	0x54, 0x10, 0x04, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x53, 0x48, 0x4f, 0x55, 0x4c,
	0x44, 0x2d, 0x4e, 0x4f, 0x54, 0x1a, 0x43, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3d, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x61, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x41,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x4e, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x45,
	0x44, 0x42, 0x59, 0x10, 0x04, 0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x6d, 0x65,
	0x61, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x86, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x6a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x1a, 0x30, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x2d,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xbd,
	0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x1a,
	0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x83,
	0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x69, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x22, 0xb4, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x99, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x46, 0x41, 0x58, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x4d, 0x41, 0x49,
	0x4c, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x53, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x07, 0x1a, 0x2e, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x9a, 0x01, 0x0a, 0x13,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x4d, 0x45,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x45, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x1a, 0x2b, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2d, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xdd, 0x02, 0x0a, 0x25, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x45, 0x44, 0x10, 0x09,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x4e, 0x45, 0x57, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b,
	0x45, 0x44, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44,
	0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x0f, 0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x1a, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa8, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50,
	0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58,
	0x45, 0x43, 0x55, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x45, 0x47, 0x4f,
	0x54, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x46, 0x46, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10,
	0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4e, 0x45, 0x57, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53,
	0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49,
	0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x0f, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x4f, 0x52, 0x53, 0x45,
	0x52, 0x10, 0x04, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xff, 0x02, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x41, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x53,
	0x4b, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x4b, 0x45, 0x44, 0x10, 0x06, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x53, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x09,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x4f, 0x54, 0x5f, 0x41, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x15, 0x0a,
	0x11, 0x4e, 0x45, 0x47, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x59, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x59, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x11,
	0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x0f, 0x1a, 0x3e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2d, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x87, 0x0f, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xf6, 0x0e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x47, 0x45, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x41, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x42,
	0x41, 0x43, 0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x05, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e,
	0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45,
	0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x06, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x65, 0x70, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x07, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x27, 0x0a, 0x0e, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49,
	0x4c, 0x10, 0x08, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x22, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x4f, 0x52, 0x10, 0x0a,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x0b, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x0c, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x0d, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x4f, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x0e, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x6f, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x07, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x11, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x45,
	0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x12, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x1a, 0x0f, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0a, 0x48, 0x55, 0x4d, 0x41, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x14, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x15, 0x1a, 0x10,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x2b, 0x0a, 0x10, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x16, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a,
	0x04, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x17, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x45, 0x59, 0x10, 0x18, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0e, 0x4d,
	0x4f, 0x4e, 0x45, 0x59, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x19, 0x1a,
	0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x4e, 0x41, 0x52, 0x52, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x1a, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4e, 0x61, 0x72, 0x72, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x1a, 0x19,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x10, 0x1c, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0a, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x1d, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x6f, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x44, 0x5f, 0x43, 0x48,
	0x41, 0x52, 0x41, 0x43, 0x54, 0x45, 0x52, 0x49, 0x53, 0x54, 0x49, 0x43, 0x10, 0x1e, 0x1a, 0x18,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x46, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x10, 0x1f,
	0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x68, 0x65, 0x6c, 0x66, 0x4c, 0x69, 0x66, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x10, 0x20, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x21, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x22, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1e, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x10, 0x23, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45,
	0x44, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54, 0x10, 0x24, 0x1a, 0x15, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x44, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x25, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x09, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x10, 0x26, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x53, 0x49, 0x4d, 0x50,
	0x4c, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x27, 0x1a, 0x14, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x10, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x28, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x18, 0x0a, 0x06, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x29, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x12, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x2a, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x55,
	0x53, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x2b, 0x1a, 0x12,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x55, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x42, 0x41, 0x53, 0x45, 0x36, 0x34, 0x5f, 0x42, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x10, 0x2c, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x62, 0x61, 0x73,
	0x65, 0x36, 0x34, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f,
	0x4c, 0x45, 0x41, 0x4e, 0x10, 0x2d, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x4f, 0x4e, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x2e, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x2f, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x30, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x31, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49,
	0x4d, 0x41, 0x4c, 0x10, 0x32, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x33, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x34, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x35, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x52, 0x4b, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x36, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x49, 0x44, 0x10, 0x37, 0x12, 0x23,
	0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x38,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x49, 0x6e, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x39, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x3a, 0x12, 0x23, 0x0a, 0x0c, 0x55, 0x4e, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x10, 0x3b, 0x1a, 0x11, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0b, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x12, 0x07,
	0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x3c, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x3d,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x3e, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x48,
	0x54, 0x4d, 0x4c, 0x10, 0x3f, 0x1a, 0x24, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1e, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0e,
	0x44, 0x61, 0x79, 0x73, 0x4f, 0x66, 0x57, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x89,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x55, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x45, 0x44, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x48, 0x55, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x52, 0x49, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x41, 0x54, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4e,
	0x10, 0x07, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x61,
	0x79, 0x73, 0x2d, 0x6f, 0x66, 0x2d, 0x77, 0x65, 0x65, 0x6b, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x44, 0x45, 0x52, 0x41,
	0x54, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x1a, 0x30, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22,
	0xca, 0x01, 0x0a, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54,
	0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x18, 0x0a,
	0x14, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x4c, 0x49, 0x42,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xaf, 0x01, 0x0a,
	0x1f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6c,
	0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x8b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x57, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x1a, 0x31, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xaa,
	0x01, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x04,
	0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xbb, 0x01, 0x0a, 0x15,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c,
	0x41, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c,
	0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x41, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x59, 0x41, 0x4e, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x48, 0x49, 0x54, 0x45, 0x10,
	0x08, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x2d, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x21, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x8b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x42, 0x59,
	0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdd, 0x01,
	0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x44, 0x49,
	0x5f, 0x4c, 0x41, 0x42, 0x45, 0x4c, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x49, 0x45, 0x4e, 0x44, 0x4c, 0x59, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4e, 0x55, 0x46, 0x41, 0x43, 0x54, 0x55, 0x52, 0x45, 0x52,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x4c,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x06, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x2d, 0x6e, 0x61, 0x6d, 0x65, 0x74, 0x79, 0x70, 0x65, 0x22, 0xcf, 0x01,
	0x0a, 0x1c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xae,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x1a, 0x31, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x8a, 0x02, 0x0a, 0x1a, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xeb,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x52,
	0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x45,
	0x4e, 0x44, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0a, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa5, 0x01, 0x0a,
	0x15, 0x44, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x05, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x26, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x64, 0x69, 0x73, 0x63, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x7b, 0x0a, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f,
	0x4e, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6d, 0x6f, 0x64,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x1b, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x45, 0x52, 0x53, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaf,
	0x01, 0x0a, 0x1c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x8e, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x53,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x49, 0x47, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x53, 0x10, 0x04, 0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54, 0x48, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x34, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73,
	0x65, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x55, 0x54,
	0x48, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49, 0x54, 0x53, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x35, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x70, 0x75, 0x72,
	0x70, 0x6f, 0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57,
	0x68, 0x65, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x6d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03,
	0x41, 0x4e, 0x59, 0x10, 0x02, 0x1a, 0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x22, 0xad,
	0x01, 0x0a, 0x1b, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8d,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xeb,
	0x01, 0x0a, 0x13, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x52, 0x52, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52, 0x49, 0x41, 0x47, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x05,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x09,
	0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x6e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb3, 0x01, 0x0a,
	0x12, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x45, 0x53, 0x54, 0x10, 0x06, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x17, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66,
	0x43, 0x61, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xba,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x57, 0x41, 0x49, 0x54, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4e,
	0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x2d, 0x6f, 0x66, 0x2d,
	0x63, 0x61, 0x72, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x17,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x26, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x9c, 0x03, 0x0a, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x04,
	0x4d, 0x4f, 0x52, 0x4e, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x4f,
	0x52, 0x4e, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x4f, 0x52, 0x4e, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59,
	0x10, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x4f, 0x52, 0x4e, 0x2e, 0x65,
	0x61, 0x72, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x09, 0x4d, 0x4f, 0x52, 0x4e, 0x5f, 0x4c, 0x41, 0x54,
	0x45, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4d, 0x4f, 0x52, 0x4e, 0x2e,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x4e, 0x4f, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x4f, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x46,
	0x54, 0x10, 0x05, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x46, 0x54, 0x12, 0x1e,
	0x0a, 0x09, 0x41, 0x46, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x06, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x41, 0x46, 0x54, 0x2e, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x12, 0x1c,
	0x0a, 0x08, 0x41, 0x46, 0x54, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x07, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x41, 0x46, 0x54, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x03,
	0x45, 0x56, 0x45, 0x10, 0x08, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x45, 0x56, 0x45,
	0x12, 0x1e, 0x0a, 0x09, 0x45, 0x56, 0x45, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x09, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x56, 0x45, 0x2e, 0x65, 0x61, 0x72, 0x6c, 0x79,
	0x12, 0x1c, 0x0a, 0x08, 0x45, 0x56, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x56, 0x45, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x05, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x10, 0x0b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x4e, 0x49, 0x47, 0x48, 0x54, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x48, 0x53, 0x10, 0x0c, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x48, 0x53, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x7d, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x43, 0x48, 0x4f, 0x54, 0x4f, 0x4d, 0x4f,
	0x55, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x4f,
	0x55, 0x53, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x03, 0x1a, 0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x90,
	0x01, 0x0a, 0x1c, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72,
	0x69, 0x6f, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x70, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x02, 0x1a, 0x34, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2d, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xb2, 0x01, 0x0a, 0x1c, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x50, 0x55, 0x54,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x03, 0x1a, 0x46,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x65, 0x78, 0x70, 0x61,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x4c, 0x4c, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x03, 0x1a, 0x45, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x2d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x22, 0xb8, 0x01, 0x0a, 0x1e, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x35, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x6f, 0x66, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x11, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x74, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45,
	0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x28,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x48, 0x49,
	0x52, 0x50, 0x41, 0x54, 0x48, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f,
	0x4e, 0x10, 0x03, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x46, 0x48, 0x49, 0x52, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04,
	0x1a, 0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xeb, 0x02, 0x0a, 0x1b, 0x46, 0x48,
	0x49, 0x52, 0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52,
	0x59, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x49, 0x53,
	0x54, 0x4f, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x48,
	0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x09, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x41, 0x52, 0x43,
	0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x41, 0x52,
	0x43, 0x48, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x0e, 0x12, 0x0f, 0x0a,
	0x0b, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x46, 0x48, 0x49, 0x52,
	0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x98, 0x05, 0x0a, 0x0f, 0x46, 0x48, 0x49, 0x52, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x06,
	0x56, 0x5f, 0x30, 0x5f, 0x30, 0x31, 0x10, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x30, 0x2e, 0x30, 0x31, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x5f, 0x30, 0x5f, 0x30, 0x35, 0x10, 0x02,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x30, 0x2e, 0x30, 0x35, 0x12, 0x16, 0x0a, 0x06,
	0x56, 0x5f, 0x30, 0x5f, 0x30, 0x36, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x30, 0x2e, 0x30, 0x36, 0x12, 0x16, 0x0a, 0x06, 0x56, 0x5f, 0x30, 0x5f, 0x31, 0x31, 0x10, 0x04,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x30, 0x2e, 0x31, 0x31, 0x12, 0x1a, 0x0a, 0x08,
	0x56, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x38, 0x30, 0x10, 0x05, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x30, 0x2e, 0x30, 0x2e, 0x38, 0x30, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x5f, 0x30, 0x5f,
	0x30, 0x5f, 0x38, 0x31, 0x10, 0x06, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x30, 0x2e,
	0x30, 0x2e, 0x38, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x5f, 0x30, 0x5f, 0x30, 0x5f, 0x38, 0x32,
	0x10, 0x07, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x30, 0x2e, 0x30, 0x2e, 0x38, 0x32,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x30, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x08, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x30, 0x2e, 0x34, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f,
	0x30, 0x5f, 0x35, 0x5f, 0x30, 0x10, 0x09, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x30,
	0x2e, 0x35, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x30, 0x10,
	0x0a, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x0b, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f,
	0x30, 0x5f, 0x32, 0x10, 0x0c, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x30,
	0x2e, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x0d, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x31, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x5f, 0x31, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x0e, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x31, 0x2e, 0x34, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x36, 0x5f,
	0x30, 0x10, 0x0f, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x36, 0x2e, 0x30,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x31, 0x5f, 0x38, 0x5f, 0x30, 0x10, 0x10, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x31, 0x2e, 0x38, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f,
	0x33, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x11, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x33,
	0x2e, 0x30, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x31, 0x10,
	0x12, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x33, 0x2e, 0x30, 0x2e, 0x31, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x5f, 0x33, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x13, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x33, 0x2e, 0x33, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x33, 0x5f,
	0x35, 0x5f, 0x30, 0x10, 0x14, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x33, 0x2e, 0x35,
	0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x5f, 0x34, 0x5f, 0x30, 0x5f, 0x30, 0x10, 0x15, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x34, 0x2e, 0x30, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x5f, 0x34, 0x5f, 0x30, 0x5f, 0x31, 0x10, 0x16, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x34, 0x2e, 0x30, 0x2e, 0x31, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x46, 0x48, 0x49, 0x52, 0x2d, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xae,
	0x01, 0x0a, 0x17, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45,
	0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x04, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xe0, 0x01, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x06, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x01, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3d,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x53, 0x5f, 0x41, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45,
	0x53, 0x43, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x46, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x52,
	0x45, 0x47, 0x45, 0x58, 0x10, 0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x0a,
	0x0a, 0x06, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x53, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x45,
	0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x09, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x04, 0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x66,
	0x6d, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x46, 0x6c, 0x61,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a,
	0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x66, 0x6c, 0x61, 0x67, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x18, 0x47, 0x6f, 0x61, 0x6c, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x47, 0x52, 0x45,
	0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x47, 0x52, 0x45, 0x45, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x42,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x67, 0x6f, 0x61, 0x6c,
	0x2d, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x17, 0x47, 0x6f, 0x61, 0x6c, 0x4c, 0x69, 0x66, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcd,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48,
	0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x09, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x67, 0x6f, 0x61, 0x6c, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa9,
	0x01, 0x0a, 0x18, 0x47, 0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x49, 0x46, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x04, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2d, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xc6, 0x01, 0x0a, 0x10,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xb1, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x45, 0x41, 0x4e, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4d,
	0x45, 0x41, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x45, 0x41, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x10,
	0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x4d,
	0x45, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x5f,
	0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x4e, 0x10, 0x06, 0x1a, 0x27, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x6d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50,
	0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4e, 0x49, 0x4d, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x06,
	0x1a, 0x24, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x47, 0x75, 0x69, 0x64, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10,
	0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x06, 0x1a, 0x32, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x47, 0x75, 0x69, 0x64, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x58, 0x4d, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x67, 0x75, 0x69, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x67, 0x65, 0x2d, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x02, 0x0a, 0x12, 0x47, 0x75, 0x69,
	0x64, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x90, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x53,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x54, 0x58, 0x5f, 0x43, 0x41,
	0x43, 0x48, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x42, 0x52, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x53, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x58, 0x4d, 0x4c, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x55, 0x52, 0x54, 0x4c, 0x45, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x54, 0x45, 0x4d, 0x50, 0x4c, 0x41, 0x54, 0x45,
	0x10, 0x0a, 0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x75,
	0x69, 0x64, 0x65, 0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x10, 0x48, 0x4c, 0x37, 0x57, 0x6f, 0x72, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x42, 0x43, 0x43, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x44, 0x53, 0x10, 0x02, 0x12,
	0x07, 0x0a, 0x03, 0x43, 0x51, 0x49, 0x10, 0x03, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x47, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x44, 0x45, 0x56, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x48, 0x52,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x48, 0x49, 0x52, 0x10, 0x07, 0x12, 0x06, 0x0a, 0x02,
	0x46, 0x4d, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x53, 0x49, 0x10, 0x09, 0x12, 0x06, 0x0a,
	0x02, 0x49, 0x49, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x4d, 0x10, 0x0b, 0x12, 0x07,
	0x0a, 0x03, 0x49, 0x54, 0x53, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4e, 0x4d, 0x10, 0x0d,
	0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4f, 0x10, 0x0e, 0x12, 0x06, 0x0a, 0x02, 0x50, 0x41, 0x10, 0x0f,
	0x12, 0x06, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x48, 0x45, 0x52,
	0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x48, 0x58, 0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x52, 0x52, 0x10, 0x13, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x44, 0x10, 0x14, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x45, 0x43, 0x10, 0x15, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x53, 0x10, 0x16, 0x12, 0x09, 0x0a,
	0x05, 0x56, 0x4f, 0x43, 0x41, 0x42, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x49, 0x44, 0x10,
	0x18, 0x1a, 0x3a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x34, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x68,
	0x6c, 0x37, 0x2d, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xde, 0x01,
	0x0a, 0x0c, 0x48, 0x54, 0x54, 0x50, 0x56, 0x65, 0x72, 0x62, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcd,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x47, 0x45, 0x54, 0x10, 0x01, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x47, 0x45, 0x54, 0x12, 0x14, 0x0a, 0x04, 0x48, 0x45, 0x41, 0x44, 0x10,
	0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48, 0x45, 0x41, 0x44, 0x12, 0x14, 0x0a,
	0x04, 0x50, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50,
	0x4f, 0x53, 0x54, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x04, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x50, 0x55, 0x54, 0x12, 0x18, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x05, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x12, 0x16, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x06, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x76, 0x65, 0x72, 0x62, 0x22, 0xd2,
	0x01, 0x0a, 0x1a, 0x48, 0x75, 0x6d, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x73, 0x73, 0x65,
	0x6d, 0x62, 0x6c, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb3, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x03, 0x4e, 0x4c, 0x31, 0x10, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x4e, 0x4c, 0x31, 0x12, 0x12, 0x0a, 0x03, 0x4e, 0x4c, 0x32, 0x10, 0x02, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x4c, 0x32, 0x12, 0x12, 0x0a, 0x03, 0x4e, 0x4c,
	0x33, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x4c, 0x33, 0x12, 0x12,
	0x0a, 0x03, 0x4e, 0x4c, 0x34, 0x10, 0x04, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e,
	0x4c, 0x34, 0x1a, 0x3f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x39, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x6e, 0x61, 0x6d, 0x65, 0x2d, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x2d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x55, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d,
	0x75, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x41, 0x73, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x31, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x32, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x34, 0x10, 0x04, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x61, 0x73, 0x73, 0x75,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xbd, 0x01, 0x0a, 0x16, 0x49,
	0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56,
	0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x05, 0x1a, 0x2d, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x49,
	0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x9c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x4e, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x04, 0x1a, 0x39, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x33, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x69, 0x6d, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xcc, 0x01, 0x0a, 0x1d, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xaa, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x52, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x02, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x45, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x41, 0x58, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x06, 0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41,
	0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x53, 0x53, 0x55, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69,
	0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x96, 0x01,
	0x0a, 0x11, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x54, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a, 0x28, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2d, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0xaf, 0x04, 0x0a, 0x0d, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9d, 0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54,
	0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x56, 0x41, 0x52, 0x49, 0x41, 0x4e, 0x54, 0x10,
	0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x06, 0x12,
	0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45,
	0x4e, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x50, 0x50, 0x52, 0x45, 0x53, 0x53, 0x45,
	0x44, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f,
	0x52, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c,
	0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x45, 0x53, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x4f, 0x5f, 0x4c,
	0x4f, 0x4e, 0x47, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x13, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x4f, 0x4f, 0x5f, 0x43, 0x4f,
	0x53, 0x54, 0x4c, 0x59, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e,
	0x46, 0x4c, 0x49, 0x43, 0x54, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x19, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x1c,
	0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x1d,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x48, 0x52, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x1e, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c,
	0x10, 0x1f, 0x1a, 0x24, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6e,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x44, 0x5f, 0x42, 0x59, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x45, 0x41, 0x4c,
	0x53, 0x4f, 0x10, 0x04, 0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x4c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x75, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a,
	0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x26, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x7f, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x4f, 0x52, 0x4b,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x53, 0x10, 0x03,
	0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x25, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x77, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49,
	0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x49, 0x4e,
	0x44, 0x10, 0x02, 0x1a, 0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a,
	0x12, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x76, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03,
	0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x0e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x42, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x4f, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x4c, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x04, 0x1a,
	0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x2d, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x1e, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x49, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x45, 0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x02, 0x1a, 0x48, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x2d, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x2f, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2d,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xaf, 0x01,
	0x0a, 0x15, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x49, 0x4e, 0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x41, 0x54, 0x41, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04,
	0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xf9, 0x01, 0x0a, 0x22, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e,
	0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x1a, 0x43, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x95, 0x02, 0x0a, 0x1c,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x65, 0x6e,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf4, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10,
	0x07, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x09, 0x1a, 0x45, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x64, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x2d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x1d, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x46, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f,
	0x53, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52,
	0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x52, 0x45, 0x46, 0x4c, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x08, 0x1a, 0x3d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f,
	0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0xfc, 0x01, 0x0a, 0x1e, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f,
	0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x54, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x08, 0x1a, 0x40,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xa3, 0x01, 0x0a, 0x14, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x36,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x1b, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f,
	0x4c, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x07,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x3d, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x37, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x01, 0x0a,
	0x1f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x8c, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22,
	0xb6, 0x01, 0x0a, 0x20, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x4c, 0x57,
	0x41, 0x59, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x04, 0x1a, 0x38,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x32, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xab, 0x01, 0x0a, 0x0b, 0x4e, 0x61, 0x6d,
	0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x46, 0x46, 0x49,
	0x43, 0x49, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x4d, 0x50, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x49, 0x43, 0x4b, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x05, 0x12, 0x07, 0x0a,
	0x03, 0x4f, 0x4c, 0x44, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x49, 0x44, 0x45, 0x4e,
	0x10, 0x07, 0x1a, 0x22, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1c, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x2d, 0x75, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x1e, 0x4e, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x4f, 0x49, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x91, 0x01,
	0x0a, 0x14, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f,
	0x44, 0x45, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f,
	0x4f, 0x54, 0x10, 0x03, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x6e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a,
	0x0a, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x04, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x6e, 0x61, 0x72, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x7e, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x6e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x50,
	0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x49, 0x4e, 0x54, 0x4f, 0x50, 0x45, 0x52, 0x10, 0x03, 0x1a,
	0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6e, 0x6f, 0x74, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xf6, 0x02, 0x0a, 0x17, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xda, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x10, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x10, 0x43, 0x4f, 0x44, 0x45, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x10, 0x02, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0f, 0x43, 0x6f, 0x64, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54,
	0x45, 0x47, 0x45, 0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x06, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x05, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x07, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45,
	0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x08, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x49, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x0a, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x0b,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x1a, 0x2d,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa4, 0x01,
	0x0a, 0x1c, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x41, 0x42, 0x53, 0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x34,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xca,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x4c, 0x49, 0x4d, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x08, 0x1a, 0x2c, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7b, 0x0a, 0x11, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x66, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x1a, 0x28,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x19, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x55,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x1a, 0x31, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2d, 0x75, 0x73, 0x65, 0x22, 0x7f,
	0x0a, 0x13, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x45, 0x4e,
	0x53, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4e, 0x54, 0x49, 0x53, 0x45, 0x4e, 0x53,
	0x45, 0x10, 0x02, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6f,
	0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x9f, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x83, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x03, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x22, 0xaa, 0x01, 0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x1a,
	0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf5,
	0x01, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd6, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1b, 0x0a, 0x08, 0x58, 0x4d, 0x4c, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x01,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x78, 0x6d, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x12,
	0x1b, 0x0a, 0x08, 0x58, 0x4d, 0x4c, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x02, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x78, 0x6d, 0x6c, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x74, 0x79, 0x70, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x43,
	0x44, 0x41, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x63, 0x64, 0x61, 0x54, 0x65, 0x78, 0x74, 0x12, 0x09, 0x0a, 0x05, 0x58, 0x48, 0x54, 0x4d,
	0x4c, 0x10, 0x05, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a,
	0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43,
	0x49, 0x4d, 0x41, 0x4c, 0x10, 0x07, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x52,
	0x49, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x56,
	0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x55, 0x4f, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x05, 0x1a,
	0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2d, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x6f, 0x6c,
	0x65, 0x22, 0x9b, 0x01, 0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x04, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x7e, 0x0a, 0x0f, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x6b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x45, 0x4c, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4e, 0x50, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xec, 0x01, 0x0a, 0x16, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd1, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x01, 0x1a, 0x07,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3c, 0x12, 0x23, 0x0a, 0x15, 0x4c, 0x45, 0x53, 0x53, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f,
	0x10, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x3c, 0x3d, 0x12, 0x26, 0x0a, 0x18,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f,
	0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x02, 0x3e, 0x3d, 0x12, 0x19, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f,
	0x54, 0x48, 0x41, 0x4e, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3e, 0x1a,
	0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xba,
	0x02, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x98, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x01, 0x12, 0x13, 0x0a, 0x06, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x10, 0x02, 0x1a, 0x07, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3d, 0x12, 0x1a, 0x0a, 0x0c, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x21, 0x3d, 0x12, 0x19, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x3e, 0x12, 0x16, 0x0a,
	0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x05, 0x1a, 0x07, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x3c, 0x12, 0x26, 0x0a, 0x18, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54,
	0x4f, 0x10, 0x06, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x3e, 0x3d, 0x12, 0x23, 0x0a,
	0x15, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x07, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x3c, 0x3d, 0x1a, 0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x2d, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xce, 0x02, 0x0a, 0x19,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb0, 0x02, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53,
	0x50, 0x4c, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x0b,
	0x0a, 0x07, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x08, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x09, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x10, 0x0c, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45,
	0x4e, 0x5f, 0x43, 0x48, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x48, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x41,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x11, 0x1a, 0x23, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf0, 0x01, 0x0a,
	0x1e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xcd, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x50,
	0x54, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41,
	0x59, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e,
	0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41,
	0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x4e, 0x4f,
	0x4e, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x05, 0x1a, 0x44, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x3e, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e,
	0x61, 0x69, 0x72, 0x65, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0xce, 0x01, 0x0a, 0x1f, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e,
	0x44, 0x45, 0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x36, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x30,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72,
	0x65, 0x2d, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xb8, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x98, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x44, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x9e, 0x01, 0x0a, 0x19,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x49, 0x54, 0x48, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e,
	0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10, 0x03, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xf6, 0x01, 0x0a,
	0x17, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x55, 0x53, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x49, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45, 0x44, 0x45, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x46, 0x52, 0x4f,
	0x4d, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x4f,
	0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x45, 0x44, 0x5f,
	0x4f, 0x46, 0x10, 0x08, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x41, 0x50, 0x49, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x41, 0x55,
	0x54, 0x48, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x1a,
	0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x6f, 0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xd6, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x52, 0x4f, 0x50, 0x4f, 0x53, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0d, 0x0a,
	0x09, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x52, 0x49, 0x47, 0x49,
	0x4e, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x52,
	0x45, 0x46, 0x4c, 0x45, 0x58, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x06, 0x12, 0x10, 0x0a,
	0x0c, 0x46, 0x49, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x07, 0x12,
	0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x1a,
	0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x7b, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x4f, 0x55, 0x54, 0x49, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x52, 0x47, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08,
	0x0a, 0x04, 0x41, 0x53, 0x41, 0x50, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x41, 0x54,
	0x10, 0x04, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0xeb,
	0x05, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xcf, 0x05, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x22, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x01,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x02, 0x1a, 0x19, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x13, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x41, 0x52, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x03, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43,
	0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x10, 0x04, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12,
	0x35, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x10, 0x06, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x12, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x08, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x1b, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x1a,
	0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x12, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0a, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x0b, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x4e,
	0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x0f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x0c, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x55, 0x50, 0x50,
	0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0d, 0x1a, 0x13, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x0e, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x31, 0x0a, 0x13, 0x56, 0x49, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0f,
	0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x2a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xc5, 0x01, 0x0a,
	0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x07, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x50, 0x4f, 0x53, 0x55, 0x52, 0x45,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x03, 0x1a,
	0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xfd, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75,
	0x64, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xe1, 0x02, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56, 0x45, 0x4c,
	0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43,
	0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x52, 0x55, 0x41, 0x4c,
	0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x41, 0x43, 0x43, 0x52, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e,
	0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x45, 0x4d,
	0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x5f,
	0x54, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x52, 0x55, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x32, 0x0a, 0x2e,
	0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x49, 0x4c, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x53,
	0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x43, 0x52, 0x55, 0x41, 0x4c, 0x5f, 0x41, 0x4e,
	0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a,
	0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e, 0x10, 0x0b, 0x1a,
	0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xe2, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc4,
	0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x50, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x4f, 0x46, 0x46, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0x07,
	0x12, 0x19, 0x0a, 0x15, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x5f, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x4f, 0x54, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x43, 0x41, 0x4e, 0x44, 0x49, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x4e,
	0x10, 0x0d, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2d, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41,
	0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x55,
	0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x49,
	0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x1a, 0x46, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x22, 0xa2, 0x34, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8d, 0x34, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x49, 0x54, 0x59, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x41, 0x44,
	0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x49, 0x4e, 0x54,
	0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x12, 0x41, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x49, 0x6e, 0x74, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x41, 0x50, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x10, 0x05, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x41, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x41, 0x50, 0x50, 0x4f,
	0x49, 0x4e, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x06, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x41, 0x55, 0x44, 0x49, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x07, 0x1a, 0x10,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x08, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x09, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x12, 0x42, 0x0a, 0x1c, 0x42, 0x49, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x43, 0x41, 0x4c,
	0x4c, 0x59, 0x5f, 0x44, 0x45, 0x52, 0x49, 0x56, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x10, 0x0a, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x42, 0x69, 0x6f, 0x6c,
	0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x0b, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x42, 0x55, 0x4e, 0x44, 0x4c, 0x45, 0x10, 0x0c, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x43, 0x41, 0x50,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x0d, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x0e, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1d, 0x0a,
	0x09, 0x43, 0x41, 0x52, 0x45, 0x5f, 0x54, 0x45, 0x41, 0x4d, 0x10, 0x0f, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x43, 0x61, 0x72, 0x65, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x25, 0x0a, 0x0d,
	0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x10, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x49, 0x54,
	0x45, 0x4d, 0x10, 0x11, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x36, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x12, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x13, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f,
	0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x14, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x13, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x52,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x15, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12,
	0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x16, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x17, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a,
	0x15, 0x43, 0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x18, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x54, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19,
	0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0b, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1a, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0x1b, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x70,
	0x74, 0x4d, 0x61, 0x70, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x1c, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x10,
	0x1d, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x1e, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1c,
	0x0a, 0x08, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x10, 0x1f, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x1c,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x20, 0x1a, 0x20,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x44, 0x0a, 0x1d, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x45, 0x4c, 0x49,
	0x47, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x21, 0x1a, 0x21, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1b, 0x43, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54,
	0x45, 0x44, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x10, 0x22, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x23, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x24,
	0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x25, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12,
	0x27, 0x0a, 0x0e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x26, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x27, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x11,
	0x44, 0x49, 0x41, 0x47, 0x4e, 0x4f, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x28, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x44,
	0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x49, 0x46, 0x45, 0x53, 0x54,
	0x10, 0x29, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45,
	0x10, 0x2a, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x44,
	0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x2b,
	0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54,
	0x5f, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45,
	0x53, 0x49, 0x53, 0x10, 0x2c, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x73, 0x12, 0x1e, 0x0a, 0x09, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x2d, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x10, 0x2e, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x2f, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x11, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x4c, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x30, 0x1a, 0x18, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x12, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x50, 0x49, 0x53, 0x4f, 0x44,
	0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x43, 0x41, 0x52, 0x45, 0x10, 0x31, 0x1a, 0x13, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0d, 0x45, 0x70, 0x69, 0x73, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x61, 0x72, 0x65,
	0x12, 0x2b, 0x0a, 0x10, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x32, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x08, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x33, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x45,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x34, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x45, 0x58,
	0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52, 0x49, 0x4f, 0x10, 0x35,
	0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53,
	0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x45, 0x58, 0x50, 0x4c, 0x41,
	0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x46, 0x5f, 0x42, 0x45, 0x4e, 0x45, 0x46, 0x49,
	0x54, 0x10, 0x36, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x45, 0x78, 0x70, 0x6c, 0x61,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12,
	0x34, 0x0a, 0x15, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x59, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x37, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x13, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x47, 0x10, 0x38, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x14, 0x0a, 0x04, 0x47,
	0x4f, 0x41, 0x4c, 0x10, 0x39, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x47, 0x6f, 0x61,
	0x6c, 0x12, 0x2b, 0x0a, 0x10, 0x47, 0x52, 0x41, 0x50, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3a, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x05, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x3b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x11, 0x47, 0x55, 0x49, 0x44, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x3c, 0x1a, 0x16, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x10, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x43,
	0x41, 0x52, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x3d, 0x1a, 0x17, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x11, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x61, 0x72, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0x3e, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0c, 0x49, 0x6d, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x24, 0x0a,
	0x0c, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3f, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x17, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x40,
	0x1a, 0x1c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x16, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x1b, 0x49, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52,
	0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x41, 0x1a,
	0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x49, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x14, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x42, 0x1a, 0x19, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x13, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x43, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x1a, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x44, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x4c,
	0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x45, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x07, 0x4c, 0x49, 0x4e, 0x4b, 0x41,
	0x47, 0x45, 0x10, 0x46, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x69, 0x6e, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x47, 0x1a, 0x0a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x48, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x4d, 0x45, 0x41, 0x53, 0x55,
	0x52, 0x45, 0x10, 0x49, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x45, 0x41, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x52,
	0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x4a, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x05,
	0x4d, 0x45, 0x44, 0x49, 0x41, 0x10, 0x4b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x4c, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x19, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x4d, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x13, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x50, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x4e, 0x1a, 0x18,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x69, 0x73, 0x70, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45,
	0x10, 0x4f, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x2f, 0x0a,
	0x12, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x50, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x14, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x51, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x10, 0x52, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x48, 0x0a, 0x1f, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x53, 0x1a, 0x23, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x22,
	0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x54, 0x1a, 0x26, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x20, 0x4d, 0x65, 0x64, 0x69,
	0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x1c,
	0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43,
	0x54, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x55, 0x1a, 0x20,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x1c, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x47, 0x52, 0x45, 0x44, 0x49, 0x45, 0x4e, 0x54,
	0x10, 0x56, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x64,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x1d, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x57, 0x1a, 0x21, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1b, 0x4d,
	0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x1e, 0x4d, 0x45,
	0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f,
	0x4d, 0x41, 0x4e, 0x55, 0x46, 0x41, 0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x10, 0x58, 0x1a, 0x22,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1c, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x44,
	0x10, 0x59, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x4d, 0x65, 0x64, 0x69, 0x63, 0x69,
	0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x64, 0x12, 0x4a, 0x0a, 0x20, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x50, 0x48, 0x41, 0x52, 0x4d, 0x41, 0x43, 0x45,
	0x55, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x5a, 0x1a, 0x24, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1e,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x51,
	0x0a, 0x24, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x53, 0x49, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x10, 0x5b, 0x1a, 0x27, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x21,
	0x4d, 0x65, 0x64, 0x69, 0x63, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x6e, 0x64, 0x65, 0x73, 0x69, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x12, 0x2f, 0x0a, 0x12, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x5c, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x48, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x5d, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x12, 0x4d,
	0x4f, 0x4c, 0x45, 0x43, 0x55, 0x4c, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43,
	0x45, 0x10, 0x5e, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4d, 0x6f, 0x6c, 0x65, 0x63,
	0x75, 0x6c, 0x61, 0x72, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0d,
	0x4e, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x5f, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4e, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x0f, 0x4e, 0x55, 0x54, 0x52, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x60, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e,
	0x4e, 0x75, 0x74, 0x72, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0b, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x61, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x16, 0x4f, 0x42, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x62, 0x1a, 0x1b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x63, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2d, 0x0a, 0x11, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55,
	0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x64, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0c, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x65, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x18, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x66, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53,
	0x10, 0x67, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x68, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0e, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x49,
	0x43, 0x45, 0x10, 0x69, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x6a, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x06, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x6b, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x0f,
	0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x6c, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0c, 0x50, 0x52, 0x41, 0x43, 0x54,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x10, 0x6d, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0c, 0x50, 0x72, 0x61, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x11, 0x50, 0x52, 0x41, 0x43, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x45, 0x52, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x10, 0x6e, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x50, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x09,
	0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x10, 0x6f, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0a,
	0x50, 0x52, 0x4f, 0x56, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x70, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x50, 0x72, 0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x26,
	0x0a, 0x0d, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x10,
	0x71, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49,
	0x4f, 0x4e, 0x4e, 0x41, 0x49, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45,
	0x10, 0x72, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x6e, 0x61, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0e, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x10, 0x73, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x10, 0x74, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x31, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x75, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x45,
	0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x76, 0x1a, 0x1f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x19, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x53, 0x54, 0x55, 0x44, 0x59, 0x10, 0x77, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x75, 0x64, 0x79, 0x12, 0x2b, 0x0a,
	0x10, 0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x78, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x52, 0x65, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x79, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x52, 0x49, 0x53, 0x4b,
	0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x7a, 0x1a, 0x14, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x52, 0x69, 0x73, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x17, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x45, 0x56, 0x49, 0x44,
	0x45, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x54, 0x48, 0x45, 0x53, 0x49, 0x53, 0x10, 0x7b,
	0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x52, 0x69, 0x73, 0x6b, 0x45, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x1c, 0x0a,
	0x08, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x7c, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10,
	0x7d, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x7e, 0x1a, 0x14, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x04, 0x53, 0x4c, 0x4f, 0x54, 0x10, 0x7f, 0x1a, 0x0a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x4d, 0x45, 0x4e, 0x10, 0x80, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x12, 0x32, 0x0a, 0x13, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x4d, 0x45, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x81, 0x01, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d,
	0x65, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x14,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x82, 0x01, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0d, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x4d, 0x41, 0x50, 0x10, 0x83, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x0c, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x84, 0x01, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x85,
	0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x37, 0x0a, 0x16, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4e, 0x55, 0x43, 0x4c, 0x45, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x49, 0x44, 0x10, 0x86, 0x01, 0x1a,
	0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x4e, 0x75, 0x63, 0x6c, 0x65, 0x69, 0x63, 0x41, 0x63, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x53,
	0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x4d, 0x45, 0x52,
	0x10, 0x87, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x79, 0x6d, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x11, 0x53,
	0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x49, 0x4e,
	0x10, 0x88, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x69, 0x6e, 0x12, 0x49, 0x0a, 0x1f, 0x53,
	0x55, 0x42, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x89,
	0x01, 0x1a, 0x23, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52,
	0x49, 0x41, 0x4c, 0x10, 0x8a, 0x01, 0x1a, 0x1d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x17, 0x53, 0x75,
	0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x3a, 0x0a, 0x17, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x8b, 0x01, 0x1a, 0x1c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x16, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2a, 0x0a, 0x0f, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x44, 0x45, 0x4c, 0x49,
	0x56, 0x45, 0x52, 0x59, 0x10, 0x8c, 0x01, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53,
	0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a,
	0x0e, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10,
	0x8d, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x04, 0x54, 0x41, 0x53, 0x4b, 0x10,
	0x8e, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3c,
	0x0a, 0x18, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x43, 0x41,
	0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45, 0x53, 0x10, 0x8f, 0x01, 0x1a, 0x1d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x17, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0b,
	0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x90, 0x01, 0x1a, 0x10,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x22, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x10,
	0x91, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x92, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x10, 0x93, 0x01, 0x1a, 0x18,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x13, 0x56, 0x49, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x94, 0x01, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x28, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x5f,
	0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x45, 0x52, 0x53,
	0x49, 0x4f, 0x4e, 0x45, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x2b,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x8d, 0x01, 0x0a, 0x10,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x1a, 0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x19,
	0x52, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x31, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2d, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x59, 0x0a, 0x0f, 0x53, 0x50, 0x44,
	0x58, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xfc, 0x58, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x17, 0x42, 0x53, 0x44, 0x5f, 0x5a, 0x45,
	0x52, 0x4f, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53,
	0x45, 0x10, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x30, 0x42, 0x53, 0x44, 0x12,
	0x12, 0x0a, 0x03, 0x41, 0x41, 0x4c, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x41, 0x41, 0x4c, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x42, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x53, 0x10,
	0x04, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41, 0x62, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x44, 0x4f, 0x42, 0x45, 0x5f, 0x32, 0x30, 0x30, 0x36, 0x10,
	0x05, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x64, 0x6f, 0x62, 0x65, 0x2d, 0x32,
	0x30, 0x30, 0x36, 0x12, 0x22, 0x0a, 0x0b, 0x41, 0x44, 0x4f, 0x42, 0x45, 0x5f, 0x47, 0x4c, 0x59,
	0x50, 0x48, 0x10, 0x06, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x41, 0x64, 0x6f, 0x62,
	0x65, 0x2d, 0x47, 0x6c, 0x79, 0x70, 0x68, 0x12, 0x14, 0x0a, 0x04, 0x41, 0x44, 0x53, 0x4c, 0x10,
	0x07, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x41, 0x44, 0x53, 0x4c, 0x12, 0x1a, 0x0a,
	0x07, 0x41, 0x46, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x08, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x41, 0x46, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x46, 0x4c,
	0x5f, 0x31, 0x5f, 0x32, 0x10, 0x09, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x46,
	0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x46, 0x4c, 0x5f, 0x32, 0x5f, 0x30,
	0x10, 0x0a, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x46, 0x4c, 0x2d, 0x32, 0x2e,
	0x30, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x46, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x0b, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x46, 0x4c, 0x2d, 0x32, 0x2e, 0x31, 0x12, 0x1a, 0x0a,
	0x07, 0x41, 0x46, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x0c, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x41, 0x46, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x46, 0x4d,
	0x50, 0x41, 0x52, 0x53, 0x45, 0x10, 0x0d, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41,
	0x66, 0x6d, 0x70, 0x61, 0x72, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0d, 0x41, 0x47, 0x50, 0x4c, 0x5f,
	0x31, 0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x0e, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0d, 0x41, 0x47, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12,
	0x2e, 0x0a, 0x11, 0x41, 0x47, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x4c,
	0x41, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x41, 0x47,
	0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0d, 0x41, 0x47, 0x50, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59,
	0x10, 0x10, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x41, 0x47, 0x50, 0x4c, 0x2d, 0x33,
	0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x11, 0x41, 0x47, 0x50, 0x4c, 0x5f,
	0x33, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x11, 0x1a, 0x17,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x41, 0x47, 0x50, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d, 0x6f,
	0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x4c, 0x41, 0x44, 0x44,
	0x49, 0x4e, 0x10, 0x12, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x6c, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x4d, 0x44, 0x50, 0x4c, 0x50, 0x41, 0x10, 0x13,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x4d, 0x44, 0x50, 0x4c, 0x50, 0x41, 0x12,
	0x12, 0x0a, 0x03, 0x41, 0x4d, 0x4c, 0x10, 0x14, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x41, 0x4d, 0x4c, 0x12, 0x16, 0x0a, 0x05, 0x41, 0x4d, 0x50, 0x41, 0x53, 0x10, 0x15, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x41, 0x4d, 0x50, 0x41, 0x53, 0x12, 0x1c, 0x0a, 0x08, 0x41,
	0x4e, 0x54, 0x4c, 0x52, 0x5f, 0x50, 0x44, 0x10, 0x16, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x41, 0x4e, 0x54, 0x4c, 0x52, 0x2d, 0x50, 0x44, 0x12, 0x20, 0x0a, 0x0a, 0x41, 0x50, 0x41,
	0x43, 0x48, 0x45, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x17, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0a, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x20, 0x0a, 0x0a, 0x41,
	0x50, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x18, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x20, 0x0a,
	0x0a, 0x41, 0x50, 0x41, 0x43, 0x48, 0x45, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x19, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x41, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2d, 0x32, 0x2e, 0x30, 0x12,
	0x18, 0x0a, 0x06, 0x41, 0x50, 0x41, 0x46, 0x4d, 0x4c, 0x10, 0x1a, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x41, 0x50, 0x41, 0x46, 0x4d, 0x4c, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x50, 0x4c,
	0x5f, 0x31, 0x5f, 0x30, 0x10, 0x1b, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x50,
	0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0x1c, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x2d,
	0x31, 0x2e, 0x30, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10,
	0x1d, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x2d, 0x31, 0x2e,
	0x31, 0x12, 0x1c, 0x0a, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0x1e, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x12,
	0x1c, 0x0a, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x1f, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x41, 0x50, 0x53, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x2c, 0x0a,
	0x10, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x43, 0x4c,
	0x38, 0x10, 0x20, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2d, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x6c, 0x38, 0x12, 0x2e, 0x0a, 0x11, 0x41,
	0x52, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x50, 0x45, 0x52, 0x4c,
	0x10, 0x21, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x2d, 0x31, 0x2e, 0x30, 0x2d, 0x50, 0x65, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0c, 0x41,
	0x52, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x22, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x2d, 0x31, 0x2e,
	0x30, 0x12, 0x24, 0x0a, 0x0c, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x32, 0x5f,
	0x30, 0x10, 0x23, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x18, 0x0a, 0x06, 0x42, 0x41, 0x48, 0x59, 0x50,
	0x48, 0x10, 0x24, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x42, 0x61, 0x68, 0x79, 0x70,
	0x68, 0x12, 0x14, 0x0a, 0x04, 0x42, 0x41, 0x52, 0x52, 0x10, 0x25, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x42, 0x61, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x08, 0x42, 0x45, 0x45, 0x52, 0x57,
	0x41, 0x52, 0x45, 0x10, 0x26, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x42, 0x65, 0x65,
	0x72, 0x77, 0x61, 0x72, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x4f, 0x52,
	0x52, 0x45, 0x4e, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x27, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0e, 0x42, 0x69, 0x74, 0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x31, 0x2e, 0x30,
	0x12, 0x29, 0x0a, 0x0f, 0x42, 0x49, 0x54, 0x5f, 0x54, 0x4f, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x31, 0x5f, 0x31, 0x10, 0x28, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x42, 0x69, 0x74,
	0x54, 0x6f, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1a, 0x0a, 0x07, 0x42,
	0x4f, 0x52, 0x43, 0x45, 0x55, 0x58, 0x10, 0x29, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x42, 0x6f, 0x72, 0x63, 0x65, 0x75, 0x78, 0x12, 0x24, 0x0a, 0x0c, 0x42, 0x53, 0x44, 0x5f, 0x31,
	0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x10, 0x2a, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0c, 0x42, 0x53, 0x44, 0x2d, 0x31, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x15, 0x42, 0x53, 0x44, 0x5f, 0x32, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5f, 0x42, 0x53, 0x44, 0x10, 0x2b, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14,
	0x42, 0x53, 0x44, 0x2d, 0x32, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x46, 0x72, 0x65,
	0x65, 0x42, 0x53, 0x44, 0x12, 0x33, 0x0a, 0x14, 0x42, 0x53, 0x44, 0x5f, 0x32, 0x5f, 0x43, 0x4c,
	0x41, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x5f, 0x42, 0x53, 0x44, 0x10, 0x2c, 0x1a, 0x19,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x42, 0x53, 0x44, 0x2d, 0x32, 0x2d, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x2d, 0x4e, 0x65, 0x74, 0x42, 0x53, 0x44, 0x12, 0x32, 0x0a, 0x13, 0x42, 0x53, 0x44,
	0x5f, 0x32, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x45, 0x4e, 0x54,
	0x10, 0x2d, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x42, 0x53, 0x44, 0x2d, 0x32, 0x2d,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x50, 0x61, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0c, 0x42, 0x53, 0x44, 0x5f, 0x32, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x10, 0x2e, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x42, 0x53, 0x44, 0x2d, 0x32, 0x2d, 0x43, 0x6c, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x18, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x2f, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x12, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53,
	0x45, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x10, 0x30, 0x1a, 0x18, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x12, 0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x12, 0x2e, 0x0a, 0x11, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x4c, 0x42, 0x4e, 0x4c, 0x10, 0x31, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x11, 0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d, 0x4c,
	0x42, 0x4e, 0x4c, 0x12, 0x54, 0x0a, 0x24, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41,
	0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x55, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x5f, 0x4c,
	0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x32, 0x30, 0x31, 0x34, 0x10, 0x32, 0x1a, 0x2a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x24, 0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x2d, 0x4e, 0x6f, 0x2d, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x2d, 0x32, 0x30, 0x31, 0x34, 0x12, 0x4a, 0x0a, 0x1f, 0x42, 0x53, 0x44,
	0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x55, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x33, 0x1a, 0x25,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1f, 0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x2d, 0x4e, 0x6f, 0x2d, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x20, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43,
	0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x55, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x5f, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e, 0x54, 0x59, 0x10, 0x34, 0x1a, 0x26, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x20, 0x42, 0x53, 0x44, 0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2d,
	0x4e, 0x6f, 0x2d, 0x4e, 0x75, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x2d, 0x57, 0x61, 0x72, 0x72, 0x61,
	0x6e, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0c, 0x42, 0x53, 0x44, 0x5f, 0x33, 0x5f, 0x43, 0x4c, 0x41,
	0x55, 0x53, 0x45, 0x10, 0x35, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x42, 0x53, 0x44,
	0x2d, 0x33, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x42, 0x53, 0x44,
	0x5f, 0x34, 0x5f, 0x43, 0x4c, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x55, 0x43, 0x10, 0x36, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x42, 0x53, 0x44, 0x2d, 0x34, 0x2d, 0x43, 0x6c, 0x61, 0x75,
	0x73, 0x65, 0x2d, 0x55, 0x43, 0x12, 0x24, 0x0a, 0x0c, 0x42, 0x53, 0x44, 0x5f, 0x34, 0x5f, 0x43,
	0x4c, 0x41, 0x55, 0x53, 0x45, 0x10, 0x37, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x42,
	0x53, 0x44, 0x2d, 0x34, 0x2d, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0e, 0x42,
	0x53, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x38, 0x1a,
	0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x42, 0x53, 0x44, 0x2d, 0x50, 0x72, 0x6f, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x0f, 0x42, 0x53, 0x44, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x39, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0f, 0x42, 0x53, 0x44, 0x2d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1a, 0x0a, 0x07, 0x42, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x3a, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x42, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x22, 0x0a,
	0x0b, 0x42, 0x5a, 0x49, 0x50, 0x32, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x35, 0x10, 0x3b, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x62, 0x7a, 0x69, 0x70, 0x32, 0x2d, 0x31, 0x2e, 0x30, 0x2e,
	0x35, 0x12, 0x22, 0x0a, 0x0b, 0x42, 0x5a, 0x49, 0x50, 0x32, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x36,
	0x10, 0x3c, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x62, 0x7a, 0x69, 0x70, 0x32, 0x2d,
	0x31, 0x2e, 0x30, 0x2e, 0x36, 0x12, 0x1a, 0x0a, 0x07, 0x43, 0x41, 0x4c, 0x44, 0x45, 0x52, 0x41,
	0x10, 0x3d, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x43, 0x61, 0x6c, 0x64, 0x65, 0x72,
	0x61, 0x12, 0x20, 0x0a, 0x0a, 0x43, 0x41, 0x54, 0x4f, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10,
	0x3e, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x41, 0x54, 0x4f, 0x53, 0x4c, 0x2d,
	0x31, 0x2e, 0x31, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x31, 0x5f, 0x30,
	0x10, 0x3f, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x31, 0x2e, 0x30, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x32, 0x5f, 0x30,
	0x10, 0x40, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x32, 0x2e, 0x30, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x32, 0x5f, 0x35,
	0x10, 0x41, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x32, 0x2e, 0x35, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x33, 0x5f, 0x30,
	0x10, 0x42, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x33, 0x2e, 0x30, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x34, 0x5f, 0x30,
	0x10, 0x43, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x34, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f,
	0x31, 0x5f, 0x30, 0x10, 0x44, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d,
	0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f,
	0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x45, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x32, 0x2e, 0x30, 0x12,
	0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x32, 0x5f, 0x35, 0x10,
	0x46, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e,
	0x43, 0x2d, 0x32, 0x2e, 0x35, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e,
	0x43, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x47, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43,
	0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43,
	0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x34, 0x5f, 0x30, 0x10, 0x48, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x34, 0x2e,
	0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x4e, 0x44,
	0x5f, 0x31, 0x5f, 0x30, 0x10, 0x49, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43,
	0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x4e, 0x44, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x2a, 0x0a,
	0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x4e, 0x44, 0x5f, 0x32, 0x5f, 0x30,
	0x10, 0x4a, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x4e, 0x43, 0x2d, 0x4e, 0x44, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f,
	0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x4e, 0x44, 0x5f, 0x32, 0x5f, 0x35, 0x10, 0x4b, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x4e,
	0x44, 0x2d, 0x32, 0x2e, 0x35, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e,
	0x43, 0x5f, 0x4e, 0x44, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x4c, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x4e, 0x44, 0x2d, 0x33, 0x2e,
	0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x4e, 0x44,
	0x5f, 0x34, 0x5f, 0x30, 0x10, 0x4d, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43,
	0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x4e, 0x44, 0x2d, 0x34, 0x2e, 0x30, 0x12, 0x2a, 0x0a,
	0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x31, 0x5f, 0x30,
	0x10, 0x4e, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x4e, 0x43, 0x2d, 0x53, 0x41, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f,
	0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x4f, 0x1a, 0x15,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x53,
	0x41, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e,
	0x43, 0x5f, 0x53, 0x41, 0x5f, 0x32, 0x5f, 0x35, 0x10, 0x50, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x53, 0x41, 0x2d, 0x32, 0x2e,
	0x35, 0x12, 0x2a, 0x0a, 0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x53, 0x41,
	0x5f, 0x33, 0x5f, 0x30, 0x10, 0x51, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43,
	0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x43, 0x2d, 0x53, 0x41, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x2a, 0x0a,
	0x0f, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x43, 0x5f, 0x53, 0x41, 0x5f, 0x34, 0x5f, 0x30,
	0x10, 0x52, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d,
	0x4e, 0x43, 0x2d, 0x53, 0x41, 0x2d, 0x34, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f,
	0x42, 0x59, 0x5f, 0x4e, 0x44, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x53, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x44, 0x2d, 0x31, 0x2e, 0x30, 0x12,
	0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x44, 0x5f, 0x32, 0x5f, 0x30, 0x10,
	0x54, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e,
	0x44, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e,
	0x44, 0x5f, 0x32, 0x5f, 0x35, 0x10, 0x55, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43,
	0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x44, 0x2d, 0x32, 0x2e, 0x35, 0x12, 0x24, 0x0a, 0x0c, 0x43,
	0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x44, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x56, 0x1a, 0x12, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x4e, 0x44, 0x2d, 0x33, 0x2e,
	0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4e, 0x44, 0x5f, 0x34, 0x5f,
	0x30, 0x10, 0x57, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59,
	0x2d, 0x4e, 0x44, 0x2d, 0x34, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59,
	0x5f, 0x53, 0x41, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x58, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x53, 0x41, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x24, 0x0a,
	0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x41, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x59, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x53, 0x41, 0x2d,
	0x32, 0x2e, 0x30, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x41, 0x5f,
	0x32, 0x5f, 0x35, 0x10, 0x5a, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d,
	0x42, 0x59, 0x2d, 0x53, 0x41, 0x2d, 0x32, 0x2e, 0x35, 0x12, 0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f,
	0x42, 0x59, 0x5f, 0x53, 0x41, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x5b, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x53, 0x41, 0x2d, 0x33, 0x2e, 0x30, 0x12,
	0x24, 0x0a, 0x0c, 0x43, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x53, 0x41, 0x5f, 0x34, 0x5f, 0x30, 0x10,
	0x5c, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x43, 0x43, 0x2d, 0x42, 0x59, 0x2d, 0x53,
	0x41, 0x2d, 0x34, 0x2e, 0x30, 0x12, 0x1a, 0x0a, 0x07, 0x43, 0x43, 0x30, 0x5f, 0x31, 0x5f, 0x30,
	0x10, 0x5d, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x43, 0x43, 0x30, 0x2d, 0x31, 0x2e,
	0x30, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x44, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x5e, 0x1a,
	0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x44, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12,
	0x1c, 0x0a, 0x08, 0x43, 0x44, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x5f, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x44, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x32, 0x0a,
	0x13, 0x43, 0x44, 0x4c, 0x41, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x56, 0x45,
	0x5f, 0x31, 0x5f, 0x30, 0x10, 0x60, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x43, 0x44,
	0x4c, 0x41, 0x2d, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x76, 0x65, 0x2d, 0x31, 0x2e,
	0x30, 0x12, 0x2c, 0x0a, 0x10, 0x43, 0x44, 0x4c, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x61, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x43,
	0x44, 0x4c, 0x41, 0x2d, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x2d, 0x31, 0x2e, 0x30, 0x12,
	0x20, 0x0a, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x62, 0x1a,
	0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x2d, 0x31, 0x2e,
	0x30, 0x12, 0x20, 0x0a, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10,
	0x63, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x2d,
	0x31, 0x2e, 0x31, 0x12, 0x20, 0x0a, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f, 0x32, 0x5f,
	0x30, 0x10, 0x64, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c,
	0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x20, 0x0a, 0x0a, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f,
	0x32, 0x5f, 0x31, 0x10, 0x65, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x45, 0x43,
	0x49, 0x4c, 0x4c, 0x2d, 0x32, 0x2e, 0x31, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x45, 0x43, 0x49, 0x4c,
	0x4c, 0x5f, 0x42, 0x10, 0x66, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x45, 0x43,
	0x49, 0x4c, 0x4c, 0x2d, 0x42, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x45, 0x43, 0x49, 0x4c, 0x4c, 0x5f,
	0x43, 0x10, 0x67, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x45, 0x43, 0x49, 0x4c,
	0x4c, 0x2d, 0x43, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x53, 0x54,
	0x49, 0x43, 0x10, 0x68, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6c, 0x41, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x4e, 0x52, 0x49, 0x5f, 0x4a,
	0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10, 0x69, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43,
	0x4e, 0x52, 0x49, 0x2d, 0x4a, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1a, 0x43, 0x4e,
	0x52, 0x49, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x5f, 0x47, 0x50, 0x4c, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x6a, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x1a, 0x43, 0x4e, 0x52, 0x49, 0x2d, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2d, 0x47, 0x50,
	0x4c, 0x2d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0b,
	0x43, 0x4e, 0x52, 0x49, 0x5f, 0x50, 0x59, 0x54, 0x48, 0x4f, 0x4e, 0x10, 0x6b, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x43, 0x4e, 0x52, 0x49, 0x2d, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x12, 0x20, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x44, 0x4f, 0x52, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x6c,
	0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x6f, 0x72, 0x2d, 0x31,
	0x2e, 0x31, 0x12, 0x1c, 0x0a, 0x08, 0x43, 0x50, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x6d,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x50, 0x41, 0x4c, 0x2d, 0x31, 0x2e, 0x30,
	0x12, 0x1a, 0x0a, 0x07, 0x43, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x6e, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x43, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1e, 0x0a, 0x09,
	0x43, 0x50, 0x4f, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x32, 0x10, 0x6f, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x43, 0x50, 0x4f, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x32, 0x12, 0x1e, 0x0a, 0x09,
	0x43, 0x52, 0x4f, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x70, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x0f,
	0x43, 0x52, 0x59, 0x53, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10,
	0x71, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x43, 0x72, 0x79, 0x73, 0x74, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0b, 0x43, 0x55, 0x41, 0x5f, 0x4f,
	0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x72, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b,
	0x43, 0x55, 0x41, 0x2d, 0x4f, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x14, 0x0a, 0x04, 0x43,
	0x55, 0x42, 0x45, 0x10, 0x73, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x75, 0x62,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x55, 0x52, 0x4c, 0x10, 0x74, 0x12, 0x1e, 0x0a, 0x09, 0x44,
	0x5f, 0x46, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x75, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x44, 0x2d, 0x46, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x0c, 0x0a, 0x08, 0x44,
	0x49, 0x46, 0x46, 0x4d, 0x41, 0x52, 0x4b, 0x10, 0x76, 0x12, 0x12, 0x0a, 0x03, 0x44, 0x4f, 0x43,
	0x10, 0x77, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x44, 0x4f, 0x43, 0x12, 0x1a, 0x0a,
	0x07, 0x44, 0x4f, 0x54, 0x53, 0x45, 0x51, 0x4e, 0x10, 0x78, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x44, 0x6f, 0x74, 0x73, 0x65, 0x71, 0x6e, 0x12, 0x14, 0x0a, 0x04, 0x44, 0x53, 0x44,
	0x50, 0x10, 0x79, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x44, 0x53, 0x44, 0x50, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x56, 0x49, 0x50, 0x44, 0x46, 0x4d, 0x10, 0x7a, 0x12, 0x1a, 0x0a, 0x07,
	0x45, 0x43, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x7b, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x45, 0x43, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1a, 0x0a, 0x07, 0x45, 0x43, 0x4c, 0x5f,
	0x32, 0x5f, 0x30, 0x10, 0x7c, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x43, 0x4c,
	0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1a, 0x0a, 0x07, 0x45, 0x46, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10,
	0x7d, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x46, 0x4c, 0x2d, 0x31, 0x2e, 0x30,
	0x12, 0x1a, 0x0a, 0x07, 0x45, 0x46, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x7e, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x46, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x19, 0x0a, 0x07,
	0x45, 0x5f, 0x47, 0x45, 0x4e, 0x49, 0x58, 0x10, 0x7f, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x65, 0x47, 0x65, 0x6e, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x07, 0x45, 0x4e, 0x54, 0x45, 0x53,
	0x53, 0x41, 0x10, 0x80, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x6e, 0x74,
	0x65, 0x73, 0x73, 0x61, 0x12, 0x1b, 0x0a, 0x07, 0x45, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10,
	0x81, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x50, 0x4c, 0x2d, 0x31, 0x2e,
	0x30, 0x12, 0x1b, 0x0a, 0x07, 0x45, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x82, 0x01, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x20,
	0x0a, 0x0a, 0x45, 0x52, 0x4c, 0x5f, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x83, 0x01, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x72, 0x6c, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31,
	0x12, 0x22, 0x0a, 0x0b, 0x45, 0x55, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x47, 0x52, 0x49, 0x44, 0x10,
	0x84, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x45, 0x55, 0x44, 0x61, 0x74, 0x61,
	0x67, 0x72, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30,
	0x10, 0x85, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x2d,
	0x31, 0x2e, 0x30, 0x12, 0x1d, 0x0a, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10,
	0x86, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x2d, 0x31,
	0x2e, 0x31, 0x12, 0x1d, 0x0a, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0x87,
	0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x45, 0x55, 0x50, 0x4c, 0x2d, 0x31, 0x2e,
	0x32, 0x12, 0x1b, 0x0a, 0x07, 0x45, 0x55, 0x52, 0x4f, 0x53, 0x59, 0x4d, 0x10, 0x88, 0x01, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x45, 0x75, 0x72, 0x6f, 0x73, 0x79, 0x6d, 0x12, 0x15,
	0x0a, 0x04, 0x46, 0x41, 0x49, 0x52, 0x10, 0x89, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x46, 0x61, 0x69, 0x72, 0x12, 0x27, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x57, 0x4f,
	0x52, 0x58, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x8a, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x78, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x20,
	0x0a, 0x0a, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x8b, 0x01, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x46, 0x72, 0x65, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x17, 0x0a, 0x05, 0x46, 0x53, 0x46, 0x41, 0x50, 0x10, 0x8c, 0x01, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x46, 0x53, 0x46, 0x41, 0x50, 0x12, 0x17, 0x0a, 0x05, 0x46, 0x53, 0x46,
	0x55, 0x4c, 0x10, 0x8d, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x46, 0x53, 0x46,
	0x55, 0x4c, 0x12, 0x1b, 0x0a, 0x07, 0x46, 0x53, 0x46, 0x55, 0x4c, 0x4c, 0x52, 0x10, 0x8e, 0x01,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x46, 0x53, 0x46, 0x55, 0x4c, 0x4c, 0x52, 0x12,
	0x13, 0x0a, 0x03, 0x46, 0x54, 0x4c, 0x10, 0x8f, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x46, 0x54, 0x4c, 0x12, 0x27, 0x0a, 0x0d, 0x47, 0x46, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x31,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x90, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x47, 0x46, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a,
	0x11, 0x47, 0x46, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54,
	0x45, 0x52, 0x10, 0x91, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x47, 0x46, 0x44,
	0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x0d, 0x47, 0x46, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x92, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x47, 0x46, 0x44, 0x4c, 0x2d, 0x31,
	0x2e, 0x32, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x47, 0x46, 0x44, 0x4c, 0x5f,
	0x31, 0x5f, 0x32, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x93, 0x01, 0x1a,
	0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x47, 0x46, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x2d,
	0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0d, 0x47, 0x46, 0x44, 0x4c,
	0x5f, 0x31, 0x5f, 0x33, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x94, 0x01, 0x1a, 0x13, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0d, 0x47, 0x46, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x33, 0x2d, 0x6f, 0x6e, 0x6c,
	0x79, 0x12, 0x2f, 0x0a, 0x11, 0x47, 0x46, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x33, 0x5f, 0x4f, 0x52,
	0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x95, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x11, 0x47, 0x46, 0x44, 0x4c, 0x2d, 0x31, 0x2e, 0x33, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x1d, 0x0a, 0x08, 0x47, 0x49, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x96,
	0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x47, 0x69, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x17, 0x0a, 0x05, 0x47, 0x4c, 0x32, 0x50, 0x53, 0x10, 0x97, 0x01, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x4c, 0x32, 0x50, 0x53, 0x12, 0x17, 0x0a, 0x05, 0x47, 0x4c,
	0x49, 0x44, 0x45, 0x10, 0x98, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x6c,
	0x69, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x47, 0x4c, 0x55, 0x4c, 0x58, 0x45, 0x10, 0x99, 0x01,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x47, 0x6c, 0x75, 0x6c, 0x78, 0x65, 0x12, 0x0c,
	0x0a, 0x07, 0x47, 0x4e, 0x55, 0x50, 0x4c, 0x4f, 0x54, 0x10, 0x9a, 0x01, 0x12, 0x25, 0x0a, 0x0c,
	0x47, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x9b, 0x01, 0x1a,
	0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x47, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x2d, 0x6f,
	0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x47, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x4f,
	0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x9c, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x10, 0x47, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0c, 0x47, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x9d, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x47, 0x50, 0x4c,
	0x2d, 0x32, 0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x47, 0x50, 0x4c,
	0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0x9e, 0x01,
	0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x47, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x2d,
	0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0c, 0x47, 0x50, 0x4c, 0x5f,
	0x33, 0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x9f, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0c, 0x47, 0x50, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12,
	0x2d, 0x0a, 0x10, 0x47, 0x50, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41,
	0x54, 0x45, 0x52, 0x10, 0xa0, 0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x47, 0x50,
	0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0b, 0x47, 0x5f, 0x53, 0x4f, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x33, 0x42, 0x10, 0xa1, 0x01,
	0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x67, 0x53, 0x4f, 0x41, 0x50, 0x2d, 0x31, 0x2e,
	0x33, 0x62, 0x12, 0x28, 0x0a, 0x0e, 0x48, 0x41, 0x53, 0x4b, 0x45, 0x4c, 0x4c, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0xa2, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x48,
	0x61, 0x73, 0x6b, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x04,
	0x48, 0x50, 0x4e, 0x44, 0x10, 0xa3, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48,
	0x50, 0x4e, 0x44, 0x12, 0x1d, 0x0a, 0x08, 0x49, 0x42, 0x4d, 0x5f, 0x50, 0x49, 0x42, 0x53, 0x10,
	0xa4, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x49, 0x42, 0x4d, 0x2d, 0x70, 0x69,
	0x62, 0x73, 0x12, 0x13, 0x0a, 0x03, 0x49, 0x43, 0x55, 0x10, 0xa5, 0x01, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x49, 0x43, 0x55, 0x12, 0x13, 0x0a, 0x03, 0x49, 0x4a, 0x47, 0x10, 0xa6,
	0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x4a, 0x47, 0x12, 0x24, 0x0a, 0x0c,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x47, 0x49, 0x43, 0x4b, 0x10, 0xa7, 0x01, 0x1a,
	0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x67, 0x69,
	0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x07, 0x49, 0x5f, 0x4d, 0x41, 0x54, 0x49, 0x58, 0x10, 0xa8, 0x01,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x69, 0x4d, 0x61, 0x74, 0x69, 0x78, 0x12, 0x19,
	0x0a, 0x06, 0x49, 0x4d, 0x4c, 0x49, 0x42, 0x32, 0x10, 0xa9, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x49, 0x6d, 0x6c, 0x69, 0x62, 0x32, 0x12, 0x1d, 0x0a, 0x08, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x5a, 0x49, 0x50, 0x10, 0xaa, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x49, 0x6e, 0x66, 0x6f, 0x2d, 0x5a, 0x49, 0x50, 0x12, 0x21, 0x0a, 0x0a, 0x49, 0x4e, 0x54, 0x45,
	0x4c, 0x5f, 0x41, 0x43, 0x50, 0x49, 0x10, 0xab, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0a, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x2d, 0x41, 0x43, 0x50, 0x49, 0x12, 0x17, 0x0a, 0x05, 0x49,
	0x4e, 0x54, 0x45, 0x4c, 0x10, 0xac, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x49,
	0x6e, 0x74, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xad, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x13, 0x0a,
	0x03, 0x49, 0x50, 0x41, 0x10, 0xae, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49,
	0x50, 0x41, 0x12, 0x1b, 0x0a, 0x07, 0x49, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xaf, 0x01,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x49, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12,
	0x13, 0x0a, 0x03, 0x49, 0x53, 0x43, 0x10, 0xb0, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x49, 0x53, 0x43, 0x12, 0x22, 0x0a, 0x0b, 0x4a, 0x41, 0x53, 0x5f, 0x50, 0x45, 0x52, 0x5f,
	0x32, 0x5f, 0x30, 0x10, 0xb1, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x4a, 0x61,
	0x73, 0x50, 0x65, 0x72, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x15, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e,
	0x10, 0xb2, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x12,
	0x1b, 0x0a, 0x07, 0x4c, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0xb3, 0x01, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x41, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x12, 0x1b, 0x0a, 0x07,
	0x4c, 0x41, 0x4c, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0xb4, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x4c, 0x41, 0x4c, 0x2d, 0x31, 0x2e, 0x33, 0x12, 0x1b, 0x0a, 0x07, 0x4c, 0x41, 0x54,
	0x45, 0x58, 0x32, 0x45, 0x10, 0xb5, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c,
	0x61, 0x74, 0x65, 0x78, 0x32, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x4c, 0x45, 0x50, 0x54, 0x4f, 0x4e,
	0x49, 0x43, 0x41, 0x10, 0xb6, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4c, 0x65,
	0x70, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x12, 0x27, 0x0a, 0x0d, 0x4c, 0x47, 0x50, 0x4c, 0x5f,
	0x32, 0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xb7, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0d, 0x4c, 0x47, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x2d, 0x6f, 0x6e, 0x6c, 0x79,
	0x12, 0x2f, 0x0a, 0x11, 0x4c, 0x47, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x4f, 0x52, 0x5f,
	0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0xb8, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11,
	0x4c, 0x47, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0d, 0x4c, 0x47, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0xb9, 0x01, 0x1a, 0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4c, 0x47, 0x50,
	0x4c, 0x2d, 0x32, 0x2e, 0x31, 0x2d, 0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x4c, 0x47,
	0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10,
	0xba, 0x01, 0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x4c, 0x47, 0x50, 0x4c, 0x2d, 0x32,
	0x2e, 0x31, 0x2d, 0x6f, 0x72, 0x2d, 0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0d, 0x4c,
	0x47, 0x50, 0x4c, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0xbb, 0x01, 0x1a,
	0x13, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0d, 0x4c, 0x47, 0x50, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d,
	0x6f, 0x6e, 0x6c, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x4c, 0x47, 0x50, 0x4c, 0x5f, 0x33, 0x5f, 0x30,
	0x5f, 0x4f, 0x52, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x10, 0xbc, 0x01, 0x1a, 0x17, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x11, 0x4c, 0x47, 0x50, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x2d, 0x6f, 0x72, 0x2d,
	0x6c, 0x61, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x06, 0x4c, 0x47, 0x50, 0x4c, 0x4c, 0x52, 0x10,
	0xbd, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4c, 0x47, 0x50, 0x4c, 0x4c, 0x52,
	0x12, 0x19, 0x0a, 0x06, 0x4c, 0x49, 0x42, 0x50, 0x4e, 0x47, 0x10, 0xbe, 0x01, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4c, 0x69, 0x62, 0x70, 0x6e, 0x67, 0x12, 0x0c, 0x0a, 0x07, 0x4c,
	0x49, 0x42, 0x54, 0x49, 0x46, 0x46, 0x10, 0xbf, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x4c, 0x49, 0x5f,
	0x4c, 0x49, 0x5f, 0x51, 0x5f, 0x50, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xc0, 0x01, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4c, 0x69, 0x4c, 0x69, 0x51, 0x2d, 0x50, 0x2d, 0x31, 0x2e, 0x31,
	0x12, 0x25, 0x0a, 0x0d, 0x4c, 0x49, 0x5f, 0x4c, 0x49, 0x5f, 0x51, 0x5f, 0x52, 0x5f, 0x31, 0x5f,
	0x31, 0x10, 0xc1, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4c, 0x69, 0x4c, 0x69,
	0x51, 0x2d, 0x52, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x2d, 0x0a, 0x11, 0x4c, 0x49, 0x5f, 0x4c, 0x49,
	0x5f, 0x51, 0x5f, 0x52, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xc2, 0x01, 0x1a,
	0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4c, 0x69, 0x4c, 0x69, 0x51, 0x2d, 0x52, 0x70, 0x6c,
	0x75, 0x73, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x26, 0x0a, 0x0d, 0x4c, 0x49, 0x4e, 0x55, 0x58, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x49, 0x42, 0x10, 0xc3, 0x01, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x2d, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x42, 0x12, 0x1b,
	0x0a, 0x07, 0x4c, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xc4, 0x01, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1d, 0x0a, 0x08, 0x4c,
	0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x32, 0x10, 0xc5, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x4c, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x32, 0x12, 0x1d, 0x0a, 0x08, 0x4c, 0x50,
	0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xc6, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x4c, 0x50, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1d, 0x0a, 0x08, 0x4c, 0x50, 0x50,
	0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xc7, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x4c, 0x50, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1d, 0x0a, 0x08, 0x4c, 0x50, 0x50, 0x4c,
	0x5f, 0x31, 0x5f, 0x32, 0x10, 0xc8, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4c,
	0x50, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x12, 0x1f, 0x0a, 0x09, 0x4c, 0x50, 0x50, 0x4c, 0x5f,
	0x31, 0x5f, 0x33, 0x41, 0x10, 0xc9, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4c,
	0x50, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x33, 0x61, 0x12, 0x1f, 0x0a, 0x09, 0x4c, 0x50, 0x50, 0x4c,
	0x5f, 0x31, 0x5f, 0x33, 0x43, 0x10, 0xca, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x4c, 0x50, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x33, 0x63, 0x12, 0x20, 0x0a, 0x0a, 0x4d, 0x41, 0x4b,
	0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0xcb, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x4d, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x06, 0x4d,
	0x49, 0x52, 0x5f, 0x4f, 0x53, 0x10, 0xcc, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x4d, 0x69, 0x72, 0x4f, 0x53, 0x12, 0x17, 0x0a, 0x05, 0x4d, 0x49, 0x54, 0x5f, 0x30, 0x10, 0xcd,
	0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x49, 0x54, 0x2d, 0x30, 0x12, 0x2b,
	0x0a, 0x0f, 0x4d, 0x49, 0x54, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0xce, 0x01, 0x1a, 0x15, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0f, 0x4d, 0x49, 0x54, 0x2d,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x07, 0x4d,
	0x49, 0x54, 0x5f, 0x43, 0x4d, 0x55, 0x10, 0xcf, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x4d, 0x49, 0x54, 0x2d, 0x43, 0x4d, 0x55, 0x12, 0x1d, 0x0a, 0x08, 0x4d, 0x49, 0x54, 0x5f,
	0x45, 0x4e, 0x4e, 0x41, 0x10, 0xd0, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4d,
	0x49, 0x54, 0x2d, 0x65, 0x6e, 0x6e, 0x61, 0x12, 0x1b, 0x0a, 0x07, 0x4d, 0x49, 0x54, 0x5f, 0x46,
	0x45, 0x48, 0x10, 0xd1, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x49, 0x54,
	0x2d, 0x66, 0x65, 0x68, 0x12, 0x13, 0x0a, 0x03, 0x4d, 0x49, 0x54, 0x10, 0xd2, 0x01, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x49, 0x54, 0x12, 0x19, 0x0a, 0x06, 0x4d, 0x49, 0x54,
	0x4e, 0x46, 0x41, 0x10, 0xd3, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4d, 0x49,
	0x54, 0x4e, 0x46, 0x41, 0x12, 0x1d, 0x0a, 0x08, 0x4d, 0x4f, 0x54, 0x4f, 0x53, 0x4f, 0x54, 0x4f,
	0x10, 0xd4, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4d, 0x6f, 0x74, 0x6f, 0x73,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x0a, 0x06, 0x4d, 0x50, 0x49, 0x43, 0x48, 0x32, 0x10, 0xd5, 0x01,
	0x12, 0x1b, 0x0a, 0x07, 0x4d, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xd6, 0x01, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a,
	0x07, 0x4d, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xd7, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x4d, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x47, 0x0a, 0x1d, 0x4d, 0x50,
	0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x4c, 0x45, 0x46,
	0x54, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xd8, 0x01, 0x1a, 0x23,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x4d, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x2d, 0x6e, 0x6f,
	0x2d, 0x63, 0x6f, 0x70, 0x79, 0x6c, 0x65, 0x66, 0x74, 0x2d, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x07, 0x4d, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0xd9,
	0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30,
	0x12, 0x17, 0x0a, 0x05, 0x4d, 0x53, 0x5f, 0x50, 0x4c, 0x10, 0xda, 0x01, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x53, 0x2d, 0x50, 0x4c, 0x12, 0x17, 0x0a, 0x05, 0x4d, 0x53, 0x5f,
	0x52, 0x4c, 0x10, 0xdb, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4d, 0x53, 0x2d,
	0x52, 0x4c, 0x12, 0x15, 0x0a, 0x04, 0x4d, 0x54, 0x4c, 0x4c, 0x10, 0xdc, 0x01, 0x1a, 0x0a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x54, 0x4c, 0x4c, 0x12, 0x1b, 0x0a, 0x07, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x43, 0x53, 0x10, 0xdd, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x73, 0x12, 0x13, 0x0a, 0x03, 0x4d, 0x55, 0x50, 0x10, 0xde, 0x01,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x08, 0x4e,
	0x41, 0x53, 0x41, 0x5f, 0x31, 0x5f, 0x33, 0x10, 0xdf, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x4e, 0x41, 0x53, 0x41, 0x2d, 0x31, 0x2e, 0x33, 0x12, 0x19, 0x0a, 0x06, 0x4e, 0x41,
	0x55, 0x4d, 0x45, 0x4e, 0x10, 0xe0, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4e,
	0x61, 0x75, 0x6d, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x08, 0x4e, 0x42, 0x50, 0x4c, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0xe1, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4e, 0x42, 0x50, 0x4c,
	0x2d, 0x31, 0x2e, 0x30, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x43, 0x53, 0x41, 0x10, 0xe2, 0x01, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x43, 0x53, 0x41, 0x12, 0x1d, 0x0a, 0x08, 0x4e,
	0x45, 0x54, 0x5f, 0x53, 0x4e, 0x4d, 0x50, 0x10, 0xe3, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x4e, 0x65, 0x74, 0x2d, 0x53, 0x4e, 0x4d, 0x50, 0x12, 0x1a, 0x0a, 0x07, 0x4e, 0x45,
	0x54, 0x5f, 0x43, 0x44, 0x46, 0x10, 0xe4, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x4e, 0x65, 0x74, 0x43, 0x44, 0x46, 0x12, 0x1d, 0x0a, 0x08, 0x4e, 0x45, 0x57, 0x53, 0x4c, 0x45,
	0x54, 0x52, 0x10, 0xe5, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4e, 0x65, 0x77,
	0x73, 0x6c, 0x65, 0x74, 0x72, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x47, 0x50, 0x4c, 0x10, 0xe6, 0x01,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x47, 0x50, 0x4c, 0x12, 0x1d, 0x0a, 0x08,
	0x4e, 0x4c, 0x4f, 0x44, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xe7, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x4e, 0x4c, 0x4f, 0x44, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x15, 0x0a, 0x04, 0x4e,
	0x4c, 0x50, 0x4c, 0x10, 0xe8, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x4c,
	0x50, 0x4c, 0x12, 0x17, 0x0a, 0x05, 0x4e, 0x4f, 0x4b, 0x49, 0x41, 0x10, 0xe9, 0x01, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4e, 0x6f, 0x6b, 0x69, 0x61, 0x12, 0x15, 0x0a, 0x04, 0x4e,
	0x4f, 0x53, 0x4c, 0x10, 0xea, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x4f,
	0x53, 0x4c, 0x12, 0x17, 0x0a, 0x05, 0x4e, 0x4f, 0x57, 0x45, 0x42, 0x10, 0xeb, 0x01, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4e, 0x6f, 0x77, 0x65, 0x62, 0x12, 0x1b, 0x0a, 0x07, 0x4e,
	0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xec, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x4e, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x4e, 0x50, 0x4c, 0x5f,
	0x31, 0x5f, 0x31, 0x10, 0xed, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4e, 0x50,
	0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1f, 0x0a, 0x09, 0x4e, 0x50, 0x4f, 0x53, 0x4c, 0x5f, 0x33,
	0x5f, 0x30, 0x10, 0xee, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4e, 0x50, 0x4f,
	0x53, 0x4c, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x13, 0x0a, 0x03, 0x4e, 0x52, 0x4c, 0x10, 0xef, 0x01,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x52, 0x4c, 0x12, 0x13, 0x0a, 0x03, 0x4e,
	0x54, 0x50, 0x10, 0xf0, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x54, 0x50,
	0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x43, 0x43, 0x54, 0x5f, 0x50, 0x4c, 0x10, 0xf1, 0x01, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x43, 0x43, 0x54, 0x2d, 0x50, 0x4c, 0x12, 0x1d, 0x0a,
	0x08, 0x4f, 0x43, 0x4c, 0x43, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0xf2, 0x01, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x4f, 0x43, 0x4c, 0x43, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1f, 0x0a, 0x0a,
	0x4f, 0x5f, 0x44, 0x42, 0x5f, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xf3, 0x01, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4f, 0x44, 0x62, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a,
	0x07, 0x4f, 0x46, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xf4, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x4f, 0x46, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x46,
	0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xf5, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x4f, 0x46, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x17, 0x0a, 0x05, 0x4f, 0x47, 0x54, 0x53, 0x4c,
	0x10, 0xf6, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4f, 0x47, 0x54, 0x53, 0x4c,
	0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xf7, 0x01,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x31, 0x2e,
	0x31, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x32, 0x10, 0xf8,
	0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x31,
	0x2e, 0x32, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x33, 0x10,
	0xf9, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d,
	0x31, 0x2e, 0x33, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x31, 0x5f, 0x34,
	0x10, 0xfa, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50,
	0x2d, 0x31, 0x2e, 0x34, 0x12, 0x23, 0x0a, 0x0b, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f,
	0x30, 0x5f, 0x31, 0x10, 0xfb, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x4c,
	0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x30, 0x2e, 0x31, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44,
	0x41, 0x50, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0xfc, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c,
	0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0xfd, 0x01, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x31, 0x12, 0x23, 0x0a, 0x0b, 0x4f,
	0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0xfe, 0x01, 0x1a, 0x11, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x32, 0x2e, 0x31,
	0x12, 0x23, 0x0a, 0x0b, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x32, 0x5f, 0x32, 0x10,
	0xff, 0x01, 0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d,
	0x32, 0x2e, 0x32, 0x2e, 0x32, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32,
	0x5f, 0x32, 0x10, 0x80, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44,
	0x41, 0x50, 0x2d, 0x32, 0x2e, 0x32, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x5f,
	0x32, 0x5f, 0x33, 0x10, 0x81, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f, 0x4c,
	0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x33, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50,
	0x5f, 0x32, 0x5f, 0x34, 0x10, 0x82, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x4f,
	0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x34, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44, 0x41,
	0x50, 0x5f, 0x32, 0x5f, 0x35, 0x10, 0x83, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x35, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c, 0x44,
	0x41, 0x50, 0x5f, 0x32, 0x5f, 0x36, 0x10, 0x84, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x36, 0x12, 0x1f, 0x0a, 0x09, 0x4f, 0x4c,
	0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x37, 0x10, 0x85, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x37, 0x12, 0x1f, 0x0a, 0x09, 0x4f,
	0x4c, 0x44, 0x41, 0x50, 0x5f, 0x32, 0x5f, 0x38, 0x10, 0x86, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x09, 0x4f, 0x4c, 0x44, 0x41, 0x50, 0x2d, 0x32, 0x2e, 0x38, 0x12, 0x13, 0x0a, 0x03,
	0x4f, 0x4d, 0x4c, 0x10, 0x87, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4f, 0x4d,
	0x4c, 0x12, 0x1c, 0x0a, 0x08, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x10, 0x88, 0x02,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x53, 0x4c, 0x12,
	0x1b, 0x0a, 0x07, 0x4f, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x89, 0x02, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x23, 0x0a, 0x0b,
	0x4f, 0x53, 0x45, 0x54, 0x5f, 0x50, 0x4c, 0x5f, 0x32, 0x5f, 0x31, 0x10, 0x8a, 0x02, 0x1a, 0x11,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x4f, 0x53, 0x45, 0x54, 0x2d, 0x50, 0x4c, 0x2d, 0x32, 0x2e,
	0x31, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x8b, 0x02, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x1b,
	0x0a, 0x07, 0x4f, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x8c, 0x02, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x4f,
	0x53, 0x4c, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x8d, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x4f, 0x53, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x53, 0x4c, 0x5f,
	0x32, 0x5f, 0x31, 0x10, 0x8e, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x53,
	0x4c, 0x2d, 0x32, 0x2e, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x4f, 0x53, 0x4c, 0x5f, 0x33, 0x5f, 0x30,
	0x10, 0x8f, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4f, 0x53, 0x4c, 0x2d, 0x33,
	0x2e, 0x30, 0x12, 0x1d, 0x0a, 0x08, 0x50, 0x44, 0x44, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x90,
	0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x50, 0x44, 0x44, 0x4c, 0x2d, 0x31, 0x2e,
	0x30, 0x12, 0x1b, 0x0a, 0x07, 0x50, 0x48, 0x50, 0x5f, 0x33, 0x5f, 0x30, 0x10, 0x91, 0x02, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x48, 0x50, 0x2d, 0x33, 0x2e, 0x30, 0x12, 0x1d,
	0x0a, 0x08, 0x50, 0x48, 0x50, 0x5f, 0x33, 0x5f, 0x30, 0x31, 0x10, 0x92, 0x02, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x50, 0x48, 0x50, 0x2d, 0x33, 0x2e, 0x30, 0x31, 0x12, 0x19, 0x0a,
	0x06, 0x50, 0x4c, 0x45, 0x58, 0x55, 0x53, 0x10, 0x93, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x50, 0x6c, 0x65, 0x78, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x50, 0x4f, 0x53, 0x54,
	0x47, 0x52, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x10, 0x94, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x12, 0x0b, 0x0a, 0x06,
	0x50, 0x53, 0x46, 0x52, 0x41, 0x47, 0x10, 0x95, 0x02, 0x12, 0x0c, 0x0a, 0x07, 0x50, 0x53, 0x55,
	0x54, 0x49, 0x4c, 0x53, 0x10, 0x96, 0x02, 0x12, 0x21, 0x0a, 0x0a, 0x50, 0x59, 0x54, 0x48, 0x4f,
	0x4e, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x97, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x17, 0x0a, 0x05, 0x51, 0x48,
	0x55, 0x4c, 0x4c, 0x10, 0x98, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x51, 0x68,
	0x75, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x07, 0x51, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x99,
	0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x51, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30,
	0x12, 0x17, 0x0a, 0x05, 0x52, 0x44, 0x49, 0x53, 0x43, 0x10, 0x9a, 0x02, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x52, 0x64, 0x69, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0c, 0x52, 0x5f, 0x48,
	0x45, 0x5f, 0x43, 0x4f, 0x53, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x9b, 0x02, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x52, 0x48, 0x65, 0x43, 0x6f, 0x73, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1b,
	0x0a, 0x07, 0x52, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x9c, 0x02, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x52, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x52,
	0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x35, 0x10, 0x9d, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x52, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x35, 0x12, 0x1d, 0x0a, 0x08, 0x52, 0x50, 0x53, 0x4c,
	0x5f, 0x31, 0x5f, 0x30, 0x10, 0x9e, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x52,
	0x50, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x19, 0x0a, 0x06, 0x52, 0x53, 0x41, 0x5f, 0x4d,
	0x44, 0x10, 0x9f, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x52, 0x53, 0x41, 0x2d,
	0x4d, 0x44, 0x12, 0x17, 0x0a, 0x05, 0x52, 0x53, 0x43, 0x50, 0x4c, 0x10, 0xa0, 0x02, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x53, 0x43, 0x50, 0x4c, 0x12, 0x15, 0x0a, 0x04, 0x52,
	0x55, 0x42, 0x59, 0x10, 0xa1, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x52, 0x75,
	0x62, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x53, 0x41, 0x58, 0x5f, 0x50, 0x44, 0x10, 0xa2, 0x02, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x41, 0x58, 0x2d, 0x50, 0x44, 0x12, 0x1b, 0x0a,
	0x07, 0x53, 0x41, 0x58, 0x50, 0x41, 0x54, 0x48, 0x10, 0xa3, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x53, 0x61, 0x78, 0x70, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x04, 0x53, 0x43,
	0x45, 0x41, 0x10, 0xa4, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x43, 0x45,
	0x41, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x45, 0x4e, 0x44, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0xa5, 0x02,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1f, 0x0a, 0x09, 0x53, 0x47, 0x49, 0x5f, 0x42, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xa6, 0x02,
	0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x47, 0x49, 0x2d, 0x42, 0x2d, 0x31, 0x2e,
	0x30, 0x12, 0x1f, 0x0a, 0x09, 0x53, 0x47, 0x49, 0x5f, 0x42, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xa7,
	0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x47, 0x49, 0x2d, 0x42, 0x2d, 0x31,
	0x2e, 0x31, 0x12, 0x1f, 0x0a, 0x09, 0x53, 0x47, 0x49, 0x5f, 0x42, 0x5f, 0x32, 0x5f, 0x30, 0x10,
	0xa8, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x47, 0x49, 0x2d, 0x42, 0x2d,
	0x32, 0x2e, 0x30, 0x12, 0x20, 0x0a, 0x0a, 0x53, 0x49, 0x4d, 0x5f, 0x50, 0x4c, 0x5f, 0x32, 0x5f,
	0x30, 0x10, 0xa9, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x69, 0x6d, 0x50,
	0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1f, 0x0a, 0x09, 0x53, 0x49, 0x53, 0x53, 0x4c, 0x5f, 0x31,
	0x5f, 0x32, 0x10, 0xaa, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x49, 0x53,
	0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x32, 0x12, 0x17, 0x0a, 0x05, 0x53, 0x49, 0x53, 0x53, 0x4c, 0x10,
	0xab, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53, 0x49, 0x53, 0x53, 0x4c, 0x12,
	0x1f, 0x0a, 0x09, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x59, 0x43, 0x41, 0x54, 0x10, 0xac, 0x02, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x79, 0x63, 0x61, 0x74,
	0x12, 0x17, 0x0a, 0x05, 0x53, 0x4d, 0x4c, 0x4e, 0x4a, 0x10, 0xad, 0x02, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x53, 0x4d, 0x4c, 0x4e, 0x4a, 0x12, 0x17, 0x0a, 0x05, 0x53, 0x4d, 0x50,
	0x50, 0x4c, 0x10, 0xae, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53, 0x4d, 0x50,
	0x50, 0x4c, 0x12, 0x15, 0x0a, 0x04, 0x53, 0x4e, 0x49, 0x41, 0x10, 0xaf, 0x02, 0x1a, 0x0a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x4e, 0x49, 0x41, 0x12, 0x21, 0x0a, 0x0a, 0x53, 0x50, 0x45,
	0x4e, 0x43, 0x45, 0x52, 0x5f, 0x38, 0x36, 0x10, 0xb0, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x53, 0x70, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2d, 0x38, 0x36, 0x12, 0x21, 0x0a, 0x0a,
	0x53, 0x50, 0x45, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x39, 0x34, 0x10, 0xb1, 0x02, 0x1a, 0x10, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x53, 0x70, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2d, 0x39, 0x34, 0x12,
	0x21, 0x0a, 0x0a, 0x53, 0x50, 0x45, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x39, 0x39, 0x10, 0xb2, 0x02,
	0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x53, 0x70, 0x65, 0x6e, 0x63, 0x65, 0x72, 0x2d,
	0x39, 0x39, 0x12, 0x1b, 0x0a, 0x07, 0x53, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xb3, 0x02,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x53, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x30, 0x12,
	0x2a, 0x0a, 0x0f, 0x53, 0x55, 0x47, 0x41, 0x52, 0x5f, 0x43, 0x52, 0x4d, 0x5f, 0x31, 0x5f, 0x31,
	0x5f, 0x33, 0x10, 0xb4, 0x02, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x53, 0x75, 0x67,
	0x61, 0x72, 0x43, 0x52, 0x4d, 0x2d, 0x31, 0x2e, 0x31, 0x2e, 0x33, 0x12, 0x13, 0x0a, 0x03, 0x53,
	0x57, 0x4c, 0x10, 0xb5, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x57, 0x4c,
	0x12, 0x13, 0x0a, 0x03, 0x54, 0x43, 0x4c, 0x10, 0xb6, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x54, 0x43, 0x4c, 0x12, 0x25, 0x0a, 0x0c, 0x54, 0x43, 0x50, 0x5f, 0x57, 0x52, 0x41,
	0x50, 0x50, 0x45, 0x52, 0x53, 0x10, 0xb7, 0x02, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c,
	0x54, 0x43, 0x50, 0x2d, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x06,
	0x54, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x10, 0xb8, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x54, 0x4d, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x54, 0x4f, 0x52, 0x51, 0x55, 0x45,
	0x5f, 0x31, 0x5f, 0x31, 0x10, 0xb9, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x54,
	0x4f, 0x52, 0x51, 0x55, 0x45, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x15, 0x0a, 0x04, 0x54, 0x4f, 0x53,
	0x4c, 0x10, 0xba, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x4f, 0x53, 0x4c,
	0x12, 0x2d, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x46, 0x53, 0x5f,
	0x32, 0x30, 0x31, 0x35, 0x10, 0xbb, 0x02, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x55,
	0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x44, 0x46, 0x53, 0x2d, 0x32, 0x30, 0x31, 0x35, 0x12,
	0x2d, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x46, 0x53, 0x5f, 0x32,
	0x30, 0x31, 0x36, 0x10, 0xbc, 0x02, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x55, 0x6e,
	0x69, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x44, 0x46, 0x53, 0x2d, 0x32, 0x30, 0x31, 0x36, 0x12, 0x23,
	0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x10, 0xbd, 0x02,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x2d,
	0x54, 0x4f, 0x55, 0x12, 0x1f, 0x0a, 0x09, 0x55, 0x4e, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x10, 0xbe, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x55, 0x6e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x55, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10,
	0xbf, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x55, 0x50, 0x4c, 0x2d, 0x31, 0x2e,
	0x30, 0x12, 0x13, 0x0a, 0x03, 0x56, 0x49, 0x4d, 0x10, 0xc0, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x56, 0x69, 0x6d, 0x12, 0x1b, 0x0a, 0x07, 0x56, 0x4f, 0x53, 0x54, 0x52, 0x4f,
	0x4d, 0x10, 0xc1, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x56, 0x4f, 0x53, 0x54,
	0x52, 0x4f, 0x4d, 0x12, 0x1b, 0x0a, 0x07, 0x56, 0x53, 0x4c, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0xc2,
	0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x56, 0x53, 0x4c, 0x2d, 0x31, 0x2e, 0x30,
	0x12, 0x25, 0x0a, 0x0c, 0x57, 0x33, 0x43, 0x5f, 0x31, 0x39, 0x39, 0x38, 0x30, 0x37, 0x32, 0x30,
	0x10, 0xc3, 0x02, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x57, 0x33, 0x43, 0x2d, 0x31,
	0x39, 0x39, 0x38, 0x30, 0x37, 0x32, 0x30, 0x12, 0x25, 0x0a, 0x0c, 0x57, 0x33, 0x43, 0x5f, 0x32,
	0x30, 0x31, 0x35, 0x30, 0x35, 0x31, 0x33, 0x10, 0xc4, 0x02, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0c, 0x57, 0x33, 0x43, 0x2d, 0x32, 0x30, 0x31, 0x35, 0x30, 0x35, 0x31, 0x33, 0x12, 0x13,
	0x0a, 0x03, 0x57, 0x33, 0x43, 0x10, 0xc5, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x57, 0x33, 0x43, 0x12, 0x21, 0x0a, 0x0a, 0x57, 0x41, 0x54, 0x43, 0x4f, 0x4d, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0xc6, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x57, 0x61, 0x74, 0x63,
	0x6f, 0x6d, 0x2d, 0x31, 0x2e, 0x30, 0x12, 0x19, 0x0a, 0x06, 0x57, 0x53, 0x55, 0x49, 0x50, 0x41,
	0x10, 0xc7, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x57, 0x73, 0x75, 0x69, 0x70,
	0x61, 0x12, 0x17, 0x0a, 0x05, 0x57, 0x54, 0x46, 0x50, 0x4c, 0x10, 0xc8, 0x02, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x57, 0x54, 0x46, 0x50, 0x4c, 0x12, 0x13, 0x0a, 0x03, 0x58, 0x31,
	0x31, 0x10, 0xc9, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x58, 0x31, 0x31, 0x12,
	0x17, 0x0a, 0x05, 0x58, 0x45, 0x52, 0x4f, 0x58, 0x10, 0xca, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x58, 0x65, 0x72, 0x6f, 0x78, 0x12, 0x24, 0x0a, 0x0c, 0x58, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x38, 0x36, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xcb, 0x02, 0x1a, 0x11, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0b, 0x58, 0x46, 0x72, 0x65, 0x65, 0x38, 0x36, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x0b,
	0x0a, 0x06, 0x58, 0x49, 0x4e, 0x45, 0x54, 0x44, 0x10, 0xcc, 0x02, 0x12, 0x15, 0x0a, 0x04, 0x58,
	0x4e, 0x45, 0x54, 0x10, 0xcd, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x58, 0x6e,
	0x65, 0x74, 0x12, 0x08, 0x0a, 0x03, 0x58, 0x50, 0x50, 0x10, 0xce, 0x02, 0x12, 0x18, 0x0a, 0x06,
	0x58, 0x5f, 0x53, 0x4b, 0x41, 0x54, 0x10, 0xcf, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x58, 0x53, 0x6b, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x07, 0x59, 0x50, 0x4c, 0x5f, 0x31, 0x5f,
	0x30, 0x10, 0xd0, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x59, 0x50, 0x4c, 0x2d,
	0x31, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x59, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xd1,
	0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x59, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31,
	0x12, 0x13, 0x0a, 0x03, 0x5a, 0x45, 0x44, 0x10, 0xd2, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x5a, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x08, 0x5a, 0x45, 0x4e, 0x44, 0x5f, 0x32, 0x5f,
	0x30, 0x10, 0xd3, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x5a, 0x65, 0x6e, 0x64,
	0x2d, 0x32, 0x2e, 0x30, 0x12, 0x21, 0x0a, 0x0a, 0x5a, 0x49, 0x4d, 0x42, 0x52, 0x41, 0x5f, 0x31,
	0x5f, 0x33, 0x10, 0xd4, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x5a, 0x69, 0x6d,
	0x62, 0x72, 0x61, 0x2d, 0x31, 0x2e, 0x33, 0x12, 0x21, 0x0a, 0x0a, 0x5a, 0x49, 0x4d, 0x42, 0x52,
	0x41, 0x5f, 0x31, 0x5f, 0x34, 0x10, 0xd5, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a,
	0x5a, 0x69, 0x6d, 0x62, 0x72, 0x61, 0x2d, 0x31, 0x2e, 0x34, 0x12, 0x19, 0x0a, 0x14, 0x5a, 0x4c,
	0x49, 0x42, 0x5f, 0x41, 0x43, 0x4b, 0x4e, 0x4f, 0x57, 0x4c, 0x45, 0x44, 0x47, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x10, 0xd6, 0x02, 0x12, 0x15, 0x0a, 0x04, 0x5a, 0x4c, 0x49, 0x42, 0x10, 0xd7, 0x02,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x5a, 0x6c, 0x69, 0x62, 0x12, 0x1b, 0x0a, 0x07,
	0x5a, 0x50, 0x4c, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0xd8, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x5a, 0x50, 0x4c, 0x2d, 0x31, 0x2e, 0x31, 0x12, 0x1b, 0x0a, 0x07, 0x5a, 0x50, 0x4c,
	0x5f, 0x32, 0x5f, 0x30, 0x10, 0xd9, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x5a,
	0x50, 0x4c, 0x2d, 0x32, 0x2e, 0x30, 0x12, 0x1b, 0x0a, 0x07, 0x5a, 0x50, 0x4c, 0x5f, 0x32, 0x5f,
	0x31, 0x10, 0xda, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x5a, 0x50, 0x4c, 0x2d,
	0x32, 0x2e, 0x31, 0x1a, 0x26, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73,
	0x70, 0x64, 0x78, 0x2d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x14,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x51, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10,
	0x03, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x54, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x45, 0x10,
	0x05, 0x12, 0x06, 0x0a, 0x02, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x41, 0x10,
	0x07, 0x12, 0x06, 0x0a, 0x02, 0x45, 0x42, 0x10, 0x08, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x50, 0x10,
	0x09, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x8b,
	0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x74, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41,
	0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x43, 0x4c, 0x55, 0x44, 0x45,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x55, 0x54, 0x43, 0x4f, 0x4d, 0x45, 0x10, 0x03, 0x1a,
	0x2b, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x81, 0x02, 0x0a,
	0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x03, 0x12, 0x07,
	0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x58, 0x54, 0x10,
	0x05, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x10, 0x08,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x0c, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x6f, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2d, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2d, 0x63, 0x6f, 0x64, 0x65,
	0x22, 0xd6, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x09, 0x1a, 0x2b, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a, 0x10, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x65, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x06, 0x0a, 0x02, 0x41, 0x41, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4e, 0x41,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x4e, 0x41, 0x10, 0x03, 0x1a, 0x27, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x10, 0x53, 0x6c, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50,
	0x45, 0x4e, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x54, 0x5f,
	0x45, 0x4e, 0x44, 0x10, 0x03, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6f, 0x70, 0x65,
	0x6e, 0x41, 0x74, 0x45, 0x6e, 0x64, 0x1a, 0x30, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2a, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2d, 0x73, 0x6c, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x0e, 0x53, 0x6c, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x53, 0x59, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x52,
	0x45, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x55, 0x53, 0x59, 0x5f, 0x55, 0x4e, 0x41,
	0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x55,
	0x53, 0x59, 0x5f, 0x54, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x05, 0x1a, 0x24, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1e, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xeb, 0x03, 0x0a, 0x15, 0x53,
	0x6d, 0x61, 0x72, 0x74, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xd1, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x41, 0x55,
	0x4e, 0x43, 0x48, 0x5f, 0x45, 0x48, 0x52, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x41, 0x55,
	0x4e, 0x43, 0x48, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x59, 0x4d, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x53, 0x4f, 0x5f, 0x4f, 0x50,
	0x45, 0x4e, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x54, 0x48,
	0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x06, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x54, 0x48,
	0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x45, 0x48, 0x52, 0x5f, 0x50, 0x41, 0x54,
	0x49, 0x45, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x45, 0x48, 0x52, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e, 0x54, 0x10,
	0x0a, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x50,
	0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x54, 0x49, 0x45, 0x4e,
	0x54, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x0e, 0x1a, 0x3e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x38,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x2d, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x53, 0x6f, 0x72,
	0x74, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x6b,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x6f, 0x72,
	0x74, 0x2d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x1f,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x79, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x1a, 0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x2d,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x12, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x97, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x53, 0x41, 0x54, 0x49,
	0x53, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x13,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xb8, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46,
	0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x49, 0x41, 0x4c, 0x5f, 0x55, 0x53, 0x45, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x06,
	0x1a, 0x3c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xba,
	0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xab, 0x01,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x51, 0x5f, 0x52, 0x45, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x52, 0x45, 0x56, 0x41, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x06, 0x1a, 0x2b,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x72, 0x0a, 0x0e, 0x53,
	0x74, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x41, 0x54, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x43, 0x52, 0x49, 0x43, 0x4b, 0x10, 0x02, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66,
	0x68, 0x69, 0x72, 0x2f, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22,
	0xb8, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x98, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x4d, 0x49, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x47, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x04, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72,
	0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x2d, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x66, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55,
	0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x52, 0x49,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x4d, 0x61, 0x70, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x7a, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53, 0x10,
	0x03, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x64,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x02, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x2d,
	0x6d, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x4d, 0x61, 0x70, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x7f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x45, 0x52, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x28, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2d, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x70, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49,
	0x52, 0x53, 0x54, 0x10, 0x02, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x6e, 0x6f, 0x74,
	0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x04, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x08, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x05, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x6f, 0x6e, 0x65, 0x1a, 0x2e, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a,
	0x1e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x7f, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52, 0x53, 0x54, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x48, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53,
	0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4c, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x04,
	0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0xb5, 0x02, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61,
	0x70, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97,
	0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x55,
	0x4e, 0x43, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x53, 0x43, 0x41, 0x50,
	0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x53, 0x54, 0x10, 0x05, 0x12, 0x0a, 0x0a,
	0x06, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x4c, 0x41, 0x54, 0x45, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x07, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x50, 0x10, 0x09, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x70, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x4f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x56, 0x41,
	0x4c, 0x55, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x43, 0x10, 0x0d, 0x12,
	0x05, 0x0a, 0x01, 0x43, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x51, 0x54, 0x59, 0x10, 0x0f, 0x12,
	0x06, 0x0a, 0x02, 0x49, 0x44, 0x10, 0x10, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x50, 0x10, 0x11, 0x1a,
	0x27, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c,
	0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x70, 0x2d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xb6, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x48, 0x4f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x45, 0x42, 0x53, 0x4f, 0x43, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x53, 0x10, 0x04, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x05, 0x1a, 0x33, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x04,
	0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xb5, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x42, 0x41, 0x4e, 0x44, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x1a, 0x2f, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x29, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7c,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x1a, 0x3c,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x36, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x79, 0x2d, 0x69, 0x74, 0x65, 0x6d, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0xd5, 0x01, 0x0a,
	0x17, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x07, 0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2d, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x68, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x89,
	0x02, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xf6, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x0c, 0x1a, 0x25, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a,
	0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x2d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf, 0x01, 0x0a, 0x1f, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x66, 0x65, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xbb,
	0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x41, 0x46, 0x54, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x56, 0x49, 0x45,
	0x57, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x2d, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x27, 0x75, 0x72, 0x6e, 0x3a, 0x6f, 0x69, 0x64, 0x3a, 0x32, 0x2e, 0x31,
	0x36, 0x2e, 0x38, 0x34, 0x30, 0x2e, 0x31, 0x2e, 0x31, 0x31, 0x33, 0x38, 0x38, 0x33, 0x2e, 0x33,
	0x2e, 0x31, 0x39, 0x33, 0x37, 0x2e, 0x39, 0x38, 0x2e, 0x35, 0x2e, 0x38, 0x22, 0xad, 0x01, 0x0a,
	0x1a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4b,
	0x49, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x0b,
	0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x1a, 0x34, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x9f, 0x01, 0x0a,
	0x1d, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7e,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x31, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x2b, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x8a,
	0x01, 0x0a, 0x14, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x41, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x1a, 0x2d, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f,
	0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x14,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x49,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x49,
	0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x1a, 0x2d, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x27, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x1b, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x45, 0x54,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f,
	0x53, 0x54, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x06, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x45, 0x41, 0x44, 0x10, 0x07, 0x1a, 0x29, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x23, 0x68,
	0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68,
	0x69, 0x72, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x2d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e,
	0x41, 0x4d, 0x45, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x49, 0x43, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x44, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x45, 0x44, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x08, 0x1a, 0x26, 0x8a, 0x91, 0xc9,
	0xfe, 0x07, 0x20, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72,
	0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x16, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x76,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x41, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x1a, 0x2e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x28, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2d, 0x64, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x55, 0x44, 0x49, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x52, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x46, 0x49, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x06, 0x1a, 0x28, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x22, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e,
	0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x75, 0x64, 0x69, 0x2d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x7e, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x45, 0x44,
	0x45, 0x54, 0x45, 0x52, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x23,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x1d, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2d,
	0x75, 0x73, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x0a, 0x56, 0x32, 0x30, 0x34, 0x34, 0x34, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x77, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x01, 0x46, 0x10, 0x01, 0x1a, 0x07, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x01, 0x46, 0x12, 0x0e, 0x0a, 0x01, 0x47, 0x10, 0x02, 0x1a, 0x07, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x01, 0x47, 0x1a, 0x33, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x2d, 0x68, 0x74,
	0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x76, 0x32, 0x2d, 0x30, 0x34, 0x34, 0x34, 0x22, 0xcf, 0x04, 0x0a, 0x10,
	0x56, 0x33, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0xba, 0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x31, 0x0a, 0x13, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c,
	0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x01, 0x1a, 0x18,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x12, 0x5f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x42, 0x41, 0x44, 0x10,
	0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x42, 0x41, 0x44, 0x12, 0x14, 0x0a, 0x04,
	0x43, 0x4f, 0x4e, 0x46, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x4f,
	0x4e, 0x46, 0x12, 0x0e, 0x0a, 0x01, 0x48, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x01, 0x48, 0x12, 0x10, 0x0a, 0x02, 0x48, 0x50, 0x10, 0x05, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x02, 0x48, 0x50, 0x12, 0x10, 0x0a, 0x02, 0x48, 0x56, 0x10, 0x06, 0x1a, 0x08, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x02, 0x48, 0x56, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x4c, 0x44, 0x10, 0x07, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4f, 0x4c, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x54, 0x4d,
	0x50, 0x10, 0x08, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x54, 0x4d, 0x50, 0x12, 0x10,
	0x0a, 0x02, 0x57, 0x50, 0x10, 0x09, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x57, 0x50,
	0x12, 0x12, 0x0a, 0x03, 0x44, 0x49, 0x52, 0x10, 0x0a, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x44, 0x49, 0x52, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x55, 0x42, 0x10, 0x0b, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x55, 0x42, 0x12, 0x2f, 0x0a, 0x12, 0x50, 0x4f, 0x53, 0x54,
	0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0c,
	0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x50, 0x48, 0x59,
	0x53, 0x10, 0x0d, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x48, 0x59, 0x53, 0x12,
	0x12, 0x0a, 0x03, 0x50, 0x53, 0x54, 0x10, 0x0e, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x50, 0x53, 0x54, 0x12, 0x45, 0x0a, 0x1d, 0x54, 0x45, 0x4c, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53,
	0x5f, 0x55, 0x53, 0x45, 0x10, 0x0f, 0x1a, 0x22, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1c, 0x5f, 0x54,
	0x65, 0x6c, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x53,
	0x10, 0x10, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x53, 0x12, 0x10, 0x0a, 0x02,
	0x45, 0x43, 0x10, 0x11, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x45, 0x43, 0x12, 0x10,
	0x0a, 0x02, 0x4d, 0x43, 0x10, 0x12, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4d, 0x43,
	0x12, 0x10, 0x0a, 0x02, 0x50, 0x47, 0x10, 0x13, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x50, 0x47, 0x1a, 0x39, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37,
	0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f,
	0x76, 0x33, 0x2d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x73, 0x65, 0x22, 0x85, 0x05,
	0x0a, 0x15, 0x56, 0x33, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xeb, 0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x0f,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x01, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x01, 0x4c, 0x10, 0x02,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4c, 0x12, 0x0e, 0x0a, 0x01, 0x4d, 0x10, 0x03,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4d, 0x12, 0x0e, 0x0a, 0x01, 0x4e, 0x10, 0x04,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4e, 0x12, 0x0e, 0x0a, 0x01, 0x52, 0x10, 0x05,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x52, 0x12, 0x0e, 0x0a, 0x01, 0x55, 0x10, 0x06,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x55, 0x12, 0x0e, 0x0a, 0x01, 0x56, 0x10, 0x07,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x56, 0x12, 0x46, 0x0a, 0x1e, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x59, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x10, 0x08, 0x1a, 0x22, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x1c, 0x5f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x0e, 0x0a, 0x01, 0x42, 0x10, 0x09, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x42, 0x12, 0x0e, 0x0a, 0x01, 0x44, 0x10, 0x0a, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x44, 0x12, 0x0e, 0x0a, 0x01, 0x49, 0x10, 0x0b, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x49, 0x12, 0x42, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x0c, 0x1a, 0x20, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1a, 0x5f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x45, 0x54, 0x48, 0x10, 0x0d, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x45, 0x54, 0x48, 0x12, 0x12, 0x0a, 0x03, 0x48, 0x49, 0x56,
	0x10, 0x0e, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x48, 0x49, 0x56, 0x12, 0x12, 0x0a,
	0x03, 0x50, 0x53, 0x59, 0x10, 0x0f, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x53,
	0x59, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x44, 0x56, 0x10, 0x10, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x53, 0x44, 0x56, 0x12, 0x3e, 0x0a, 0x19, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x53, 0x10, 0x11, 0x1a, 0x1f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x19, 0x5f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x01, 0x43, 0x10, 0x12, 0x1a, 0x07, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x43, 0x12, 0x0e, 0x0a, 0x01, 0x53, 0x10, 0x13, 0x1a, 0x07, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x53, 0x12, 0x0e, 0x0a, 0x01, 0x54, 0x10, 0x14, 0x1a, 0x07, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x01, 0x54, 0x1a, 0x3e, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x38, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x99, 0x08, 0x0a, 0x1d, 0x56, 0x33, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf7, 0x07, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x4a, 0x0a, 0x20,
	0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d,
	0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52,
	0x10, 0x01, 0x1a, 0x24, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1e, 0x5f, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x43, 0x10, 0x02,
	0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x43, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x44,
	0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x44, 0x12, 0x10, 0x0a, 0x02,
	0x42, 0x52, 0x10, 0x04, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x42, 0x52, 0x12, 0x10,
	0x0a, 0x02, 0x43, 0x4c, 0x10, 0x05, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x4c,
	0x12, 0x10, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x06, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x49, 0x4e, 0x12, 0x10, 0x0a, 0x02, 0x4c, 0x53, 0x10, 0x07, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x02, 0x4c, 0x53, 0x12, 0x10, 0x0a, 0x02, 0x4e, 0x42, 0x10, 0x08, 0x1a, 0x08, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x02, 0x4e, 0x42, 0x12, 0x10, 0x0a, 0x02, 0x50, 0x52, 0x10, 0x09, 0x1a, 0x08,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x52, 0x12, 0x10, 0x0a, 0x02, 0x53, 0x50, 0x10, 0x0a,
	0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x53, 0x50, 0x12, 0x16, 0x0a, 0x05, 0x54, 0x49,
	0x54, 0x4c, 0x45, 0x10, 0x0b, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x54, 0x49, 0x54,
	0x4c, 0x45, 0x12, 0x10, 0x0a, 0x02, 0x56, 0x56, 0x10, 0x0c, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x02, 0x56, 0x56, 0x12, 0x5c, 0x0a, 0x2a, 0x50, 0x48, 0x41, 0x52, 0x4d, 0x41, 0x43, 0x45,
	0x55, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x53, 0x10, 0x0d, 0x1a, 0x2c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x26, 0x50, 0x68, 0x61, 0x72,
	0x6d, 0x61, 0x63, 0x65, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x12, 0x12, 0x0a, 0x03, 0x43, 0x4f, 0x4e, 0x10, 0x0e, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x43, 0x4f, 0x4e, 0x12, 0x12, 0x0a, 0x03, 0x44, 0x45, 0x56, 0x10, 0x0f, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x44, 0x45, 0x56, 0x12, 0x14, 0x0a, 0x04, 0x46, 0x4c,
	0x41, 0x56, 0x10, 0x10, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x46, 0x4c, 0x41, 0x56,
	0x12, 0x18, 0x0a, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x10, 0x11, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x12, 0x12, 0x0a, 0x03, 0x46, 0x52,
	0x4d, 0x10, 0x12, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x46, 0x52, 0x4d, 0x12, 0x12,
	0x0a, 0x03, 0x49, 0x4e, 0x56, 0x10, 0x13, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49,
	0x4e, 0x56, 0x12, 0x16, 0x0a, 0x05, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x10, 0x14, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x4f, 0x50, 0x55, 0x4c, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x43,
	0x49, 0x10, 0x15, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x43, 0x49, 0x12, 0x12,
	0x0a, 0x03, 0x53, 0x54, 0x52, 0x10, 0x16, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53,
	0x54, 0x52, 0x12, 0x14, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x17, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x12, 0x12, 0x0a, 0x03, 0x54, 0x4d, 0x4b, 0x10,
	0x18, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x54, 0x4d, 0x4b, 0x12, 0x12, 0x0a, 0x03,
	0x55, 0x53, 0x45, 0x10, 0x19, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x55, 0x53, 0x45,
	0x12, 0x3e, 0x0a, 0x1a, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x1a,
	0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x1c, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x5f, 0x41, 0x46, 0x46, 0x49, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x53,
	0x10, 0x1b, 0x1a, 0x1f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x19, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x41, 0x66, 0x66, 0x69, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x21, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x51,
	0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x1c, 0x1a, 0x24, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x1e, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x47, 0x0a, 0x1f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f,
	0x50, 0x41, 0x52, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x10, 0x1d, 0x1a, 0x22, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1c, 0x5f, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x73, 0x63,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x46, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x40, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x22, 0x83, 0x06, 0x0a, 0x1f, 0x56, 0x33, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x32, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xdf, 0x05, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x44,
	0x10, 0x01, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x44, 0x12, 0x10, 0x0a, 0x02,
	0x53, 0x50, 0x10, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x53, 0x50, 0x12, 0x10,
	0x0a, 0x02, 0x42, 0x52, 0x10, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x42, 0x52,
	0x12, 0x10, 0x0a, 0x02, 0x43, 0x4c, 0x10, 0x04, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x43, 0x4c, 0x12, 0x10, 0x0a, 0x02, 0x49, 0x4e, 0x10, 0x05, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x02, 0x49, 0x4e, 0x12, 0x10, 0x0a, 0x02, 0x4c, 0x53, 0x10, 0x06, 0x1a, 0x08, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x02, 0x4c, 0x53, 0x12, 0x12, 0x0a, 0x03, 0x4d, 0x49, 0x44, 0x10, 0x07, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x46,
	0x58, 0x10, 0x08, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x46, 0x58, 0x12, 0x5c,
	0x0a, 0x2a, 0x50, 0x48, 0x41, 0x52, 0x4d, 0x41, 0x43, 0x45, 0x55, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x41, 0x52,
	0x54, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x52, 0x53, 0x10, 0x09, 0x1a, 0x2c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x26, 0x50, 0x68, 0x61, 0x72, 0x6d, 0x61, 0x63, 0x65, 0x75, 0x74,
	0x69, 0x63, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x72, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x03,
	0x43, 0x4f, 0x4e, 0x10, 0x0a, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x43, 0x4f, 0x4e,
	0x12, 0x12, 0x0a, 0x03, 0x44, 0x45, 0x56, 0x10, 0x0b, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x44, 0x45, 0x56, 0x12, 0x14, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x56, 0x10, 0x0c, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x46, 0x4c, 0x41, 0x56, 0x12, 0x18, 0x0a, 0x06, 0x46, 0x4f,
	0x52, 0x4d, 0x55, 0x4c, 0x10, 0x0d, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x46, 0x4f,
	0x52, 0x4d, 0x55, 0x4c, 0x12, 0x12, 0x0a, 0x03, 0x46, 0x52, 0x4d, 0x10, 0x0e, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x46, 0x52, 0x4d, 0x12, 0x12, 0x0a, 0x03, 0x49, 0x4e, 0x56, 0x10,
	0x0f, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x4e, 0x56, 0x12, 0x16, 0x0a, 0x05,
	0x50, 0x4f, 0x50, 0x55, 0x4c, 0x10, 0x10, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50,
	0x4f, 0x50, 0x55, 0x4c, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x43, 0x49, 0x10, 0x11, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x43, 0x49, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x54, 0x52, 0x10,
	0x12, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x54, 0x52, 0x12, 0x14, 0x0a, 0x04,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x13, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x49,
	0x4d, 0x45, 0x12, 0x12, 0x0a, 0x03, 0x54, 0x4d, 0x4b, 0x10, 0x14, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x54, 0x4d, 0x4b, 0x12, 0x12, 0x0a, 0x03, 0x55, 0x53, 0x45, 0x10, 0x15, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x55, 0x53, 0x45, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x46,
	0x58, 0x10, 0x16, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x46, 0x58, 0x12, 0x23,
	0x0a, 0x0c, 0x54, 0x49, 0x54, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x59, 0x4c, 0x45, 0x53, 0x10, 0x17,
	0x1a, 0x11, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0b, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x43, 0x10, 0x18, 0x1a, 0x08, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x02, 0x41, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x48, 0x4f, 0x4e, 0x10, 0x19, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x48, 0x4f, 0x4e, 0x12, 0x10, 0x0a, 0x02, 0x4e, 0x42, 0x10,
	0x1a, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4e, 0x42, 0x12, 0x10, 0x0a, 0x02, 0x50,
	0x52, 0x10, 0x1b, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x52, 0x1a, 0x48, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x42, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x72, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x32, 0x22, 0xb9, 0x03, 0x0a, 0x13, 0x56, 0x33, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xa1, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x39, 0x0a, 0x17, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10,
	0x01, 0x1a, 0x1c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x16, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x03, 0x41, 0x42, 0x43, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x41, 0x42, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x49, 0x44, 0x45, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x49, 0x44, 0x45, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x59, 0x4c, 0x10, 0x04,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x59, 0x4c, 0x12, 0x14, 0x0a, 0x04, 0x41,
	0x53, 0x47, 0x4e, 0x10, 0x05, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x41, 0x53, 0x47,
	0x4e, 0x12, 0x0e, 0x0a, 0x01, 0x43, 0x10, 0x06, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x43, 0x12, 0x0e, 0x0a, 0x01, 0x49, 0x10, 0x07, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x49, 0x12, 0x0e, 0x0a, 0x01, 0x4c, 0x10, 0x08, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x4c, 0x12, 0x10, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x09, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x02, 0x4f, 0x52, 0x12, 0x0e, 0x0a, 0x01, 0x50, 0x10, 0x0a, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x01, 0x50, 0x12, 0x0e, 0x0a, 0x01, 0x41, 0x10, 0x0b, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x01, 0x41, 0x12, 0x0e, 0x0a, 0x01, 0x52, 0x10, 0x0c, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x01, 0x52, 0x12, 0x14, 0x0a, 0x04, 0x53, 0x52, 0x43, 0x48, 0x10, 0x0d, 0x1a, 0x0a, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x52, 0x43, 0x48, 0x12, 0x14, 0x0a, 0x04, 0x50, 0x48, 0x4f,
	0x4e, 0x10, 0x0e, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x48, 0x4f, 0x4e, 0x12,
	0x14, 0x0a, 0x04, 0x53, 0x4e, 0x44, 0x58, 0x10, 0x0f, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x53, 0x4e, 0x44, 0x58, 0x1a, 0x3c, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x36, 0x68, 0x74, 0x74,
	0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x55, 0x73, 0x65, 0x22, 0xf8, 0x03, 0x0a, 0x15, 0x56, 0x33, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x52, 0x32, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xde, 0x03,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x07, 0x41, 0x53, 0x53, 0x55, 0x4d, 0x45, 0x44, 0x10, 0x01, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x41, 0x73, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x0e,
	0x0a, 0x01, 0x41, 0x10, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x41, 0x12, 0x14,
	0x0a, 0x04, 0x41, 0x4e, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x41, 0x4e, 0x4f, 0x4e, 0x12, 0x0e, 0x0a, 0x01, 0x49, 0x10, 0x04, 0x1a, 0x07, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x01, 0x49, 0x12, 0x0e, 0x0a, 0x01, 0x50, 0x10, 0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x01, 0x50, 0x12, 0x0e, 0x0a, 0x01, 0x52, 0x10, 0x06, 0x1a, 0x07, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x01, 0x52, 0x12, 0x0e, 0x0a, 0x01, 0x43, 0x10, 0x07, 0x1a, 0x07, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x01, 0x43, 0x12, 0x0e, 0x0a, 0x01, 0x4d, 0x10, 0x08, 0x1a, 0x07, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x01, 0x4d, 0x12, 0x38, 0x0a, 0x17, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10,
	0x09, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x03, 0x41, 0x42, 0x43, 0x10, 0x0a, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41,
	0x42, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x49, 0x44, 0x45, 0x10, 0x0b, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x49, 0x44, 0x45, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x59, 0x4c, 0x10, 0x0c, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x59, 0x4c, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x4c,
	0x44, 0x10, 0x0d, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4f, 0x4c, 0x44, 0x12, 0x10,
	0x0a, 0x02, 0x44, 0x4e, 0x10, 0x0e, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x44, 0x4e,
	0x12, 0x10, 0x0a, 0x02, 0x4f, 0x52, 0x10, 0x0f, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x4f, 0x52, 0x12, 0x14, 0x0a, 0x04, 0x50, 0x48, 0x4f, 0x4e, 0x10, 0x10, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x50, 0x48, 0x4f, 0x4e, 0x12, 0x14, 0x0a, 0x04, 0x53, 0x52, 0x43, 0x48,
	0x10, 0x11, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x52, 0x43, 0x48, 0x12, 0x0e,
	0x0a, 0x01, 0x54, 0x10, 0x12, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x54, 0x1a, 0x3e,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x38, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x73, 0x65, 0x52, 0x32, 0x22, 0xc8,
	0x03, 0x0a, 0x10, 0x56, 0x33, 0x4e, 0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0xb3, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49,
	0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02, 0x4e, 0x49, 0x10, 0x01,
	0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4e, 0x49, 0x12, 0x12, 0x0a, 0x03, 0x49, 0x4e,
	0x56, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x4e, 0x56, 0x12, 0x12,
	0x0a, 0x03, 0x44, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x44,
	0x45, 0x52, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x54, 0x48, 0x10, 0x04, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x4f, 0x54, 0x48, 0x12, 0x14, 0x0a, 0x04, 0x4e, 0x49, 0x4e, 0x46, 0x10, 0x05,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x49, 0x4e, 0x46, 0x12, 0x14, 0x0a, 0x04,
	0x50, 0x49, 0x4e, 0x46, 0x10, 0x06, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x49,
	0x4e, 0x46, 0x12, 0x12, 0x0a, 0x03, 0x55, 0x4e, 0x43, 0x10, 0x07, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x55, 0x4e, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x4d, 0x53, 0x4b, 0x10, 0x08, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x53, 0x4b, 0x12, 0x10, 0x0a, 0x02, 0x4e, 0x41,
	0x10, 0x09, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4e, 0x41, 0x12, 0x12, 0x0a, 0x03,
	0x55, 0x4e, 0x4b, 0x10, 0x0a, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x55, 0x4e, 0x4b,
	0x12, 0x14, 0x0a, 0x04, 0x41, 0x53, 0x4b, 0x55, 0x10, 0x0b, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x41, 0x53, 0x4b, 0x55, 0x12, 0x12, 0x0a, 0x03, 0x4e, 0x41, 0x56, 0x10, 0x0c, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x41, 0x56, 0x12, 0x14, 0x0a, 0x04, 0x4e, 0x41,
	0x53, 0x4b, 0x10, 0x0d, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x41, 0x53, 0x4b,
	0x12, 0x14, 0x0a, 0x04, 0x4e, 0x41, 0x56, 0x55, 0x10, 0x0e, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x4e, 0x41, 0x56, 0x55, 0x12, 0x10, 0x0a, 0x02, 0x51, 0x53, 0x10, 0x0f, 0x1a, 0x08,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x51, 0x53, 0x12, 0x12, 0x0a, 0x03, 0x54, 0x52, 0x43, 0x10,
	0x10, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x54, 0x52, 0x43, 0x12, 0x10, 0x0a, 0x02,
	0x4e, 0x50, 0x10, 0x11, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4e, 0x50, 0x1a, 0x39,
	0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x33, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x4e,
	0x75, 0x6c, 0x6c, 0x46, 0x6c, 0x61, 0x76, 0x6f, 0x72, 0x22, 0xb2, 0x04, 0x0a, 0x17, 0x56, 0x33,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x04, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x0a, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x10, 0x01, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x0a, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x12, 0x1c, 0x0a, 0x08,
	0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x02, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x12, 0x18, 0x0a, 0x06, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x10, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x52, 0x45,
	0x4d, 0x4f, 0x54, 0x45, 0x12, 0x18, 0x0a, 0x06, 0x56, 0x45, 0x52, 0x42, 0x41, 0x4c, 0x10, 0x04,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x56, 0x45, 0x52, 0x42, 0x41, 0x4c, 0x12, 0x1a,
	0x0a, 0x07, 0x44, 0x49, 0x43, 0x54, 0x41, 0x54, 0x45, 0x10, 0x05, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x44, 0x49, 0x43, 0x54, 0x41, 0x54, 0x45, 0x12, 0x14, 0x0a, 0x04, 0x46, 0x41,
	0x43, 0x45, 0x10, 0x06, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x46, 0x41, 0x43, 0x45,
	0x12, 0x16, 0x0a, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x07, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x12, 0x1e, 0x0a, 0x09, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x43, 0x4f, 0x4e, 0x46, 0x10, 0x08, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x56,
	0x49, 0x44, 0x45, 0x4f, 0x43, 0x4f, 0x4e, 0x46, 0x12, 0x1a, 0x0a, 0x07, 0x57, 0x52, 0x49, 0x54,
	0x54, 0x45, 0x4e, 0x10, 0x09, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x57, 0x52, 0x49,
	0x54, 0x54, 0x45, 0x4e, 0x12, 0x1a, 0x0a, 0x07, 0x46, 0x41, 0x58, 0x57, 0x52, 0x49, 0x54, 0x10,
	0x0a, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x46, 0x41, 0x58, 0x57, 0x52, 0x49, 0x54,
	0x12, 0x1c, 0x0a, 0x08, 0x48, 0x41, 0x4e, 0x44, 0x57, 0x52, 0x49, 0x54, 0x10, 0x0b, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x48, 0x41, 0x4e, 0x44, 0x57, 0x52, 0x49, 0x54, 0x12, 0x1c,
	0x0a, 0x08, 0x4d, 0x41, 0x49, 0x4c, 0x57, 0x52, 0x49, 0x54, 0x10, 0x0c, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x4d, 0x41, 0x49, 0x4c, 0x57, 0x52, 0x49, 0x54, 0x12, 0x20, 0x0a, 0x0a,
	0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x57, 0x52, 0x49, 0x54, 0x10, 0x0d, 0x1a, 0x10, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x0a, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x57, 0x52, 0x49, 0x54, 0x12, 0x1e,
	0x0a, 0x09, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x57, 0x52, 0x49, 0x54, 0x10, 0x0e, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x57, 0x52, 0x49, 0x54, 0x12, 0x1c,
	0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x57, 0x52, 0x49, 0x54, 0x10, 0x0f, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x54, 0x59, 0x50, 0x45, 0x57, 0x52, 0x49, 0x54, 0x1a, 0x40, 0x8a, 0x91,
	0xc9, 0xfe, 0x07, 0x3a, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43,
	0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xa8,
	0x02, 0x0a, 0x21, 0x56, 0x33, 0x50, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x01, 0x42, 0x10, 0x01,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x42, 0x12, 0x0e, 0x0a, 0x01, 0x45, 0x10, 0x02,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x45, 0x12, 0x0e, 0x0a, 0x01, 0x46, 0x10, 0x03,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x46, 0x12, 0x0e, 0x0a, 0x01, 0x47, 0x10, 0x04,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x47, 0x12, 0x10, 0x0a, 0x02, 0x4c, 0x4e, 0x10,
	0x05, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4c, 0x4e, 0x12, 0x0e, 0x0a, 0x01, 0x4e,
	0x10, 0x06, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4e, 0x12, 0x0e, 0x0a, 0x01, 0x54,
	0x10, 0x07, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x54, 0x12, 0x0e, 0x0a, 0x01, 0x55,
	0x10, 0x08, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x55, 0x12, 0x10, 0x0a, 0x02, 0x58,
	0x32, 0x10, 0x09, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x58, 0x32, 0x1a, 0x4a, 0x8a,
	0x91, 0xc9, 0xfe, 0x07, 0x44, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x85, 0x57, 0x0a, 0x0a, 0x56, 0x33,
	0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf6, 0x56, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x35, 0x0a,
	0x15, 0x41, 0x46, 0x46, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x1a, 0x1a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x14,
	0x5f, 0x41, 0x66, 0x66, 0x69, 0x6c, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x0e, 0x5f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x03, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x41, 0x4d, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x12, 0x20, 0x0a, 0x0a, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x04, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x52, 0x12, 0x1e, 0x0a,
	0x09, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x0f, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x09, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x12, 0x1a, 0x0a,
	0x07, 0x43, 0x4f, 0x4e, 0x53, 0x57, 0x49, 0x54, 0x10, 0x06, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x07, 0x43, 0x4f, 0x4e, 0x53, 0x57, 0x49, 0x54, 0x12, 0x18, 0x0a, 0x06, 0x43, 0x4f, 0x50,
	0x41, 0x52, 0x54, 0x10, 0x07, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x43, 0x4f, 0x50,
	0x41, 0x52, 0x54, 0x12, 0x24, 0x0a, 0x0c, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x10, 0x08, 0x1a, 0x12, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0c, 0x44, 0x45, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x52, 0x12, 0x1e, 0x0a, 0x09, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x45, 0x10, 0x09, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x45, 0x12, 0x1e, 0x0a, 0x09, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x1e, 0x0a, 0x09, 0x44, 0x4f, 0x57,
	0x4e, 0x47, 0x52, 0x44, 0x45, 0x52, 0x10, 0x0b, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09,
	0x44, 0x4f, 0x57, 0x4e, 0x47, 0x52, 0x44, 0x45, 0x52, 0x12, 0x28, 0x0a, 0x0e, 0x44, 0x52, 0x49,
	0x56, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x0c, 0x1a, 0x14, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x44, 0x52, 0x49, 0x56, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x45, 0x52, 0x12, 0x1a, 0x0a, 0x07, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x45, 0x10, 0x0d,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x45, 0x12,
	0x1a, 0x0a, 0x07, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x4f, 0x52, 0x10, 0x0e, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x47, 0x52, 0x41, 0x4e, 0x54, 0x4f, 0x52, 0x12, 0x1c, 0x0a, 0x08, 0x49,
	0x4e, 0x54, 0x50, 0x52, 0x54, 0x45, 0x52, 0x10, 0x0f, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x49, 0x4e, 0x54, 0x50, 0x52, 0x54, 0x45, 0x52, 0x12, 0x1c, 0x0a, 0x08, 0x52, 0x45, 0x56,
	0x49, 0x45, 0x57, 0x45, 0x52, 0x10, 0x10, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x52,
	0x45, 0x56, 0x49, 0x45, 0x57, 0x45, 0x52, 0x12, 0x1e, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x11, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x12, 0x3e, 0x0a, 0x1a, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x12, 0x1a, 0x1e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x18, 0x5f,
	0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x53, 0x70, 0x6f, 0x6e, 0x73, 0x6f, 0x72, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x46, 0x55, 0x4c, 0x4c, 0x49,
	0x4e, 0x53, 0x10, 0x13, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x46, 0x55, 0x4c, 0x4c,
	0x49, 0x4e, 0x53, 0x12, 0x1a, 0x0a, 0x07, 0x53, 0x45, 0x4c, 0x46, 0x49, 0x4e, 0x53, 0x10, 0x14,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x53, 0x45, 0x4c, 0x46, 0x49, 0x4e, 0x53, 0x12,
	0x29, 0x0a, 0x0f, 0x50, 0x41, 0x59, 0x4f, 0x52, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x15, 0x1a, 0x14, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0e, 0x5f, 0x50, 0x61, 0x79,
	0x6f, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x45, 0x4e,
	0x52, 0x4f, 0x4c, 0x42, 0x4b, 0x52, 0x10, 0x16, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x45, 0x4e, 0x52, 0x4f, 0x4c, 0x42, 0x4b, 0x52, 0x12, 0x12, 0x0a, 0x03, 0x54, 0x50, 0x41, 0x10,
	0x17, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x54, 0x50, 0x41, 0x12, 0x12, 0x0a, 0x03,
	0x55, 0x4d, 0x4f, 0x10, 0x18, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x55, 0x4d, 0x4f,
	0x12, 0x1a, 0x0a, 0x07, 0x52, 0x45, 0x53, 0x50, 0x52, 0x53, 0x4e, 0x10, 0x19, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x52, 0x45, 0x53, 0x50, 0x52, 0x53, 0x4e, 0x12, 0x18, 0x0a, 0x06,
	0x45, 0x58, 0x43, 0x45, 0x53, 0x54, 0x10, 0x1a, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x45, 0x58, 0x43, 0x45, 0x53, 0x54, 0x12, 0x1a, 0x0a, 0x07, 0x47, 0x55, 0x41, 0x44, 0x4c, 0x54,
	0x4d, 0x10, 0x1b, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x47, 0x55, 0x41, 0x44, 0x4c,
	0x54, 0x4d, 0x12, 0x16, 0x0a, 0x05, 0x47, 0x55, 0x41, 0x52, 0x44, 0x10, 0x1c, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x55, 0x41, 0x52, 0x44, 0x12, 0x18, 0x0a, 0x06, 0x50, 0x4f,
	0x57, 0x41, 0x54, 0x54, 0x10, 0x1d, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x4f,
	0x57, 0x41, 0x54, 0x54, 0x12, 0x1a, 0x0a, 0x07, 0x44, 0x50, 0x4f, 0x57, 0x41, 0x54, 0x54, 0x10,
	0x1e, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x44, 0x50, 0x4f, 0x57, 0x41, 0x54, 0x54,
	0x12, 0x1a, 0x0a, 0x07, 0x48, 0x50, 0x4f, 0x57, 0x41, 0x54, 0x54, 0x10, 0x1f, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x48, 0x50, 0x4f, 0x57, 0x41, 0x54, 0x54, 0x12, 0x1a, 0x0a, 0x07,
	0x53, 0x50, 0x4f, 0x57, 0x41, 0x54, 0x54, 0x10, 0x20, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x53, 0x50, 0x4f, 0x57, 0x41, 0x54, 0x54, 0x12, 0x2f, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x21,
	0x1a, 0x17, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x5f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x2c, 0x41, 0x53, 0x53,
	0x49, 0x47, 0x4e, 0x45, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x22, 0x1a, 0x2d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x27, 0x5f, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x73, 0x6f, 0x6e, 0x4c, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x54, 0x10, 0x23, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x41, 0x53,
	0x53, 0x49, 0x53, 0x54, 0x12, 0x16, 0x0a, 0x05, 0x42, 0x49, 0x4f, 0x54, 0x48, 0x10, 0x24, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x42, 0x49, 0x4f, 0x54, 0x48, 0x12, 0x1c, 0x0a, 0x08,
	0x41, 0x4e, 0x54, 0x49, 0x42, 0x49, 0x4f, 0x54, 0x10, 0x25, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x41, 0x4e, 0x54, 0x49, 0x42, 0x49, 0x4f, 0x54, 0x12, 0x14, 0x0a, 0x04, 0x44, 0x45,
	0x42, 0x52, 0x10, 0x26, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x44, 0x45, 0x42, 0x52,
	0x12, 0x12, 0x0a, 0x03, 0x43, 0x43, 0x4f, 0x10, 0x27, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x43, 0x43, 0x4f, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x45, 0x45, 0x10, 0x28, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x45, 0x45, 0x12, 0x16, 0x0a, 0x05, 0x53, 0x4e, 0x49, 0x46,
	0x46, 0x10, 0x29, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53, 0x4e, 0x49, 0x46, 0x46,
	0x12, 0x35, 0x0a, 0x15, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x45, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x2a, 0x1a, 0x1a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x14, 0x5f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x43, 0x49, 0x54, 0x49, 0x5a,
	0x45, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x2b, 0x1a, 0x16,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x5f, 0x43, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x43, 0x41, 0x53, 0x10, 0x2c, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x43, 0x41, 0x53, 0x12, 0x14, 0x0a, 0x04, 0x43, 0x41,
	0x53, 0x4d, 0x10, 0x2d, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x41, 0x53, 0x4d,
	0x12, 0x10, 0x0a, 0x02, 0x43, 0x4e, 0x10, 0x2e, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x43, 0x4e, 0x12, 0x14, 0x0a, 0x04, 0x43, 0x4e, 0x52, 0x50, 0x10, 0x2f, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x43, 0x4e, 0x52, 0x50, 0x12, 0x16, 0x0a, 0x05, 0x43, 0x4e, 0x52, 0x50,
	0x4d, 0x10, 0x30, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x4e, 0x52, 0x50, 0x4d,
	0x12, 0x14, 0x0a, 0x04, 0x43, 0x50, 0x43, 0x41, 0x10, 0x31, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x43, 0x50, 0x43, 0x41, 0x12, 0x12, 0x0a, 0x03, 0x43, 0x52, 0x50, 0x10, 0x32, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x43, 0x52, 0x50, 0x12, 0x14, 0x0a, 0x04, 0x43, 0x52,
	0x50, 0x4d, 0x10, 0x33, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x52, 0x50, 0x4d,
	0x12, 0x2d, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x34, 0x1a, 0x16, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x10, 0x5f,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x20, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x35, 0x1a, 0x24, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1e, 0x5f, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x42,
	0x49, 0x4c, 0x4c, 0x10, 0x36, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x42, 0x49, 0x4c,
	0x4c, 0x12, 0x12, 0x0a, 0x03, 0x4f, 0x52, 0x47, 0x10, 0x37, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x4f, 0x52, 0x47, 0x12, 0x16, 0x0a, 0x05, 0x50, 0x41, 0x59, 0x4f, 0x52, 0x10, 0x38,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x41, 0x59, 0x4f, 0x52, 0x12, 0x1a, 0x0a,
	0x04, 0x45, 0x43, 0x4f, 0x4e, 0x10, 0x39, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x45,
	0x43, 0x4f, 0x4e, 0xb8, 0xac, 0x9c, 0x88, 0x0b, 0x01, 0x12, 0x18, 0x0a, 0x03, 0x4e, 0x4f, 0x4b,
	0x10, 0x3a, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x4f, 0x4b, 0xb8, 0xac, 0x9c,
	0x88, 0x0b, 0x01, 0x12, 0x37, 0x0a, 0x16, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x3b, 0x1a,
	0x1b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x15, 0x5f, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x51, 0x0a, 0x24,
	0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x3c, 0x1a, 0x27, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x21, 0x5f, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x06, 0x41, 0x43, 0x48, 0x46, 0x49, 0x44, 0x10, 0x3d, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x41, 0x43, 0x48, 0x46, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x05, 0x4a, 0x55, 0x52,
	0x49, 0x44, 0x10, 0x3e, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4a, 0x55, 0x52, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x07, 0x4c, 0x4f, 0x43, 0x48, 0x46, 0x49, 0x44, 0x10, 0x3f, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4c, 0x4f, 0x43, 0x48, 0x46, 0x49, 0x44, 0x12, 0x48, 0x0a,
	0x1f, 0x4c, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x10, 0x40, 0x1a, 0x23, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x5f, 0x4c, 0x69, 0x76, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x02, 0x42, 0x46, 0x10, 0x41, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x42, 0x46, 0x12, 0x10, 0x0a, 0x02, 0x42, 0x4c, 0x10,
	0x42, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x42, 0x4c, 0x12, 0x10, 0x0a, 0x02, 0x42,
	0x52, 0x10, 0x43, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x42, 0x52, 0x12, 0x10, 0x0a,
	0x02, 0x43, 0x4f, 0x10, 0x44, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x4f, 0x12,
	0x10, 0x0a, 0x02, 0x44, 0x41, 0x10, 0x45, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x44,
	0x41, 0x12, 0x10, 0x0a, 0x02, 0x44, 0x52, 0x10, 0x46, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x02, 0x44, 0x52, 0x12, 0x10, 0x0a, 0x02, 0x44, 0x55, 0x10, 0x47, 0x1a, 0x08, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x02, 0x44, 0x55, 0x12, 0x10, 0x0a, 0x02, 0x46, 0x49, 0x10, 0x48, 0x1a, 0x08, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x02, 0x46, 0x49, 0x12, 0x10, 0x0a, 0x02, 0x4c, 0x59, 0x10, 0x49, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4c, 0x59, 0x12, 0x10, 0x0a, 0x02, 0x4d, 0x54, 0x10,
	0x4a, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4d, 0x54, 0x12, 0x10, 0x0a, 0x02, 0x4d,
	0x55, 0x10, 0x4b, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4d, 0x55, 0x12, 0x10, 0x0a,
	0x02, 0x50, 0x4c, 0x10, 0x4c, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x4c, 0x12,
	0x10, 0x0a, 0x02, 0x52, 0x43, 0x10, 0x4d, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x52,
	0x43, 0x12, 0x10, 0x0a, 0x02, 0x53, 0x48, 0x10, 0x4e, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x02, 0x53, 0x48, 0x12, 0x10, 0x0a, 0x02, 0x56, 0x4c, 0x10, 0x4f, 0x1a, 0x08, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x02, 0x56, 0x4c, 0x12, 0x10, 0x0a, 0x02, 0x57, 0x4c, 0x10, 0x50, 0x1a, 0x08, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x02, 0x57, 0x4c, 0x12, 0x10, 0x0a, 0x02, 0x57, 0x4f, 0x10, 0x51, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x57, 0x4f, 0x12, 0x50, 0x0a, 0x23, 0x4d, 0x45, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x49,
	0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x52, 0x1a, 0x27, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x21, 0x5f, 0x4d, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x44,
	0x43, 0x10, 0x53, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x44, 0x43, 0x12, 0x10, 0x0a,
	0x02, 0x47, 0x44, 0x10, 0x54, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x47, 0x44, 0x12,
	0x12, 0x0a, 0x03, 0x47, 0x44, 0x46, 0x10, 0x55, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x47, 0x44, 0x46, 0x12, 0x12, 0x0a, 0x03, 0x47, 0x44, 0x53, 0x10, 0x56, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x47, 0x44, 0x53, 0x12, 0x14, 0x0a, 0x04, 0x47, 0x44, 0x53, 0x46, 0x10,
	0x57, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x47, 0x44, 0x53, 0x46, 0x12, 0x16, 0x0a,
	0x05, 0x4d, 0x47, 0x44, 0x53, 0x46, 0x10, 0x58, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x4d, 0x47, 0x44, 0x53, 0x46, 0x12, 0x2b, 0x0a, 0x10, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x59, 0x1a, 0x15, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0f, 0x5f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x54, 0x52, 0x42, 0x10, 0x5a, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x54, 0x52, 0x42, 0x12, 0x48, 0x0a, 0x1f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e,
	0x41, 0x4c, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x48, 0x49, 0x50, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x5b, 0x1a, 0x23, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x1d, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x07, 0x46, 0x41, 0x4d, 0x4d, 0x45, 0x4d, 0x42, 0x10, 0x5c, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x46, 0x41, 0x4d, 0x4d, 0x45, 0x4d, 0x42, 0x12, 0x16, 0x0a, 0x05,
	0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x5d, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x12, 0x1e, 0x0a, 0x09, 0x43, 0x48, 0x4c, 0x44, 0x41, 0x44, 0x4f, 0x50,
	0x54, 0x10, 0x5e, 0x1a, 0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x48, 0x4c, 0x44, 0x41,
	0x44, 0x4f, 0x50, 0x54, 0x12, 0x1c, 0x0a, 0x08, 0x44, 0x41, 0x55, 0x41, 0x44, 0x4f, 0x50, 0x54,
	0x10, 0x5f, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x41, 0x55, 0x41, 0x44, 0x4f,
	0x50, 0x54, 0x12, 0x1c, 0x0a, 0x08, 0x53, 0x4f, 0x4e, 0x41, 0x44, 0x4f, 0x50, 0x54, 0x10, 0x60,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x4f, 0x4e, 0x41, 0x44, 0x4f, 0x50, 0x54,
	0x12, 0x1c, 0x0a, 0x08, 0x43, 0x48, 0x4c, 0x44, 0x46, 0x4f, 0x53, 0x54, 0x10, 0x61, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x48, 0x4c, 0x44, 0x46, 0x4f, 0x53, 0x54, 0x12, 0x1a,
	0x0a, 0x07, 0x44, 0x41, 0x55, 0x46, 0x4f, 0x53, 0x54, 0x10, 0x62, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x44, 0x41, 0x55, 0x46, 0x4f, 0x53, 0x54, 0x12, 0x1a, 0x0a, 0x07, 0x53, 0x4f,
	0x4e, 0x46, 0x4f, 0x53, 0x54, 0x10, 0x63, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x53,
	0x4f, 0x4e, 0x46, 0x4f, 0x53, 0x54, 0x12, 0x14, 0x0a, 0x04, 0x44, 0x41, 0x55, 0x43, 0x10, 0x64,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x44, 0x41, 0x55, 0x43, 0x12, 0x12, 0x0a, 0x03,
	0x44, 0x41, 0x55, 0x10, 0x65, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x44, 0x41, 0x55,
	0x12, 0x18, 0x0a, 0x06, 0x53, 0x54, 0x50, 0x44, 0x41, 0x55, 0x10, 0x66, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x53, 0x54, 0x50, 0x44, 0x41, 0x55, 0x12, 0x18, 0x0a, 0x06, 0x4e, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x10, 0x67, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4e, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x53, 0x4f, 0x4e, 0x10, 0x68, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x4f, 0x4e, 0x12, 0x14, 0x0a, 0x04, 0x53, 0x4f, 0x4e, 0x43,
	0x10, 0x69, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x4f, 0x4e, 0x43, 0x12, 0x18,
	0x0a, 0x06, 0x53, 0x54, 0x50, 0x53, 0x4f, 0x4e, 0x10, 0x6a, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x53, 0x54, 0x50, 0x53, 0x4f, 0x4e, 0x12, 0x1a, 0x0a, 0x07, 0x53, 0x54, 0x50, 0x43,
	0x48, 0x4c, 0x44, 0x10, 0x6b, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x53, 0x54, 0x50,
	0x43, 0x48, 0x4c, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x45, 0x58, 0x54, 0x10, 0x6c, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x45, 0x58, 0x54, 0x12, 0x14, 0x0a, 0x04, 0x41, 0x55, 0x4e, 0x54,
	0x10, 0x6d, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x41, 0x55, 0x4e, 0x54, 0x12, 0x16,
	0x0a, 0x05, 0x4d, 0x41, 0x55, 0x4e, 0x54, 0x10, 0x6e, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x4d, 0x41, 0x55, 0x4e, 0x54, 0x12, 0x16, 0x0a, 0x05, 0x50, 0x41, 0x55, 0x4e, 0x54, 0x10,
	0x6f, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x41, 0x55, 0x4e, 0x54, 0x12, 0x16,
	0x0a, 0x05, 0x43, 0x4f, 0x55, 0x53, 0x4e, 0x10, 0x70, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x43, 0x4f, 0x55, 0x53, 0x4e, 0x12, 0x18, 0x0a, 0x06, 0x4d, 0x43, 0x4f, 0x55, 0x53, 0x4e,
	0x10, 0x71, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4d, 0x43, 0x4f, 0x55, 0x53, 0x4e,
	0x12, 0x18, 0x0a, 0x06, 0x50, 0x43, 0x4f, 0x55, 0x53, 0x4e, 0x10, 0x72, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x50, 0x43, 0x4f, 0x55, 0x53, 0x4e, 0x12, 0x18, 0x0a, 0x06, 0x47, 0x47,
	0x52, 0x50, 0x52, 0x4e, 0x10, 0x73, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x47, 0x47,
	0x52, 0x50, 0x52, 0x4e, 0x12, 0x18, 0x0a, 0x06, 0x47, 0x47, 0x52, 0x46, 0x54, 0x48, 0x10, 0x74,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x47, 0x47, 0x52, 0x46, 0x54, 0x48, 0x12, 0x1a,
	0x0a, 0x07, 0x4d, 0x47, 0x47, 0x52, 0x46, 0x54, 0x48, 0x10, 0x75, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x4d, 0x47, 0x47, 0x52, 0x46, 0x54, 0x48, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x47,
	0x47, 0x52, 0x46, 0x54, 0x48, 0x10, 0x76, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50,
	0x47, 0x47, 0x52, 0x46, 0x54, 0x48, 0x12, 0x18, 0x0a, 0x06, 0x47, 0x47, 0x52, 0x4d, 0x54, 0x48,
	0x10, 0x77, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x47, 0x47, 0x52, 0x4d, 0x54, 0x48,
	0x12, 0x1a, 0x0a, 0x07, 0x4d, 0x47, 0x47, 0x52, 0x4d, 0x54, 0x48, 0x10, 0x78, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x47, 0x47, 0x52, 0x4d, 0x54, 0x48, 0x12, 0x1a, 0x0a, 0x07,
	0x50, 0x47, 0x47, 0x52, 0x4d, 0x54, 0x48, 0x10, 0x79, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x50, 0x47, 0x47, 0x52, 0x4d, 0x54, 0x48, 0x12, 0x1a, 0x0a, 0x07, 0x4d, 0x47, 0x47, 0x52,
	0x50, 0x52, 0x4e, 0x10, 0x7a, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x47, 0x47,
	0x52, 0x50, 0x52, 0x4e, 0x12, 0x1a, 0x0a, 0x07, 0x50, 0x47, 0x47, 0x52, 0x50, 0x52, 0x4e, 0x10,
	0x7b, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x47, 0x47, 0x52, 0x50, 0x52, 0x4e,
	0x12, 0x1e, 0x0a, 0x09, 0x47, 0x52, 0x4e, 0x44, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x7c, 0x1a,
	0x0f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x09, 0x47, 0x52, 0x4e, 0x44, 0x43, 0x48, 0x49, 0x4c, 0x44,
	0x12, 0x1a, 0x0a, 0x07, 0x47, 0x52, 0x4e, 0x44, 0x44, 0x41, 0x55, 0x10, 0x7d, 0x1a, 0x0d, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x07, 0x47, 0x52, 0x4e, 0x44, 0x44, 0x41, 0x55, 0x12, 0x1a, 0x0a, 0x07,
	0x47, 0x52, 0x4e, 0x44, 0x53, 0x4f, 0x4e, 0x10, 0x7e, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x07, 0x47, 0x52, 0x4e, 0x44, 0x53, 0x4f, 0x4e, 0x12, 0x16, 0x0a, 0x05, 0x47, 0x52, 0x50, 0x52,
	0x4e, 0x10, 0x7f, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x47, 0x52, 0x50, 0x52, 0x4e,
	0x12, 0x17, 0x0a, 0x05, 0x47, 0x52, 0x46, 0x54, 0x48, 0x10, 0x80, 0x01, 0x1a, 0x0b, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x05, 0x47, 0x52, 0x46, 0x54, 0x48, 0x12, 0x19, 0x0a, 0x06, 0x4d, 0x47, 0x52,
	0x46, 0x54, 0x48, 0x10, 0x81, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4d, 0x47,
	0x52, 0x46, 0x54, 0x48, 0x12, 0x19, 0x0a, 0x06, 0x50, 0x47, 0x52, 0x46, 0x54, 0x48, 0x10, 0x82,
	0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x47, 0x52, 0x46, 0x54, 0x48, 0x12,
	0x17, 0x0a, 0x05, 0x47, 0x52, 0x4d, 0x54, 0x48, 0x10, 0x83, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x47, 0x52, 0x4d, 0x54, 0x48, 0x12, 0x19, 0x0a, 0x06, 0x4d, 0x47, 0x52, 0x4d,
	0x54, 0x48, 0x10, 0x84, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4d, 0x47, 0x52,
	0x4d, 0x54, 0x48, 0x12, 0x19, 0x0a, 0x06, 0x50, 0x47, 0x52, 0x4d, 0x54, 0x48, 0x10, 0x85, 0x01,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x47, 0x52, 0x4d, 0x54, 0x48, 0x12, 0x19,
	0x0a, 0x06, 0x4d, 0x47, 0x52, 0x50, 0x52, 0x4e, 0x10, 0x86, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x4d, 0x47, 0x52, 0x50, 0x52, 0x4e, 0x12, 0x19, 0x0a, 0x06, 0x50, 0x47, 0x52,
	0x50, 0x52, 0x4e, 0x10, 0x87, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x47,
	0x52, 0x50, 0x52, 0x4e, 0x12, 0x17, 0x0a, 0x05, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x10, 0x88, 0x01,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1f, 0x0a,
	0x09, 0x43, 0x48, 0x4c, 0x44, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x10, 0x89, 0x01, 0x1a, 0x0f, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x09, 0x43, 0x48, 0x4c, 0x44, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1d,
	0x0a, 0x08, 0x44, 0x41, 0x55, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x10, 0x8a, 0x01, 0x1a, 0x0e, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x08, 0x44, 0x41, 0x55, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1d, 0x0a,
	0x08, 0x53, 0x4f, 0x4e, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x10, 0x8b, 0x01, 0x1a, 0x0e, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x08, 0x53, 0x4f, 0x4e, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1d, 0x0a, 0x08,
	0x50, 0x52, 0x4e, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x10, 0x8c, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x08, 0x50, 0x52, 0x4e, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1d, 0x0a, 0x08, 0x46,
	0x54, 0x48, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x10, 0x8d, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x08, 0x46, 0x54, 0x48, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1d, 0x0a, 0x08, 0x4d, 0x54,
	0x48, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x10, 0x8e, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x08, 0x4d, 0x54, 0x48, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x49, 0x42,
	0x49, 0x4e, 0x4c, 0x41, 0x57, 0x10, 0x8f, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08,
	0x53, 0x49, 0x42, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1d, 0x0a, 0x08, 0x42, 0x52, 0x4f, 0x49,
	0x4e, 0x4c, 0x41, 0x57, 0x10, 0x90, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x42,
	0x52, 0x4f, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x49, 0x53, 0x49, 0x4e,
	0x4c, 0x41, 0x57, 0x10, 0x91, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x53, 0x49,
	0x53, 0x49, 0x4e, 0x4c, 0x41, 0x57, 0x12, 0x1b, 0x0a, 0x07, 0x4e, 0x49, 0x45, 0x4e, 0x45, 0x50,
	0x48, 0x10, 0x92, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4e, 0x49, 0x45, 0x4e,
	0x45, 0x50, 0x48, 0x12, 0x19, 0x0a, 0x06, 0x4e, 0x45, 0x50, 0x48, 0x45, 0x57, 0x10, 0x93, 0x01,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4e, 0x45, 0x50, 0x48, 0x45, 0x57, 0x12, 0x17,
	0x0a, 0x05, 0x4e, 0x49, 0x45, 0x43, 0x45, 0x10, 0x94, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x4e, 0x49, 0x45, 0x43, 0x45, 0x12, 0x17, 0x0a, 0x05, 0x55, 0x4e, 0x43, 0x4c, 0x45,
	0x10, 0x95, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x55, 0x4e, 0x43, 0x4c, 0x45,
	0x12, 0x19, 0x0a, 0x06, 0x4d, 0x55, 0x4e, 0x43, 0x4c, 0x45, 0x10, 0x96, 0x01, 0x1a, 0x0c, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x06, 0x4d, 0x55, 0x4e, 0x43, 0x4c, 0x45, 0x12, 0x19, 0x0a, 0x06, 0x50,
	0x55, 0x4e, 0x43, 0x4c, 0x45, 0x10, 0x97, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x50, 0x55, 0x4e, 0x43, 0x4c, 0x45, 0x12, 0x13, 0x0a, 0x03, 0x50, 0x52, 0x4e, 0x10, 0x98, 0x01,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x52, 0x4e, 0x12, 0x19, 0x0a, 0x06, 0x41,
	0x44, 0x4f, 0x50, 0x54, 0x50, 0x10, 0x99, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x41, 0x44, 0x4f, 0x50, 0x54, 0x50, 0x12, 0x19, 0x0a, 0x06, 0x41, 0x44, 0x4f, 0x50, 0x54, 0x46,
	0x10, 0x9a, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x41, 0x44, 0x4f, 0x50, 0x54,
	0x46, 0x12, 0x19, 0x0a, 0x06, 0x41, 0x44, 0x4f, 0x50, 0x54, 0x4d, 0x10, 0x9b, 0x01, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x41, 0x44, 0x4f, 0x50, 0x54, 0x4d, 0x12, 0x13, 0x0a, 0x03,
	0x46, 0x54, 0x48, 0x10, 0x9c, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x46, 0x54,
	0x48, 0x12, 0x1b, 0x0a, 0x07, 0x46, 0x54, 0x48, 0x46, 0x4f, 0x53, 0x54, 0x10, 0x9d, 0x01, 0x1a,
	0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x46, 0x54, 0x48, 0x46, 0x4f, 0x53, 0x54, 0x12, 0x15,
	0x0a, 0x04, 0x4e, 0x46, 0x54, 0x48, 0x10, 0x9e, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x4e, 0x46, 0x54, 0x48, 0x12, 0x17, 0x0a, 0x05, 0x4e, 0x46, 0x54, 0x48, 0x46, 0x10, 0x9f,
	0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4e, 0x46, 0x54, 0x48, 0x46, 0x12, 0x19,
	0x0a, 0x06, 0x53, 0x54, 0x50, 0x46, 0x54, 0x48, 0x10, 0xa0, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x53, 0x54, 0x50, 0x46, 0x54, 0x48, 0x12, 0x13, 0x0a, 0x03, 0x4d, 0x54, 0x48,
	0x10, 0xa1, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x54, 0x48, 0x12, 0x17,
	0x0a, 0x05, 0x47, 0x45, 0x53, 0x54, 0x4d, 0x10, 0xa2, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x47, 0x45, 0x53, 0x54, 0x4d, 0x12, 0x1b, 0x0a, 0x07, 0x4d, 0x54, 0x48, 0x46, 0x4f,
	0x53, 0x54, 0x10, 0xa3, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x4d, 0x54, 0x48,
	0x46, 0x4f, 0x53, 0x54, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x4d, 0x54, 0x48, 0x10, 0xa4, 0x01, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x4d, 0x54, 0x48, 0x12, 0x17, 0x0a, 0x05, 0x4e,
	0x4d, 0x54, 0x48, 0x46, 0x10, 0xa5, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4e,
	0x4d, 0x54, 0x48, 0x46, 0x12, 0x19, 0x0a, 0x06, 0x53, 0x54, 0x50, 0x4d, 0x54, 0x48, 0x10, 0xa6,
	0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x54, 0x50, 0x4d, 0x54, 0x48, 0x12,
	0x15, 0x0a, 0x04, 0x4e, 0x50, 0x52, 0x4e, 0x10, 0xa7, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x4e, 0x50, 0x52, 0x4e, 0x12, 0x1b, 0x0a, 0x07, 0x50, 0x52, 0x4e, 0x46, 0x4f, 0x53,
	0x54, 0x10, 0xa8, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x52, 0x4e, 0x46,
	0x4f, 0x53, 0x54, 0x12, 0x19, 0x0a, 0x06, 0x53, 0x54, 0x50, 0x50, 0x52, 0x4e, 0x10, 0xa9, 0x01,
	0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x54, 0x50, 0x50, 0x52, 0x4e, 0x12, 0x13,
	0x0a, 0x03, 0x53, 0x49, 0x42, 0x10, 0xaa, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x53, 0x49, 0x42, 0x12, 0x13, 0x0a, 0x03, 0x42, 0x52, 0x4f, 0x10, 0xab, 0x01, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x42, 0x52, 0x4f, 0x12, 0x15, 0x0a, 0x04, 0x48, 0x42, 0x52, 0x4f,
	0x10, 0xac, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48, 0x42, 0x52, 0x4f, 0x12,
	0x15, 0x0a, 0x04, 0x4e, 0x42, 0x52, 0x4f, 0x10, 0xad, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x4e, 0x42, 0x52, 0x4f, 0x12, 0x1b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x4e, 0x42, 0x52,
	0x4f, 0x10, 0xae, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x54, 0x57, 0x49, 0x4e,
	0x42, 0x52, 0x4f, 0x12, 0x1d, 0x0a, 0x08, 0x46, 0x54, 0x57, 0x49, 0x4e, 0x42, 0x52, 0x4f, 0x10,
	0xaf, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x46, 0x54, 0x57, 0x49, 0x4e, 0x42,
	0x52, 0x4f, 0x12, 0x1d, 0x0a, 0x08, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x42, 0x52, 0x4f, 0x10, 0xb0,
	0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x42, 0x52,
	0x4f, 0x12, 0x19, 0x0a, 0x06, 0x53, 0x54, 0x50, 0x42, 0x52, 0x4f, 0x10, 0xb1, 0x01, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x54, 0x50, 0x42, 0x52, 0x4f, 0x12, 0x15, 0x0a, 0x04,
	0x48, 0x53, 0x49, 0x42, 0x10, 0xb2, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48,
	0x53, 0x49, 0x42, 0x12, 0x15, 0x0a, 0x04, 0x48, 0x53, 0x49, 0x53, 0x10, 0xb3, 0x01, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48, 0x53, 0x49, 0x53, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x53,
	0x49, 0x42, 0x10, 0xb4, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x53, 0x49,
	0x42, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x53, 0x49, 0x53, 0x10, 0xb5, 0x01, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x53, 0x49, 0x53, 0x12, 0x1b, 0x0a, 0x07, 0x54, 0x57, 0x49, 0x4e,
	0x53, 0x49, 0x53, 0x10, 0xb6, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x54, 0x57,
	0x49, 0x4e, 0x53, 0x49, 0x53, 0x12, 0x1d, 0x0a, 0x08, 0x46, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x49,
	0x53, 0x10, 0xb7, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x46, 0x54, 0x57, 0x49,
	0x4e, 0x53, 0x49, 0x53, 0x12, 0x1d, 0x0a, 0x08, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x53, 0x49, 0x53,
	0x10, 0xb8, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x49, 0x54, 0x57, 0x49, 0x4e,
	0x53, 0x49, 0x53, 0x12, 0x15, 0x0a, 0x04, 0x54, 0x57, 0x49, 0x4e, 0x10, 0xb9, 0x01, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x54, 0x57, 0x49, 0x4e, 0x12, 0x17, 0x0a, 0x05, 0x46, 0x54,
	0x57, 0x49, 0x4e, 0x10, 0xba, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x46, 0x54,
	0x57, 0x49, 0x4e, 0x12, 0x17, 0x0a, 0x05, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x10, 0xbb, 0x01, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x49, 0x54, 0x57, 0x49, 0x4e, 0x12, 0x13, 0x0a, 0x03,
	0x53, 0x49, 0x53, 0x10, 0xbc, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x49,
	0x53, 0x12, 0x19, 0x0a, 0x06, 0x53, 0x54, 0x50, 0x53, 0x49, 0x53, 0x10, 0xbd, 0x01, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x53, 0x54, 0x50, 0x53, 0x49, 0x53, 0x12, 0x19, 0x0a, 0x06,
	0x53, 0x54, 0x50, 0x53, 0x49, 0x42, 0x10, 0xbe, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x53, 0x54, 0x50, 0x53, 0x49, 0x42, 0x12, 0x1b, 0x0a, 0x07, 0x53, 0x49, 0x47, 0x4f, 0x54,
	0x48, 0x52, 0x10, 0xbf, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x53, 0x49, 0x47,
	0x4f, 0x54, 0x48, 0x52, 0x12, 0x1b, 0x0a, 0x07, 0x44, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x54, 0x10,
	0xc0, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x44, 0x4f, 0x4d, 0x50, 0x41, 0x52,
	0x54, 0x12, 0x19, 0x0a, 0x06, 0x46, 0x4d, 0x52, 0x53, 0x50, 0x53, 0x10, 0xc1, 0x01, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x46, 0x4d, 0x52, 0x53, 0x50, 0x53, 0x12, 0x13, 0x0a, 0x03,
	0x53, 0x50, 0x53, 0x10, 0xc2, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x50,
	0x53, 0x12, 0x15, 0x0a, 0x04, 0x48, 0x55, 0x53, 0x42, 0x10, 0xc3, 0x01, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x48, 0x55, 0x53, 0x42, 0x12, 0x15, 0x0a, 0x04, 0x57, 0x49, 0x46, 0x45,
	0x10, 0xc4, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x57, 0x49, 0x46, 0x45, 0x12,
	0x15, 0x0a, 0x04, 0x46, 0x52, 0x4e, 0x44, 0x10, 0xc5, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x46, 0x52, 0x4e, 0x44, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x42, 0x4f, 0x52, 0x10, 0xc6,
	0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x42, 0x4f, 0x52, 0x12, 0x1b, 0x0a,
	0x07, 0x4f, 0x4e, 0x45, 0x53, 0x45, 0x4c, 0x46, 0x10, 0xc7, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x07, 0x4f, 0x4e, 0x45, 0x53, 0x45, 0x4c, 0x46, 0x12, 0x15, 0x0a, 0x04, 0x52, 0x4f,
	0x4f, 0x4d, 0x10, 0xc8, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x52, 0x4f, 0x4f,
	0x4d, 0x12, 0x51, 0x0a, 0x24, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xc9, 0x01, 0x1a, 0x26, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x20, 0x5f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4f, 0x72, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x12, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x47, 0x45,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xca, 0x01, 0x1a, 0x17, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x11, 0x5f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x46, 0x41, 0x4d, 0x44, 0x45, 0x50,
	0x10, 0xcb, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x46, 0x41, 0x4d, 0x44, 0x45,
	0x50, 0x12, 0x19, 0x0a, 0x06, 0x48, 0x41, 0x4e, 0x44, 0x49, 0x43, 0x10, 0xcc, 0x01, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x48, 0x41, 0x4e, 0x44, 0x49, 0x43, 0x12, 0x13, 0x0a, 0x03,
	0x49, 0x4e, 0x4a, 0x10, 0xcd, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x4e,
	0x4a, 0x12, 0x15, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x46, 0x10, 0xce, 0x01, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x53, 0x45, 0x4c, 0x46, 0x12, 0x15, 0x0a, 0x04, 0x53, 0x50, 0x4f, 0x4e,
	0x10, 0xcf, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x50, 0x4f, 0x4e, 0x12,
	0x15, 0x0a, 0x04, 0x53, 0x54, 0x55, 0x44, 0x10, 0xd0, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x53, 0x54, 0x55, 0x44, 0x12, 0x17, 0x0a, 0x05, 0x46, 0x53, 0x54, 0x55, 0x44, 0x10,
	0xd1, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x46, 0x53, 0x54, 0x55, 0x44, 0x12,
	0x17, 0x0a, 0x05, 0x50, 0x53, 0x54, 0x55, 0x44, 0x10, 0xd2, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x50, 0x53, 0x54, 0x55, 0x44, 0x12, 0x17, 0x0a, 0x05, 0x41, 0x44, 0x4f, 0x50,
	0x54, 0x10, 0xd3, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x41, 0x44, 0x4f, 0x50,
	0x54, 0x12, 0x19, 0x0a, 0x06, 0x47, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0xd4, 0x01, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x47, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x12, 0x19, 0x0a, 0x06,
	0x47, 0x50, 0x41, 0x52, 0x4e, 0x54, 0x10, 0xd5, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x47, 0x50, 0x41, 0x52, 0x4e, 0x54, 0x12, 0x13, 0x0a, 0x03, 0x4e, 0x41, 0x54, 0x10, 0xd6,
	0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4e, 0x41, 0x54, 0x12, 0x17, 0x0a, 0x05,
	0x4e, 0x49, 0x45, 0x4e, 0x45, 0x10, 0xd7, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05,
	0x4e, 0x49, 0x45, 0x4e, 0x45, 0x12, 0x17, 0x0a, 0x05, 0x50, 0x41, 0x52, 0x4e, 0x54, 0x10, 0xd8,
	0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x41, 0x52, 0x4e, 0x54, 0x12, 0x15,
	0x0a, 0x04, 0x53, 0x50, 0x53, 0x45, 0x10, 0xd9, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x53, 0x50, 0x53, 0x45, 0x12, 0x15, 0x0a, 0x04, 0x53, 0x54, 0x45, 0x50, 0x10, 0xda, 0x01,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x54, 0x45, 0x50, 0x12, 0x39, 0x0a, 0x17,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x4f,
	0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xdb, 0x01, 0x1a, 0x1b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x15, 0x5f, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x20, 0x43, 0x4c, 0x41, 0x49, 0x4d,
	0x41, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xdc, 0x01, 0x1a, 0x23,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x5f, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x61, 0x6e, 0x74, 0x43,
	0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x4d, 0x45, 0x56, 0x49, 0x43, 0x10,
	0xdd, 0x01, 0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x43, 0x52, 0x49, 0x4d, 0x45, 0x56,
	0x49, 0x43, 0x12, 0x19, 0x0a, 0x06, 0x49, 0x4e, 0x4a, 0x57, 0x4b, 0x52, 0x10, 0xde, 0x01, 0x1a,
	0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x49, 0x4e, 0x4a, 0x57, 0x4b, 0x52, 0x12, 0x4c, 0x0a,
	0x21, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0xdf, 0x01, 0x1a, 0x24, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1e, 0x5f, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x06, 0x43,
	0x4f, 0x43, 0x42, 0x45, 0x4e, 0x10, 0xe0, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06,
	0x43, 0x4f, 0x43, 0x42, 0x45, 0x4e, 0x12, 0x1b, 0x0a, 0x07, 0x44, 0x49, 0x46, 0x46, 0x41, 0x42,
	0x4c, 0x10, 0xe1, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x44, 0x49, 0x46, 0x46,
	0x41, 0x42, 0x4c, 0x12, 0x15, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x44, 0x10, 0xe2, 0x01, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x57, 0x41, 0x52, 0x44, 0x12, 0x4e, 0x0a, 0x22, 0x49, 0x4e,
	0x44, 0x49, 0x56, 0x49, 0x44, 0x55, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x52, 0x45, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0xe3, 0x01, 0x1a, 0x25, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1f, 0x5f, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x49, 0x6e, 0x73, 0x75, 0x72, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x07, 0x52, 0x45,
	0x54, 0x49, 0x52, 0x45, 0x45, 0x10, 0xe4, 0x01, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07,
	0x52, 0x45, 0x54, 0x49, 0x52, 0x45, 0x45, 0x12, 0x4a, 0x0a, 0x20, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x41, 0x4d, 0x5f, 0x45, 0x4c, 0x49, 0x47, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xe5, 0x01, 0x1a, 0x23,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1d, 0x5f, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x6c,
	0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x05, 0x49, 0x4e, 0x44, 0x49, 0x47, 0x10, 0xe6, 0x01, 0x1a,
	0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x49, 0x4e, 0x44, 0x49, 0x47, 0x12, 0x13, 0x0a, 0x03,
	0x4d, 0x49, 0x4c, 0x10, 0xe7, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x49,
	0x4c, 0x12, 0x19, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x4d, 0x49, 0x4c, 0x10, 0xe8, 0x01, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x41, 0x43, 0x54, 0x4d, 0x49, 0x4c, 0x12, 0x19, 0x0a, 0x06,
	0x52, 0x45, 0x54, 0x4d, 0x49, 0x4c, 0x10, 0xe9, 0x01, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x06, 0x52, 0x45, 0x54, 0x4d, 0x49, 0x4c, 0x12, 0x13, 0x0a, 0x03, 0x56, 0x45, 0x54, 0x10, 0xea,
	0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x56, 0x45, 0x54, 0x12, 0x4e, 0x0a, 0x22,
	0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0xeb, 0x01, 0x1a, 0x25, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x1f, 0x5f, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x65, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x1b,
	0x52, 0x45, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x53, 0x10, 0xec, 0x01, 0x1a, 0x1f,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x19, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x42, 0x61, 0x73, 0x69, 0x73, 0x12,
	0x13, 0x0a, 0x03, 0x45, 0x52, 0x4c, 0x10, 0xed, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x45, 0x52, 0x4c, 0x12, 0x13, 0x0a, 0x03, 0x53, 0x43, 0x4e, 0x10, 0xee, 0x01, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x53, 0x43, 0x4e, 0x12, 0x50, 0x0a, 0x23, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0xef, 0x01, 0x1a, 0x26, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x20, 0x5f, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x63, 0x0a, 0x2d, 0x44,
	0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xf0, 0x01, 0x1a,
	0x2f, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x29, 0x5f, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x54, 0x0a, 0x25, 0x44, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4c,
	0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xf1, 0x01, 0x1a, 0x28, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x22, 0x5f, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6c,
	0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x02, 0x44, 0x58, 0x10, 0xf2, 0x01, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x44, 0x58, 0x12, 0x15, 0x0a, 0x04, 0x43, 0x56, 0x44,
	0x58, 0x10, 0xf3, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x56, 0x44, 0x58,
	0x12, 0x15, 0x0a, 0x04, 0x43, 0x41, 0x54, 0x48, 0x10, 0xf4, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x43, 0x41, 0x54, 0x48, 0x12, 0x15, 0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x10,
	0xf5, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x12, 0x15,
	0x0a, 0x04, 0x47, 0x49, 0x44, 0x58, 0x10, 0xf6, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x47, 0x49, 0x44, 0x58, 0x12, 0x17, 0x0a, 0x05, 0x45, 0x4e, 0x44, 0x4f, 0x53, 0x10, 0xf7,
	0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x45, 0x4e, 0x44, 0x4f, 0x53, 0x12, 0x17,
	0x0a, 0x05, 0x52, 0x41, 0x44, 0x44, 0x58, 0x10, 0xf8, 0x01, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x52, 0x41, 0x44, 0x44, 0x58, 0x12, 0x15, 0x0a, 0x04, 0x52, 0x41, 0x44, 0x4f, 0x10,
	0xf9, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x52, 0x41, 0x44, 0x4f, 0x12, 0x15,
	0x0a, 0x04, 0x52, 0x4e, 0x45, 0x55, 0x10, 0xfa, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x52, 0x4e, 0x45, 0x55, 0x12, 0x15, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x50, 0x10, 0xfb, 0x01,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48, 0x4f, 0x53, 0x50, 0x12, 0x13, 0x0a, 0x03,
	0x43, 0x48, 0x52, 0x10, 0xfc, 0x01, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x43, 0x48,
	0x52, 0x12, 0x15, 0x0a, 0x04, 0x47, 0x41, 0x43, 0x48, 0x10, 0xfd, 0x01, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x47, 0x41, 0x43, 0x48, 0x12, 0x15, 0x0a, 0x04, 0x4d, 0x48, 0x53, 0x50,
	0x10, 0xfe, 0x01, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x48, 0x53, 0x50, 0x12,
	0x19, 0x0a, 0x06, 0x50, 0x53, 0x59, 0x43, 0x48, 0x46, 0x10, 0xff, 0x01, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x50, 0x53, 0x59, 0x43, 0x48, 0x46, 0x12, 0x11, 0x0a, 0x02, 0x52, 0x48,
	0x10, 0x80, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x52, 0x48, 0x12, 0x15, 0x0a,
	0x04, 0x52, 0x48, 0x41, 0x54, 0x10, 0x81, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x52, 0x48, 0x41, 0x54, 0x12, 0x15, 0x0a, 0x04, 0x52, 0x48, 0x49, 0x49, 0x10, 0x82, 0x02, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x52, 0x48, 0x49, 0x49, 0x12, 0x17, 0x0a, 0x05, 0x52,
	0x48, 0x4d, 0x41, 0x44, 0x10, 0x83, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52,
	0x48, 0x4d, 0x41, 0x44, 0x12, 0x15, 0x0a, 0x04, 0x52, 0x48, 0x50, 0x49, 0x10, 0x84, 0x02, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x52, 0x48, 0x50, 0x49, 0x12, 0x17, 0x0a, 0x05, 0x52,
	0x48, 0x50, 0x49, 0x48, 0x10, 0x85, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52,
	0x48, 0x50, 0x49, 0x48, 0x12, 0x19, 0x0a, 0x06, 0x52, 0x48, 0x50, 0x49, 0x4d, 0x53, 0x10, 0x86,
	0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x52, 0x48, 0x50, 0x49, 0x4d, 0x53, 0x12,
	0x19, 0x0a, 0x06, 0x52, 0x48, 0x50, 0x49, 0x56, 0x53, 0x10, 0x87, 0x02, 0x1a, 0x0c, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x06, 0x52, 0x48, 0x50, 0x49, 0x56, 0x53, 0x12, 0x17, 0x0a, 0x05, 0x52, 0x48,
	0x59, 0x41, 0x44, 0x10, 0x88, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x52, 0x48,
	0x59, 0x41, 0x44, 0x12, 0x11, 0x0a, 0x02, 0x48, 0x55, 0x10, 0x89, 0x02, 0x1a, 0x08, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x02, 0x48, 0x55, 0x12, 0x15, 0x0a, 0x04, 0x42, 0x4d, 0x54, 0x55, 0x10, 0x8a,
	0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x42, 0x4d, 0x54, 0x55, 0x12, 0x13, 0x0a,
	0x03, 0x43, 0x43, 0x55, 0x10, 0x8b, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x43,
	0x43, 0x55, 0x12, 0x17, 0x0a, 0x05, 0x43, 0x48, 0x45, 0x53, 0x54, 0x10, 0x8c, 0x02, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x48, 0x45, 0x53, 0x54, 0x12, 0x15, 0x0a, 0x04, 0x45,
	0x50, 0x49, 0x4c, 0x10, 0x8d, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x45, 0x50,
	0x49, 0x4c, 0x12, 0x11, 0x0a, 0x02, 0x45, 0x52, 0x10, 0x8e, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x02, 0x45, 0x52, 0x12, 0x13, 0x0a, 0x03, 0x45, 0x54, 0x55, 0x10, 0x8f, 0x02, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x45, 0x54, 0x55, 0x12, 0x11, 0x0a, 0x02, 0x48, 0x44,
	0x10, 0x90, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x48, 0x44, 0x12, 0x15, 0x0a,
	0x04, 0x48, 0x4c, 0x41, 0x42, 0x10, 0x91, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x48, 0x4c, 0x41, 0x42, 0x12, 0x17, 0x0a, 0x05, 0x49, 0x4e, 0x4c, 0x41, 0x42, 0x10, 0x92, 0x02,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x49, 0x4e, 0x4c, 0x41, 0x42, 0x12, 0x19, 0x0a,
	0x06, 0x4f, 0x55, 0x54, 0x4c, 0x41, 0x42, 0x10, 0x93, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x4f, 0x55, 0x54, 0x4c, 0x41, 0x42, 0x12, 0x15, 0x0a, 0x04, 0x48, 0x52, 0x41, 0x44,
	0x10, 0x94, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48, 0x52, 0x41, 0x44, 0x12,
	0x17, 0x0a, 0x05, 0x48, 0x55, 0x53, 0x43, 0x53, 0x10, 0x95, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x48, 0x55, 0x53, 0x43, 0x53, 0x12, 0x13, 0x0a, 0x03, 0x49, 0x43, 0x55, 0x10,
	0x96, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x43, 0x55, 0x12, 0x19, 0x0a,
	0x06, 0x50, 0x45, 0x44, 0x49, 0x43, 0x55, 0x10, 0x97, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x50, 0x45, 0x44, 0x49, 0x43, 0x55, 0x12, 0x1b, 0x0a, 0x07, 0x50, 0x45, 0x44, 0x4e,
	0x49, 0x43, 0x55, 0x10, 0x98, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x45,
	0x44, 0x4e, 0x49, 0x43, 0x55, 0x12, 0x1b, 0x0a, 0x07, 0x49, 0x4e, 0x50, 0x48, 0x41, 0x52, 0x4d,
	0x10, 0x99, 0x02, 0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x49, 0x4e, 0x50, 0x48, 0x41,
	0x52, 0x4d, 0x12, 0x13, 0x0a, 0x03, 0x4d, 0x42, 0x4c, 0x10, 0x9a, 0x02, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x4d, 0x42, 0x4c, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x43, 0x43, 0x53, 0x10,
	0x9b, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x43, 0x43, 0x53, 0x12, 0x11,
	0x0a, 0x02, 0x4e, 0x53, 0x10, 0x9c, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4e,
	0x53, 0x12, 0x1d, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x50, 0x48, 0x41, 0x52, 0x4d, 0x10, 0x9d, 0x02,
	0x1a, 0x0e, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x4f, 0x55, 0x54, 0x50, 0x48, 0x41, 0x52, 0x4d,
	0x12, 0x15, 0x0a, 0x04, 0x50, 0x45, 0x44, 0x55, 0x10, 0x9e, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x50, 0x45, 0x44, 0x55, 0x12, 0x13, 0x0a, 0x03, 0x50, 0x48, 0x55, 0x10, 0x9f,
	0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x48, 0x55, 0x12, 0x13, 0x0a, 0x03,
	0x52, 0x48, 0x55, 0x10, 0xa0, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x52, 0x48,
	0x55, 0x12, 0x17, 0x0a, 0x05, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x10, 0xa1, 0x02, 0x1a, 0x0b, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53, 0x4c, 0x45, 0x45, 0x50, 0x12, 0x15, 0x0a, 0x04, 0x4e, 0x43,
	0x43, 0x46, 0x10, 0xa2, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x43, 0x43,
	0x46, 0x12, 0x13, 0x0a, 0x03, 0x53, 0x4e, 0x46, 0x10, 0xa3, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x53, 0x4e, 0x46, 0x12, 0x11, 0x0a, 0x02, 0x4f, 0x46, 0x10, 0xa4, 0x02, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4f, 0x46, 0x12, 0x13, 0x0a, 0x03, 0x41, 0x4c, 0x4c,
	0x10, 0xa5, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x4c, 0x4c, 0x12, 0x17,
	0x0a, 0x05, 0x41, 0x4d, 0x50, 0x55, 0x54, 0x10, 0xa6, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x41, 0x4d, 0x50, 0x55, 0x54, 0x12, 0x15, 0x0a, 0x04, 0x42, 0x4d, 0x54, 0x43, 0x10,
	0xa7, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x42, 0x4d, 0x54, 0x43, 0x12, 0x19,
	0x0a, 0x06, 0x42, 0x52, 0x45, 0x41, 0x53, 0x54, 0x10, 0xa8, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x42, 0x52, 0x45, 0x41, 0x53, 0x54, 0x12, 0x15, 0x0a, 0x04, 0x43, 0x41, 0x4e,
	0x43, 0x10, 0xa9, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x41, 0x4e, 0x43,
	0x12, 0x15, 0x0a, 0x04, 0x43, 0x41, 0x50, 0x43, 0x10, 0xaa, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x04, 0x43, 0x41, 0x50, 0x43, 0x12, 0x15, 0x0a, 0x04, 0x43, 0x41, 0x52, 0x44, 0x10,
	0xab, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x41, 0x52, 0x44, 0x12, 0x1b,
	0x0a, 0x07, 0x50, 0x45, 0x44, 0x43, 0x41, 0x52, 0x44, 0x10, 0xac, 0x02, 0x1a, 0x0d, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x07, 0x50, 0x45, 0x44, 0x43, 0x41, 0x52, 0x44, 0x12, 0x15, 0x0a, 0x04, 0x43,
	0x4f, 0x41, 0x47, 0x10, 0xad, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x4f,
	0x41, 0x47, 0x12, 0x13, 0x0a, 0x03, 0x43, 0x52, 0x53, 0x10, 0xae, 0x02, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x43, 0x52, 0x53, 0x12, 0x15, 0x0a, 0x04, 0x44, 0x45, 0x52, 0x4d, 0x10,
	0xaf, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x44, 0x45, 0x52, 0x4d, 0x12, 0x15,
	0x0a, 0x04, 0x45, 0x4e, 0x44, 0x4f, 0x10, 0xb0, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x45, 0x4e, 0x44, 0x4f, 0x12, 0x15, 0x0a, 0x04, 0x50, 0x45, 0x44, 0x45, 0x10, 0xb1, 0x02,
	0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x45, 0x44, 0x45, 0x12, 0x13, 0x0a, 0x03,
	0x45, 0x4e, 0x54, 0x10, 0xb2, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x45, 0x4e,
	0x54, 0x12, 0x13, 0x0a, 0x03, 0x46, 0x4d, 0x43, 0x10, 0xb3, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x46, 0x4d, 0x43, 0x12, 0x11, 0x0a, 0x02, 0x47, 0x49, 0x10, 0xb4, 0x02, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x47, 0x49, 0x12, 0x17, 0x0a, 0x05, 0x50, 0x45, 0x44,
	0x47, 0x49, 0x10, 0xb5, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x45, 0x44,
	0x47, 0x49, 0x12, 0x13, 0x0a, 0x03, 0x47, 0x49, 0x4d, 0x10, 0xb6, 0x02, 0x1a, 0x09, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x03, 0x47, 0x49, 0x4d, 0x12, 0x13, 0x0a, 0x03, 0x47, 0x59, 0x4e, 0x10, 0xb7,
	0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x47, 0x59, 0x4e, 0x12, 0x13, 0x0a, 0x03,
	0x48, 0x45, 0x4d, 0x10, 0xb8, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x48, 0x45,
	0x4d, 0x12, 0x19, 0x0a, 0x06, 0x50, 0x45, 0x44, 0x48, 0x45, 0x4d, 0x10, 0xb9, 0x02, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50, 0x45, 0x44, 0x48, 0x45, 0x4d, 0x12, 0x13, 0x0a, 0x03,
	0x48, 0x54, 0x4e, 0x10, 0xba, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x48, 0x54,
	0x4e, 0x12, 0x13, 0x0a, 0x03, 0x49, 0x45, 0x43, 0x10, 0xbb, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x49, 0x45, 0x43, 0x12, 0x15, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x44, 0x10, 0xbc,
	0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x49, 0x4e, 0x46, 0x44, 0x12, 0x17, 0x0a,
	0x05, 0x50, 0x45, 0x44, 0x49, 0x44, 0x10, 0xbd, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x05, 0x50, 0x45, 0x44, 0x49, 0x44, 0x12, 0x13, 0x0a, 0x03, 0x49, 0x4e, 0x56, 0x10, 0xbe, 0x02,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x4e, 0x56, 0x12, 0x17, 0x0a, 0x05, 0x4c,
	0x59, 0x4d, 0x50, 0x48, 0x10, 0xbf, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4c,
	0x59, 0x4d, 0x50, 0x48, 0x12, 0x15, 0x0a, 0x04, 0x4d, 0x47, 0x45, 0x4e, 0x10, 0xc0, 0x02, 0x1a,
	0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x47, 0x45, 0x4e, 0x12, 0x15, 0x0a, 0x04, 0x4e,
	0x45, 0x50, 0x48, 0x10, 0xc1, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4e, 0x45,
	0x50, 0x48, 0x12, 0x1b, 0x0a, 0x07, 0x50, 0x45, 0x44, 0x4e, 0x45, 0x50, 0x48, 0x10, 0xc2, 0x02,
	0x1a, 0x0d, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x45, 0x44, 0x4e, 0x45, 0x50, 0x48, 0x12,
	0x15, 0x0a, 0x04, 0x4e, 0x45, 0x55, 0x52, 0x10, 0xc3, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x04, 0x4e, 0x45, 0x55, 0x52, 0x12, 0x11, 0x0a, 0x02, 0x4f, 0x42, 0x10, 0xc4, 0x02, 0x1a,
	0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x4f, 0x42, 0x12, 0x13, 0x0a, 0x03, 0x4f, 0x4d, 0x53,
	0x10, 0xc5, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x4f, 0x4d, 0x53, 0x12, 0x15,
	0x0a, 0x04, 0x4f, 0x4e, 0x43, 0x4c, 0x10, 0xc6, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x4f, 0x4e, 0x43, 0x4c, 0x12, 0x17, 0x0a, 0x05, 0x50, 0x45, 0x44, 0x48, 0x4f, 0x10, 0xc7,
	0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x45, 0x44, 0x48, 0x4f, 0x12, 0x13,
	0x0a, 0x03, 0x4f, 0x50, 0x48, 0x10, 0xc8, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x4f, 0x50, 0x48, 0x12, 0x15, 0x0a, 0x04, 0x4f, 0x50, 0x54, 0x43, 0x10, 0xc9, 0x02, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4f, 0x50, 0x54, 0x43, 0x12, 0x17, 0x0a, 0x05, 0x4f, 0x52,
	0x54, 0x48, 0x4f, 0x10, 0xca, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4f, 0x52,
	0x54, 0x48, 0x4f, 0x12, 0x15, 0x0a, 0x04, 0x48, 0x41, 0x4e, 0x44, 0x10, 0xcb, 0x02, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x48, 0x41, 0x4e, 0x44, 0x12, 0x19, 0x0a, 0x06, 0x50, 0x41,
	0x49, 0x4e, 0x43, 0x4c, 0x10, 0xcc, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50,
	0x41, 0x49, 0x4e, 0x43, 0x4c, 0x12, 0x11, 0x0a, 0x02, 0x50, 0x43, 0x10, 0xcd, 0x02, 0x1a, 0x08,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x43, 0x12, 0x15, 0x0a, 0x04, 0x50, 0x45, 0x44, 0x43,
	0x10, 0xce, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x45, 0x44, 0x43, 0x12,
	0x1d, 0x0a, 0x08, 0x50, 0x45, 0x44, 0x52, 0x48, 0x45, 0x55, 0x4d, 0x10, 0xcf, 0x02, 0x1a, 0x0e,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x08, 0x50, 0x45, 0x44, 0x52, 0x48, 0x45, 0x55, 0x4d, 0x12, 0x13,
	0x0a, 0x03, 0x50, 0x4f, 0x44, 0x10, 0xd0, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03,
	0x50, 0x4f, 0x44, 0x12, 0x15, 0x0a, 0x04, 0x50, 0x52, 0x45, 0x56, 0x10, 0xd1, 0x02, 0x1a, 0x0a,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x50, 0x52, 0x45, 0x56, 0x12, 0x19, 0x0a, 0x06, 0x50, 0x52,
	0x4f, 0x43, 0x54, 0x4f, 0x10, 0xd2, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x50,
	0x52, 0x4f, 0x43, 0x54, 0x4f, 0x12, 0x17, 0x0a, 0x05, 0x50, 0x52, 0x4f, 0x46, 0x46, 0x10, 0xd3,
	0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x52, 0x4f, 0x46, 0x46, 0x12, 0x15,
	0x0a, 0x04, 0x50, 0x52, 0x4f, 0x53, 0x10, 0xd4, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x50, 0x52, 0x4f, 0x53, 0x12, 0x13, 0x0a, 0x03, 0x50, 0x53, 0x49, 0x10, 0xd5, 0x02, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x53, 0x49, 0x12, 0x13, 0x0a, 0x03, 0x50, 0x53,
	0x59, 0x10, 0xd6, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x53, 0x59, 0x12,
	0x17, 0x0a, 0x05, 0x52, 0x48, 0x45, 0x55, 0x4d, 0x10, 0xd7, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x52, 0x48, 0x45, 0x55, 0x4d, 0x12, 0x17, 0x0a, 0x05, 0x53, 0x50, 0x4d, 0x45,
	0x44, 0x10, 0xd8, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x53, 0x50, 0x4d, 0x45,
	0x44, 0x12, 0x11, 0x0a, 0x02, 0x53, 0x55, 0x10, 0xd9, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x02, 0x53, 0x55, 0x12, 0x13, 0x0a, 0x03, 0x50, 0x4c, 0x53, 0x10, 0xda, 0x02, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x4c, 0x53, 0x12, 0x13, 0x0a, 0x03, 0x55, 0x52, 0x4f,
	0x10, 0xdb, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x55, 0x52, 0x4f, 0x12, 0x11,
	0x0a, 0x02, 0x54, 0x52, 0x10, 0xdc, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x54,
	0x52, 0x12, 0x19, 0x0a, 0x06, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x10, 0xdd, 0x02, 0x1a, 0x0c,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x06, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x12, 0x13, 0x0a, 0x03,
	0x57, 0x4e, 0x44, 0x10, 0xde, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x57, 0x4e,
	0x44, 0x12, 0x13, 0x0a, 0x03, 0x52, 0x54, 0x46, 0x10, 0xdf, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x52, 0x54, 0x46, 0x12, 0x13, 0x0a, 0x03, 0x50, 0x52, 0x43, 0x10, 0xe0, 0x02,
	0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x52, 0x43, 0x12, 0x15, 0x0a, 0x04, 0x53,
	0x55, 0x52, 0x46, 0x10, 0xe1, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x53, 0x55,
	0x52, 0x46, 0x12, 0x5b, 0x0a, 0x29, 0x44, 0x45, 0x44, 0x49, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f,
	0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x49, 0x4e, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xe2, 0x02, 0x1a, 0x2b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x25, 0x5f, 0x44, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x05, 0x44, 0x41, 0x44, 0x44, 0x52, 0x10, 0xe3, 0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x05, 0x44, 0x41, 0x44, 0x44, 0x52, 0x12, 0x15, 0x0a, 0x04, 0x4d, 0x4f, 0x42, 0x4c,
	0x10, 0xe4, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x4d, 0x4f, 0x42, 0x4c, 0x12,
	0x13, 0x0a, 0x03, 0x41, 0x4d, 0x42, 0x10, 0xe5, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x03, 0x41, 0x4d, 0x42, 0x12, 0x17, 0x0a, 0x05, 0x50, 0x48, 0x41, 0x52, 0x4d, 0x10, 0xe6, 0x02,
	0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x48, 0x41, 0x52, 0x4d, 0x12, 0x65, 0x0a,
	0x2e, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0xe7, 0x02, 0x1a, 0x30, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x2a, 0x5f, 0x49, 0x6e, 0x63, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x03, 0x41, 0x43, 0x43, 0x10, 0xe8, 0x02, 0x1a, 0x09,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x43, 0x43, 0x12, 0x15, 0x0a, 0x04, 0x43, 0x4f, 0x4d,
	0x4d, 0x10, 0xe9, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04, 0x43, 0x4f, 0x4d, 0x4d,
	0x12, 0x13, 0x0a, 0x03, 0x43, 0x53, 0x43, 0x10, 0xea, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x03, 0x43, 0x53, 0x43, 0x12, 0x17, 0x0a, 0x05, 0x50, 0x54, 0x52, 0x45, 0x53, 0x10, 0xeb,
	0x02, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x50, 0x54, 0x52, 0x45, 0x53, 0x12, 0x19,
	0x0a, 0x06, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x10, 0xec, 0x02, 0x1a, 0x0c, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x06, 0x53, 0x43, 0x48, 0x4f, 0x4f, 0x4c, 0x12, 0x13, 0x0a, 0x03, 0x55, 0x50, 0x43,
	0x10, 0xed, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x55, 0x50, 0x43, 0x12, 0x15,
	0x0a, 0x04, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xee, 0x02, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x04, 0x57, 0x4f, 0x52, 0x4b, 0x12, 0x30, 0x0a, 0x12, 0x53, 0x50, 0x45, 0x43, 0x49, 0x4d, 0x45,
	0x4e, 0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xef, 0x02, 0x1a, 0x17,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x11, 0x5f, 0x53, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e, 0x52,
	0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x01, 0x43, 0x10, 0xf0, 0x02, 0x1a,
	0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x43, 0x12, 0x0f, 0x0a, 0x01, 0x47, 0x10, 0xf1, 0x02,
	0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x47, 0x12, 0x0f, 0x0a, 0x01, 0x4c, 0x10, 0xf2,
	0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4c, 0x12, 0x0f, 0x0a, 0x01, 0x50, 0x10,
	0xf3, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x50, 0x12, 0x0f, 0x0a, 0x01, 0x51,
	0x10, 0xf4, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x51, 0x12, 0x0f, 0x0a, 0x01,
	0x42, 0x10, 0xf5, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x42, 0x12, 0x0f, 0x0a,
	0x01, 0x45, 0x10, 0xf6, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x45, 0x12, 0x0f,
	0x0a, 0x01, 0x46, 0x10, 0xf7, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x46, 0x12,
	0x0f, 0x0a, 0x01, 0x4f, 0x10, 0xf8, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x4f,
	0x12, 0x0f, 0x0a, 0x01, 0x56, 0x10, 0xf9, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01,
	0x56, 0x12, 0x0f, 0x0a, 0x01, 0x52, 0x10, 0xfa, 0x02, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05,
	0x01, 0x52, 0x12, 0x17, 0x0a, 0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0xfb, 0x02, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x12, 0x34, 0x0a, 0x14, 0x43,
	0x4f, 0x4d, 0x4d, 0x55, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x41, 0x42, 0x4f, 0x52, 0x41, 0x54,
	0x4f, 0x52, 0x59, 0x10, 0xfc, 0x02, 0x1a, 0x19, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x11, 0x0a, 0x02, 0x47, 0x54, 0x10, 0xfd, 0x02, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x02, 0x47, 0x54, 0x12, 0x22, 0x0a, 0x0b, 0x48, 0x4f, 0x4d, 0x45, 0x5f, 0x48, 0x45, 0x41,
	0x4c, 0x54, 0x48, 0x10, 0xfe, 0x02, 0x1a, 0x10, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x0a, 0x68, 0x6f,
	0x6d, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x0f, 0x0a, 0x0a, 0x4c, 0x41, 0x42, 0x4f,
	0x52, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x10, 0xff, 0x02, 0x12, 0x10, 0x0a, 0x0b, 0x50, 0x41, 0x54,
	0x48, 0x4f, 0x4c, 0x4f, 0x47, 0x49, 0x53, 0x54, 0x10, 0x80, 0x03, 0x12, 0x11, 0x0a, 0x02, 0x50,
	0x48, 0x10, 0x81, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x48, 0x12, 0x11,
	0x0a, 0x0c, 0x50, 0x48, 0x4c, 0x45, 0x42, 0x4f, 0x54, 0x4f, 0x4d, 0x49, 0x53, 0x54, 0x10, 0x82,
	0x03, 0x12, 0x15, 0x0a, 0x04, 0x50, 0x52, 0x4f, 0x47, 0x10, 0x83, 0x03, 0x1a, 0x0a, 0xba, 0x96,
	0xbb, 0xb2, 0x05, 0x04, 0x50, 0x52, 0x4f, 0x47, 0x12, 0x11, 0x0a, 0x02, 0x50, 0x54, 0x10, 0x84,
	0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x50, 0x54, 0x12, 0x0c, 0x0a, 0x07, 0x53,
	0x55, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x85, 0x03, 0x12, 0x22, 0x0a, 0x0b, 0x54, 0x48, 0x49,
	0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x86, 0x03, 0x1a, 0x10, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12, 0x13, 0x0a,
	0x03, 0x44, 0x45, 0x50, 0x10, 0x87, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x44,
	0x45, 0x50, 0x12, 0x17, 0x0a, 0x05, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x10, 0x88, 0x03, 0x1a, 0x0b,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x44, 0x45, 0x50, 0x45, 0x4e, 0x12, 0x11, 0x0a, 0x02, 0x46,
	0x4d, 0x10, 0x89, 0x03, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x46, 0x4d, 0x12, 0x17,
	0x0a, 0x05, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x10, 0x8a, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x05, 0x49, 0x4e, 0x44, 0x49, 0x56, 0x12, 0x17, 0x0a, 0x05, 0x4e, 0x41, 0x4d, 0x45, 0x44,
	0x10, 0x8b, 0x03, 0x1a, 0x0b, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x05, 0x4e, 0x41, 0x4d, 0x45, 0x44,
	0x12, 0x1b, 0x0a, 0x07, 0x50, 0x53, 0x59, 0x43, 0x48, 0x43, 0x46, 0x10, 0x8c, 0x03, 0x1a, 0x0d,
	0xba, 0x96, 0xbb, 0xb2, 0x05, 0x07, 0x50, 0x53, 0x59, 0x43, 0x48, 0x43, 0x46, 0x12, 0x19, 0x0a,
	0x06, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x10, 0x8d, 0x03, 0x1a, 0x0c, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x06, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x1a, 0x37, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x31,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0xcc, 0x03, 0x0a, 0x11, 0x56, 0x33, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xb6, 0x03, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x02,
	0x41, 0x43, 0x10, 0x01, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x41, 0x43, 0x12, 0x12,
	0x0a, 0x03, 0x41, 0x43, 0x44, 0x10, 0x02, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41,
	0x43, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x43, 0x4d, 0x10, 0x03, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x41, 0x43, 0x4d, 0x12, 0x12, 0x0a, 0x03, 0x41, 0x43, 0x56, 0x10, 0x04, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x41, 0x43, 0x56, 0x12, 0x0e, 0x0a, 0x01, 0x43, 0x10,
	0x05, 0x1a, 0x07, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x01, 0x43, 0x12, 0x10, 0x0a, 0x02, 0x43, 0x44,
	0x10, 0x06, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x44, 0x12, 0x10, 0x0a, 0x02,
	0x43, 0x4d, 0x10, 0x07, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x4d, 0x12, 0x10,
	0x0a, 0x02, 0x43, 0x56, 0x10, 0x08, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02, 0x43, 0x56,
	0x12, 0x10, 0x0a, 0x02, 0x48, 0x53, 0x10, 0x09, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x48, 0x53, 0x12, 0x10, 0x0a, 0x02, 0x49, 0x43, 0x10, 0x0a, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2,
	0x05, 0x02, 0x49, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x49, 0x43, 0x44, 0x10, 0x0b, 0x1a, 0x09, 0xba,
	0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x43, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x49, 0x43, 0x4d, 0x10,
	0x0c, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x43, 0x4d, 0x12, 0x12, 0x0a, 0x03,
	0x49, 0x43, 0x56, 0x10, 0x0d, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x49, 0x43, 0x56,
	0x12, 0x10, 0x0a, 0x02, 0x50, 0x43, 0x10, 0x0e, 0x1a, 0x08, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x02,
	0x50, 0x43, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x43, 0x44, 0x10, 0x0f, 0x1a, 0x09, 0xba, 0x96, 0xbb,
	0xb2, 0x05, 0x03, 0x50, 0x43, 0x44, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x43, 0x4d, 0x10, 0x10, 0x1a,
	0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x43, 0x4d, 0x12, 0x12, 0x0a, 0x03, 0x50, 0x43,
	0x56, 0x10, 0x11, 0x1a, 0x09, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x03, 0x50, 0x43, 0x56, 0x12, 0x14,
	0x0a, 0x04, 0x57, 0x41, 0x4b, 0x45, 0x10, 0x12, 0x1a, 0x0a, 0xba, 0x96, 0xbb, 0xb2, 0x05, 0x04,
	0x57, 0x41, 0x4b, 0x45, 0x1a, 0x3a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x34, 0x68, 0x74, 0x74, 0x70,
	0x3a, 0x2f, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x68,
	0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2f, 0x76, 0x33, 0x2d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x84, 0x01, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x72, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x49, 0x4e, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x1a, 0x2b, 0x8a, 0x91, 0xc9, 0xfe,
	0x07, 0x25, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x62, 0x61, 0x73,
	0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x75, 0x0a, 0x0e, 0x56, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x79, 0x65, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x63, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e,
	0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x45, 0x46, 0x54,
	0x10, 0x02, 0x1a, 0x2a, 0x8a, 0x91, 0xc9, 0xfe, 0x07, 0x24, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f,
	0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x2d, 0x65, 0x79, 0x65, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0xa6,
	0x01, 0x0a, 0x12, 0x58, 0x50, 0x61, 0x74, 0x68, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x54,
	0x49, 0x43, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x41, 0x52, 0x42, 0x59, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x1a, 0x2c, 0x8a, 0x91, 0xc9, 0xfe, 0x07,
	0x26, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x68, 0x6c, 0x37, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x66, 0x68, 0x69, 0x72, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2d, 0x78, 0x70, 0x61, 0x74,
	0x68, 0x2d, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x65, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x66, 0x68, 0x69, 0x72, 0x2e, 0x72, 0x34, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x50, 0x01, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69, 0x72, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x66, 0x68, 0x69,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x34, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_google_fhir_proto_r4_core_codes_proto_rawDescOnce sync.Once
	file_proto_google_fhir_proto_r4_core_codes_proto_rawDescData = file_proto_google_fhir_proto_r4_core_codes_proto_rawDesc
)

func file_proto_google_fhir_proto_r4_core_codes_proto_rawDescGZIP() []byte {
	file_proto_google_fhir_proto_r4_core_codes_proto_rawDescOnce.Do(func() {
		file_proto_google_fhir_proto_r4_core_codes_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_google_fhir_proto_r4_core_codes_proto_rawDescData)
	})
	return file_proto_google_fhir_proto_r4_core_codes_proto_rawDescData
}

var file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes = make([]protoimpl.EnumInfo, 241)
var file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes = make([]protoimpl.MessageInfo, 241)
var file_proto_google_fhir_proto_r4_core_codes_proto_goTypes = []interface{}{
	(AbstractTypeCode_Value)(0),                            // 0: google.fhir.r4.core.AbstractTypeCode.Value
	(AccountStatusCode_Value)(0),                           // 1: google.fhir.r4.core.AccountStatusCode.Value
	(ActionCardinalityBehaviorCode_Value)(0),               // 2: google.fhir.r4.core.ActionCardinalityBehaviorCode.Value
	(ActionConditionKindCode_Value)(0),                     // 3: google.fhir.r4.core.ActionConditionKindCode.Value
	(ActionGroupingBehaviorCode_Value)(0),                  // 4: google.fhir.r4.core.ActionGroupingBehaviorCode.Value
	(ActionParticipantTypeCode_Value)(0),                   // 5: google.fhir.r4.core.ActionParticipantTypeCode.Value
	(ActionPrecheckBehaviorCode_Value)(0),                  // 6: google.fhir.r4.core.ActionPrecheckBehaviorCode.Value
	(ActionRelationshipTypeCode_Value)(0),                  // 7: google.fhir.r4.core.ActionRelationshipTypeCode.Value
	(ActionRequiredBehaviorCode_Value)(0),                  // 8: google.fhir.r4.core.ActionRequiredBehaviorCode.Value
	(ActionSelectionBehaviorCode_Value)(0),                 // 9: google.fhir.r4.core.ActionSelectionBehaviorCode.Value
	(AddressTypeCode_Value)(0),                             // 10: google.fhir.r4.core.AddressTypeCode.Value
	(AddressUseCode_Value)(0),                              // 11: google.fhir.r4.core.AddressUseCode.Value
	(AdministrativeGenderCode_Value)(0),                    // 12: google.fhir.r4.core.AdministrativeGenderCode.Value
	(AdverseEventActualityCode_Value)(0),                   // 13: google.fhir.r4.core.AdverseEventActualityCode.Value
	(AdverseEventOutcomeCode_Value)(0),                     // 14: google.fhir.r4.core.AdverseEventOutcomeCode.Value
	(AdverseEventSeverityCode_Value)(0),                    // 15: google.fhir.r4.core.AdverseEventSeverityCode.Value
	(AggregationModeCode_Value)(0),                         // 16: google.fhir.r4.core.AggregationModeCode.Value
	(AllergyIntoleranceCategoryCode_Value)(0),              // 17: google.fhir.r4.core.AllergyIntoleranceCategoryCode.Value
	(AllergyIntoleranceClinicalStatusCode_Value)(0),        // 18: google.fhir.r4.core.AllergyIntoleranceClinicalStatusCode.Value
	(AllergyIntoleranceCriticalityCode_Value)(0),           // 19: google.fhir.r4.core.AllergyIntoleranceCriticalityCode.Value
	(AllergyIntoleranceSeverityCode_Value)(0),              // 20: google.fhir.r4.core.AllergyIntoleranceSeverityCode.Value
	(AllergyIntoleranceSubstanceExposureRiskCode_Value)(0), // 21: google.fhir.r4.core.AllergyIntoleranceSubstanceExposureRiskCode.Value
	(AllergyIntoleranceTypeCode_Value)(0),                  // 22: google.fhir.r4.core.AllergyIntoleranceTypeCode.Value
	(AllergyIntoleranceVerificationStatusCode_Value)(0),    // 23: google.fhir.r4.core.AllergyIntoleranceVerificationStatusCode.Value
	(AppointmentStatusCode_Value)(0),                       // 24: google.fhir.r4.core.AppointmentStatusCode.Value
	(AssertionDirectionTypeCode_Value)(0),                  // 25: google.fhir.r4.core.AssertionDirectionTypeCode.Value
	(AssertionOperatorTypeCode_Value)(0),                   // 26: google.fhir.r4.core.AssertionOperatorTypeCode.Value
	(AssertionResponseTypesCode_Value)(0),                  // 27: google.fhir.r4.core.AssertionResponseTypesCode.Value
	(AuditEventActionCode_Value)(0),                        // 28: google.fhir.r4.core.AuditEventActionCode.Value
	(AuditEventAgentNetworkTypeCode_Value)(0),              // 29: google.fhir.r4.core.AuditEventAgentNetworkTypeCode.Value
	(AuditEventOutcomeCode_Value)(0),                       // 30: google.fhir.r4.core.AuditEventOutcomeCode.Value
	(BenefitCostApplicabilityCode_Value)(0),                // 31: google.fhir.r4.core.BenefitCostApplicabilityCode.Value
	(BindingStrengthCode_Value)(0),                         // 32: google.fhir.r4.core.BindingStrengthCode.Value
	(BiologicallyDerivedProductCategoryCode_Value)(0),      // 33: google.fhir.r4.core.BiologicallyDerivedProductCategoryCode.Value
	(BiologicallyDerivedProductStatusCode_Value)(0),        // 34: google.fhir.r4.core.BiologicallyDerivedProductStatusCode.Value
	(BiologicallyDerivedProductStorageScaleCode_Value)(0),  // 35: google.fhir.r4.core.BiologicallyDerivedProductStorageScaleCode.Value
	(BundleTypeCode_Value)(0),                              // 36: google.fhir.r4.core.BundleTypeCode.Value
	(CanonicalStatusCodesForFHIRResourcesCode_Value)(0),    // 37: google.fhir.r4.core.CanonicalStatusCodesForFHIRResourcesCode.Value
	(CapabilityStatementKindCode_Value)(0),                 // 38: google.fhir.r4.core.CapabilityStatementKindCode.Value
	(CarePlanActivityStatusCode_Value)(0),                  // 39: google.fhir.r4.core.CarePlanActivityStatusCode.Value
	(CareTeamStatusCode_Value)(0),                          // 40: google.fhir.r4.core.CareTeamStatusCode.Value
	(CatalogEntryRelationTypeCode_Value)(0),                // 41: google.fhir.r4.core.CatalogEntryRelationTypeCode.Value
	(ChargeItemStatusCode_Value)(0),                        // 42: google.fhir.r4.core.ChargeItemStatusCode.Value
	(ChoiceListOrientationCode_Value)(0),                   // 43: google.fhir.r4.core.ChoiceListOrientationCode.Value
	(ClaimProcessingCode_Value)(0),                         // 44: google.fhir.r4.core.ClaimProcessingCode.Value
	(CodeSearchSupportCode_Value)(0),                       // 45: google.fhir.r4.core.CodeSearchSupportCode.Value
	(CodeSystemContentModeCode_Value)(0),                   // 46: google.fhir.r4.core.CodeSystemContentModeCode.Value
	(CodeSystemHierarchyMeaningCode_Value)(0),              // 47: google.fhir.r4.core.CodeSystemHierarchyMeaningCode.Value
	(CompartmentTypeCode_Value)(0),                         // 48: google.fhir.r4.core.CompartmentTypeCode.Value
	(CompositionAttestationModeCode_Value)(0),              // 49: google.fhir.r4.core.CompositionAttestationModeCode.Value
	(CompositionStatusCode_Value)(0),                       // 50: google.fhir.r4.core.CompositionStatusCode.Value
	(ConceptMapEquivalenceCode_Value)(0),                   // 51: google.fhir.r4.core.ConceptMapEquivalenceCode.Value
	(ConceptMapGroupUnmappedModeCode_Value)(0),             // 52: google.fhir.r4.core.ConceptMapGroupUnmappedModeCode.Value
	(ConditionClinicalStatusCode_Value)(0),                 // 53: google.fhir.r4.core.ConditionClinicalStatusCode.Value
	(ConditionVerificationStatusCode_Value)(0),             // 54: google.fhir.r4.core.ConditionVerificationStatusCode.Value
	(ConditionalDeleteStatusCode_Value)(0),                 // 55: google.fhir.r4.core.ConditionalDeleteStatusCode.Value
	(ConditionalReadStatusCode_Value)(0),                   // 56: google.fhir.r4.core.ConditionalReadStatusCode.Value
	(ConformanceExpectationCode_Value)(0),                  // 57: google.fhir.r4.core.ConformanceExpectationCode.Value
	(ConsentDataMeaningCode_Value)(0),                      // 58: google.fhir.r4.core.ConsentDataMeaningCode.Value
	(ConsentProvisionTypeCode_Value)(0),                    // 59: google.fhir.r4.core.ConsentProvisionTypeCode.Value
	(ConsentStateCode_Value)(0),                            // 60: google.fhir.r4.core.ConsentStateCode.Value
	(ConstraintSeverityCode_Value)(0),                      // 61: google.fhir.r4.core.ConstraintSeverityCode.Value
	(ContactPointSystemCode_Value)(0),                      // 62: google.fhir.r4.core.ContactPointSystemCode.Value
	(ContactPointUseCode_Value)(0),                         // 63: google.fhir.r4.core.ContactPointUseCode.Value
	(ContractResourcePublicationStatusCode_Value)(0),       // 64: google.fhir.r4.core.ContractResourcePublicationStatusCode.Value
	(ContractResourceStatusCode_Value)(0),                  // 65: google.fhir.r4.core.ContractResourceStatusCode.Value
	(ContributorTypeCode_Value)(0),                         // 66: google.fhir.r4.core.ContributorTypeCode.Value
	(DataAbsentReasonCode_Value)(0),                        // 67: google.fhir.r4.core.DataAbsentReasonCode.Value
	(DataTypeCode_Value)(0),                                // 68: google.fhir.r4.core.DataTypeCode.Value
	(DaysOfWeekCode_Value)(0),                              // 69: google.fhir.r4.core.DaysOfWeekCode.Value
	(DetectedIssueSeverityCode_Value)(0),                   // 70: google.fhir.r4.core.DetectedIssueSeverityCode.Value
	(DeviceMetricCalibrationStateCode_Value)(0),            // 71: google.fhir.r4.core.DeviceMetricCalibrationStateCode.Value
	(DeviceMetricCalibrationTypeCode_Value)(0),             // 72: google.fhir.r4.core.DeviceMetricCalibrationTypeCode.Value
	(DeviceMetricCategoryCode_Value)(0),                    // 73: google.fhir.r4.core.DeviceMetricCategoryCode.Value
	(DeviceMetricColorCode_Value)(0),                       // 74: google.fhir.r4.core.DeviceMetricColorCode.Value
	(DeviceMetricOperationalStatusCode_Value)(0),           // 75: google.fhir.r4.core.DeviceMetricOperationalStatusCode.Value
	(DeviceNameTypeCode_Value)(0),                          // 76: google.fhir.r4.core.DeviceNameTypeCode.Value
	(DeviceUseStatementStatusCode_Value)(0),                // 77: google.fhir.r4.core.DeviceUseStatementStatusCode.Value
	(DiagnosticReportStatusCode_Value)(0),                  // 78: google.fhir.r4.core.DiagnosticReportStatusCode.Value
	(DiscriminatorTypeCode_Value)(0),                       // 79: google.fhir.r4.core.DiscriminatorTypeCode.Value
	(DocumentModeCode_Value)(0),                            // 80: google.fhir.r4.core.DocumentModeCode.Value
	(DocumentReferenceStatusCode_Value)(0),                 // 81: google.fhir.r4.core.DocumentReferenceStatusCode.Value
	(DocumentRelationshipTypeCode_Value)(0),                // 82: google.fhir.r4.core.DocumentRelationshipTypeCode.Value
	(EligibilityRequestPurposeCode_Value)(0),               // 83: google.fhir.r4.core.EligibilityRequestPurposeCode.Value
	(EligibilityResponsePurposeCode_Value)(0),              // 84: google.fhir.r4.core.EligibilityResponsePurposeCode.Value
	(EnableWhenBehaviorCode_Value)(0),                      // 85: google.fhir.r4.core.EnableWhenBehaviorCode.Value
	(EncounterLocationStatusCode_Value)(0),                 // 86: google.fhir.r4.core.EncounterLocationStatusCode.Value
	(EncounterStatusCode_Value)(0),                         // 87: google.fhir.r4.core.EncounterStatusCode.Value
	(EndpointStatusCode_Value)(0),                          // 88: google.fhir.r4.core.EndpointStatusCode.Value
	(EpisodeOfCareStatusCode_Value)(0),                     // 89: google.fhir.r4.core.EpisodeOfCareStatusCode.Value
	(EventCapabilityModeCode_Value)(0),                     // 90: google.fhir.r4.core.EventCapabilityModeCode.Value
	(EventStatusCode_Value)(0),                             // 91: google.fhir.r4.core.EventStatusCode.Value
	(EventTimingCode_Value)(0),                             // 92: google.fhir.r4.core.EventTimingCode.Value
	(EvidenceVariableTypeCode_Value)(0),                    // 93: google.fhir.r4.core.EvidenceVariableTypeCode.Value
	(ExampleScenarioActorTypeCode_Value)(0),                // 94: google.fhir.r4.core.ExampleScenarioActorTypeCode.Value
	(ExpansionParameterSourceCode_Value)(0),                // 95: google.fhir.r4.core.ExpansionParameterSourceCode.Value
	(ExpansionProcessingRuleCode_Value)(0),                 // 96: google.fhir.r4.core.ExpansionProcessingRuleCode.Value
	(ExplanationOfBenefitStatusCode_Value)(0),              // 97: google.fhir.r4.core.ExplanationOfBenefitStatusCode.Value
	(ExposureStateCode_Value)(0),                           // 98: google.fhir.r4.core.ExposureStateCode.Value
	(ExtensionContextTypeCode_Value)(0),                    // 99: google.fhir.r4.core.ExtensionContextTypeCode.Value
	(FHIRDeviceStatusCode_Value)(0),                        // 100: google.fhir.r4.core.FHIRDeviceStatusCode.Value
	(FHIRRestfulInteractionsCode_Value)(0),                 // 101: google.fhir.r4.core.FHIRRestfulInteractionsCode.Value
	(FHIRSubstanceStatusCode_Value)(0),                     // 102: google.fhir.r4.core.FHIRSubstanceStatusCode.Value
	(FHIRVersionCode_Value)(0),                             // 103: google.fhir.r4.core.FHIRVersionCode.Value
	(FamilyHistoryStatusCode_Value)(0),                     // 104: google.fhir.r4.core.FamilyHistoryStatusCode.Value
	(FilterOperatorCode_Value)(0),                          // 105: google.fhir.r4.core.FilterOperatorCode.Value
	(FinancialResourceStatusCode_Value)(0),                 // 106: google.fhir.r4.core.FinancialResourceStatusCode.Value
	(FlagStatusCode_Value)(0),                              // 107: google.fhir.r4.core.FlagStatusCode.Value
	(GoalAcceptanceStatusCode_Value)(0),                    // 108: google.fhir.r4.core.GoalAcceptanceStatusCode.Value
	(GoalLifecycleStatusCode_Value)(0),                     // 109: google.fhir.r4.core.GoalLifecycleStatusCode.Value
	(GraphCompartmentRuleCode_Value)(0),                    // 110: google.fhir.r4.core.GraphCompartmentRuleCode.Value
	(GraphCompartmentUseCode_Value)(0),                     // 111: google.fhir.r4.core.GraphCompartmentUseCode.Value
	(GroupMeasureCode_Value)(0),                            // 112: google.fhir.r4.core.GroupMeasureCode.Value
	(GroupTypeCode_Value)(0),                               // 113: google.fhir.r4.core.GroupTypeCode.Value
	(GuidanceResponseStatusCode_Value)(0),                  // 114: google.fhir.r4.core.GuidanceResponseStatusCode.Value
	(GuidePageGenerationCode_Value)(0),                     // 115: google.fhir.r4.core.GuidePageGenerationCode.Value
	(GuideParameterCode_Value)(0),                          // 116: google.fhir.r4.core.GuideParameterCode.Value
	(HL7WorkgroupCode_Value)(0),                            // 117: google.fhir.r4.core.HL7WorkgroupCode.Value
	(HTTPVerbCode_Value)(0),                                // 118: google.fhir.r4.core.HTTPVerbCode.Value
	(HumanNameAssemblyOrderCode_Value)(0),                  // 119: google.fhir.r4.core.HumanNameAssemblyOrderCode.Value
	(IdentifierUseCode_Value)(0),                           // 120: google.fhir.r4.core.IdentifierUseCode.Value
	(IdentityAssuranceLevelCode_Value)(0),                  // 121: google.fhir.r4.core.IdentityAssuranceLevelCode.Value
	(ImagingStudyStatusCode_Value)(0),                      // 122: google.fhir.r4.core.ImagingStudyStatusCode.Value
	(ImplantStatusCode_Value)(0),                           // 123: google.fhir.r4.core.ImplantStatusCode.Value
	(InvoicePriceComponentTypeCode_Value)(0),               // 124: google.fhir.r4.core.InvoicePriceComponentTypeCode.Value
	(InvoiceStatusCode_Value)(0),                           // 125: google.fhir.r4.core.InvoiceStatusCode.Value
	(IssueSeverityCode_Value)(0),                           // 126: google.fhir.r4.core.IssueSeverityCode.Value
	(IssueTypeCode_Value)(0),                               // 127: google.fhir.r4.core.IssueTypeCode.Value
	(LinkTypeCode_Value)(0),                                // 128: google.fhir.r4.core.LinkTypeCode.Value
	(LinkageTypeCode_Value)(0),                             // 129: google.fhir.r4.core.LinkageTypeCode.Value
	(ListModeCode_Value)(0),                                // 130: google.fhir.r4.core.ListModeCode.Value
	(ListStatusCode_Value)(0),                              // 131: google.fhir.r4.core.ListStatusCode.Value
	(LocationModeCode_Value)(0),                            // 132: google.fhir.r4.core.LocationModeCode.Value
	(LocationStatusCode_Value)(0),                          // 133: google.fhir.r4.core.LocationStatusCode.Value
	(MatchGradeCode_Value)(0),                              // 134: google.fhir.r4.core.MatchGradeCode.Value
	(MeasureImprovementNotationCode_Value)(0),              // 135: google.fhir.r4.core.MeasureImprovementNotationCode.Value
	(MeasureReportStatusCode_Value)(0),                     // 136: google.fhir.r4.core.MeasureReportStatusCode.Value
	(MeasureReportTypeCode_Value)(0),                       // 137: google.fhir.r4.core.MeasureReportTypeCode.Value
	(MedicationAdministrationStatusCode_Value)(0),          // 138: google.fhir.r4.core.MedicationAdministrationStatusCode.Value
	(MedicationDispenseStatusCode_Value)(0),                // 139: google.fhir.r4.core.MedicationDispenseStatusCode.Value
	(MedicationKnowledgeStatusCode_Value)(0),               // 140: google.fhir.r4.core.MedicationKnowledgeStatusCode.Value
	(MedicationRequestIntentCode_Value)(0),                 // 141: google.fhir.r4.core.MedicationRequestIntentCode.Value
	(MedicationStatementStatusCodes_Value)(0),              // 142: google.fhir.r4.core.MedicationStatementStatusCodes.Value
	(MedicationStatusCode_Value)(0),                        // 143: google.fhir.r4.core.MedicationStatusCode.Value
	(MedicationrequestStatusCode_Value)(0),                 // 144: google.fhir.r4.core.MedicationrequestStatusCode.Value
	(MessageSignificanceCategoryCode_Value)(0),             // 145: google.fhir.r4.core.MessageSignificanceCategoryCode.Value
	(MessageheaderResponseRequestCode_Value)(0),            // 146: google.fhir.r4.core.MessageheaderResponseRequestCode.Value
	(NameUseCode_Value)(0),                                 // 147: google.fhir.r4.core.NameUseCode.Value
	(NamingSystemIdentifierTypeCode_Value)(0),              // 148: google.fhir.r4.core.NamingSystemIdentifierTypeCode.Value
	(NamingSystemTypeCode_Value)(0),                        // 149: google.fhir.r4.core.NamingSystemTypeCode.Value
	(NarrativeStatusCode_Value)(0),                         // 150: google.fhir.r4.core.NarrativeStatusCode.Value
	(NoteTypeCode_Value)(0),                                // 151: google.fhir.r4.core.NoteTypeCode.Value
	(ObservationDataTypeCode_Value)(0),                     // 152: google.fhir.r4.core.ObservationDataTypeCode.Value
	(ObservationRangeCategoryCode_Value)(0),                // 153: google.fhir.r4.core.ObservationRangeCategoryCode.Value
	(ObservationStatusCode_Value)(0),                       // 154: google.fhir.r4.core.ObservationStatusCode.Value
	(OperationKindCode_Value)(0),                           // 155: google.fhir.r4.core.OperationKindCode.Value
	(OperationParameterUseCode_Value)(0),                   // 156: google.fhir.r4.core.OperationParameterUseCode.Value
	(OrientationTypeCode_Value)(0),                         // 157: google.fhir.r4.core.OrientationTypeCode.Value
	(ParticipantRequiredCode_Value)(0),                     // 158: google.fhir.r4.core.ParticipantRequiredCode.Value
	(ParticipationStatusCode_Value)(0),                     // 159: google.fhir.r4.core.ParticipationStatusCode.Value
	(PropertyRepresentationCode_Value)(0),                  // 160: google.fhir.r4.core.PropertyRepresentationCode.Value
	(PropertyTypeCode_Value)(0),                            // 161: google.fhir.r4.core.PropertyTypeCode.Value
	(ProvenanceEntityRoleCode_Value)(0),                    // 162: google.fhir.r4.core.ProvenanceEntityRoleCode.Value
	(PublicationStatusCode_Value)(0),                       // 163: google.fhir.r4.core.PublicationStatusCode.Value
	(QualityTypeCode_Value)(0),                             // 164: google.fhir.r4.core.QualityTypeCode.Value
	(QuantityComparatorCode_Value)(0),                      // 165: google.fhir.r4.core.QuantityComparatorCode.Value
	(QuestionnaireItemOperatorCode_Value)(0),               // 166: google.fhir.r4.core.QuestionnaireItemOperatorCode.Value
	(QuestionnaireItemTypeCode_Value)(0),                   // 167: google.fhir.r4.core.QuestionnaireItemTypeCode.Value
	(QuestionnaireItemUsageModeCode_Value)(0),              // 168: google.fhir.r4.core.QuestionnaireItemUsageModeCode.Value
	(QuestionnaireResponseStatusCode_Value)(0),             // 169: google.fhir.r4.core.QuestionnaireResponseStatusCode.Value
	(ReferenceHandlingPolicyCode_Value)(0),                 // 170: google.fhir.r4.core.ReferenceHandlingPolicyCode.Value
	(ReferenceVersionRulesCode_Value)(0),                   // 171: google.fhir.r4.core.ReferenceVersionRulesCode.Value
	(RelatedArtifactTypeCode_Value)(0),                     // 172: google.fhir.r4.core.RelatedArtifactTypeCode.Value
	(RepositoryTypeCode_Value)(0),                          // 173: google.fhir.r4.core.RepositoryTypeCode.Value
	(RequestIntentCode_Value)(0),                           // 174: google.fhir.r4.core.RequestIntentCode.Value
	(RequestPriorityCode_Value)(0),                         // 175: google.fhir.r4.core.RequestPriorityCode.Value
	(RequestResourceTypeCode_Value)(0),                     // 176: google.fhir.r4.core.RequestResourceTypeCode.Value
	(RequestStatusCode_Value)(0),                           // 177: google.fhir.r4.core.RequestStatusCode.Value
	(ResearchElementTypeCode_Value)(0),                     // 178: google.fhir.r4.core.ResearchElementTypeCode.Value
	(ResearchStudyStatusCode_Value)(0),                     // 179: google.fhir.r4.core.ResearchStudyStatusCode.Value
	(ResearchSubjectStatusCode_Value)(0),                   // 180: google.fhir.r4.core.ResearchSubjectStatusCode.Value
	(ResourceSecurityCategoryCode_Value)(0),                // 181: google.fhir.r4.core.ResourceSecurityCategoryCode.Value
	(ResourceTypeCode_Value)(0),                            // 182: google.fhir.r4.core.ResourceTypeCode.Value
	(ResourceVersionPolicyCode_Value)(0),                   // 183: google.fhir.r4.core.ResourceVersionPolicyCode.Value
	(ResponseTypeCode_Value)(0),                            // 184: google.fhir.r4.core.ResponseTypeCode.Value
	(RestfulCapabilityModeCode_Value)(0),                   // 185: google.fhir.r4.core.RestfulCapabilityModeCode.Value
	(SPDXLicenseCode_Value)(0),                             // 186: google.fhir.r4.core.SPDXLicenseCode.Value
	(SearchComparatorCode_Value)(0),                        // 187: google.fhir.r4.core.SearchComparatorCode.Value
	(SearchEntryModeCode_Value)(0),                         // 188: google.fhir.r4.core.SearchEntryModeCode.Value
	(SearchModifierCode_Value)(0),                          // 189: google.fhir.r4.core.SearchModifierCode.Value
	(SearchParamTypeCode_Value)(0),                         // 190: google.fhir.r4.core.SearchParamTypeCode.Value
	(SequenceTypeCode_Value)(0),                            // 191: google.fhir.r4.core.SequenceTypeCode.Value
	(SlicingRulesCode_Value)(0),                            // 192: google.fhir.r4.core.SlicingRulesCode.Value
	(SlotStatusCode_Value)(0),                              // 193: google.fhir.r4.core.SlotStatusCode.Value
	(SmartCapabilitiesCode_Value)(0),                       // 194: google.fhir.r4.core.SmartCapabilitiesCode.Value
	(SortDirectionCode_Value)(0),                           // 195: google.fhir.r4.core.SortDirectionCode.Value
	(SpecimenContainedPreferenceCode_Value)(0),             // 196: google.fhir.r4.core.SpecimenContainedPreferenceCode.Value
	(SpecimenStatusCode_Value)(0),                          // 197: google.fhir.r4.core.SpecimenStatusCode.Value
	(StandardsStatusCode_Value)(0),                         // 198: google.fhir.r4.core.StandardsStatusCode.Value
	(StatusCode_Value)(0),                                  // 199: google.fhir.r4.core.StatusCode.Value
	(StrandTypeCode_Value)(0),                              // 200: google.fhir.r4.core.StrandTypeCode.Value
	(StructureDefinitionKindCode_Value)(0),                 // 201: google.fhir.r4.core.StructureDefinitionKindCode.Value
	(StructureMapContextTypeCode_Value)(0),                 // 202: google.fhir.r4.core.StructureMapContextTypeCode.Value
	(StructureMapGroupTypeModeCode_Value)(0),               // 203: google.fhir.r4.core.StructureMapGroupTypeModeCode.Value
	(StructureMapInputModeCode_Value)(0),                   // 204: google.fhir.r4.core.StructureMapInputModeCode.Value
	(StructureMapModelModeCode_Value)(0),                   // 205: google.fhir.r4.core.StructureMapModelModeCode.Value
	(StructureMapSourceListModeCode_Value)(0),              // 206: google.fhir.r4.core.StructureMapSourceListModeCode.Value
	(StructureMapTargetListModeCode_Value)(0),              // 207: google.fhir.r4.core.StructureMapTargetListModeCode.Value
	(StructureMapTransformCode_Value)(0),                   // 208: google.fhir.r4.core.StructureMapTransformCode.Value
	(SubscriptionChannelTypeCode_Value)(0),                 // 209: google.fhir.r4.core.SubscriptionChannelTypeCode.Value
	(SubscriptionStatusCode_Value)(0),                      // 210: google.fhir.r4.core.SubscriptionStatusCode.Value
	(SupplyDeliveryStatusCode_Value)(0),                    // 211: google.fhir.r4.core.SupplyDeliveryStatusCode.Value
	(SupplyItemTypeCode_Value)(0),                          // 212: google.fhir.r4.core.SupplyItemTypeCode.Value
	(SupplyRequestStatusCode_Value)(0),                     // 213: google.fhir.r4.core.SupplyRequestStatusCode.Value
	(TaskIntentCode_Value)(0),                              // 214: google.fhir.r4.core.TaskIntentCode.Value
	(TaskStatusCode_Value)(0),                              // 215: google.fhir.r4.core.TaskStatusCode.Value
	(TemplateStatusCodeLifeCycleCode_Value)(0),             // 216: google.fhir.r4.core.TemplateStatusCodeLifeCycleCode.Value
	(TestReportActionResultCode_Value)(0),                  // 217: google.fhir.r4.core.TestReportActionResultCode.Value
	(TestReportParticipantTypeCode_Value)(0),               // 218: google.fhir.r4.core.TestReportParticipantTypeCode.Value
	(TestReportResultCode_Value)(0),                        // 219: google.fhir.r4.core.TestReportResultCode.Value
	(TestReportStatusCode_Value)(0),                        // 220: google.fhir.r4.core.TestReportStatusCode.Value
	(TestScriptRequestMethodCode_Value)(0),                 // 221: google.fhir.r4.core.TestScriptRequestMethodCode.Value
	(TriggerTypeCode_Value)(0),                             // 222: google.fhir.r4.core.TriggerTypeCode.Value
	(TypeDerivationRuleCode_Value)(0),                      // 223: google.fhir.r4.core.TypeDerivationRuleCode.Value
	(UDIEntryTypeCode_Value)(0),                            // 224: google.fhir.r4.core.UDIEntryTypeCode.Value
	(UseCode_Value)(0),                                     // 225: google.fhir.r4.core.UseCode.Value
	(V20444Code_Value)(0),                                  // 226: google.fhir.r4.core.V20444Code.Value
	(V3AddressUseCode_Value)(0),                            // 227: google.fhir.r4.core.V3AddressUseCode.Value
	(V3ConfidentialityCode_Value)(0),                       // 228: google.fhir.r4.core.V3ConfidentialityCode.Value
	(V3EntityNamePartQualifierCode_Value)(0),               // 229: google.fhir.r4.core.V3EntityNamePartQualifierCode.Value
	(V3EntityNamePartQualifierR2Code_Value)(0),             // 230: google.fhir.r4.core.V3EntityNamePartQualifierR2Code.Value
	(V3EntityNameUseCode_Value)(0),                         // 231: google.fhir.r4.core.V3EntityNameUseCode.Value
	(V3EntityNameUseR2Code_Value)(0),                       // 232: google.fhir.r4.core.V3EntityNameUseR2Code.Value
	(V3NullFlavorCode_Value)(0),                            // 233: google.fhir.r4.core.V3NullFlavorCode.Value
	(V3ParticipationModeCode_Value)(0),                     // 234: google.fhir.r4.core.V3ParticipationModeCode.Value
	(V3ProbabilityDistributionTypeCode_Value)(0),           // 235: google.fhir.r4.core.V3ProbabilityDistributionTypeCode.Value
	(V3RoleCode_Value)(0),                                  // 236: google.fhir.r4.core.V3RoleCode.Value
	(V3TimingEventCode_Value)(0),                           // 237: google.fhir.r4.core.V3TimingEventCode.Value
	(VisionBaseCode_Value)(0),                              // 238: google.fhir.r4.core.VisionBaseCode.Value
	(VisionEyesCode_Value)(0),                              // 239: google.fhir.r4.core.VisionEyesCode.Value
	(XPathUsageTypeCode_Value)(0),                          // 240: google.fhir.r4.core.XPathUsageTypeCode.Value
	(*AbstractTypeCode)(nil),                               // 241: google.fhir.r4.core.AbstractTypeCode
	(*AccountStatusCode)(nil),                              // 242: google.fhir.r4.core.AccountStatusCode
	(*ActionCardinalityBehaviorCode)(nil),                  // 243: google.fhir.r4.core.ActionCardinalityBehaviorCode
	(*ActionConditionKindCode)(nil),                        // 244: google.fhir.r4.core.ActionConditionKindCode
	(*ActionGroupingBehaviorCode)(nil),                     // 245: google.fhir.r4.core.ActionGroupingBehaviorCode
	(*ActionParticipantTypeCode)(nil),                      // 246: google.fhir.r4.core.ActionParticipantTypeCode
	(*ActionPrecheckBehaviorCode)(nil),                     // 247: google.fhir.r4.core.ActionPrecheckBehaviorCode
	(*ActionRelationshipTypeCode)(nil),                     // 248: google.fhir.r4.core.ActionRelationshipTypeCode
	(*ActionRequiredBehaviorCode)(nil),                     // 249: google.fhir.r4.core.ActionRequiredBehaviorCode
	(*ActionSelectionBehaviorCode)(nil),                    // 250: google.fhir.r4.core.ActionSelectionBehaviorCode
	(*AddressTypeCode)(nil),                                // 251: google.fhir.r4.core.AddressTypeCode
	(*AddressUseCode)(nil),                                 // 252: google.fhir.r4.core.AddressUseCode
	(*AdministrativeGenderCode)(nil),                       // 253: google.fhir.r4.core.AdministrativeGenderCode
	(*AdverseEventActualityCode)(nil),                      // 254: google.fhir.r4.core.AdverseEventActualityCode
	(*AdverseEventOutcomeCode)(nil),                        // 255: google.fhir.r4.core.AdverseEventOutcomeCode
	(*AdverseEventSeverityCode)(nil),                       // 256: google.fhir.r4.core.AdverseEventSeverityCode
	(*AggregationModeCode)(nil),                            // 257: google.fhir.r4.core.AggregationModeCode
	(*AllergyIntoleranceCategoryCode)(nil),                 // 258: google.fhir.r4.core.AllergyIntoleranceCategoryCode
	(*AllergyIntoleranceClinicalStatusCode)(nil),           // 259: google.fhir.r4.core.AllergyIntoleranceClinicalStatusCode
	(*AllergyIntoleranceCriticalityCode)(nil),              // 260: google.fhir.r4.core.AllergyIntoleranceCriticalityCode
	(*AllergyIntoleranceSeverityCode)(nil),                 // 261: google.fhir.r4.core.AllergyIntoleranceSeverityCode
	(*AllergyIntoleranceSubstanceExposureRiskCode)(nil),    // 262: google.fhir.r4.core.AllergyIntoleranceSubstanceExposureRiskCode
	(*AllergyIntoleranceTypeCode)(nil),                     // 263: google.fhir.r4.core.AllergyIntoleranceTypeCode
	(*AllergyIntoleranceVerificationStatusCode)(nil),       // 264: google.fhir.r4.core.AllergyIntoleranceVerificationStatusCode
	(*AppointmentStatusCode)(nil),                          // 265: google.fhir.r4.core.AppointmentStatusCode
	(*AssertionDirectionTypeCode)(nil),                     // 266: google.fhir.r4.core.AssertionDirectionTypeCode
	(*AssertionOperatorTypeCode)(nil),                      // 267: google.fhir.r4.core.AssertionOperatorTypeCode
	(*AssertionResponseTypesCode)(nil),                     // 268: google.fhir.r4.core.AssertionResponseTypesCode
	(*AuditEventActionCode)(nil),                           // 269: google.fhir.r4.core.AuditEventActionCode
	(*AuditEventAgentNetworkTypeCode)(nil),                 // 270: google.fhir.r4.core.AuditEventAgentNetworkTypeCode
	(*AuditEventOutcomeCode)(nil),                          // 271: google.fhir.r4.core.AuditEventOutcomeCode
	(*BenefitCostApplicabilityCode)(nil),                   // 272: google.fhir.r4.core.BenefitCostApplicabilityCode
	(*BindingStrengthCode)(nil),                            // 273: google.fhir.r4.core.BindingStrengthCode
	(*BiologicallyDerivedProductCategoryCode)(nil),         // 274: google.fhir.r4.core.BiologicallyDerivedProductCategoryCode
	(*BiologicallyDerivedProductStatusCode)(nil),           // 275: google.fhir.r4.core.BiologicallyDerivedProductStatusCode
	(*BiologicallyDerivedProductStorageScaleCode)(nil),     // 276: google.fhir.r4.core.BiologicallyDerivedProductStorageScaleCode
	(*BundleTypeCode)(nil),                                 // 277: google.fhir.r4.core.BundleTypeCode
	(*CanonicalStatusCodesForFHIRResourcesCode)(nil),       // 278: google.fhir.r4.core.CanonicalStatusCodesForFHIRResourcesCode
	(*CapabilityStatementKindCode)(nil),                    // 279: google.fhir.r4.core.CapabilityStatementKindCode
	(*CarePlanActivityStatusCode)(nil),                     // 280: google.fhir.r4.core.CarePlanActivityStatusCode
	(*CareTeamStatusCode)(nil),                             // 281: google.fhir.r4.core.CareTeamStatusCode
	(*CatalogEntryRelationTypeCode)(nil),                   // 282: google.fhir.r4.core.CatalogEntryRelationTypeCode
	(*ChargeItemStatusCode)(nil),                           // 283: google.fhir.r4.core.ChargeItemStatusCode
	(*ChoiceListOrientationCode)(nil),                      // 284: google.fhir.r4.core.ChoiceListOrientationCode
	(*ClaimProcessingCode)(nil),                            // 285: google.fhir.r4.core.ClaimProcessingCode
	(*CodeSearchSupportCode)(nil),                          // 286: google.fhir.r4.core.CodeSearchSupportCode
	(*CodeSystemContentModeCode)(nil),                      // 287: google.fhir.r4.core.CodeSystemContentModeCode
	(*CodeSystemHierarchyMeaningCode)(nil),                 // 288: google.fhir.r4.core.CodeSystemHierarchyMeaningCode
	(*CompartmentTypeCode)(nil),                            // 289: google.fhir.r4.core.CompartmentTypeCode
	(*CompositionAttestationModeCode)(nil),                 // 290: google.fhir.r4.core.CompositionAttestationModeCode
	(*CompositionStatusCode)(nil),                          // 291: google.fhir.r4.core.CompositionStatusCode
	(*ConceptMapEquivalenceCode)(nil),                      // 292: google.fhir.r4.core.ConceptMapEquivalenceCode
	(*ConceptMapGroupUnmappedModeCode)(nil),                // 293: google.fhir.r4.core.ConceptMapGroupUnmappedModeCode
	(*ConditionClinicalStatusCode)(nil),                    // 294: google.fhir.r4.core.ConditionClinicalStatusCode
	(*ConditionVerificationStatusCode)(nil),                // 295: google.fhir.r4.core.ConditionVerificationStatusCode
	(*ConditionalDeleteStatusCode)(nil),                    // 296: google.fhir.r4.core.ConditionalDeleteStatusCode
	(*ConditionalReadStatusCode)(nil),                      // 297: google.fhir.r4.core.ConditionalReadStatusCode
	(*ConformanceExpectationCode)(nil),                     // 298: google.fhir.r4.core.ConformanceExpectationCode
	(*ConsentDataMeaningCode)(nil),                         // 299: google.fhir.r4.core.ConsentDataMeaningCode
	(*ConsentProvisionTypeCode)(nil),                       // 300: google.fhir.r4.core.ConsentProvisionTypeCode
	(*ConsentStateCode)(nil),                               // 301: google.fhir.r4.core.ConsentStateCode
	(*ConstraintSeverityCode)(nil),                         // 302: google.fhir.r4.core.ConstraintSeverityCode
	(*ContactPointSystemCode)(nil),                         // 303: google.fhir.r4.core.ContactPointSystemCode
	(*ContactPointUseCode)(nil),                            // 304: google.fhir.r4.core.ContactPointUseCode
	(*ContractResourcePublicationStatusCode)(nil),          // 305: google.fhir.r4.core.ContractResourcePublicationStatusCode
	(*ContractResourceStatusCode)(nil),                     // 306: google.fhir.r4.core.ContractResourceStatusCode
	(*ContributorTypeCode)(nil),                            // 307: google.fhir.r4.core.ContributorTypeCode
	(*DataAbsentReasonCode)(nil),                           // 308: google.fhir.r4.core.DataAbsentReasonCode
	(*DataTypeCode)(nil),                                   // 309: google.fhir.r4.core.DataTypeCode
	(*DaysOfWeekCode)(nil),                                 // 310: google.fhir.r4.core.DaysOfWeekCode
	(*DetectedIssueSeverityCode)(nil),                      // 311: google.fhir.r4.core.DetectedIssueSeverityCode
	(*DeviceMetricCalibrationStateCode)(nil),               // 312: google.fhir.r4.core.DeviceMetricCalibrationStateCode
	(*DeviceMetricCalibrationTypeCode)(nil),                // 313: google.fhir.r4.core.DeviceMetricCalibrationTypeCode
	(*DeviceMetricCategoryCode)(nil),                       // 314: google.fhir.r4.core.DeviceMetricCategoryCode
	(*DeviceMetricColorCode)(nil),                          // 315: google.fhir.r4.core.DeviceMetricColorCode
	(*DeviceMetricOperationalStatusCode)(nil),              // 316: google.fhir.r4.core.DeviceMetricOperationalStatusCode
	(*DeviceNameTypeCode)(nil),                             // 317: google.fhir.r4.core.DeviceNameTypeCode
	(*DeviceUseStatementStatusCode)(nil),                   // 318: google.fhir.r4.core.DeviceUseStatementStatusCode
	(*DiagnosticReportStatusCode)(nil),                     // 319: google.fhir.r4.core.DiagnosticReportStatusCode
	(*DiscriminatorTypeCode)(nil),                          // 320: google.fhir.r4.core.DiscriminatorTypeCode
	(*DocumentModeCode)(nil),                               // 321: google.fhir.r4.core.DocumentModeCode
	(*DocumentReferenceStatusCode)(nil),                    // 322: google.fhir.r4.core.DocumentReferenceStatusCode
	(*DocumentRelationshipTypeCode)(nil),                   // 323: google.fhir.r4.core.DocumentRelationshipTypeCode
	(*EligibilityRequestPurposeCode)(nil),                  // 324: google.fhir.r4.core.EligibilityRequestPurposeCode
	(*EligibilityResponsePurposeCode)(nil),                 // 325: google.fhir.r4.core.EligibilityResponsePurposeCode
	(*EnableWhenBehaviorCode)(nil),                         // 326: google.fhir.r4.core.EnableWhenBehaviorCode
	(*EncounterLocationStatusCode)(nil),                    // 327: google.fhir.r4.core.EncounterLocationStatusCode
	(*EncounterStatusCode)(nil),                            // 328: google.fhir.r4.core.EncounterStatusCode
	(*EndpointStatusCode)(nil),                             // 329: google.fhir.r4.core.EndpointStatusCode
	(*EpisodeOfCareStatusCode)(nil),                        // 330: google.fhir.r4.core.EpisodeOfCareStatusCode
	(*EventCapabilityModeCode)(nil),                        // 331: google.fhir.r4.core.EventCapabilityModeCode
	(*EventStatusCode)(nil),                                // 332: google.fhir.r4.core.EventStatusCode
	(*EventTimingCode)(nil),                                // 333: google.fhir.r4.core.EventTimingCode
	(*EvidenceVariableTypeCode)(nil),                       // 334: google.fhir.r4.core.EvidenceVariableTypeCode
	(*ExampleScenarioActorTypeCode)(nil),                   // 335: google.fhir.r4.core.ExampleScenarioActorTypeCode
	(*ExpansionParameterSourceCode)(nil),                   // 336: google.fhir.r4.core.ExpansionParameterSourceCode
	(*ExpansionProcessingRuleCode)(nil),                    // 337: google.fhir.r4.core.ExpansionProcessingRuleCode
	(*ExplanationOfBenefitStatusCode)(nil),                 // 338: google.fhir.r4.core.ExplanationOfBenefitStatusCode
	(*ExposureStateCode)(nil),                              // 339: google.fhir.r4.core.ExposureStateCode
	(*ExtensionContextTypeCode)(nil),                       // 340: google.fhir.r4.core.ExtensionContextTypeCode
	(*FHIRDeviceStatusCode)(nil),                           // 341: google.fhir.r4.core.FHIRDeviceStatusCode
	(*FHIRRestfulInteractionsCode)(nil),                    // 342: google.fhir.r4.core.FHIRRestfulInteractionsCode
	(*FHIRSubstanceStatusCode)(nil),                        // 343: google.fhir.r4.core.FHIRSubstanceStatusCode
	(*FHIRVersionCode)(nil),                                // 344: google.fhir.r4.core.FHIRVersionCode
	(*FamilyHistoryStatusCode)(nil),                        // 345: google.fhir.r4.core.FamilyHistoryStatusCode
	(*FilterOperatorCode)(nil),                             // 346: google.fhir.r4.core.FilterOperatorCode
	(*FinancialResourceStatusCode)(nil),                    // 347: google.fhir.r4.core.FinancialResourceStatusCode
	(*FlagStatusCode)(nil),                                 // 348: google.fhir.r4.core.FlagStatusCode
	(*GoalAcceptanceStatusCode)(nil),                       // 349: google.fhir.r4.core.GoalAcceptanceStatusCode
	(*GoalLifecycleStatusCode)(nil),                        // 350: google.fhir.r4.core.GoalLifecycleStatusCode
	(*GraphCompartmentRuleCode)(nil),                       // 351: google.fhir.r4.core.GraphCompartmentRuleCode
	(*GraphCompartmentUseCode)(nil),                        // 352: google.fhir.r4.core.GraphCompartmentUseCode
	(*GroupMeasureCode)(nil),                               // 353: google.fhir.r4.core.GroupMeasureCode
	(*GroupTypeCode)(nil),                                  // 354: google.fhir.r4.core.GroupTypeCode
	(*GuidanceResponseStatusCode)(nil),                     // 355: google.fhir.r4.core.GuidanceResponseStatusCode
	(*GuidePageGenerationCode)(nil),                        // 356: google.fhir.r4.core.GuidePageGenerationCode
	(*GuideParameterCode)(nil),                             // 357: google.fhir.r4.core.GuideParameterCode
	(*HL7WorkgroupCode)(nil),                               // 358: google.fhir.r4.core.HL7WorkgroupCode
	(*HTTPVerbCode)(nil),                                   // 359: google.fhir.r4.core.HTTPVerbCode
	(*HumanNameAssemblyOrderCode)(nil),                     // 360: google.fhir.r4.core.HumanNameAssemblyOrderCode
	(*IdentifierUseCode)(nil),                              // 361: google.fhir.r4.core.IdentifierUseCode
	(*IdentityAssuranceLevelCode)(nil),                     // 362: google.fhir.r4.core.IdentityAssuranceLevelCode
	(*ImagingStudyStatusCode)(nil),                         // 363: google.fhir.r4.core.ImagingStudyStatusCode
	(*ImplantStatusCode)(nil),                              // 364: google.fhir.r4.core.ImplantStatusCode
	(*InvoicePriceComponentTypeCode)(nil),                  // 365: google.fhir.r4.core.InvoicePriceComponentTypeCode
	(*InvoiceStatusCode)(nil),                              // 366: google.fhir.r4.core.InvoiceStatusCode
	(*IssueSeverityCode)(nil),                              // 367: google.fhir.r4.core.IssueSeverityCode
	(*IssueTypeCode)(nil),                                  // 368: google.fhir.r4.core.IssueTypeCode
	(*LinkTypeCode)(nil),                                   // 369: google.fhir.r4.core.LinkTypeCode
	(*LinkageTypeCode)(nil),                                // 370: google.fhir.r4.core.LinkageTypeCode
	(*ListModeCode)(nil),                                   // 371: google.fhir.r4.core.ListModeCode
	(*ListStatusCode)(nil),                                 // 372: google.fhir.r4.core.ListStatusCode
	(*LocationModeCode)(nil),                               // 373: google.fhir.r4.core.LocationModeCode
	(*LocationStatusCode)(nil),                             // 374: google.fhir.r4.core.LocationStatusCode
	(*MatchGradeCode)(nil),                                 // 375: google.fhir.r4.core.MatchGradeCode
	(*MeasureImprovementNotationCode)(nil),                 // 376: google.fhir.r4.core.MeasureImprovementNotationCode
	(*MeasureReportStatusCode)(nil),                        // 377: google.fhir.r4.core.MeasureReportStatusCode
	(*MeasureReportTypeCode)(nil),                          // 378: google.fhir.r4.core.MeasureReportTypeCode
	(*MedicationAdministrationStatusCode)(nil),             // 379: google.fhir.r4.core.MedicationAdministrationStatusCode
	(*MedicationDispenseStatusCode)(nil),                   // 380: google.fhir.r4.core.MedicationDispenseStatusCode
	(*MedicationKnowledgeStatusCode)(nil),                  // 381: google.fhir.r4.core.MedicationKnowledgeStatusCode
	(*MedicationRequestIntentCode)(nil),                    // 382: google.fhir.r4.core.MedicationRequestIntentCode
	(*MedicationStatementStatusCodes)(nil),                 // 383: google.fhir.r4.core.MedicationStatementStatusCodes
	(*MedicationStatusCode)(nil),                           // 384: google.fhir.r4.core.MedicationStatusCode
	(*MedicationrequestStatusCode)(nil),                    // 385: google.fhir.r4.core.MedicationrequestStatusCode
	(*MessageSignificanceCategoryCode)(nil),                // 386: google.fhir.r4.core.MessageSignificanceCategoryCode
	(*MessageheaderResponseRequestCode)(nil),               // 387: google.fhir.r4.core.MessageheaderResponseRequestCode
	(*NameUseCode)(nil),                                    // 388: google.fhir.r4.core.NameUseCode
	(*NamingSystemIdentifierTypeCode)(nil),                 // 389: google.fhir.r4.core.NamingSystemIdentifierTypeCode
	(*NamingSystemTypeCode)(nil),                           // 390: google.fhir.r4.core.NamingSystemTypeCode
	(*NarrativeStatusCode)(nil),                            // 391: google.fhir.r4.core.NarrativeStatusCode
	(*NoteTypeCode)(nil),                                   // 392: google.fhir.r4.core.NoteTypeCode
	(*ObservationDataTypeCode)(nil),                        // 393: google.fhir.r4.core.ObservationDataTypeCode
	(*ObservationRangeCategoryCode)(nil),                   // 394: google.fhir.r4.core.ObservationRangeCategoryCode
	(*ObservationStatusCode)(nil),                          // 395: google.fhir.r4.core.ObservationStatusCode
	(*OperationKindCode)(nil),                              // 396: google.fhir.r4.core.OperationKindCode
	(*OperationParameterUseCode)(nil),                      // 397: google.fhir.r4.core.OperationParameterUseCode
	(*OrientationTypeCode)(nil),                            // 398: google.fhir.r4.core.OrientationTypeCode
	(*ParticipantRequiredCode)(nil),                        // 399: google.fhir.r4.core.ParticipantRequiredCode
	(*ParticipationStatusCode)(nil),                        // 400: google.fhir.r4.core.ParticipationStatusCode
	(*PropertyRepresentationCode)(nil),                     // 401: google.fhir.r4.core.PropertyRepresentationCode
	(*PropertyTypeCode)(nil),                               // 402: google.fhir.r4.core.PropertyTypeCode
	(*ProvenanceEntityRoleCode)(nil),                       // 403: google.fhir.r4.core.ProvenanceEntityRoleCode
	(*PublicationStatusCode)(nil),                          // 404: google.fhir.r4.core.PublicationStatusCode
	(*QualityTypeCode)(nil),                                // 405: google.fhir.r4.core.QualityTypeCode
	(*QuantityComparatorCode)(nil),                         // 406: google.fhir.r4.core.QuantityComparatorCode
	(*QuestionnaireItemOperatorCode)(nil),                  // 407: google.fhir.r4.core.QuestionnaireItemOperatorCode
	(*QuestionnaireItemTypeCode)(nil),                      // 408: google.fhir.r4.core.QuestionnaireItemTypeCode
	(*QuestionnaireItemUsageModeCode)(nil),                 // 409: google.fhir.r4.core.QuestionnaireItemUsageModeCode
	(*QuestionnaireResponseStatusCode)(nil),                // 410: google.fhir.r4.core.QuestionnaireResponseStatusCode
	(*ReferenceHandlingPolicyCode)(nil),                    // 411: google.fhir.r4.core.ReferenceHandlingPolicyCode
	(*ReferenceVersionRulesCode)(nil),                      // 412: google.fhir.r4.core.ReferenceVersionRulesCode
	(*RelatedArtifactTypeCode)(nil),                        // 413: google.fhir.r4.core.RelatedArtifactTypeCode
	(*RepositoryTypeCode)(nil),                             // 414: google.fhir.r4.core.RepositoryTypeCode
	(*RequestIntentCode)(nil),                              // 415: google.fhir.r4.core.RequestIntentCode
	(*RequestPriorityCode)(nil),                            // 416: google.fhir.r4.core.RequestPriorityCode
	(*RequestResourceTypeCode)(nil),                        // 417: google.fhir.r4.core.RequestResourceTypeCode
	(*RequestStatusCode)(nil),                              // 418: google.fhir.r4.core.RequestStatusCode
	(*ResearchElementTypeCode)(nil),                        // 419: google.fhir.r4.core.ResearchElementTypeCode
	(*ResearchStudyStatusCode)(nil),                        // 420: google.fhir.r4.core.ResearchStudyStatusCode
	(*ResearchSubjectStatusCode)(nil),                      // 421: google.fhir.r4.core.ResearchSubjectStatusCode
	(*ResourceSecurityCategoryCode)(nil),                   // 422: google.fhir.r4.core.ResourceSecurityCategoryCode
	(*ResourceTypeCode)(nil),                               // 423: google.fhir.r4.core.ResourceTypeCode
	(*ResourceVersionPolicyCode)(nil),                      // 424: google.fhir.r4.core.ResourceVersionPolicyCode
	(*ResponseTypeCode)(nil),                               // 425: google.fhir.r4.core.ResponseTypeCode
	(*RestfulCapabilityModeCode)(nil),                      // 426: google.fhir.r4.core.RestfulCapabilityModeCode
	(*SPDXLicenseCode)(nil),                                // 427: google.fhir.r4.core.SPDXLicenseCode
	(*SearchComparatorCode)(nil),                           // 428: google.fhir.r4.core.SearchComparatorCode
	(*SearchEntryModeCode)(nil),                            // 429: google.fhir.r4.core.SearchEntryModeCode
	(*SearchModifierCode)(nil),                             // 430: google.fhir.r4.core.SearchModifierCode
	(*SearchParamTypeCode)(nil),                            // 431: google.fhir.r4.core.SearchParamTypeCode
	(*SequenceTypeCode)(nil),                               // 432: google.fhir.r4.core.SequenceTypeCode
	(*SlicingRulesCode)(nil),                               // 433: google.fhir.r4.core.SlicingRulesCode
	(*SlotStatusCode)(nil),                                 // 434: google.fhir.r4.core.SlotStatusCode
	(*SmartCapabilitiesCode)(nil),                          // 435: google.fhir.r4.core.SmartCapabilitiesCode
	(*SortDirectionCode)(nil),                              // 436: google.fhir.r4.core.SortDirectionCode
	(*SpecimenContainedPreferenceCode)(nil),                // 437: google.fhir.r4.core.SpecimenContainedPreferenceCode
	(*SpecimenStatusCode)(nil),                             // 438: google.fhir.r4.core.SpecimenStatusCode
	(*StandardsStatusCode)(nil),                            // 439: google.fhir.r4.core.StandardsStatusCode
	(*StatusCode)(nil),                                     // 440: google.fhir.r4.core.StatusCode
	(*StrandTypeCode)(nil),                                 // 441: google.fhir.r4.core.StrandTypeCode
	(*StructureDefinitionKindCode)(nil),                    // 442: google.fhir.r4.core.StructureDefinitionKindCode
	(*StructureMapContextTypeCode)(nil),                    // 443: google.fhir.r4.core.StructureMapContextTypeCode
	(*StructureMapGroupTypeModeCode)(nil),                  // 444: google.fhir.r4.core.StructureMapGroupTypeModeCode
	(*StructureMapInputModeCode)(nil),                      // 445: google.fhir.r4.core.StructureMapInputModeCode
	(*StructureMapModelModeCode)(nil),                      // 446: google.fhir.r4.core.StructureMapModelModeCode
	(*StructureMapSourceListModeCode)(nil),                 // 447: google.fhir.r4.core.StructureMapSourceListModeCode
	(*StructureMapTargetListModeCode)(nil),                 // 448: google.fhir.r4.core.StructureMapTargetListModeCode
	(*StructureMapTransformCode)(nil),                      // 449: google.fhir.r4.core.StructureMapTransformCode
	(*SubscriptionChannelTypeCode)(nil),                    // 450: google.fhir.r4.core.SubscriptionChannelTypeCode
	(*SubscriptionStatusCode)(nil),                         // 451: google.fhir.r4.core.SubscriptionStatusCode
	(*SupplyDeliveryStatusCode)(nil),                       // 452: google.fhir.r4.core.SupplyDeliveryStatusCode
	(*SupplyItemTypeCode)(nil),                             // 453: google.fhir.r4.core.SupplyItemTypeCode
	(*SupplyRequestStatusCode)(nil),                        // 454: google.fhir.r4.core.SupplyRequestStatusCode
	(*TaskIntentCode)(nil),                                 // 455: google.fhir.r4.core.TaskIntentCode
	(*TaskStatusCode)(nil),                                 // 456: google.fhir.r4.core.TaskStatusCode
	(*TemplateStatusCodeLifeCycleCode)(nil),                // 457: google.fhir.r4.core.TemplateStatusCodeLifeCycleCode
	(*TestReportActionResultCode)(nil),                     // 458: google.fhir.r4.core.TestReportActionResultCode
	(*TestReportParticipantTypeCode)(nil),                  // 459: google.fhir.r4.core.TestReportParticipantTypeCode
	(*TestReportResultCode)(nil),                           // 460: google.fhir.r4.core.TestReportResultCode
	(*TestReportStatusCode)(nil),                           // 461: google.fhir.r4.core.TestReportStatusCode
	(*TestScriptRequestMethodCode)(nil),                    // 462: google.fhir.r4.core.TestScriptRequestMethodCode
	(*TriggerTypeCode)(nil),                                // 463: google.fhir.r4.core.TriggerTypeCode
	(*TypeDerivationRuleCode)(nil),                         // 464: google.fhir.r4.core.TypeDerivationRuleCode
	(*UDIEntryTypeCode)(nil),                               // 465: google.fhir.r4.core.UDIEntryTypeCode
	(*UseCode)(nil),                                        // 466: google.fhir.r4.core.UseCode
	(*V20444Code)(nil),                                     // 467: google.fhir.r4.core.V20444Code
	(*V3AddressUseCode)(nil),                               // 468: google.fhir.r4.core.V3AddressUseCode
	(*V3ConfidentialityCode)(nil),                          // 469: google.fhir.r4.core.V3ConfidentialityCode
	(*V3EntityNamePartQualifierCode)(nil),                  // 470: google.fhir.r4.core.V3EntityNamePartQualifierCode
	(*V3EntityNamePartQualifierR2Code)(nil),                // 471: google.fhir.r4.core.V3EntityNamePartQualifierR2Code
	(*V3EntityNameUseCode)(nil),                            // 472: google.fhir.r4.core.V3EntityNameUseCode
	(*V3EntityNameUseR2Code)(nil),                          // 473: google.fhir.r4.core.V3EntityNameUseR2Code
	(*V3NullFlavorCode)(nil),                               // 474: google.fhir.r4.core.V3NullFlavorCode
	(*V3ParticipationModeCode)(nil),                        // 475: google.fhir.r4.core.V3ParticipationModeCode
	(*V3ProbabilityDistributionTypeCode)(nil),              // 476: google.fhir.r4.core.V3ProbabilityDistributionTypeCode
	(*V3RoleCode)(nil),                                     // 477: google.fhir.r4.core.V3RoleCode
	(*V3TimingEventCode)(nil),                              // 478: google.fhir.r4.core.V3TimingEventCode
	(*VisionBaseCode)(nil),                                 // 479: google.fhir.r4.core.VisionBaseCode
	(*VisionEyesCode)(nil),                                 // 480: google.fhir.r4.core.VisionEyesCode
	(*XPathUsageTypeCode)(nil),                             // 481: google.fhir.r4.core.XPathUsageTypeCode
}
var file_proto_google_fhir_proto_r4_core_codes_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_google_fhir_proto_r4_core_codes_proto_init() }
func file_proto_google_fhir_proto_r4_core_codes_proto_init() {
	if File_proto_google_fhir_proto_r4_core_codes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionCardinalityBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionConditionKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionGroupingBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionParticipantTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPrecheckBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRequiredBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSelectionBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdministrativeGenderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventActualityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdverseEventSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceClinicalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceCriticalityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceSubstanceExposureRiskCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllergyIntoleranceVerificationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionDirectionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionOperatorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssertionResponseTypesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventActionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventAgentNetworkTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditEventOutcomeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenefitCostApplicabilityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindingStrengthCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiologicallyDerivedProductCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiologicallyDerivedProductStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BiologicallyDerivedProductStorageScaleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BundleTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CanonicalStatusCodesForFHIRResourcesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CapabilityStatementKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CarePlanActivityStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CareTeamStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatalogEntryRelationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargeItemStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChoiceListOrientationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClaimProcessingCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSearchSupportCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemContentModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeSystemHierarchyMeaningCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompartmentTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositionAttestationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapEquivalenceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConceptMapGroupUnmappedModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionClinicalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionVerificationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalDeleteStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalReadStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConformanceExpectationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentDataMeaningCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentProvisionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsentStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstraintSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPointSystemCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPointUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractResourcePublicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractResourceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContributorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAbsentReasonCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaysOfWeekCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectedIssueSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCalibrationStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCalibrationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricColorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetricOperationalStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceNameTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceUseStatementStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiagnosticReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscriminatorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentReferenceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentRelationshipTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilityRequestPurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EligibilityResponsePurposeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableWhenBehaviorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterLocationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncounterStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndpointStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EpisodeOfCareStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventCapabilityModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventTimingCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceVariableTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleScenarioActorTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpansionParameterSourceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpansionProcessingRuleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplanationOfBenefitStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExposureStateCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtensionContextTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRDeviceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRRestfulInteractionsCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRSubstanceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FHIRVersionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyHistoryStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterOperatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinancialResourceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlagStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalAcceptanceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoalLifecycleStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphCompartmentRuleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraphCompartmentUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMeasureCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidanceResponseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuidePageGenerationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GuideParameterCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HL7WorkgroupCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPVerbCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HumanNameAssemblyOrderCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifierUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityAssuranceLevelCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagingStudyStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplantStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoicePriceComponentTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvoiceStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueSeverityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkageTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchGradeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureImprovementNotationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureReportTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationAdministrationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationDispenseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationKnowledgeStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationRequestIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatementStatusCodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MedicationrequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageSignificanceCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageheaderResponseRequestCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystemIdentifierTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamingSystemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NarrativeStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationDataTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationRangeCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationParameterUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrientationTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantRequiredCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyRepresentationCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvenanceEntityRoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicationStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QualityTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantityComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemOperatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireItemUsageModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuestionnaireResponseStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceHandlingPolicyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferenceVersionRulesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedArtifactTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepositoryTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPriorityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestResourceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResearchElementTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResearchStudyStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResearchSubjectStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceSecurityCategoryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceVersionPolicyCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestfulCapabilityModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPDXLicenseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchComparatorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchEntryModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchModifierCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchParamTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequenceTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlicingRulesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlotStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmartCapabilitiesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortDirectionCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenContainedPreferenceCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecimenStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandardsStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StrandTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureDefinitionKindCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapContextTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapGroupTypeModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapInputModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapModelModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapSourceListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapTargetListModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StructureMapTransformCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionChannelTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyDeliveryStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyItemTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SupplyRequestStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIntentCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateStatusCodeLifeCycleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportActionResultCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportParticipantTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportResultCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestReportStatusCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestScriptRequestMethodCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeDerivationRuleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UDIEntryTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V20444Code); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3AddressUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3ConfidentialityCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3EntityNamePartQualifierCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3EntityNamePartQualifierR2Code); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3EntityNameUseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3EntityNameUseR2Code); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3NullFlavorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3ParticipationModeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3ProbabilityDistributionTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3RoleCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*V3TimingEventCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionBaseCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisionEyesCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XPathUsageTypeCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_google_fhir_proto_r4_core_codes_proto_rawDesc,
			NumEnums:      241,
			NumMessages:   241,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_google_fhir_proto_r4_core_codes_proto_goTypes,
		DependencyIndexes: file_proto_google_fhir_proto_r4_core_codes_proto_depIdxs,
		EnumInfos:         file_proto_google_fhir_proto_r4_core_codes_proto_enumTypes,
		MessageInfos:      file_proto_google_fhir_proto_r4_core_codes_proto_msgTypes,
	}.Build()
	File_proto_google_fhir_proto_r4_core_codes_proto = out.File
	file_proto_google_fhir_proto_r4_core_codes_proto_rawDesc = nil
	file_proto_google_fhir_proto_r4_core_codes_proto_goTypes = nil
	file_proto_google_fhir_proto_r4_core_codes_proto_depIdxs = nil
}
