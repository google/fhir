//    Copyright 2023 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

syntax = "proto3";

package google.fhir.r5.core;

import "google/protobuf/any.proto";
import "proto/google/fhir/proto/annotations.proto";
import "proto/google/fhir/proto/r5/core/datatypes.proto";

option java_multiple_files = true;
option java_package = "com.google.fhir.r5.core";
option (.google.fhir.proto.fhir_version) = R5;
option go_package = "github.com/google/fhir/go/proto/google/fhir/proto/r5/core/resources/substance_polymer_go_proto";

// Auto-generated from StructureDefinition for SubstancePolymer.
// Properties of a substance specific to it being a polymer.
// See http://hl7.org/fhir/StructureDefinition/SubstancePolymer
message SubstancePolymer {
  option (.google.fhir.proto.structure_definition_kind) = KIND_RESOURCE;
  option (.google.fhir.proto.fhir_structure_definition_url) =
      "http://hl7.org/fhir/StructureDefinition/SubstancePolymer";

  // Logical id of this artifact
  Id id = 1;

  // Metadata about the resource
  Meta meta = 2;

  // A set of rules under which this content was created
  Uri implicit_rules = 3;

  // Language of the resource content
  Code language = 4;

  // Text summary of the resource, for human interpretation
  Narrative text = 5;

  // Contained, inline Resources
  repeated protobuf.Any contained = 6;

  // Field 7 reserved for strongly-typed ContainedResource for id:
  // SubstancePolymer.contained
  reserved 7;

  // Additional content defined by implementations
  repeated Extension extension = 8;

  // Extensions that cannot be ignored
  repeated Extension modifier_extension = 9;

  // A business idenfier for this polymer, but typically this is handled by a
  // SubstanceDefinition identifier
  Identifier identifier = 10;

  // Overall type of the polymer
  CodeableConcept class_value = 11 [json_name = "class"];

  // Polymer geometry, e.g. linear, branched, cross-linked, network or dendritic
  CodeableConcept geometry = 12;

  // Descrtibes the copolymer sequence type (polymer connectivity)
  repeated CodeableConcept copolymer_connectivity = 13;

  // Todo - this is intended to connect to a repeating full modification
  // structure, also used by Protein and Nucleic Acid . String is just a
  // placeholder
  String modification = 14;

  // Todo
  message MonomerSet {
    // Unique id for inter-element referencing
    String id = 1;

    // Additional content defined by implementations
    repeated Extension extension = 2;

    // Extensions that cannot be ignored even if unrecognized
    repeated Extension modifier_extension = 3;

    // Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer
    // ratio, SRU/Polymer Ratio
    CodeableConcept ratio_type = 4;

    // The starting materials - monomer(s) used in the synthesis of the polymer
    message StartingMaterial {
      // Unique id for inter-element referencing
      String id = 1;

      // Additional content defined by implementations
      repeated Extension extension = 2;

      // Extensions that cannot be ignored even if unrecognized
      repeated Extension modifier_extension = 3;

      // The type of substance for this starting material
      CodeableConcept code = 4;

      // Substance high level category, e.g. chemical substance
      CodeableConcept category = 5;

      // Used to specify whether the attribute described is a defining element
      // for the unique identification of the polymer
      Boolean is_defining = 6;

      // A percentage
      Quantity amount = 7;
    }
    repeated StartingMaterial starting_material = 5;
  }
  repeated MonomerSet monomer_set = 15;

  // Specifies and quantifies the repeated units and their configuration
  message Repeat {
    // Unique id for inter-element referencing
    String id = 1;

    // Additional content defined by implementations
    repeated Extension extension = 2;

    // Extensions that cannot be ignored even if unrecognized
    repeated Extension modifier_extension = 3;

    // A representation of an (average) molecular formula from a polymer
    String average_molecular_formula = 4;

    // How the quantitative amount of Structural Repeat Units is captured (e.g.
    // Exact, Numeric, Average)
    CodeableConcept repeat_unit_amount_type = 5;

    // An SRU - Structural Repeat Unit
    message RepeatUnit {
      // Unique id for inter-element referencing
      String id = 1;

      // Additional content defined by implementations
      repeated Extension extension = 2;

      // Extensions that cannot be ignored even if unrecognized
      repeated Extension modifier_extension = 3;

      // Structural repeat units are essential elements for defining polymers
      String unit = 4;

      // The orientation of the polymerisation, e.g. head-tail, head-head,
      // random
      CodeableConcept orientation = 5;

      // Number of repeats of this unit
      Integer amount = 6;

      // Applies to homopolymer and block co-polymers where the degree of
      // polymerisation within a block can be described
      message DegreeOfPolymerisation {
        // Unique id for inter-element referencing
        String id = 1;

        // Additional content defined by implementations
        repeated Extension extension = 2;

        // Extensions that cannot be ignored even if unrecognized
        repeated Extension modifier_extension = 3;

        // The type of the degree of polymerisation shall be described, e.g.
        // SRU/Polymer Ratio
        CodeableConcept type = 4;

        // An average amount of polymerisation
        Integer average = 5;

        // A low expected limit of the amount
        Integer low = 6;

        // A high expected limit of the amount
        Integer high = 7;
      }
      repeated DegreeOfPolymerisation degree_of_polymerisation = 7;

      // A graphical structure for this SRU
      message StructuralRepresentation {
        // Unique id for inter-element referencing
        String id = 1;

        // Additional content defined by implementations
        repeated Extension extension = 2;

        // Extensions that cannot be ignored even if unrecognized
        repeated Extension modifier_extension = 3;

        // The type of structure (e.g. Full, Partial, Representative)
        CodeableConcept type = 4;

        // The structural representation as text string in a standard format
        // e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF
        String representation = 5;

        // The format of the representation e.g. InChI, SMILES, MOLFILE, CDX,
        // SDF, PDB, mmCIF
        CodeableConcept format = 6;

        // An attached file with the structural representation
        Attachment attachment = 7;
      }
      repeated StructuralRepresentation structural_representation = 8;
    }
    repeated RepeatUnit repeat_unit = 6;
  }
  repeated Repeat repeat = 16;
}
