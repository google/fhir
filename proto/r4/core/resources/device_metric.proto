//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

syntax = "proto3";

package google.fhir.r4.core;

import "google/protobuf/any.proto";
import "proto/annotations.proto";
import "proto/r4/core/codes.proto";
import "proto/r4/core/datatypes.proto";

option java_multiple_files = true;
option java_package = "com.google.fhir.r4.core";
option go_package = "github.com/google/fhir/go/proto/r4/core";
option (.google.fhir.proto.fhir_version) = R4;

// Auto-generated from StructureDefinition for DeviceMetric, last updated
// 2019-11-01T09:29:23.356+11:00. Measurement, calculation or setting capability
// of a medical device. See http://hl7.org/fhir/StructureDefinition/DeviceMetric
message DeviceMetric {
  option (.google.fhir.proto.structure_definition_kind) = KIND_RESOURCE;
  option (.google.fhir.proto.fhir_structure_definition_url) =
      "http://hl7.org/fhir/StructureDefinition/DeviceMetric";

  // Logical id of this artifact
  Id id = 1;

  // Metadata about the resource
  Meta meta = 2;

  // A set of rules under which this content was created
  Uri implicit_rules = 3;

  // Language of the resource content
  Code language = 4;

  // Text summary of the resource, for human interpretation
  Narrative text = 5;

  // Contained, inline Resources
  repeated protobuf.Any contained = 6;

  // Field 7 reserved for strongly-typed ContainedResource for id:
  // DeviceMetric.contained
  reserved 7;

  // Additional content defined by implementations
  repeated Extension extension = 8;

  // Extensions that cannot be ignored
  repeated Extension modifier_extension = 9;

  // Instance identifier
  repeated Identifier identifier = 10;

  // Identity of metric, for example Heart Rate or PEEP Setting
  CodeableConcept type = 11
      [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];

  // Unit of Measure for the Metric
  CodeableConcept unit = 12;

  // Describes the link to the source Device
  Reference source = 13 [(.google.fhir.proto.valid_reference_type) = "Device"];

  // Describes the link to the parent Device
  Reference parent = 14 [(.google.fhir.proto.valid_reference_type) = "Device"];

  // on | off | standby | entered-in-error
  message OperationalStatusCode {
    option (.google.fhir.proto.structure_definition_kind) = KIND_PRIMITIVE_TYPE;
    option (.google.fhir.proto.fhir_valueset_url) =
        "http://hl7.org/fhir/ValueSet/metric-operational-status";
    option (.google.fhir.proto.fhir_profile_base) =
        "http://hl7.org/fhir/StructureDefinition/code";

    DeviceMetricOperationalStatusCode.Value value = 1;

    String id = 2;

    repeated Extension extension = 3;
  }
  OperationalStatusCode operational_status = 15;

  // black | red | green | yellow | blue | magenta | cyan | white
  message ColorCode {
    option (.google.fhir.proto.structure_definition_kind) = KIND_PRIMITIVE_TYPE;
    option (.google.fhir.proto.fhir_valueset_url) =
        "http://hl7.org/fhir/ValueSet/metric-color";
    option (.google.fhir.proto.fhir_profile_base) =
        "http://hl7.org/fhir/StructureDefinition/code";

    DeviceMetricColorCode.Value value = 1;

    String id = 2;

    repeated Extension extension = 3;
  }
  ColorCode color = 16;

  // measurement | setting | calculation | unspecified
  message CategoryCode {
    option (.google.fhir.proto.structure_definition_kind) = KIND_PRIMITIVE_TYPE;
    option (.google.fhir.proto.fhir_valueset_url) =
        "http://hl7.org/fhir/ValueSet/metric-category";
    option (.google.fhir.proto.fhir_profile_base) =
        "http://hl7.org/fhir/StructureDefinition/code";

    DeviceMetricCategoryCode.Value value = 1;

    String id = 2;

    repeated Extension extension = 3;
  }
  CategoryCode category = 17
      [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];

  // Describes the measurement repetition time
  Timing measurement_period = 18;

  // Describes the calibrations that have been performed or that are required to
  // be performed
  message Calibration {
    // Unique id for inter-element referencing
    String id = 1;

    // Additional content defined by implementations
    repeated Extension extension = 2;

    // Extensions that cannot be ignored even if unrecognized
    repeated Extension modifier_extension = 3;

    // unspecified | offset | gain | two-point
    message TypeCode {
      option (.google.fhir.proto.structure_definition_kind) =
          KIND_PRIMITIVE_TYPE;
      option (.google.fhir.proto.fhir_valueset_url) =
          "http://hl7.org/fhir/ValueSet/metric-calibration-type";
      option (.google.fhir.proto.fhir_profile_base) =
          "http://hl7.org/fhir/StructureDefinition/code";

      DeviceMetricCalibrationTypeCode.Value value = 1;

      String id = 2;

      repeated Extension extension = 3;
    }
    TypeCode type = 4;

    // not-calibrated | calibration-required | calibrated | unspecified
    message StateCode {
      option (.google.fhir.proto.structure_definition_kind) =
          KIND_PRIMITIVE_TYPE;
      option (.google.fhir.proto.fhir_valueset_url) =
          "http://hl7.org/fhir/ValueSet/metric-calibration-state";
      option (.google.fhir.proto.fhir_profile_base) =
          "http://hl7.org/fhir/StructureDefinition/code";

      DeviceMetricCalibrationStateCode.Value value = 1;

      String id = 2;

      repeated Extension extension = 3;
    }
    StateCode state = 5;

    // Describes the time last calibration has been performed
    Instant time = 6;
  }
  repeated Calibration calibration = 19;
}
