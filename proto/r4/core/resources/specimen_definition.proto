//    Copyright 2019 Google Inc.
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        https://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

syntax = "proto3";

package google.fhir.r4.core;

import "google/protobuf/any.proto";
import "proto/annotations.proto";
import "proto/r4/core/codes.proto";
import "proto/r4/core/datatypes.proto";

option java_multiple_files = true;
option java_package = "com.google.fhir.r4.core";
option go_package = "github.com/google/fhir/go/proto/r4/core";
option (.google.fhir.proto.fhir_version) = R4;

// Auto-generated from StructureDefinition for SpecimenDefinition, last updated
// 2019-11-01T09:29:23.356+11:00. Kind of specimen. See
// http://hl7.org/fhir/StructureDefinition/SpecimenDefinition
message SpecimenDefinition {
  option (.google.fhir.proto.structure_definition_kind) = KIND_RESOURCE;
  option (.google.fhir.proto.fhir_structure_definition_url) =
      "http://hl7.org/fhir/StructureDefinition/SpecimenDefinition";

  // Logical id of this artifact
  Id id = 1;

  // Metadata about the resource
  Meta meta = 2;

  // A set of rules under which this content was created
  Uri implicit_rules = 3;

  // Language of the resource content
  Code language = 4;

  // Text summary of the resource, for human interpretation
  Narrative text = 5;

  // Contained, inline Resources
  repeated protobuf.Any contained = 6;

  // Field 7 reserved for strongly-typed ContainedResource for id:
  // SpecimenDefinition.contained
  reserved 7;

  // Additional content defined by implementations
  repeated Extension extension = 8;

  // Extensions that cannot be ignored
  repeated Extension modifier_extension = 9;

  // Business identifier of a kind of specimen
  Identifier identifier = 10;

  // Kind of material to collect
  CodeableConcept type_collected = 11;

  // Patient preparation for collection
  repeated CodeableConcept patient_preparation = 12;

  // Time aspect for collection
  String time_aspect = 13;

  // Specimen collection procedure
  repeated CodeableConcept collection = 14;

  // Specimen in container intended for testing by lab
  message TypeTested {
    // Unique id for inter-element referencing
    String id = 1;

    // Additional content defined by implementations
    repeated Extension extension = 2;

    // Extensions that cannot be ignored even if unrecognized
    repeated Extension modifier_extension = 3;

    // Primary or secondary specimen
    Boolean is_derived = 4;

    // Type of intended specimen
    CodeableConcept type = 5;

    // preferred | alternate
    message PreferenceCode {
      option (.google.fhir.proto.structure_definition_kind) =
          KIND_PRIMITIVE_TYPE;
      option (.google.fhir.proto.fhir_valueset_url) =
          "http://hl7.org/fhir/ValueSet/specimen-contained-preference";
      option (.google.fhir.proto.fhir_profile_base) =
          "http://hl7.org/fhir/StructureDefinition/code";

      SpecimenContainedPreferenceCode.Value value = 1;

      String id = 2;

      repeated Extension extension = 3;
    }
    PreferenceCode preference = 6
        [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];

    // The specimen's container
    message Container {
      // Unique id for inter-element referencing
      String id = 1;

      // Additional content defined by implementations
      repeated Extension extension = 2;

      // Extensions that cannot be ignored even if unrecognized
      repeated Extension modifier_extension = 3;

      // Container material
      CodeableConcept material = 4;

      // Kind of container associated with the kind of specimen
      CodeableConcept type = 5;

      // Color of container cap
      CodeableConcept cap = 6;

      // Container description
      String description = 7;

      // Container capacity
      SimpleQuantity capacity = 8;

      // Minimum volume
      message MinimumVolumeX {
        option (.google.fhir.proto.is_choice_type) = true;

        oneof choice {
          SimpleQuantity quantity = 1;
          String string_value = 2 [json_name = "string"];
        }
      }
      MinimumVolumeX minimum_volume = 9;

      // Additive associated with container
      message Additive {
        // Unique id for inter-element referencing
        String id = 1;

        // Additional content defined by implementations
        repeated Extension extension = 2;

        // Extensions that cannot be ignored even if unrecognized
        repeated Extension modifier_extension = 3;

        // Additive associated with container
        message AdditiveX {
          option (.google.fhir.proto.is_choice_type) = true;

          oneof choice {
            CodeableConcept codeable_concept = 1;
            Reference reference = 2
                [(.google.fhir.proto.valid_reference_type) = "Substance"];
          }
        }
        AdditiveX additive = 4
            [(.google.fhir.proto.validation_requirement) = REQUIRED_BY_FHIR];
      }
      repeated Additive additive = 10;

      // Specimen container preparation
      String preparation = 11;
    }
    Container container = 7;

    // Specimen requirements
    String requirement = 8;

    // Specimen retention time
    Duration retention_time = 9;

    // Rejection criterion
    repeated CodeableConcept rejection_criterion = 10;

    // Specimen handling before testing
    message Handling {
      // Unique id for inter-element referencing
      String id = 1;

      // Additional content defined by implementations
      repeated Extension extension = 2;

      // Extensions that cannot be ignored even if unrecognized
      repeated Extension modifier_extension = 3;

      // Temperature qualifier
      CodeableConcept temperature_qualifier = 4;

      // Temperature range
      Range temperature_range = 5;

      // Maximum preservation time
      Duration max_duration = 6;

      // Preservation instruction
      String instruction = 7;
    }
    repeated Handling handling = 11;
  }
  repeated TypeTested type_tested = 15;
}
